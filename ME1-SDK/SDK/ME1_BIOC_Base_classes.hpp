#pragma once

// Mass Effect (1.2.20820.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

#include "ME1_BIOC_Base_structs.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class BIOC_Base.Bio_Appr_Character_Base_Settings
// 0x0004 (0x004C - 0x0048)
class UBio_Appr_Character_Base_Settings : public UComponent
{
public:
	unsigned long                                      m_bIsShowingMissingResources : 1;                         // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Base_Settings");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Character_Body_Settings
// 0x0014 (0x0060 - 0x004C)
class UBio_Appr_Character_Body_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_HeadGear_Settings*       m_oHeadGearSettings;                                      // 0x004C(0x0004) (Edit, ExportObject, EditConst, Component, EditInline)
	TEnumAsByte<EBioArmorType>                         m_eArmorType;                                             // 0x0050(0x0001) (Edit)
	TEnumAsByte<EBioArmorType>                         m_eVisualOverride;                                        // 0x0051(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0052(0x0002) MISSED OFFSET
	int                                                m_nModelVariant;                                          // 0x0054(0x0004) (Edit)
	int                                                m_nMaterialConfig;                                        // 0x0058(0x0004) (Edit)
	unsigned long                                      m_bIsHeadGearLoaded : 1;                                  // 0x005C(0x0004) (Edit)
	unsigned long                                      m_bIsHeadGearHidden : 1;                                  // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Body_Settings");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Character_Hair_Settings
// 0x0004 (0x0050 - 0x004C)
class UBio_Appr_Character_Hair_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	int                                                m_nMaterial;                                              // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Hair_Settings");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Character_Head_Settings
// 0x000C (0x0058 - 0x004C)
class UBio_Appr_Character_Head_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	int                                                m_nMaterialConfig;                                        // 0x004C(0x0004) (Edit)
	int                                                m_nHairAppearance;                                        // 0x0050(0x0004) (Edit)
	class UBio_Appr_Character_Hair_Settings*           m_oHairSettings;                                          // 0x0054(0x0004) (Edit, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Head_Settings");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Character_HeadGear_Settings
// 0x0025 (0x0071 - 0x004C)
class UBio_Appr_Character_HeadGear_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	int                                                m_nModelSpec;                                             // 0x004C(0x0004) (Edit)
	int                                                m_nMaterialConfig;                                        // 0x0050(0x0004) (Edit)
	unsigned long                                      m_bUseBodyMaterialConfig : 1;                             // 0x0054(0x0004) (Edit)
	struct FBioHeadGearComponentSettings               m_visor;                                                  // 0x0058(0x000C) (Edit)
	struct FBioHeadGearComponentSettings               m_facePlate;                                              // 0x0064(0x000C) (Edit)
	TEnumAsByte<EBioArmorType>                         m_eVisualOverride;                                        // 0x0070(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_HeadGear_Settings");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Character_Settings
// 0x0010 (0x005C - 0x004C)
class UBio_Appr_Character_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_Body_Settings*           m_oBodySettings;                                          // 0x004C(0x0004) (Edit, ExportObject, EditConst, Component, EditInline)
	int                                                m_nHeadAppearance;                                        // 0x0050(0x0004) (Edit)
	unsigned long                                      m_bIsHeadHidden : 1;                                      // 0x0054(0x0004) (Edit)
	unsigned long                                      m_bIsHeadLoaded : 1;                                      // 0x0054(0x0004) (Edit)
	class UBio_Appr_Character_Head_Settings*           m_oHeadSettings;                                          // 0x0058(0x0004) (Edit, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Settings");
		return ptr;
	}

};


// Class BIOC_Base.BioActorFactoryPhysicsActor
// 0x0000 (0x0095 - 0x0095)
class UBioActorFactoryPhysicsActor : public UActorFactoryRigidBody
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActorFactoryPhysicsActor");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceVehicleSettings
// 0x0004 (0x004C - 0x0048)
class UBioAppearanceVehicleSettings : public UComponent
{
public:
	int                                                m_nMaterialConfig;                                        // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceVehicleSettings");
		return ptr;
	}

};


// Class BIOC_Base.BioCoverVolume
// 0x0000 (0x022C - 0x022C)
class ABioCoverVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCoverVolume");
		return ptr;
	}

};


// Class BIOC_Base.BioDamageType
// 0x000C (0x0098 - 0x008C)
class UBioDamageType : public UDamageType
{
public:
	class UBioAttributesDamage*                        m_pAttributes;                                            // 0x008C(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, EditInline)
	class UBioDeathVFX*                                m_pDeathVFX;                                              // 0x0090(0x0004) (Edit)
	unsigned long                                      m_bIsInitialized : 1;                                     // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDamageType");
		return ptr;
	}


	void SetDeathVFX(class UBioDeathVFX* pDeathVFX);
	class UBioDeathVFX* GetDeathVFX();
	void SetAttributes(class UBioAttributesDamage* pAttributes);
	class UBioAttributesDamage* GetAttributes();
	void InitializeDamageType(class UBioAttributesDamage* pAttributes, class UBioDeathVFX* pDeathVFX);
};


// Class BIOC_Base.BioDEBUGMarker
// 0x0008 (0x01F8 - 0x01F0)
class ABioDEBUGMarker : public AActor
{
public:
	class UBioDEBUGMarkerComponent*                    Markers;                                                  // 0x01F0(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              TimeTillDestroy;                                          // 0x01F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDEBUGMarker");
		return ptr;
	}


	void Clear();
	void AddMarker(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B);
	void AddLine(const struct FVector& _Start, const struct FVector& _End, unsigned char _R, unsigned char _G, unsigned char _B);
	void Tick(float DeltaTime);
};


// Class BIOC_Base.BioDEBUGMarkerComponent
// 0x003C (0x01F4 - 0x01B8)
class UBioDEBUGMarkerComponent : public UPrimitiveComponent
{
public:
	TArray<struct FLineData>                           Lines;                                                    // 0x01B8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FLineData>                           Arrows;                                                   // 0x01C4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMarkerData>                         Markers;                                                  // 0x01D0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMarkerData>                         Diamonds;                                                 // 0x01DC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMarkerData>                         Circles;                                                  // 0x01E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDEBUGMarkerComponent");
		return ptr;
	}


	void ClearMarkers();
	void ClearCircles();
	void ClearDiamonds();
	void ClearArrows();
	void ClearLines();
	void Clear();
	void AddCircles(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B);
	void AddDiamond(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B);
	void AddMarker(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B);
	void AddArrows(const struct FVector& _Start, const struct FVector& _End, unsigned char _R, unsigned char _G, unsigned char _B);
	void AddLine(const struct FVector& _Start, const struct FVector& _End, unsigned char _R, unsigned char _G, unsigned char _B);
};


// Class BIOC_Base.BioDestinationArrow
// 0x0004 (0x01F4 - 0x01F0)
class ABioDestinationArrow : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x01F0(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDestinationArrow");
		return ptr;
	}


	void SetArrowColor(TEnumAsByte<EeColorSelection> clr);
};


// Class BIOC_Base.BioEventDispatcher
// 0x0014 (0x0050 - 0x003C)
class UBioEventDispatcher : public UObject
{
public:
	struct FMap_Mirror                                 m_mEventSubscriptions;                                    // 0x003C(0x0014) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEventDispatcher");
		return ptr;
	}


	void Dispatch(const struct FName& oEventName);
	bool Unsubscribe(const struct FName& oEventName, class UObject* oSubscriber);
	bool Subscribe(const struct FName& oEventName, class UObject* oSubscriber);
};


// Class BIOC_Base.BioFollowMarker
// 0x0000 (0x01F0 - 0x01F0)
class ABioFollowMarker : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFollowMarker");
		return ptr;
	}

};


// Class BIOC_Base.BioGamerProfile
// 0x01FC (0x0238 - 0x003C)
class UBioGamerProfile : public UObject
{
public:
	unsigned long                                      m_bDefaultYAxisInverted : 1;                              // 0x003C(0x0004) (Transient, Config)
	unsigned long                                      m_bGamerProfileDeviceHasBeenRemoved : 1;                  // 0x003C(0x0004) (Transient)
	int                                                m_DefaultGammaPostProcessTemplate;                        // 0x0040(0x0004) (Transient, Config)
	int                                                m_nDefaultCombatDifficulty;                               // 0x0044(0x0004) (Transient, Config)
	int                                                m_nDefaultDialogMode;                                     // 0x0048(0x0004) (Transient, Config)
	int                                                m_nDefaultAutoLevelUp;                                    // 0x004C(0x0004) (Transient, Config)
	int                                                m_nDefaultAutoEquip;                                      // 0x0050(0x0004) (Transient, Config)
	int                                                m_nDefaultTutorialFlag;                                   // 0x0054(0x0004) (Transient, Config)
	int                                                m_nDefaultSubTitles;                                      // 0x0058(0x0004) (Transient, Config)
	int                                                m_nDefaultAutoPauseEnemySighted;                          // 0x005C(0x0004) (Transient, Config)
	int                                                m_nDefaultAutoPauseSquadMemberDown;                       // 0x0060(0x0004) (Transient, Config)
	int                                                m_nDefaultMusicVolume;                                    // 0x0064(0x0004) (Transient, Config)
	int                                                m_nDefaultFXVolume;                                       // 0x0068(0x0004) (Transient, Config)
	int                                                m_nDefaultDialogVolume;                                   // 0x006C(0x0004) (Transient, Config)
	int                                                m_nDefaultSouthpawFlag;                                   // 0x0070(0x0004) (Transient, Config)
	int                                                m_nDefaultTargetingAssistMode;                            // 0x0074(0x0004) (Transient, Config)
	float                                              m_nDefaultTargetingAssistModifierHigh;                    // 0x0078(0x0004) (Transient, Config)
	float                                              m_nDefaultTargetingAssistModifierNormal;                  // 0x007C(0x0004) (Transient, Config)
	float                                              m_nDefaultTargetingAssistModifierLow;                     // 0x0080(0x0004) (Transient, Config)
	int                                                m_nDefaultHorizontalCombatSensitivity;                    // 0x0084(0x0004) (Transient, Config)
	int                                                m_nDefaultVerticalCombatSensitivity;                      // 0x0088(0x0004) (Transient, Config)
	int                                                m_nDefaultHorizontalExplorationSensitivity;               // 0x008C(0x0004) (Transient, Config)
	int                                                m_nDefaultVerticalExplorationSensitivity;                 // 0x0090(0x0004) (Transient, Config)
	int                                                m_nDefaultControllerSensativityLow;                       // 0x0094(0x0004) (Transient, Config)
	int                                                m_nDefaultControllerSensativityMedium;                    // 0x0098(0x0004) (Transient, Config)
	int                                                m_nDefaultControllerSensativityHigh;                      // 0x009C(0x0004) (Transient, Config)
	struct FName                                       m_nmSKU;                                                  // 0x00A0(0x0008) (Transient, Config)
	int                                                m_nDefaultRumbleFlag;                                     // 0x00A8(0x0004) (Transient, Config)
	int                                                m_nDefaultAutoPauseBleedOut;                              // 0x00AC(0x0004) (Transient, Config)
	int                                                m_nDefaultMotionBlur;                                     // 0x00B0(0x0004) (Transient, Config)
	int                                                m_nDefaultFilmGrain;                                      // 0x00B4(0x0004) (Transient, Config)
	int                                                m_nDefaultSquadPowerUse;                                  // 0x00B8(0x0004) (Transient, Config)
	int                                                m_nDefaultAutoSave;                                       // 0x00BC(0x0004) (Transient, Config)
	int                                                m_nAchievedCombatDifficultyOverride;                      // 0x00C0(0x0004) (Transient, Config)
	int                                                m_nDefaultAnalogSensePerc;                                // 0x00C4(0x0004) (Transient, Config)
	int                                                m_nDefaultMouseSensePerc;                                 // 0x00C8(0x0004) (Transient, Config)
	int                                                m_nDefaultInvertMouseState;                               // 0x00CC(0x0004) (Transient, Config)
	TArray<struct FProfileBOOL>                        BoolVariables;                                            // 0x00D0(0x000C) (NeedCtorLink)
	TArray<struct FProfileINT>                         IntVariables;                                             // 0x00DC(0x000C) (NeedCtorLink)
	TArray<struct FProfileFLOAT>                       FloatVariables;                                           // 0x00E8(0x000C) (NeedCtorLink)
	TArray<struct FPlotManagerAchievement>             PlotManagerAchievementMaps;                               // 0x00F4(0x000C) (NeedCtorLink)
	int                                                m_nLastUsedPlaythroughID;                                 // 0x0100(0x0004)
	TArray<struct FProfilePlaythrough>                 lstPlaythroughs;                                          // 0x0104(0x000C) (NeedCtorLink)
	float                                              m_fLowestPlaythroughDamageTaken;                          // 0x0110(0x0004)
	int                                                m_nMostMoneyAccumulated;                                  // 0x0114(0x0004)
	int                                                m_nMostPlaythroughPlayerKills;                            // 0x0118(0x0004)
	int                                                m_nLowestPlaythroughPlayerDeaths;                         // 0x011C(0x0004)
	float                                              m_fFastestPlaythroughTime;                                // 0x0120(0x0004)
	int                                                m_DefaultSaveDeviceId;                                    // 0x0124(0x0004)
	int                                                m_BioProfileSaveDeviceId;                                 // 0x0128(0x0004)
	unsigned long                                      m_bInvalidProfileCreator : 1;                             // 0x012C(0x0004)
	TArray<unsigned long>                              aAchievementStates;                                       // 0x0130(0x000C) (NeedCtorLink, Deprecated)
	TArray<struct FProfileRewardStat>                  RewardStats;                                              // 0x013C(0x000C) (NeedCtorLink)
	TArray<int>                                        anAchievementStates;                                      // 0x0148(0x000C) (NeedCtorLink)
	TArray<struct FBonusTalent>                        aUnlockedBonusTalents;                                    // 0x0154(0x000C) (NeedCtorLink)
	TArray<struct FBonusTalent>                        aPassiveBonusTalents;                                     // 0x0160(0x000C) (NeedCtorLink)
	TArray<int>                                        IntStats;                                                 // 0x016C(0x000C) (NeedCtorLink)
	TArray<float>                                      FloatStats;                                               // 0x0178(0x000C) (NeedCtorLink)
	TArray<struct FCharacterProfile>                   lstCharacterProfiles;                                     // 0x0184(0x000C) (NeedCtorLink)
	struct FGameOptions                                m_GameOptions;                                            // 0x0190(0x0090)
	struct FString                                     m_sLastPlayedCharacterID;                                 // 0x0220(0x000C) (NeedCtorLink)
	struct FString                                     m_sLastSaveGame;                                          // 0x022C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamerProfile");
		return ptr;
	}


	void SetCoolDown(bool bEnabled);
	bool GetCoolDown();
	void UpdateRichPresence();
	void UpdateSoundOptions();
	void UpdateGraphicsOptions();
	void UpdateAllOptions(bool bUpdateRichPresence);
	void DuplicateGameOptions(struct FGameOptions* destOptions);
	void OverwiteGameOptions(const struct FGameOptions& sourceOptions, bool bUpdateRichPresence);
	float GetTargetingAssistModifier();
	void GetOptionEx(const struct FGameOptions& io_oGameOptions, int i_nOptionType, int* i_nOptionValue);
	void GetOption(int i_nOptionType, int* i_nOptionValue);
	void SetOptionEx(int i_nOptionType, int i_nOptionValue, bool i_bSuppressUpdate, struct FGameOptions* io_oGameOptions);
	void SetOption(int i_nOptionType, int i_nOptionValue, bool i_bSuppressUpdate);
	int GetCombatDifficulty();
	void SetCombatDifficulty(int i_Template);
	void DumpAchievementStats();
	int GetGammaPostProcessTemplate();
	void SetGammaPostProcessTemplate(int i_Template);
	void SelectDefaultStorageDevice();
	int GetDefaultStorageDevice();
	void SetDefaultStorageDevice(int i_DeviceId);
	int GetBioProfileStorageDevice();
	void SetBioProfileStorageDevice(int i_DeviceId);
	void SetYAxisInverted(bool bInverted);
	bool GetYAxisInverted();
	void GetAllUnlockedBonusTalentInfo(const struct FName& nmCharClass, TArray<struct FUnlockedBonusTalentInfo>* aUnlockedBonusTalentInfo);
	void AwardAllPassiveBonusTalents();
	void UpdateAchievementState(int nAchievementID, bool bEarned, bool bUpdatePlotState, bool bAwardBonusTalent);
	void GetDefaultValues(struct FGameOptions* io_Options);
	void ResetToDefaults(bool bUpdateRichPresence);
	void SortAchievementInfo(TArray<struct FAchievementInfo>* aAchievementList);
	void GetAllAchievementInfo(TArray<struct FAchievementInfo>* aAchievementList);
	bool GetIsAchievementEarned(int AchievementId);
	bool UpdateCharacterProfilePawnDataEx(class ABioPawn* i_playerPawn, bool i_bUpdateFirstName, int i_oHoursPlayed, int i_oMinPlayed, int i_oSecPlayed, struct FCharacterProfile* sCharProfile);
	bool UpdateCharacterProfilePawnData(const struct FString& sCharacterID, class ABioPawn* i_playerPawn, int i_oHoursPlayed, int i_oMinPlayed, int i_oSecPlayed, bool i_bUpdateFirstName);
	bool DeleteCharacterProfile(const struct FString& sCharacterID);
	int GetCharacterProfileIndex(const struct FString& sCharacterID);
	void SetCharacterProfile(const struct FString& sCharacterID, const struct FCharacterProfile& i_CharProfile, bool i_bAddProfileIfNotExist);
	struct FCharacterProfile GetCharacterProfile(const struct FString& sCharacterID);
	bool SetCharacterProfileLastPlayedSlot(const struct FString& sCharacaterID, int nLastPlayedSlot);
	struct FString ConvertToValidCharacterID(const struct FString& sCharacterName, bool bConvertAccentCharacters);
	struct FString CreateNewCharacterProfile(const struct FString& sCharacterName);
	bool SetFloatStatistic(int nIndex, float fValue);
	float InrementFloatStatistic(int nIndex, float fAmount);
	float GetFloatStatistic(int nIndex);
	bool SetIntStatistic(int nIndex, int nValue);
	int IncrementIntStatistic(int nIndex, int nAmount);
	int GetIntStatistic(int nIndex);
	int GetHighestDifficultyCompleted();
	bool GetPlaythroughCompleted(int nDifficulty);
	int GetNumberOfPlaythroughsCompleted();
	bool UpdateEndGameGamerProfileStats(bool bLogStats);
	void GetUnlockedTalentTrees(TArray<int>* aUnlockedTalentTrees);
	int GetRewardStatUnlockedAt(const struct FString& sStatisticName);
	struct FString GetRewardStatName(int nAchievementID);
	bool GetIsRewardStatUnlocked(const struct FString& sStatisticName);
	int IncrementRewardStat(const struct FString& sStatisticName, int nAmount);
	bool SetRewardStat(const struct FString& sStatisticName, int nValue);
	bool RestoreGamerProfilePlotManagerVariables();
	bool SetGamerProfilePlotManagerVariables();
};


// Class BIOC_Base.BioLayers
// 0x0028 (0x006C - 0x0044)
class UBioLayers : public UBioBaseComponent
{
public:
	float                                              m_aEntry[0xA];                                            // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLayers");
		return ptr;
	}

};


// Class BIOC_Base.BioObject
// 0x0014 (0x0058 - 0x0044)
class UBioObject : public UBioBaseComponent
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0044(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.BioObject.m_ClassCache

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioObject");
		return ptr;
	}


	bool STATIC_ValidateOwnershipSemantics(class UObject* Target, bool isVerbose, int recurrence);
	void STATIC_ParseIntoArray(const struct FString& sDelimitedStrings, const struct FString& sDelimiter, bool bCullEmptyStrings, TArray<struct FString>* aString);
	void STATIC_ParseIntoArrayWS(const struct FString& whitespaceDelimitedStrings, TArray<struct FString>* Strings);
	bool STATIC_GetEnumValue(class UClass* clsEnumDefiner, const struct FName& nmEnumField, const struct FName& nmEnumValue, unsigned char* cEnumValue);
	class UClass* STATIC_FindClass(const struct FName& nmClass);
};


// Class BIOC_Base.BioPathNodeVolume
// 0x001E (0x024A - 0x022C)
class ABioPathNodeVolume : public AVolume
{
public:
	unsigned long                                      bDeleteNodesOnPopulate : 1;                               // 0x022C(0x0004) (Edit)
	unsigned long                                      bDoNotGenerateGroundNodes : 1;                            // 0x022C(0x0004) (Edit)
	float                                              fMaxNodeSeparation;                                       // 0x0230(0x0004) (Edit)
	float                                              fMargin;                                                  // 0x0234(0x0004) (Edit)
	float                                              fNodeTargetRadius;                                        // 0x0238(0x0004) (Edit)
	float                                              fMaxSlope;                                                // 0x023C(0x0004) (Edit)
	int                                                nLevels;                                                  // 0x0240(0x0004) (Edit)
	float                                              fLevelHeight;                                             // 0x0244(0x0004) (Edit)
	TEnumAsByte<EBioPathNodeAlignment>                 eAlignment;                                               // 0x0248(0x0001) (Edit)
	TEnumAsByte<EBioPathNodeGenerators>                ePathNodeGenerator;                                       // 0x0249(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPathNodeVolume");
		return ptr;
	}

};


// Class BIOC_Base.BioPhysicsSounds
// 0x002C (0x0068 - 0x003C)
class UBioPhysicsSounds : public UObject
{
public:
	struct FString                                     m_sPhysicsSoundEntity;                                    // 0x003C(0x000C) (Config, NeedCtorLink)
	float                                              m_fMaxMass;                                               // 0x0048(0x0004) (Config)
	float                                              m_fMaxSpeed;                                              // 0x004C(0x0004) (Config)
	unsigned long                                      m_bPhysicsSoundDebug : 1;                                 // 0x0050(0x0004) (Config)
	float                                              m_fMinTimeBetweenSoundByActor;                            // 0x0054(0x0004) (Config)
	int                                                m_nMaxSimultaneousSounds;                                 // 0x0058(0x0004) (Config)
	TArray<struct FBioPhysicsSoundsInfo>               m_aAudioTracks;                                           // 0x005C(0x000C) (Transient, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPhysicsSounds");
		return ptr;
	}


	bool RequestSound(int nPriority, class UPrimitiveComponent* oComp0, class UPrimitiveComponent* oComp1, struct FCollisionImpactData* RigidCollisionData);
	void Initialize();
};


// Class BIOC_Base.BioPowerScript
// 0x0020 (0x005C - 0x003C)
class UBioPowerScript : public UObject
{
public:
	class UBioPower*                                   m_oPower;                                                 // 0x003C(0x0004)
	float                                              m_fPowerBuildUp;                                          // 0x0040(0x0004)
	struct FVector                                     m_vWorldImpactLocation;                                   // 0x0044(0x000C)
	struct FVector                                     m_vWorldImpactNormal;                                     // 0x0050(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPowerScript");
		return ptr;
	}


	bool PlayForceFeedback(class AActor* oCaster, class AActor* oImpacted);
	bool PlayGuiSound(const struct FName& nmSound);
	bool GetFloorLocation(const struct FVector& vStartLocation, struct FVector* vFloorLocation);
	bool AdjustCooldown(float* fCoolDownTime);
	bool OnImpact(class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted);
	bool EndPhase(TEnumAsByte<EBioPowerState> ePhase, class AActor* oCaster);
	bool StartPhase(TEnumAsByte<EBioPowerState> ePhase, class AActor* oCaster, float fDuration);
	bool CanStartPower(class AActor* oCaster);
	void InitializePowerScript(class UBioPower* pPower);
};


// Class BIOC_Base.BioProceduralCameraBasic
// 0x0000 (0x003C - 0x003C)
class UBioProceduralCameraBasic : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioProceduralCameraBasic");
		return ptr;
	}


	void STATIC_FixedCamera(const struct FActorInfo& stActorInfo, bool bInvert, struct FCameraInfo* stCameraInfo);
};


// Class BIOC_Base.BioRadarMapBoundaries
// 0x000C (0x01FC - 0x01F0)
class ABioRadarMapBoundaries : public AActor
{
public:
	struct FVector                                     m_vBoundarySize;                                          // 0x01F0(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioRadarMapBoundaries");
		return ptr;
	}

};


// Class BIOC_Base.BioSocketSupermodel
// 0x000C (0x0244 - 0x0238)
class UBioSocketSupermodel : public USkeletalMesh
{
public:
	TArray<class USkeletalMesh*>                       Dependents;                                               // 0x0238(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSocketSupermodel");
		return ptr;
	}

};


// Class BIOC_Base.BioSpriteTranslucentComponent
// 0x0024 (0x01E8 - 0x01C4)
class UBioSpriteTranslucentComponent : public USpriteComponent
{
public:
	float                                              TranslucentScale;                                         // 0x01C4(0x0004) (Edit)
	float                                              fDelayTime;                                               // 0x01C8(0x0004) (Edit)
	float                                              fFadeInTime;                                              // 0x01CC(0x0004) (Edit)
	float                                              fDuration;                                                // 0x01D0(0x0004) (Edit)
	float                                              fFadeOutTime;                                             // 0x01D4(0x0004) (Edit)
	unsigned long                                      bRenderOcclusionOnly : 1;                                 // 0x01D8(0x0004) (Edit)
	unsigned long                                      bIsOccluder : 1;                                          // 0x01D8(0x0004)
	float                                              fIntensityCurveAccumulator;                               // 0x01DC(0x0004) (Transient)
	float                                              fScaleCurveAccumulator;                                   // 0x01E0(0x0004) (Transient)
	float                                              fBrightnessCurveAccumulator;                              // 0x01E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpriteTranslucentComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioSunActor
// 0x00CC (0x02BC - 0x01F0)
class ABioSunActor : public AActor
{
public:
	float                                              FocusDistance;                                            // 0x01F0(0x0004) (Edit)
	struct FLinearColor                                SunTint;                                                  // 0x01F4(0x0010) (Edit)
	unsigned long                                      UseBaseLightTint : 1;                                     // 0x0204(0x0004) (Edit)
	unsigned long                                      HideAllFlaresOverride : 1;                                // 0x0204(0x0004) (Edit)
	unsigned long                                      ViewDependentIntensity : 1;                               // 0x0204(0x0004) (Edit)
	unsigned long                                      bAnimateIntensity : 1;                                    // 0x0204(0x0004) (Edit)
	unsigned long                                      bAnimateScale : 1;                                        // 0x0204(0x0004) (Edit)
	unsigned long                                      bAnimateBrightness : 1;                                   // 0x0204(0x0004) (Edit)
	class UBioSpriteTranslucentComponent*              SunSprite;                                                // 0x0208(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       HaloSprite;                                               // 0x020C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite0;                                             // 0x0210(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite1;                                             // 0x0214(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite2;                                             // 0x0218(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite3;                                             // 0x021C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite4;                                             // 0x0220(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite5;                                             // 0x0224(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite6;                                             // 0x0228(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite7;                                             // 0x022C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite8;                                             // 0x0230(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareComponent*                       FlareSprite9;                                             // 0x0234(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareStreakComponent*                 StreakSprite0;                                            // 0x0238(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareStreakComponent*                 StreakSprite1;                                            // 0x023C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareStreakComponent*                 StreakSprite2;                                            // 0x0240(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareStreakComponent*                 StreakSprite3;                                            // 0x0244(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareStreakComponent*                 StreakSprite4;                                            // 0x0248(0x0004) (Edit, ExportObject, Component, EditInline)
	class UBioSunFlareStreakComponent*                 StreakSprite5;                                            // 0x024C(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FRawDistributionFloat                       IntensityCurve;                                           // 0x0250(0x001C) (Edit, ExportObject, EditConst, Component, NeedCtorLink, EditInline)
	float                                              fIntensityCurveAccumulator;                               // 0x026C(0x0004) (Transient)
	struct FRawDistributionFloat                       ScaleCurve;                                               // 0x0270(0x001C) (Edit, ExportObject, EditConst, Component, NeedCtorLink, EditInline)
	float                                              fScaleCurveAccumulator;                                   // 0x028C(0x0004) (Transient)
	struct FRawDistributionFloat                       BrightnessCurve;                                          // 0x0290(0x001C) (Edit, ExportObject, EditConst, Component, NeedCtorLink, EditInline)
	float                                              fBrightnessCurveAccumulator;                              // 0x02AC(0x0004) (Transient)
	float                                              fDyingFadePercent;                                        // 0x02B0(0x0004) (Transient)
	unsigned long                                      bDying : 1;                                               // 0x02B4(0x0004) (Transient)
	float                                              fFadeTime;                                                // 0x02B8(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSunActor");
		return ptr;
	}

};


// Class BIOC_Base.BioSunFlareComponent
// 0x0020 (0x0208 - 0x01E8)
class UBioSunFlareComponent : public UBioSpriteTranslucentComponent
{
public:
	float                                              Intensity;                                                // 0x01E8(0x0004) (Edit)
	struct FLinearColor                                FlareTint;                                                // 0x01EC(0x0010) (Edit)
	unsigned long                                      UseParentOverrideTint : 1;                                // 0x01FC(0x0004) (Edit)
	unsigned long                                      IsHaloComponent : 1;                                      // 0x01FC(0x0004)
	float                                              Distance;                                                 // 0x0200(0x0004) (Edit)
	float                                              BrightPercent;                                            // 0x0204(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSunFlareComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioSunFlareStreakComponent
// 0x0030 (0x0218 - 0x01E8)
class UBioSunFlareStreakComponent : public UBioSpriteTranslucentComponent
{
public:
	float                                              Intensity;                                                // 0x01E8(0x0004) (Edit)
	struct FLinearColor                                FlareTint;                                                // 0x01EC(0x0010) (Edit)
	unsigned long                                      UseParentOverrideTint : 1;                                // 0x01FC(0x0004) (Edit)
	unsigned long                                      IsHaloComponent : 1;                                      // 0x01FC(0x0004)
	float                                              Distance;                                                 // 0x0200(0x0004) (Edit)
	float                                              HorizontalOffset;                                         // 0x0204(0x0004) (Edit)
	float                                              HorizontalMoveRate;                                       // 0x0208(0x0004) (Edit)
	float                                              VerticalOffset;                                           // 0x020C(0x0004) (Edit)
	float                                              VerticalMoveRate;                                         // 0x0210(0x0004) (Edit)
	float                                              BrightPercent;                                            // 0x0214(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSunFlareStreakComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioTacticalMoveToIndicator
// 0x000C (0x01FC - 0x01F0)
class ABioTacticalMoveToIndicator : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystem;                                           // 0x01F0(0x0004) (ExportObject, Component, EditInline)
	float                                              m_fFadeInTime;                                            // 0x01F4(0x0004)
	float                                              m_fTimePassed;                                            // 0x01F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTacticalMoveToIndicator");
		return ptr;
	}

};


// Class BIOC_Base.BioTestString
// 0x0010 (0x0200 - 0x01F0)
class ABioTestString : public AActor
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01F0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioTestString.LocalizedString
	struct FString                                     NonLocalizedString;                                       // 0x01F4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTestString");
		return ptr;
	}

};


// Class BIOC_Base.BioTriggerStream
// 0x0018 (0x0244 - 0x022C)
class ABioTriggerStream : public ATriggerVolume
{
public:
	int                                                m_StoredStateIndex;                                       // 0x022C(0x0004)
	int                                                m_nPriorityLevel;                                         // 0x0230(0x0004) (Edit)
	TArray<struct FBioStreamingState>                  StreamingStates;                                          // 0x0234(0x000C) (Edit, NeedCtorLink)
	class UBioSWF*                                     m_oAreaMapOverride;                                       // 0x0240(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTriggerStream");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Retouch();
	void DoStasis(class AActor* Touched, bool bTouched);
	void DoUntouch(class AActor* Other);
	void DoTouch();
};


// Class BIOC_Base.BioAnimNodeBlendBase
// 0x001C (0x00E0 - 0x00C4)
class UBioAnimNodeBlendBase : public UAnimNodeBlendBase
{
public:
	float                                              m_fBlendTime;                                             // 0x00C4(0x0004)
	unsigned long                                      m_bIsBlending : 1;                                        // 0x00C8(0x0004)
	unsigned long                                      m_bTriggerTimeBlend : 1;                                  // 0x00C8(0x0004)
	unsigned long                                      m_bBlendDirect : 1;                                       // 0x00C8(0x0004)
	unsigned long                                      m_bShowSlider : 1;                                        // 0x00C8(0x0004)
	float                                              m_fRemainingTime;                                         // 0x00CC(0x0004)
	float                                              m_fTotalBlendTime;                                        // 0x00D0(0x0004)
	float                                              m_fTargetWeight;                                          // 0x00D4(0x0004)
	int                                                m_nLastChild;                                             // 0x00D8(0x0004)
	int                                                m_nTargetChild;                                           // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendBase");
		return ptr;
	}


	void SetChildAnimTime(class UAnimNode* oChild, float fTime);
};


// Class BIOC_Base.BioAnimNodeBlendAdditive
// 0x0004 (0x00E4 - 0x00E0)
class UBioAnimNodeBlendAdditive : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fPreviewWeight;                                         // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendAdditive");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendAdditiveAim
// 0x000C (0x00F0 - 0x00E4)
class UBioAnimNodeBlendAdditiveAim : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                          // 0x00E4(0x0004) (Edit)
	float                                              BlendOutDuration;                                         // 0x00E8(0x0004) (Edit)
	unsigned long                                      bIsCoverAiming : 1;                                       // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendAdditiveAim");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendAdditiveCover
// 0x0008 (0x00EC - 0x00E4)
class UBioAnimNodeBlendAdditiveCover : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                          // 0x00E4(0x0004) (Edit)
	float                                              BlendOutDuration;                                         // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendAdditiveCover");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendAdditiveDamage
// 0x001C (0x0100 - 0x00E4)
class UBioAnimNodeBlendAdditiveDamage : public UBioAnimNodeBlendAdditive
{
public:
	int                                                DamageNodeIndex;                                          // 0x00E4(0x0004) (Edit)
	unsigned long                                      bLastDamageNode : 1;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bProcessDamage : 1;                                       // 0x00E8(0x0004)
	float                                              MaxDamageThreshold;                                       // 0x00EC(0x0004) (Edit)
	struct FVector                                     m_vDamageDir;                                             // 0x00F0(0x000C)
	int                                                m_nDamageIndex;                                           // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendAdditiveDamage");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendAdditivePower
// 0x0009 (0x00ED - 0x00E4)
class UBioAnimNodeBlendAdditivePower : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                          // 0x00E4(0x0004) (Edit)
	float                                              BlendOutDuration;                                         // 0x00E8(0x0004) (Edit)
	TEnumAsByte<EBioPowerAdditiveAnimNode>             m_eCurrentAnimNode;                                       // 0x00EC(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendAdditivePower");
		return ptr;
	}


	bool GetActivePower(class UBioActivePower** oActivePower);
};


// Class BIOC_Base.BioAnimNodeBlendAdditiveWeaponEquip
// 0x0020 (0x0104 - 0x00E4)
class UBioAnimNodeBlendAdditiveWeaponEquip : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                          // 0x00E4(0x0004) (Edit)
	float                                              BlendOutDuration;                                         // 0x00E8(0x0004) (Edit)
	struct FString                                     m_sStartEventName;                                        // 0x00EC(0x000C) (Transient, NeedCtorLink)
	struct FString                                     m_sEndEventName;                                          // 0x00F8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendAdditiveWeaponEquip");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByAction
// 0x03D0 (0x04AC - 0x00DC)
class UBioAnimNodeBlendByAction : public UAnimNodeBlendList
{
public:
	TEnumAsByte<EBioActionAnimNode>                    m_eCurrentAnimNode;                                       // 0x00DC(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	unsigned long                                      m_bHesitateAvailable : 1;                                 // 0x00E0(0x0004) (Transient)
	unsigned long                                      m_bFallingAvailable : 1;                                  // 0x00E0(0x0004) (Transient)
	struct FBlendTime                                  m_aBlendTimeFromPostureNode[0xB];                         // 0x00E4(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromMountNode[0xB];                           // 0x013C(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromHesitateNode[0xB];                        // 0x0194(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromFallNode[0xB];                            // 0x01EC(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromBioticNode[0xB];                          // 0x0244(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromDeathNode[0xB];                           // 0x029C(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromDieNode[0xB];                             // 0x02F4(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromTechNode[0xB];                            // 0x034C(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromMatineeNode[0xB];                         // 0x03A4(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromGetUpNode[0xB];                           // 0x03FC(0x0008) (Edit)
	struct FBlendTime                                  m_aBlendTimeFromGestures[0xB];                            // 0x0454(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByAction");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByAim
// 0x0048 (0x0128 - 0x00E0)
class UBioAnimNodeBlendByAim : public UBioAnimNodeBlendBase
{
public:
	float                                              PitchLimitDegrees;                                        // 0x00E0(0x0004) (Edit)
	float                                              YawTwistLimitDegrees;                                     // 0x00E4(0x0004) (Edit)
	float                                              YawTurnTriggerDegrees;                                    // 0x00E8(0x0004) (Edit)
	float                                              HoldTime;                                                 // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EeAimSliderAxis>                       PreviewSliderAxis;                                        // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              m_AimBlendOutDuration;                                    // 0x00F4(0x0004) (Edit, Const)
	float                                              m_AimBlendInDuration;                                     // 0x00F8(0x0004) (Edit, Const)
	float                                              m_fYawRate;                                               // 0x00FC(0x0004) (Edit)
	float                                              m_fPitchRate;                                             // 0x0100(0x0004)
	struct FVector                                     m_vFixedRotation;                                         // 0x0104(0x000C)
	float                                              m_fTimeToUpdate;                                          // 0x0110(0x0004)
	float                                              m_fYaw;                                                   // 0x0114(0x0004)
	float                                              m_fPitch;                                                 // 0x0118(0x0004)
	float                                              m_fTargetYaw;                                             // 0x011C(0x0004)
	unsigned long                                      m_BlendedOut : 1;                                         // 0x0120(0x0004)
	float                                              m_RemainingBlendDuration;                                 // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByAim");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByAnimationStateTracking
// 0x0024 (0x0100 - 0x00DC)
class UBioAnimNodeBlendByAnimationStateTracking : public UAnimNodeBlendList
{
public:
	TArray<struct FBioAnimationNode>                   m_aStateList;                                             // 0x00DC(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	struct FName                                       m_nmStateToTrack;                                         // 0x00E8(0x0008) (Edit)
	unsigned long                                      m_bAutoTransitionOnEndAnim : 1;                           // 0x00F0(0x0004) (Edit)
	struct FName                                       m_nmLastState;                                            // 0x00F4(0x0008)
	int                                                m_nCurrentChild;                                          // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByAnimationStateTracking");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByCustomAnim
// 0x0000 (0x00D0 - 0x00D0)
class UBioAnimNodeBlendByCustomAnim : public UAnimNodeBlend
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByCustomAnim");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByDamage
// 0x0008 (0x00E8 - 0x00E0)
class UBioAnimNodeBlendByDamage : public UBioAnimNodeBlendBase
{
public:
	unsigned long                                      bAdditiveMode : 1;                                        // 0x00E0(0x0004) (Edit)
	int                                                m_nLastDamageIndex;                                       // 0x00E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByDamage");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByDeath
// 0x0050 (0x0130 - 0x00E0)
class UBioAnimNodeBlendByDeath : public UBioAnimNodeBlendBase
{
public:
	struct FName                                       Head;                                                     // 0x00E0(0x0008) (Edit)
	struct FName                                       LeftArm;                                                  // 0x00E8(0x0008) (Edit)
	struct FName                                       RightArm;                                                 // 0x00F0(0x0008) (Edit)
	struct FName                                       LeftLeg;                                                  // 0x00F8(0x0008) (Edit)
	struct FName                                       RightLeg;                                                 // 0x0100(0x0008) (Edit)
	struct FName                                       DeathEventName;                                           // 0x0108(0x0008) (Edit)
	int                                                m_nHeadRoot;                                              // 0x0110(0x0004) (Const)
	int                                                m_nLeftArmRoot;                                           // 0x0114(0x0004) (Const)
	int                                                m_nRightArmRoot;                                          // 0x0118(0x0004) (Const)
	int                                                m_nLeftLegRoot;                                           // 0x011C(0x0004) (Const)
	int                                                m_nRightLegRoot;                                          // 0x0120(0x0004) (Const)
	unsigned long                                      m_bEventTriggered : 1;                                    // 0x0124(0x0004)
	float                                              m_fTimeToRagdoll;                                         // 0x0128(0x0004)
	float                                              m_fCurrentTime;                                           // 0x012C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByDeath");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByFireSequence
// 0x000C (0x00D0 - 0x00C4)
class UBioAnimNodeBlendByFireSequence : public UAnimNodeBlendBase
{
public:
	TEnumAsByte<EBioAnimNodeBlendByFireSequenceState>  m_state;                                                  // 0x00C4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	float                                              m_blendTime;                                              // 0x00C8(0x0004)
	float                                              m_blendDuration;                                          // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByFireSequence");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByIncline
// 0x0014 (0x00F4 - 0x00E0)
class UBioAnimNodeBlendByIncline : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                            // 0x00E0(0x0004) (Edit)
	float                                              MaxInclineUpAngle;                                        // 0x00E4(0x0004) (Edit)
	float                                              MaxInclineDownAngle;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bForceLevelReferenceAngle : 1;                            // 0x00EC(0x0004) (Edit)
	float                                              m_fInclineAngle;                                          // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByIncline");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByLean
// 0x0018 (0x00F8 - 0x00E0)
class UBioAnimNodeBlendByLean : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                            // 0x00E0(0x0004) (Edit)
	float                                              BlendAcrossDuration;                                      // 0x00E4(0x0004) (Edit)
	float                                              MaxLeanAngle;                                             // 0x00E8(0x0004) (Edit)
	float                                              m_fLeanAngle;                                             // 0x00EC(0x0004)
	float                                              m_fLastLeanAngle;                                         // 0x00F0(0x0004)
	unsigned long                                      m_bSwitchingLean : 1;                                     // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByLean");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByMount
// 0x001C (0x00E0 - 0x00C4)
class UBioAnimNodeBlendByMount : public UAnimNodeBlendBase
{
public:
	float                                              HeightHigh;                                               // 0x00C4(0x0004) (Edit)
	float                                              HeightMid;                                                // 0x00C8(0x0004) (Edit)
	float                                              HeightLow;                                                // 0x00CC(0x0004) (Edit)
	float                                              RateLow;                                                  // 0x00D0(0x0004) (Edit)
	struct FName                                       MountEventName;                                           // 0x00D4(0x0008) (Edit)
	unsigned long                                      m_bEventTriggered : 1;                                    // 0x00DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByMount");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByPosture
// 0x0004 (0x00D4 - 0x00D0)
class UBioAnimNodeBlendByPosture : public UAnimNodeBlend
{
public:
	float                                              BlendDuration;                                            // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByPosture");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByPower
// 0x0010 (0x00EC - 0x00DC)
class UBioAnimNodeBlendByPower : public UAnimNodeBlendList
{
public:
	float                                              m_fUsingDuration;                                         // 0x00DC(0x0004) (Transient)
	TEnumAsByte<EBioPowerAnimNode>                     m_eCurrentAnimNode;                                       // 0x00E0(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	class UAnimNodeSequence*                           m_oAnimNodeSequence;                                      // 0x00E4(0x0004) (Transient)
	float                                              m_fOriginalRate;                                          // 0x00E8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByPower");
		return ptr;
	}


	bool GetActivePower(class UBioActivePower** oActivePower);
	void Reset();
};


// Class BIOC_Base.BioAnimNodeBlendByTargetingPercentage
// 0x0004 (0x00D4 - 0x00D0)
class UBioAnimNodeBlendByTargetingPercentage : public UAnimNodeBlend
{
public:
	float                                              m_fRate;                                                  // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByTargetingPercentage");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByWeaponAction
// 0x0008 (0x00E4 - 0x00DC)
class UBioAnimNodeBlendByWeaponAction : public UAnimNodeBlendList
{
public:
	TEnumAsByte<EBioWeaponActionAnimNode>              m_eCurrentAnimNode;                                       // 0x00DC(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	unsigned long                                      m_isInitialStateDetermined : 1;                           // 0x00E0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByWeaponAction");
		return ptr;
	}


	void PlayCurrentChildAnimation();
};


// Class BIOC_Base.BioAnimNodeBlendCombatAction
// 0x0004 (0x00E4 - 0x00E0)
class UBioAnimNodeBlendCombatAction : public UBioAnimNodeBlendBase
{
public:
	int                                                m_nCurrentCombatState;                                    // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendCombatAction");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendDirectional
// 0x0014 (0x00F4 - 0x00E0)
class UBioAnimNodeBlendDirectional : public UBioAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                                      // 0x00E0(0x0004) (Edit)
	float                                              ForeBackBlendTime;                                        // 0x00E4(0x0004) (Edit)
	float                                              RotationDeadzone;                                         // 0x00E8(0x0004) (Edit)
	float                                              m_fDirAngle;                                              // 0x00EC(0x0004)
	unsigned long                                      m_bForward : 1;                                           // 0x00F0(0x0004)
	unsigned long                                      m_bWasMoving : 1;                                         // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendDirectional");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendDirStart
// 0x0010 (0x00F0 - 0x00E0)
class UBioAnimNodeBlendDirStart : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fStartHeading;                                          // 0x00E0(0x0004)
	unsigned long                                      m_bIsStarting : 1;                                        // 0x00E4(0x0004)
	float                                              LeftStartTime;                                            // 0x00E8(0x0004) (Edit)
	float                                              RightStartTime;                                           // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendDirStart");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendFall
// 0x0008 (0x00E8 - 0x00E0)
class UBioAnimNodeBlendFall : public UBioAnimNodeBlendBase
{
public:
	float                                              JumpDistance;                                             // 0x00E0(0x0004) (Edit)
	unsigned long                                      m_bIsFalling : 1;                                         // 0x00E4(0x0004)
	unsigned long                                      m_bMovePawn : 1;                                          // 0x00E4(0x0004)
	unsigned long                                      m_bUseFarFallAnims : 1;                                   // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendFall");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendGetUp
// 0x0000 (0x00E0 - 0x00E0)
class UBioAnimNodeBlendGetUp : public UBioAnimNodeBlendBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendGetUp");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendMoveStop
// 0x0000 (0x00E0 - 0x00E0)
class UBioAnimNodeBlendMoveStop : public UBioAnimNodeBlendBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendMoveStop");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendMultiAdditive
// 0x0018 (0x00F8 - 0x00E0)
class UBioAnimNodeBlendMultiAdditive : public UBioAnimNodeBlendBase
{
public:
	int                                                m_nNumAdditiveChildren;                                   // 0x00E0(0x0004) (Edit)
	struct FMap_Mirror                                 m_mapActivateTimes;                                       // 0x00E4(0x0014) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendMultiAdditive");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendPerBone
// 0x0028 (0x0120 - 0x00F8)
class UBioAnimNodeBlendPerBone : public UAnimNodeBlendPerBone
{
public:
	struct FName                                       BlendName;                                                // 0x00F8(0x0008) (Edit)
	TEnumAsByte<EBoneBlendType>                        BlendType;                                                // 0x0100(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	float                                              OverblendFactor;                                          // 0x0104(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0108(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x010C(0x0004) (Edit)
	TArray<struct FName>                               BioBranchStartBoneName;                                   // 0x0110(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bNotifiedBlendComplete : 1;                             // 0x011C(0x0004)
	unsigned long                                      m_bBoneSwitchOn : 1;                                      // 0x011C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendPerBone");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendPose
// 0x0020 (0x0100 - 0x00E0)
class UBioAnimNodeBlendPose : public UBioAnimNodeBlendBase
{
public:
	TArray<struct FName>                               m_aChildAnimsets;                                         // 0x00E0(0x000C) (NeedCtorLink)
	unsigned long                                      m_bTransitioning : 1;                                     // 0x00EC(0x0004)
	float                                              m_fTransEndTime;                                          // 0x00F0(0x0004)
	float                                              m_fEndBlendDuration;                                      // 0x00F4(0x0004)
	class UBioGestureLangOverride*                     m_pLangOverride;                                          // 0x00F8(0x0004) (Transient)
	unsigned long                                      m_bTriedOverride : 1;                                     // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendPose");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendPoseAndGestures
// 0x0024 (0x011C - 0x00F8)
class UBioAnimNodeBlendPoseAndGestures : public UBioAnimNodeBlendMultiAdditive
{
public:
	TArray<struct FName>                               m_aChildAnimsets;                                         // 0x00F8(0x000C) (NeedCtorLink)
	unsigned long                                      m_bGesturePlaying : 1;                                    // 0x0104(0x0004)
	TArray<struct FBioChildPinData>                    m_aChildPinData;                                          // 0x0108(0x000C) (NeedCtorLink)
	class UBioGestureLangOverride*                     m_pLangOverride;                                          // 0x0114(0x0004) (Transient)
	unsigned long                                      m_bTriedOverride : 1;                                     // 0x0118(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendPoseAndGestures");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendScalar
// 0x0048 (0x0128 - 0x00E0)
class UBioAnimNodeBlendScalar : public UBioAnimNodeBlendBase
{
public:
	class UBioAnimNodeBlendScalarBehavior*             m_oBehavior;                                              // 0x00E0(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<struct FBioScalarBlendParams>               m_aChildBlendParams;                                      // 0x00E4(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	unsigned long                                      m_bBlendInstant : 1;                                      // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bUseBlendSpanTime : 1;                                  // 0x00F0(0x0004) (Edit)
	float                                              m_fBlendPctPerSecond;                                     // 0x00F4(0x0004) (Edit)
	float                                              m_fBlendSpanTime;                                         // 0x00F8(0x0004) (Edit)
	float                                              m_fRangeMin;                                              // 0x00FC(0x0004)
	float                                              m_fRangeMax;                                              // 0x0100(0x0004)
	float                                              m_fUnitsPerSecond;                                        // 0x0104(0x0004)
	float                                              m_fCurrentScalar;                                         // 0x0108(0x0004)
	float                                              m_fTargetScalar;                                          // 0x010C(0x0004)
	struct FString                                     m_sDescription;                                           // 0x0110(0x000C) (NeedCtorLink)
	TArray<struct FBioScalarPrecomputedValues>         m_aChildPrecomputes;                                      // 0x011C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendScalar");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendScalarBehavior
// 0x000C (0x0048 - 0x003C)
class UBioAnimNodeBlendScalarBehavior : public UObject
{
public:
	TArray<struct FBioAnimScalarNodeBehaviorDef>       m_aNodeDefinitions;                                       // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendScalarBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendScalarHoppingBehavior
// 0x0001 (0x0049 - 0x0048)
class UBioAnimNodeBlendScalarHoppingBehavior : public UBioAnimNodeBlendScalarBehavior
{
public:
	TEnumAsByte<EBioAnimNodeBlendScalarHoppingBehavior> HoppingBehavior;                                          // 0x0048(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendScalarHoppingBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendScalarMovementBehavior
// 0x0008 (0x0050 - 0x0048)
class UBioAnimNodeBlendScalarMovementBehavior : public UBioAnimNodeBlendScalarBehavior
{
public:
	TEnumAsByte<EBioAnimNodeBlendScalarMovementBehavior> MovementBehavior;                                         // 0x0048(0x0001) (Edit)
	TEnumAsByte<EBioAnimNodeBlendScalarMoveAxis>       MoveAxis;                                                 // 0x0049(0x0001) (Edit)
	TEnumAsByte<EBioAnimNodeBlendScalarMoveAxisDir>    AxisDir;                                                  // 0x004A(0x0001) (Edit)
	TEnumAsByte<EBioAnimNodeBlendScalarMoveAxisDirMode> AxisDirMode;                                              // 0x004B(0x0001) (Edit)
	unsigned long                                      bUseSprint : 1;                                           // 0x004C(0x0004) (Edit)
	unsigned long                                      bUseSnapshotSpeed : 1;                                    // 0x004C(0x0004) (Edit)
	unsigned long                                      bUseSnapshotStartSpeed : 1;                               // 0x004C(0x0004) (Edit)
	unsigned long                                      bUseLocalSpace : 1;                                       // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendScalarMovementBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendSkidTurn
// 0x0020 (0x0100 - 0x00E0)
class UBioAnimNodeBlendSkidTurn : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fSkidHeading;                                           // 0x00E0(0x0004)
	unsigned long                                      m_bIsSkidding : 1;                                        // 0x00E4(0x0004)
	unsigned long                                      m_bFinishSkidStarted : 1;                                 // 0x00E4(0x0004)
	float                                              RightNearAngle;                                           // 0x00E8(0x0004) (Edit)
	float                                              RightFarAngle;                                            // 0x00EC(0x0004) (Edit)
	float                                              LeftNearAngle;                                            // 0x00F0(0x0004) (Edit)
	float                                              LeftFarAngle;                                             // 0x00F4(0x0004) (Edit)
	float                                              LeftStartTime;                                            // 0x00F8(0x0004) (Edit)
	float                                              RightStartTime;                                           // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendSkidTurn");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendSpeed
// 0x0030 (0x0110 - 0x00E0)
class UBioAnimNodeBlendSpeed : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendTimeToIdle;                                          // 0x00E0(0x0004) (Edit)
	float                                              BlendTimeFromIdle;                                        // 0x00E4(0x0004) (Edit)
	float                                              BlendTimeMoving;                                          // 0x00E8(0x0004) (Edit)
	float                                              WalkSpeed;                                                // 0x00EC(0x0004) (Edit)
	float                                              RunSpeed;                                                 // 0x00F0(0x0004) (Edit)
	float                                              WalkRateScaled;                                           // 0x00F4(0x0004) (Edit)
	float                                              RunRateScaled;                                            // 0x00F8(0x0004) (Edit)
	TEnumAsByte<EBioAnim_SpeedType>                    SpeedType;                                                // 0x00FC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	float                                              m_fStartSpeed;                                            // 0x0100(0x0004)
	float                                              m_fCurrentSpeed;                                          // 0x0104(0x0004)
	unsigned long                                      m_bIsStarting : 1;                                        // 0x0108(0x0004)
	unsigned long                                      m_bIsStarted : 1;                                         // 0x0108(0x0004)
	float                                              m_fStartCheckTime;                                        // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendSpeed");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendState
// 0x0020 (0x0100 - 0x00E0)
class UBioAnimNodeBlendState : public UBioAnimNodeBlendBase
{
public:
	int                                                m_nActiveChild;                                           // 0x00E0(0x0004)
	class UBioAnimNodeBlendStateBehavior*              m_oBehavior;                                              // 0x00E4(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<struct FBioAnimBlendParams>                 m_aChildBlendParams;                                      // 0x00E8(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	struct FString                                     m_sDescription;                                           // 0x00F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendState");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendStateBehavior
// 0x0010 (0x004C - 0x003C)
class UBioAnimNodeBlendStateBehavior : public UObject
{
public:
	TArray<struct FBioAnimStateNodeBehaviorDef>        m_aNodeDefinitions;                                       // 0x003C(0x000C) (NeedCtorLink)
	float                                              m_fQueryPlayTime;                                         // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendStateBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendStateActionBehavior
// 0x0008 (0x0054 - 0x004C)
class UBioAnimNodeBlendStateActionBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	TEnumAsByte<EBioAnimNodeBlendStateActionBehavior>  ActionBehavior;                                           // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	unsigned long                                      m_bPlayedRecoverAnim : 1;                                 // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendStateActionBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendStateCombatBehavior
// 0x0008 (0x0054 - 0x004C)
class UBioAnimNodeBlendStateCombatBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	TEnumAsByte<EBioAnimNodeBlendStateCombatBehavior>  CombatBehavior;                                           // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	unsigned long                                      bUseCoverAnimState : 1;                                   // 0x0050(0x0004) (Edit)
	unsigned long                                      bOnlyDuringWeaponSwitch : 1;                              // 0x0050(0x0004) (Edit)
	unsigned long                                      bOnlyDuringNoOffensiveAction : 1;                         // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendStateCombatBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendStateHoppingBehavior
// 0x0008 (0x0054 - 0x004C)
class UBioAnimNodeBlendStateHoppingBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	TEnumAsByte<EBioAnimNodeBlendStateHoppingBehavior> HoppingBehavior;                                          // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	unsigned long                                      m_bPlayedAnim : 1;                                        // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendStateHoppingBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendStateMovementBehavior
// 0x0024 (0x0070 - 0x004C)
class UBioAnimNodeBlendStateMovementBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	TEnumAsByte<EBioAnimNodeBlendStateMovementBehavior> MovementBehavior;                                         // 0x004C(0x0001) (Edit)
	TEnumAsByte<EBioAnimNodeBlendStateMoveAxisDir>     AxisDir;                                                  // 0x004D(0x0001) (Edit)
	TEnumAsByte<EBioAnimNodeBlendStateMoveAxisDirMode> AxisDirMode;                                              // 0x004E(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	float                                              BlendDownPerc;                                            // 0x0050(0x0004) (Edit)
	unsigned long                                      bUseSprint : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      bUseSnapshotSpeed : 1;                                    // 0x0054(0x0004) (Edit)
	unsigned long                                      bUseSnapshotStartSpeed : 1;                               // 0x0054(0x0004) (Edit)
	unsigned long                                      bUseDirStartControl : 1;                                  // 0x0054(0x0004) (Edit)
	unsigned long                                      m_bIsStarted : 1;                                         // 0x0054(0x0004)
	unsigned long                                      m_bInTakeoff : 1;                                         // 0x0054(0x0004)
	unsigned long                                      m_bInLanding : 1;                                         // 0x0054(0x0004)
	unsigned long                                      m_bPlayedAnim : 1;                                        // 0x0054(0x0004)
	unsigned long                                      m_bRootMotionOn : 1;                                      // 0x0054(0x0004)
	float                                              ScaleByValue;                                             // 0x0058(0x0004) (Edit)
	float                                              WalkRate;                                                 // 0x005C(0x0004) (Edit)
	float                                              RunRate;                                                  // 0x0060(0x0004) (Edit)
	float                                              BlendResetWeight;                                         // 0x0064(0x0004) (Edit)
	float                                              m_fStartCheckTime;                                        // 0x0068(0x0004)
	int                                                m_nLastPhys;                                              // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendStateMovementBehavior");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendTurn
// 0x0000 (0x00E0 - 0x00E0)
class UBioAnimNodeBlendTurn : public UBioAnimNodeBlendBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendTurn");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendWeaponEquip
// 0x000C (0x00EC - 0x00E0)
class UBioAnimNodeBlendWeaponEquip : public UBioAnimNodeBlendBase
{
public:
	float                                              m_HolsterToDrawBlendDuration;                             // 0x00E0(0x0004) (Edit)
	float                                              m_noneToDrawBlendDuration;                                // 0x00E4(0x0004) (Edit)
	float                                              m_noneToHolsterBlendDuration;                             // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendWeaponEquip");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeCameraShake
// 0x0018 (0x00FC - 0x00E4)
class UBioAnimNodeCameraShake : public UBioAnimNodeBlendAdditive
{
public:
	class UBioCameraShake*                             m_cameraShake;                                            // 0x00E4(0x0004)
	float                                              m_intensity;                                              // 0x00E8(0x0004)
	float                                              m_time;                                                   // 0x00EC(0x0004)
	unsigned long                                      m_isLoopingForever : 1;                                   // 0x00F0(0x0004)
	unsigned long                                      m_isFadingIn : 1;                                         // 0x00F0(0x0004)
	unsigned long                                      m_hasFadeOut : 1;                                         // 0x00F0(0x0004)
	unsigned long                                      m_isFadingOut : 1;                                        // 0x00F0(0x0004)
	float                                              m_fadeInTime;                                             // 0x00F4(0x0004)
	float                                              m_fadeOutTime;                                            // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeCameraShake");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeCombatMode
// 0x0018 (0x00F8 - 0x00E0)
class UBioAnimNodeCombatMode : public UBioAnimNodeBlendBase
{
public:
	float                                              m_blendIntoTransitionDuration;                            // 0x00E0(0x0004) (Edit)
	float                                              m_blendOutOfTransitionDuration;                           // 0x00E4(0x0004) (Edit)
	float                                              m_blendFromNonCombatToCombatDuration;                     // 0x00E8(0x0004) (Edit)
	float                                              m_blendFromCombatToNonCombatDuration;                     // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EBioAnimNodeCombatModeState>           m_currentState;                                           // 0x00F0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned long                                      m_isInitialStateDetermined : 1;                           // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeCombatMode");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeFrame
// 0x0010 (0x00C4 - 0x00B4)
class UBioAnimNodeFrame : public UAnimNode
{
public:
	TArray<struct FBoneAtom>                           m_FrameBoneData;                                          // 0x00B4(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      m_bIsFrameDataValid : 1;                                  // 0x00C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeFrame");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeRandom
// 0x0008 (0x00F8 - 0x00F0)
class UBioAnimNodeRandom : public UAnimNodeRandom
{
public:
	unsigned long                                      bForceChildOnActive : 1;                                  // 0x00F0(0x0004) (Edit)
	int                                                nChildOnActive;                                           // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeRandom");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeSequence
// 0x0036 (0x0128 - 0x00F2)
class UBioAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x00F2(0x0002) MISSED OFFSET
	unsigned long                                      bRandomizeStartTime : 1;                                  // 0x00F4(0x0004) (Edit)
	struct FName                                       DF_CurrentTime;                                           // 0x00F8(0x0008) (Edit)
	struct FName                                       DF_Rate;                                                  // 0x0100(0x0008) (Edit)
	struct FName                                       DF_SequenceLength;                                        // 0x0108(0x0008) (Edit)
	struct FPointer                                    m_pDFCurTimeProp;                                         // 0x0110(0x0004) (Const, Native)
	struct FPointer                                    m_pDFRateProp;                                            // 0x0114(0x0004) (Const, Native)
	struct FPointer                                    m_pDFSeqLenProp;                                          // 0x0118(0x0004) (Const, Native)
	struct FVector                                     m_vTotalTranslation;                                      // 0x011C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeSequence");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeSequenceByBoneRotation
// 0x001A (0x010C - 0x00F2)
class UBioAnimNodeSequenceByBoneRotation : public UAnimNodeSequence
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x00F2(0x0002) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x00F4(0x0008) (Edit)
	TEnumAsByte<EAxis>                                 BoneAxis;                                                 // 0x00FC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	TArray<struct FAnimByRotation>                     AnimList;                                                 // 0x0100(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeSequenceByBoneRotation");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNotifyEvent
// 0x000C (0x0048 - 0x003C)
class UBioAnimNotifyEvent : public UAnimNotify
{
public:
	struct FName                                       EventName;                                                // 0x003C(0x0008) (Edit)
	unsigned long                                      IsGlobal : 1;                                             // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNotifyEvent");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNotifySound
// 0x000C (0x0048 - 0x003C)
class UBioAnimNotifySound : public UAnimNotify
{
public:
	struct FString                                     SoundName;                                                // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNotifySound");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNotifyVFX
// 0x0008 (0x0044 - 0x003C)
class UBioAnimNotifyVFX : public UAnimNotify
{
public:
	struct FName                                       m_nmVisualEffectLabel;                                    // 0x003C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNotifyVFX");
		return ptr;
	}

};


// Class BIOC_Base.BioArtPlaceableBlendByTransition
// 0x000C (0x00DC - 0x00D0)
class UBioArtPlaceableBlendByTransition : public UAnimNodeBlend
{
public:
	unsigned long                                      bTransitioning : 1;                                       // 0x00D0(0x0004)
	unsigned long                                      bTransitionAllowed : 1;                                   // 0x00D0(0x0004)
	class UAnimNodeSequence*                           aTransition;                                              // 0x00D4(0x0004)
	class UAnimNodeSequence*                           aState;                                                   // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableBlendByTransition");
		return ptr;
	}


	void GotoToState(const struct FName& LoopAnim);
	void TransitionToState(const struct FName& TransAnim, const struct FName& LoopAnim);
};


// Class BIOC_Base.BioGestureAnimSetMgr
// 0x0018 (0x0054 - 0x003C)
class UBioGestureAnimSetMgr : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetRefCount;                                     // 0x003C(0x0014) (Native)
	class UBioGestureRuntimeData*                      m_pRuntimeData;                                           // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGestureAnimSetMgr");
		return ptr;
	}

};


// Class BIOC_Base.BioSkelControlAdditiveLookAt
// 0x0008 (0x010C - 0x0104)
class UBioSkelControlAdditiveLookAt : public USkelControlLookAt
{
public:
	unsigned long                                      bSeparateUpDownLimit : 1;                                 // 0x0104(0x0004) (Edit)
	float                                              MaxAngleUpDown;                                           // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkelControlAdditiveLookAt");
		return ptr;
	}

};


// Class BIOC_Base.BioPawnLookAtController
// 0x0074 (0x0180 - 0x010C)
class UBioPawnLookAtController : public UBioSkelControlAdditiveLookAt
{
public:
	unsigned long                                      m_bDoAdditive : 1;                                        // 0x010C(0x0004) (Transient)
	unsigned long                                      m_bAnimFirst : 1;                                         // 0x010C(0x0004) (Transient)
	unsigned long                                      m_bResetTargetLocation : 1;                               // 0x010C(0x0004) (Transient)
	unsigned long                                      m_bDisabling : 1;                                         // 0x010C(0x0004) (Transient)
	unsigned long                                      m_RootAnimBoneLookAtInverted : 1;                         // 0x010C(0x0004) (Transient)
	unsigned long                                      m_RootAnimBoneUpInverted : 1;                             // 0x010C(0x0004) (Transient)
	unsigned long                                      m_bTargetReached : 1;                                     // 0x010C(0x0004) (Transient)
	unsigned long                                      m_bRootBoneYawOnly : 1;                                   // 0x010C(0x0004) (Transient)
	class AActor*                                      m_pTargetActor;                                           // 0x0110(0x0004) (Transient)
	class USkeletalMeshComponent*                      m_pTargetMesh;                                            // 0x0114(0x0004) (ExportObject, Transient, Component, EditInline)
	int                                                m_nTargetBoneIndex;                                       // 0x0118(0x0004) (Transient)
	float                                              m_fDelayTimer;                                            // 0x011C(0x0004) (Transient)
	struct FPointer                                    mc_pDefinition;                                           // 0x0120(0x0004) (Native, Transient)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0124(0x000C) MISSED OFFSET
	struct FMatrix                                     m_mControlledRefPose;                                     // 0x0130(0x0040) (Transient)
	int                                                m_nRootAnimBoneIndex;                                     // 0x0170(0x0004) (Transient)
	unsigned char                                      m_RootAnimBoneLookAtAxis;                                 // 0x0174(0x0001) (Transient)
	unsigned char                                      m_RootAnimBoneUpAxis;                                     // 0x0175(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0176(0x0002) MISSED OFFSET
	float                                              m_fPrevAngVelocity;                                       // 0x0178(0x0004) (Transient)
	float                                              m_fLimitZoneAngle;                                        // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnLookAtController");
		return ptr;
	}

};


// Class BIOC_Base.BioSkelControl_TurretConstrained
// 0x0030 (0x00F4 - 0x00C4)
class UBioSkelControl_TurretConstrained : public USkelControlSingleBone
{
public:
	unsigned long                                      bConstrainPitch : 1;                                      // 0x00C4(0x0004) (Edit)
	unsigned long                                      bConstrainYaw : 1;                                        // 0x00C4(0x0004) (Edit)
	unsigned long                                      bConstrainRoll : 1;                                       // 0x00C4(0x0004) (Edit)
	unsigned long                                      bInvertPitch : 1;                                         // 0x00C4(0x0004) (Edit)
	unsigned long                                      bInvertYaw : 1;                                           // 0x00C4(0x0004) (Edit)
	unsigned long                                      bInvertRoll : 1;                                          // 0x00C4(0x0004) (Edit)
	struct FTurretConstraintData                       MaxAngle;                                                 // 0x00C8(0x000C) (Edit)
	struct FTurretConstraintData                       MinAngle;                                                 // 0x00D4(0x000C) (Edit)
	float                                              LagDegreesPerSecond;                                      // 0x00E0(0x0004) (Edit)
	float                                              m_fLagScale;                                              // 0x00E4(0x0004) (Edit)
	struct FRotator                                    DesiredBoneRotation;                                      // 0x00E8(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkelControl_TurretConstrained");
		return ptr;
	}

};


// Class BIOC_Base.BioVehicleBase
// 0x0020 (0x066C - 0x064C)
class ABioVehicleBase : public ASVehicle
{
public:
	class UBioSWF*                                     m_oAreaMap;                                               // 0x064C(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0650(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioVehicleBase.m_sVehicleName
	class UBioSWF*                                     m_oCurrentAreaMap;                                        // 0x0654(0x0004) (Transient)
	class UBioVehicleBehaviorBase*                     m_oBehavior;                                              // 0x0658(0x0004) (Edit, EditInline)
	unsigned long                                      m_bShowVehicleDebugHUD : 1;                               // 0x065C(0x0004) (Edit, Config)
	unsigned long                                      m_bAwakeOnLevelStart : 1;                                 // 0x065C(0x0004) (Edit)
	unsigned long                                      m_bDebugVehicleEnterExitSequence : 1;                     // 0x065C(0x0004)
	class UAudioComponent*                             m_OperationalSounds;                                      // 0x0660(0x0004) (Edit, ExportObject, Component, EditInline)
	class ULightEnvironmentComponent*                  m_pLightEnvComponent;                                     // 0x0664(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             m_pLowShieldSound;                                        // 0x0668(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleBase");
		return ptr;
	}


	void HandleVehicleChatterEvent(TEnumAsByte<EBioSoundSetType> eSoundSet);
	void OnTeleport(class USeqAct_Teleport* Action);
	class UClass* STATIC_GetSaveObjectClass();
	void SetInputs(float InForward, float InStrafe, float InUp);
	bool ProxyTryToDrive(class APawn* P);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void DrawHUD(class AHUD* H);
	void BioProxyDetachDriver(class APawn* P);
	void DetachDriver(class APawn* P);
	void BioProxyAttachDriver(class APawn* P);
	void AttachDriver(class APawn* P);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool SetExitingSquadLocation(const struct FVector& vExitCenterLocation, float fPlacementOffset);
	bool PlaceExitingDriver(class APawn* ExitingDriver);
	bool DriverEnter(class APawn* P);
	bool DriverLeave(bool bForceLeave);
	void SetPartyCollisionState(bool bCollideState);
	void BioBeginPlay();
	void KillAllMomentum();
	bool IsExitLocationValid(const struct FVector& vExitLocation);
	void InitializeForPlay();
	bool PerformForceExitCleanup();
	bool BioCanExitVehicle();
	bool BioCanEnterVehicle();
	class UBioVISSimple* GetVisualImpactSet();
};


// Class BIOC_Base.BioVehicleTrackSet
// 0x0010 (0x004C - 0x003C)
class UBioVehicleTrackSet : public UObject
{
public:
	class UParticleSystem*                             m_DefaultParticleSystem;                                  // 0x003C(0x0004) (Edit)
	TArray<struct FTrackParticleSystem>                m_ParticleSystems;                                        // 0x0040(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleTrackSet");
		return ptr;
	}


	class UParticleSystem* FindParticleSystem(class UPhysicalMaterial* a_Material);
};


// Class BIOC_Base.BioVehicleWheeled
// 0x0000 (0x066C - 0x066C)
class ABioVehicleWheeled : public ABioVehicleBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleWheeled");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_AbilityEnable
// 0x0018 (0x0104 - 0x00EC)
class UBioSeqAct_AbilityEnable : public USequenceAction
{
public:
	TArray<class APawn*>                               m_aoPawns;                                                // 0x00EC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bEnable : 1;                                            // 0x00F8(0x0004) (Edit)
	struct FName                                       m_nmSubType;                                              // 0x00FC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AbilityEnable");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSequenceLatentAction
// 0x0004 (0x0100 - 0x00FC)
class UBioSequenceLatentAction : public USeqAct_Latent
{
public:
	unsigned long                                      bHasTargets : 1;                                          // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSequenceLatentAction");
		return ptr;
	}


	bool UpdateOp(float DeltaTime);
};


// Class BIOC_Base.BioSeqAct_ActionStation
// 0x00D8 (0x01D8 - 0x0100)
class UBioSeqAct_ActionStation : public UBioSequenceLatentAction
{
public:
	class ABioPawn*                                    m_oPawn;                                                  // 0x0100(0x0004) (Edit)
	class ABioArtPlaceable*                            m_oArtPlaceable;                                          // 0x0104(0x0004) (Edit)
	class ABioPathPoint*                               m_oPathNode;                                              // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bSnapToPose : 1;                                        // 0x010C(0x0004) (Edit)
	unsigned long                                      m_bDontMovePathnode : 1;                                  // 0x010C(0x0004) (Edit)
	unsigned long                                      m_bPlayTwitchesInOrder : 1;                               // 0x010C(0x0004) (Edit)
	unsigned long                                      m_bPawnInConversation : 1;                                // 0x010C(0x0004)
	unsigned long                                      m_bActionStationComplete : 1;                             // 0x010C(0x0004)
	unsigned long                                      m_bResourcesReferenced : 1;                               // 0x010C(0x0004)
	struct FVector                                     m_vPathNodeOffset;                                        // 0x0110(0x000C) (Edit)
	struct FRawDistributionFloat                       m_TimeToSpend;                                            // 0x011C(0x001C) (Edit, Component, NeedCtorLink)
	int                                                m_nNumOutputTwitches;                                     // 0x0138(0x0004) (Edit)
	TEnumAsByte<EBioActionStationEntrancePose>         m_PawnEntranceTransition;                                 // 0x013C(0x0001) (Edit)
	TEnumAsByte<EBioActionStationExitPose>             m_PawnExitTransition;                                     // 0x013D(0x0001) (Edit)
	TEnumAsByte<EBioActionStationCombatPose>           m_PawnCombatExitTransition;                               // 0x013E(0x0001) (Edit)
	TEnumAsByte<EBioActionStationExitCondition>        m_nExitCondition;                                         // 0x013F(0x0001)
	float                                              m_fEntranceBlendTime;                                     // 0x0140(0x0004) (Edit)
	float                                              m_fExitBlendTime;                                         // 0x0144(0x0004) (Edit)
	float                                              m_fDelayBeforeTwitch;                                     // 0x0148(0x0004)
	float                                              m_fTimeSpent;                                             // 0x014C(0x0004)
	float                                              m_fTimeToSpend;                                           // 0x0150(0x0004)
	struct FBioActionStationGestureData                m_EntranceTransition;                                     // 0x0154(0x0028)
	struct FBioActionStationGestureData                m_ExitTransition;                                         // 0x017C(0x0028)
	struct FBioActionStationGestureData                m_CombatExitTransition;                                   // 0x01A4(0x0028)
	class UBioGestureRulesData*                        m_RulesData;                                              // 0x01CC(0x0004) (Transient)
	int                                                m_nTwitchStartIndex;                                      // 0x01D0(0x0004) (Transient)
	unsigned long                                      m_bInEntranceTransition : 1;                              // 0x01D4(0x0004) (Transient)
	unsigned long                                      m_bStartedSuccessfully : 1;                               // 0x01D4(0x0004) (Transient)
	unsigned long                                      m_bFireFailedPin : 1;                                     // 0x01D4(0x0004) (Transient)
	unsigned long                                      m_bTwitchesAborted : 1;                                   // 0x01D4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ActionStation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ActivateGalaxyMap
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_ActivateGalaxyMap : public USequenceAction
{
public:
	struct FString                                     m_sGalaxyMapResource;                                     // 0x00EC(0x000C) (Config, NeedCtorLink)
	class UBioSWF*                                     m_oGalaxyMapReferenced;                                   // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ActivateGalaxyMap");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_AOECauseDamage
// 0x0020 (0x010C - 0x00EC)
class UBioSeqAct_AOECauseDamage : public USequenceAction
{
public:
	class UBioDamageType*                              m_pDamage;                                                // 0x00EC(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, EditInline)
	float                                              m_fMomentum;                                              // 0x00F0(0x0004) (Edit)
	float                                              m_fDamageAmount;                                          // 0x00F4(0x0004) (Edit)
	float                                              m_fRadius;                                                // 0x00F8(0x0004) (Edit)
	struct FVector                                     m_vTargetMomentumDirection;                               // 0x00FC(0x000C) (Edit)
	class AActor*                                      m_oInstigator;                                            // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AOECauseDamage");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ApplyMetaVFX
// 0x0014 (0x0100 - 0x00EC)
class UBioSeqAct_ApplyMetaVFX : public USequenceAction
{
public:
	class UBioMetaVFX*                                 Effect;                                                   // 0x00EC(0x0004) (Edit)
	float                                              fLifeTime;                                                // 0x00F0(0x0004)
	TArray<class AActor*>                              Target;                                                   // 0x00F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ApplyMetaVFX");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AssignFindByTag
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_AssignFindByTag : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AssignFindByTag");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_AttachEnvironmentEffect
// 0x0028 (0x0114 - 0x00EC)
class UBioSeqAct_AttachEnvironmentEffect : public USequenceAction
{
public:
	class AActor*                                      m_oAttachTo;                                              // 0x00EC(0x0004) (Edit)
	struct FName                                       m_nmSocketOrBone;                                         // 0x00F0(0x0008) (Edit)
	struct FVector                                     m_vOffset;                                                // 0x00F8(0x000C) (Edit)
	float                                              m_fBlendTime;                                             // 0x0104(0x0004) (Edit)
	class UBioVFXTemplate*                             m_oEffect;                                                // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bAttachToCamera : 1;                                    // 0x010C(0x0004) (Edit)
	float                                              m_fInitialIntensity;                                      // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AttachEnvironmentEffect");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_BioActorFactory
// 0x0004 (0x0138 - 0x0134)
class UBioSeqAct_BioActorFactory : public USeqAct_ActorFactory
{
public:
	class UBioActorType*                               m_oActorType;                                             // 0x0134(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_BioActorFactory");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_BoundsChecker
// 0x001C (0x0108 - 0x00EC)
class UBioSeqAct_BoundsChecker : public USequenceAction
{
public:
	unsigned long                                      AIsFloat : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      BIsFloat : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      CIsFloat : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      BInclusive : 1;                                           // 0x00EC(0x0004) (Edit)
	unsigned long                                      CInclusive : 1;                                           // 0x00EC(0x0004) (Edit)
	int                                                IntA;                                                     // 0x00F0(0x0004)
	int                                                IntB;                                                     // 0x00F4(0x0004)
	int                                                IntC;                                                     // 0x00F8(0x0004)
	float                                              FloatA;                                                   // 0x00FC(0x0004)
	float                                              FloatB;                                                   // 0x0100(0x0004)
	float                                              FloatC;                                                   // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_BoundsChecker");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_CauseActionCompleteMovement
// 0x0011 (0x00FD - 0x00EC)
class UBioSeqAct_CauseActionCompleteMovement : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                                  // 0x00EC(0x0004)
	struct FName                                       m_Action;                                                 // 0x00F0(0x0008)
	class AActor*                                      m_oDestination;                                           // 0x00F8(0x0004)
	TEnumAsByte<EActionComplete_Movement>              m_nCompletionReason;                                      // 0x00FC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_CauseActionCompleteMovement");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ChangeAPState
// 0x0018 (0x0118 - 0x0100)
class UBioSeqAct_ChangeAPState : public UBioSequenceLatentAction
{
public:
	class ABioArtPlaceable*                            oPlaceable;                                               // 0x0100(0x0004) (Edit)
	struct FName                                       nmNewState;                                               // 0x0104(0x0008) (Edit)
	struct FName                                       nmNamedTransiton;                                         // 0x010C(0x0008) (Edit)
	unsigned long                                      bChangeImmediately : 1;                                   // 0x0114(0x0004) (Edit)
	unsigned long                                      bFail : 1;                                                // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ChangeAPState");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ChangeStrategy
// 0x0014 (0x0100 - 0x00EC)
class UBioSeqAct_ChangeStrategy : public USequenceAction
{
public:
	class ABioBaseSquad*                               m_oSquad;                                                 // 0x00EC(0x0004)
	TEnumAsByte<EBioAutoSet>                           Strategy;                                                 // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	struct FName                                       m_nmNewStrategy;                                          // 0x00F4(0x0008)
	unsigned long                                      m_bHasSquad : 1;                                          // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ChangeStrategy");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ChangeUseCase
// 0x0020 (0x010C - 0x00EC)
class UBioSeqAct_ChangeUseCase : public USequenceAction
{
public:
	class ABioArtPlaceable*                            oArtPlaceable;                                            // 0x00EC(0x0004) (Edit)
	int                                                nUseCase;                                                 // 0x00F0(0x0004) (Edit)
	struct FName                                       nmNewState0;                                              // 0x00F4(0x0008) (Edit)
	struct FName                                       nmNewState1;                                              // 0x00FC(0x0008) (Edit)
	int                                                nSkillLevel;                                              // 0x0104(0x0004) (Edit)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ChangeUseCase");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_CloneWeaponAppearance
// 0x0020 (0x0120 - 0x0100)
class UBioSeqAct_CloneWeaponAppearance : public UBioSequenceLatentAction
{
public:
	TEnumAsByte<EBioItemWeaponRangedType>              m_eWeaponToClone;                                         // 0x0100(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	unsigned long                                      m_bBothInputPinsAreConnected : 1;                         // 0x0104(0x0004)
	class USkeletalMeshComponent*                      m_pOriginalPropMesh;                                      // 0x0108(0x0004) (ExportObject, Transient, Component, EditInline)
	class ABioPawn*                                    m_pPawn;                                                  // 0x010C(0x0004) (Transient)
	class ASkeletalMeshActor*                          m_pProp;                                                  // 0x0110(0x0004) (Transient)
	struct FName                                       m_nmAttachedSocket;                                       // 0x0114(0x0008) (Transient)
	unsigned long                                      m_bStartedSuccessfully : 1;                               // 0x011C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_CloneWeaponAppearance");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_CopyPlayerHeadToTarget
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_CopyPlayerHeadToTarget : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_CopyPlayerHeadToTarget");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_DebugMessage
// 0x0020 (0x010C - 0x00EC)
class UBioSeqAct_DebugMessage : public USequenceAction
{
public:
	struct FString                                     Text;                                                     // 0x00EC(0x000C) (Edit, NeedCtorLink)
	class AActor*                                      oActor;                                                   // 0x00F8(0x0004) (Edit)
	int                                                nInt;                                                     // 0x00FC(0x0004) (Edit)
	float                                              fFloat;                                                   // 0x0100(0x0004) (Edit)
	struct FName                                       nName;                                                    // 0x0104(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DebugMessage");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_DecodeCombatResult
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DecodeCombatResult : public USequenceAction
{
public:
	int                                                m_nCompletionReason;                                      // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DecodeCombatResult");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DecodeMovmentResult
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DecodeMovmentResult : public USequenceAction
{
public:
	int                                                m_nCompletionReason;                                      // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DecodeMovmentResult");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_Delay
// 0x0000 (0x0110 - 0x0110)
class UBioSeqAct_Delay : public USeqAct_Delay
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Delay");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_DisableRender
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DisableRender : public USequenceAction
{
public:
	int                                                NumFrames;                                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DisableRender");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_DisableSoundSets
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DisableSoundSets : public USequenceAction
{
public:
	unsigned long                                      m_bEnableSoundSets : 1;                                   // 0x00EC(0x0004) (Edit)
	unsigned long                                      m_bApplyToAllHenchmen : 1;                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DisableSoundSets");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_DUISetElementText
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_DUISetElementText : public USequenceAction
{
public:
	TEnumAsByte<EBioDUIElements>                       Element;                                                  // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	struct FString                                     sText;                                                    // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetElementText");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_DUITimer
// 0x0010 (0x010C - 0x00FC)
class UBioSeqAct_DUITimer : public USeqAct_Latent
{
public:
	unsigned long                                      bModalTimer : 1;                                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bVisible : 1;                                             // 0x00FC(0x0004) (Edit)
	float                                              fStartTime;                                               // 0x0100(0x0004) (Edit)
	float                                              fEndTime;                                                 // 0x0104(0x0004) (Edit)
	float                                              fIntervalTime;                                            // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUITimer");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_EnableCombat
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_EnableCombat : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                            // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_EnableCombat");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_EndCurrentConvNode
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_EndCurrentConvNode : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_EndCurrentConvNode");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_EnterVehicle
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_EnterVehicle : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_EnterVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ExitVehicle
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ExitVehicle : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ExitVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_FaceOnlyVO
// 0x007C (0x017C - 0x0100)
class UBioSeqAct_FaceOnlyVO : public UBioSequenceLatentAction
{
public:
	class UBioConversation*                            m_pConversation;                                          // 0x0100(0x0004) (Edit)
	TEnumAsByte<EBioFOVOSpeakers>                      m_eSpeakerList;                                           // 0x0104(0x0001) (Edit)
	TEnumAsByte<EBioFOVOLines>                         m_eConvLine;                                              // 0x0105(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0106(0x0002) MISSED OFFSET
	struct FName                                       m_nmSpeakerTag;                                           // 0x0108(0x0008)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0110(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_FaceOnlyVO.m_srLineStrRef
	unsigned long                                      m_bForceHideSubtitles : 1;                                // 0x0114(0x0004) (Edit)
	unsigned long                                      m_bIgnoreHenchmanSquadCheck : 1;                          // 0x0114(0x0004) (Edit)
	unsigned long                                      m_bPlaySoundOnly : 1;                                     // 0x0114(0x0004) (Edit)
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                          // 0x0114(0x0004) (Edit)
	float                                              m_fPadLineLength;                                         // 0x0118(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x011C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_FaceOnlyVO.m_srActorNameOverride
	int                                                m_nPickedSpeakerIndex;                                    // 0x0120(0x0004) (Transient)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0124(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioSeqAct_FaceOnlyVO.m_aStrRefs
	class AActor*                                      m_pActor;                                                 // 0x0130(0x0004) (Transient)
	unsigned long                                      m_bErrorInActivation : 1;                                 // 0x0134(0x0004) (Transient)
	unsigned long                                      m_bKilledVO : 1;                                          // 0x0134(0x0004) (Transient)
	unsigned long                                      m_bPreLoadRequested : 1;                                  // 0x0134(0x0004) (Transient)
	unsigned long                                      m_bPlayRequested : 1;                                     // 0x0134(0x0004) (Transient)
	class UBioTlkFile*                                 m_pTlkFile;                                               // 0x0138(0x0004) (Transient)
	struct FString                                     m_sSubtitle;                                              // 0x013C(0x000C) (Transient, NeedCtorLink)
	class USoundCue*                                   m_pSoundCue;                                              // 0x0148(0x0004) (Transient)
	float                                              m_fLineLength;                                            // 0x014C(0x0004) (Transient)
	struct FString                                     m_sFaceFXAnim;                                            // 0x0150(0x000C) (Transient, NeedCtorLink)
	class UFaceFXAnimSet*                              m_pFaceFXSet;                                             // 0x015C(0x0004) (Transient)
	class UAudioComponent*                             m_pNoFaceAudioComp;                                       // 0x0160(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FMap_Mirror                                 m_mapUsedEnums;                                           // 0x0164(0x0014) (Native, Transient)
	float                                              m_fPreLoadTimer;                                          // 0x0178(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_FaceOnlyVO");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_FireWeaponAt
// 0x0028 (0x0128 - 0x0100)
class UBioSeqAct_FireWeaponAt : public UBioSequenceLatentAction
{
public:
	class ABioPawn*                                    oPawn;                                                    // 0x0100(0x0004) (Edit)
	class AActor*                                      oTarget;                                                  // 0x0104(0x0004) (Edit)
	float                                              fReqStab;                                                 // 0x0108(0x0004) (Edit)
	float                                              fAbortStab;                                               // 0x010C(0x0004) (Edit)
	float                                              fReqRadius;                                               // 0x0110(0x0004) (Edit)
	float                                              fTimeOut;                                                 // 0x0114(0x0004) (Edit)
	unsigned long                                      bIgnorePerception : 1;                                    // 0x0118(0x0004) (Edit)
	unsigned long                                      m_bDone : 1;                                              // 0x0118(0x0004)
	int                                                m_nReason;                                                // 0x011C(0x0004)
	TEnumAsByte<EBioEpicPawnBehaviorWeaponFireMode>    m_eFireMode;                                              // 0x0120(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0121(0x0003) MISSED OFFSET
	int                                                nCompletionReason;                                        // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_FireWeaponAt");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_FollowSquadLeader
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_FollowSquadLeader : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_FollowSquadLeader");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ForceActorMipsResident
// 0x0004 (0x0120 - 0x011C)
class UBioSeqAct_ForceActorMipsResident : public USeqAct_ForceMaterialMipsResident
{
public:
	unsigned long                                      bBlockOnWait : 1;                                         // 0x011C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ForceActorMipsResident");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ForceLightEnvUpdate
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ForceLightEnvUpdate : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ForceLightEnvUpdate");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GenerateAllActionsComplete
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_GenerateAllActionsComplete : public USequenceAction
{
public:
	class ABioPawn*                                    oWho;                                                     // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GenerateAllActionsComplete");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetAchievementStatus
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_GetAchievementStatus : public USequenceAction
{
public:
	int                                                m_nAchievementId;                                         // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetAchievementStatus");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetFromObjectList
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_GetFromObjectList : public USequenceAction
{
public:
	int                                                nListIndex;                                               // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetFromObjectList");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetNearestObject
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_GetNearestObject : public USequenceAction
{
public:
	unsigned long                                      bGetFurthest : 1;                                         // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetNearestObject");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetPawnsInRadius
// 0x0018 (0x0104 - 0x00EC)
class UBioSeqAct_GetPawnsInRadius : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                                    // 0x00EC(0x0004) (Edit)
	struct FVector                                     vLocation;                                                // 0x00F0(0x000C) (Edit)
	float                                              fRadius;                                                  // 0x00FC(0x0004) (Edit)
	int                                                nNumElements;                                             // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetPawnsInRadius");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_InteractProperty
// 0x0044 (0x0130 - 0x00EC)
class UBioSeqAct_InteractProperty : public USequenceAction
{
public:
	TArray<struct FBioPropertyMap>                     aObjectProperties;                                        // 0x00EC(0x000C) (NeedCtorLink)
	TArray<struct FBioPropertyMap>                     aObjectFunctions;                                         // 0x00F8(0x000C) (NeedCtorLink)
	TArray<struct FBioPropertyMap>                     aBehaviorProperties;                                      // 0x0104(0x000C) (NeedCtorLink)
	TArray<struct FBioPropertyMap>                     aBehaviorFunctions;                                       // 0x0110(0x000C) (NeedCtorLink)
	class UClass*                                      cObjectType;                                              // 0x011C(0x0004)
	class UClass*                                      cBehaviorType;                                            // 0x0120(0x0004)
	TArray<struct FBioPropertyInfo>                    Properties;                                               // 0x0124(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_InteractProperty");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetProperty
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_GetProperty : public UBioSeqAct_InteractProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetProperty");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetPropertyPawn
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_GetPropertyPawn : public UBioSeqAct_GetProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetPropertyPawn");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetPropertyVehicle
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_GetPropertyVehicle : public UBioSeqAct_GetProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetPropertyVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetSquadInfo
// 0x0018 (0x0104 - 0x00EC)
class UBioSeqAct_GetSquadInfo : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                                 // 0x00EC(0x0004) (Edit)
	class APawn*                                       m_oSquadLeader;                                           // 0x00F0(0x0004)
	int                                                m_nSquadCount;                                            // 0x00F4(0x0004)
	unsigned long                                      m_bIsEmpty : 1;                                           // 0x00F8(0x0004)
	int                                                m_nHackedCount;                                           // 0x00FC(0x0004)
	int                                                m_nHazardLevelMax;                                        // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetSquadInfo");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetUseCase
// 0x0028 (0x0114 - 0x00EC)
class UBioSeqAct_GetUseCase : public USequenceAction
{
public:
	class ABioArtPlaceable*                            oArtPlaceable;                                            // 0x00EC(0x0004) (Edit)
	int                                                eUseCase;                                                 // 0x00F0(0x0004) (Edit)
	struct FName                                       nmCurrentState;                                           // 0x00F4(0x0008) (Edit)
	struct FName                                       nmNewState0;                                              // 0x00FC(0x0008) (Edit)
	struct FName                                       nmNewState1;                                              // 0x0104(0x0008) (Edit)
	int                                                nSkillLevel;                                              // 0x010C(0x0004) (Edit)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetUseCase");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_HideAllWeapons
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_HideAllWeapons : public USequenceAction
{
public:
	unsigned long                                      m_ShouldHideWeapons : 1;                                  // 0x00EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_HideAllWeapons");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_HighlightGalaxyMapObject
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_HighlightGalaxyMapObject : public USequenceAction
{
public:
	int                                                m_nHighlightWorld;                                        // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_HighlightGalaxyMapObject");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_InitFSMode
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_InitFSMode : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_InitFSMode");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_InitLoadingMovie
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_InitLoadingMovie : public USequenceAction
{
public:
	struct FString                                     sMovieName;                                               // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_InitLoadingMovie");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_InsertPostProcess
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_InsertPostProcess : public USequenceAction
{
public:
	class UPostProcessChain*                           PostProcess;                                              // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_InsertPostProcess");
		return ptr;
	}


	void Activated();
	void AddPostProcessEffect();
};


// Class BIOC_Base.BioSeqAct_IsAbilityEnabled
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_IsAbilityEnabled : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                                  // 0x00EC(0x0004) (Edit)
	struct FName                                       m_nmSubType;                                              // 0x00F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_IsAbilityEnabled");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_LeaveActionStation
// 0x0005 (0x00F1 - 0x00EC)
class UBioSeqAct_LeaveActionStation : public USequenceAction
{
public:
	class ABioPawn*                                    m_oPawn;                                                  // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EBioActionStationExitCondition>        m_ExitMethod;                                             // 0x00F0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_LeaveActionStation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_LockTarget
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_LockTarget : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                                    // 0x00EC(0x0004) (Edit)
	class AActor*                                      oTarget;                                                  // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_LockTarget");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ModifyProperty
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_ModifyProperty : public UBioSeqAct_InteractProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ModifyProperty");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ModifyPropertyBaseSquad
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_ModifyPropertyBaseSquad : public UBioSeqAct_ModifyProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ModifyPropertyBaseSquad");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ModifyPropertyNavigation
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_ModifyPropertyNavigation : public UBioSeqAct_ModifyProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ModifyPropertyNavigation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ModifyPropertyPawn
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_ModifyPropertyPawn : public UBioSeqAct_ModifyProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ModifyPropertyPawn");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ModifyPropertyVehicle
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_ModifyPropertyVehicle : public UBioSeqAct_ModifyProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ModifyPropertyVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioSequenceLatentStateAction
// 0x0000 (0x0100 - 0x0100)
class UBioSequenceLatentStateAction : public UBioSequenceLatentAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSequenceLatentStateAction");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_MoveToObject
// 0x0018 (0x0118 - 0x0100)
class UBioSeqAct_MoveToObject : public UBioSequenceLatentStateAction
{
public:
	class APawn*                                       oPawn;                                                    // 0x0100(0x0004) (Edit)
	class AActor*                                      oTarget;                                                  // 0x0104(0x0004) (Edit)
	float                                              fMoveTolerance;                                           // 0x0108(0x0004) (Edit)
	unsigned long                                      bWalking : 1;                                             // 0x010C(0x0004) (Edit)
	unsigned long                                      bRequiresPrecisionMovement : 1;                           // 0x010C(0x0004) (Edit)
	unsigned long                                      bSetOrientationToTarget : 1;                              // 0x010C(0x0004) (Edit)
	unsigned long                                      bDesiredOrientationSet : 1;                               // 0x010C(0x0004)
	unsigned long                                      m_bDone : 1;                                              // 0x010C(0x0004)
	int                                                nCompletionReason;                                        // 0x0110(0x0004)
	int                                                m_nReason;                                                // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_MoveToObject");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_Movie
// 0x0009 (0x00F5 - 0x00EC)
class UBioSeqAct_Movie : public USequenceAction
{
public:
	class UTextureMovie*                               m_oTextureMovie;                                          // 0x00EC(0x0004) (Edit)
	unsigned long                                      m_bIsFinished : 1;                                        // 0x00F0(0x0004) (Transient)
	TEnumAsByte<EInputModes>                           m_eOriginalInputMode;                                     // 0x00F4(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Movie");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_MovieBink
// 0x000C (0x010C - 0x0100)
class UBioSeqAct_MovieBink : public UBioSequenceLatentAction
{
public:
	struct FString                                     m_sMovieName;                                             // 0x0100(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_MovieBink");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_MusicVolumeDisable
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_MusicVolumeDisable : public USequenceAction
{
public:
	class ABioMusicVolume*                             m_MusicVolume;                                            // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_MusicVolumeDisable");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_MusicVolumeEnable
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_MusicVolumeEnable : public USequenceAction
{
public:
	class ABioMusicVolume*                             m_MusicVolume;                                            // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_MusicVolumeEnable");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_NonCombatArea
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_NonCombatArea : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                            // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_NonCombatArea");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_OpenShop
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_OpenShop : public USequenceAction
{
public:
	float                                              m_priceAdjustmentFactor;                                  // 0x00EC(0x0004) (Const)
	class ABioShop*                                    m_shop;                                                   // 0x00F0(0x0004) (Const)
	int                                                m_nOverrideLevel;                                         // 0x00F4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_OpenShop");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_OverrideStagePlacement
// 0x0024 (0x0110 - 0x00EC)
class UBioSeqAct_OverrideStagePlacement : public USequenceAction
{
public:
	class AActor*                                      m_aNode1;                                                 // 0x00EC(0x0004)
	class AActor*                                      m_aNode2;                                                 // 0x00F0(0x0004)
	class AActor*                                      m_aNode3;                                                 // 0x00F4(0x0004)
	class AActor*                                      m_aNode4;                                                 // 0x00F8(0x0004)
	class AActor*                                      m_aPuppet1_2;                                             // 0x00FC(0x0004)
	class AActor*                                      m_aPuppet1_3;                                             // 0x0100(0x0004)
	class AActor*                                      m_aPuppet2_2;                                             // 0x0104(0x0004)
	class AActor*                                      m_aPuppet2_3;                                             // 0x0108(0x0004)
	class AActor*                                      m_aStage;                                                 // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_OverrideStagePlacement");
		return ptr;
	}


	void Activated();
	void SetActor(class AActor* aInput, TEnumAsByte<EStageNodes> Node);
};


// Class BIOC_Base.BioSeqAct_PauseGalaxyMap
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_PauseGalaxyMap : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PauseGalaxyMap");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PlayFaceFXAnim
// 0x0024 (0x0110 - 0x00EC)
class UBioSeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAsset*                                FaceFXAsset;                                              // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EBioAutoSetFXGroup>                    AnimGroup;                                                // 0x00F0(0x0001) (Edit)
	TEnumAsByte<EBioAutoSetFXAnim>                     Anim;                                                     // 0x00F1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00F2(0x0002) MISSED OFFSET
	class UFaceFXAnimSet*                              AnimSet;                                                  // 0x00F4(0x0004) (Edit)
	struct FString                                     animGroupName;                                            // 0x00F8(0x000C) (NeedCtorLink)
	struct FString                                     AnimName;                                                 // 0x0104(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PlayFaceFXAnim");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_PlayLoadingMovie
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_PlayLoadingMovie : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PlayLoadingMovie");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PlaySoundSet
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_PlaySoundSet : public USequenceAction
{
public:
	TEnumAsByte<EBioSoundSetType>                      m_eSoundSetType;                                          // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	unsigned long                                      m_bKillCurrentSoundSet : 1;                               // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PlaySoundSet");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PMBase
// 0x0028 (0x0114 - 0x00EC)
class UBioSeqAct_PMBase : public USequenceAction
{
public:
	TEnumAsByte<EBioRegionAutoSet>                     Region;                                                   // 0x00EC(0x0001) (Edit)
	TEnumAsByte<EBioPlotAutoSet>                       Plot;                                                     // 0x00ED(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00EE(0x0002) MISSED OFFSET
	struct FString                                     m_sObjectType;                                            // 0x00F0(0x000C) (NeedCtorLink)
	int                                                m_nIndex;                                                 // 0x00FC(0x0004)
	struct FString                                     m_sVarName;                                               // 0x0100(0x000C) (NeedCtorLink)
	int                                                m_nPrevRegionIndex;                                       // 0x010C(0x0004)
	int                                                m_nPrevPlotIndex;                                         // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PMBase");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PMCheckConditional
// 0x000C (0x0120 - 0x0114)
class UBioSeqAct_PMCheckConditional : public UBioSeqAct_PMBase
{
public:
	TEnumAsByte<EBioAutoSet>                           Conditional;                                              // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	int                                                Param;                                                    // 0x0118(0x0004) (Edit)
	unsigned long                                      OutValue : 1;                                             // 0x011C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PMCheckConditional");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PMCheckState
// 0x0008 (0x011C - 0x0114)
class UBioSeqAct_PMCheckState : public UBioSeqAct_PMBase
{
public:
	TEnumAsByte<EBioAutoSet>                           State;                                                    // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	unsigned long                                      OutValue : 1;                                             // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PMCheckState");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PMExecuteConsequence
// 0x0008 (0x011C - 0x0114)
class UBioSeqAct_PMExecuteConsequence : public UBioSeqAct_PMBase
{
public:
	TEnumAsByte<EBioAutoSet>                           Consequence;                                              // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	int                                                Param;                                                    // 0x0118(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PMExecuteConsequence");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PMExecuteTransition
// 0x0008 (0x011C - 0x0114)
class UBioSeqAct_PMExecuteTransition : public UBioSeqAct_PMBase
{
public:
	TEnumAsByte<EBioAutoSet>                           Transition;                                               // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	int                                                Param;                                                    // 0x0118(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PMExecuteTransition");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PositionFSActors
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_PositionFSActors : public USequenceAction
{
public:
	unsigned long                                      m_bRestoreActors : 1;                                     // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PositionFSActors");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PositionHopper
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_PositionHopper : public USequenceAction
{
public:
	class APawn*                                       m_oHopper;                                                // 0x00EC(0x0004) (Edit)
	class ABioWP_Hopper*                               m_oHopperNode;                                            // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PositionHopper");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_PreloadCinematicAudio
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_PreloadCinematicAudio : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PreloadCinematicAudio");
		return ptr;
	}


	bool UpdateOp(float fDelta);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_RandomWalk
// 0x0008 (0x0108 - 0x0100)
class UBioSeqAct_RandomWalk : public UBioSequenceLatentAction
{
public:
	int                                                m_nMaxWalkDistance;                                       // 0x0100(0x0004) (Edit)
	float                                              m_fDelayAfterWalk;                                        // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_RandomWalk");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_RemovePostProcess
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_RemovePostProcess : public USequenceAction
{
public:
	class UPostProcessChain*                           PostProcess;                                              // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_RemovePostProcess");
		return ptr;
	}


	void Activated();
	void RemovePostProcessEffect();
};


// Class BIOC_Base.BioSeqAct_ResetAnimationState
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ResetAnimationState : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ResetAnimationState");
		return ptr;
	}


	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);
};


// Class BIOC_Base.BioSeqAct_ScalarMathUnit
// 0x0020 (0x010C - 0x00EC)
class UBioSeqAct_ScalarMathUnit : public USequenceAction
{
public:
	unsigned long                                      XIsFloat : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      YIsFloat : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      ZIsFloat : 1;                                             // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EScalarMathOps>                        Operation;                                                // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	int                                                IntX;                                                     // 0x00F4(0x0004)
	int                                                IntY;                                                     // 0x00F8(0x0004)
	int                                                IntZ;                                                     // 0x00FC(0x0004)
	float                                              FloatX;                                                   // 0x0100(0x0004)
	float                                              FloatY;                                                   // 0x0104(0x0004)
	float                                              FloatZ;                                                   // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ScalarMathUnit");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SelectWeapon
// 0x0005 (0x00F1 - 0x00EC)
class UBioSeqAct_SelectWeapon : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                                    // 0x00EC(0x0004) (Edit)
	TEnumAsByte<ESwitchToWeapon>                       eWeapon;                                                  // 0x00F0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SelectWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetAnimNodeBlend
// 0x0018 (0x0104 - 0x00EC)
class UBioSeqAct_SetAnimNodeBlend : public USequenceAction
{
public:
	float                                              fWeight;                                                  // 0x00EC(0x0004) (Edit)
	float                                              fBlendTime;                                               // 0x00F0(0x0004) (Edit)
	int                                                nTargetChild;                                             // 0x00F4(0x0004) (Edit)
	struct FName                                       nmTargetNode;                                             // 0x00F8(0x0008) (Edit)
	class ABioPawn*                                    oPawn;                                                    // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetAnimNodeBlend");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetCameraToBone
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetCameraToBone : public USequenceAction
{
public:
	unsigned long                                      m_bRestoreCamera : 1;                                     // 0x00EC(0x0004) (Edit)
	float                                              m_fFOV;                                                   // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetCameraToBone");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetEnvironmentEffectIntensity
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetEnvironmentEffectIntensity : public USequenceAction
{
public:
	float                                              m_fIntensity;                                             // 0x00EC(0x0004) (Edit)
	float                                              m_fBlendTime;                                             // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetEnvironmentEffectIntensity");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetExploreCameraRotation
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_SetExploreCameraRotation : public USequenceAction
{
public:
	class AActor*                                      oTarget;                                                  // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetExploreCameraRotation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetGestureMode
// 0x000D (0x00F9 - 0x00EC)
class UBioSeqAct_SetGestureMode : public USequenceAction
{
public:
	TArray<struct FString>                             ActorTags;                                                // 0x00EC(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EBioSetGestureModes>                   GestureMode;                                              // 0x00F8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetGestureMode");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetLightEnvQuality
// 0x0001 (0x00ED - 0x00EC)
class UBioSeqAct_SetLightEnvQuality : public USequenceAction
{
public:
	TEnumAsByte<ELightEnvironmentQuality>              eQuality;                                                 // 0x00EC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetLightEnvQuality");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetNodeLength
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetNodeLength : public USequenceAction
{
public:
	float                                              m_fNodeLength;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      m_bChangePCNodeIfBetweenNodes : 1;                        // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetNodeLength");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetSkelControl
// 0x001C (0x0108 - 0x00EC)
class UBioSeqAct_SetSkelControl : public USequenceAction
{
public:
	float                                              fStrengthTarget;                                          // 0x00EC(0x0004) (Edit)
	unsigned long                                      bSetStrengthFromAnimNode : 1;                             // 0x00F0(0x0004) (Edit)
	float                                              fBlendInTime;                                             // 0x00F4(0x0004) (Edit)
	float                                              fBlendOutTime;                                            // 0x00F8(0x0004) (Edit)
	struct FName                                       nmTargetController;                                       // 0x00FC(0x0008) (Edit)
	class ABioPawn*                                    oPawn;                                                    // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetSkelControl");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetStreamingState
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_SetStreamingState : public USequenceAction
{
public:
	struct FName                                       StateName;                                                // 0x00EC(0x0008) (Edit)
	unsigned long                                      NewValue : 1;                                             // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetStreamingState");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetSuperMode
// 0x000D (0x00F9 - 0x00EC)
class UBioSeqAct_SetSuperMode : public USequenceAction
{
public:
	TArray<class ABioPawn*>                            m_aoPawn;                                                 // 0x00EC(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EModes>                                m_eMode;                                                  // 0x00F8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetSuperMode");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetSuperModeWithWeapon
// 0x000F (0x0108 - 0x00F9)
class UBioSeqAct_SetSuperModeWithWeapon : public UBioSeqAct_SetSuperMode
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                nTweedleDee;                                              // 0x00FC(0x0004)
	TEnumAsByte<ESwitchToWeapon>                       eWeapon;                                                  // 0x0100(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	int                                                nTweedleDum;                                              // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetSuperModeWithWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetWeapon
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_SetWeapon : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                                    // 0x00EC(0x0004) (Edit)
	TEnumAsByte<ESwitchToWeapon>                       eWeapon;                                                  // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	int                                                nWeapon;                                                  // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ShouldShowSplashSequence
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ShouldShowSplashSequence : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShouldShowSplashSequence");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ShowCredits
// 0x0010 (0x0110 - 0x0100)
class UBioSeqAct_ShowCredits : public UBioSequenceLatentAction
{
public:
	struct FString                                     m_sCreditsResource;                                       // 0x0100(0x000C) (Config, NeedCtorLink)
	class UBioSWF*                                     m_oCreditsReferenced;                                     // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowCredits");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowIntroText
// 0x0014 (0x0114 - 0x0100)
class UBioSeqAct_ShowIntroText : public UBioSequenceLatentAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0100(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_ShowIntroText.srText
	struct FString                                     m_sIntroTextResource;                                     // 0x0104(0x000C) (Config, NeedCtorLink)
	class UBioSWF*                                     m_oIntroTextReferenced;                                   // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowIntroText");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowMainMenu
// 0x0024 (0x0110 - 0x00EC)
class UBioSeqAct_ShowMainMenu : public USequenceAction
{
public:
	TArray<struct FString>                             m_lstMainMenuResources;                                   // 0x00EC(0x000C) (Config, NeedCtorLink)
	TArray<class UBioSWF*>                             m_lstMainMenuReferenced;                                  // 0x00F8(0x000C) (NeedCtorLink)
	TArray<class UObject*>                             m_aReferencedObjects;                                     // 0x0104(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowMainMenu");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowMessageBox
// 0x0028 (0x0114 - 0x00EC)
class UBioSeqAct_ShowMessageBox : public USequenceAction
{
public:
	TArray<struct FString>                             sVariableLines;                                           // 0x00EC(0x000C) (NeedCtorLink)
	TArray<struct FString>                             sMessageLines;                                            // 0x00F8(0x000C) (Edit, NeedCtorLink)
	struct FColor                                      m_colorForeground;                                        // 0x0104(0x0004) (Edit)
	struct FColor                                      m_colorBackground;                                        // 0x0108(0x0004) (Edit)
	class UFont*                                       m_font;                                                   // 0x010C(0x0004) (Edit)
	unsigned long                                      m_isActivated : 1;                                        // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowMessageBox");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ShowPartySelectionGUI
// 0x0010 (0x0110 - 0x0100)
class UBioSeqAct_ShowPartySelectionGUI : public UBioSequenceLatentAction
{
public:
	struct FString                                     m_sPartySelectResource;                                   // 0x0100(0x000C) (Config, NeedCtorLink)
	class UBioSWF*                                     m_oPartySelectGuiReferenced;                              // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowPartySelectionGUI");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowSpecialization
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_ShowSpecialization : public USequenceAction
{
public:
	struct FString                                     m_sSpecializationResource;                                // 0x00EC(0x000C) (Config, NeedCtorLink)
	class UBioSWF*                                     m_oSpecializationGuiReferenced;                           // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowSpecialization");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowSplash
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ShowSplash : public USequenceAction
{
public:
	unsigned long                                      bShowLegal : 1;                                           // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowSplash");
		return ptr;
	}


	void Activated();
	void FakeActivate();
};


// Class BIOC_Base.BioSeqAct_SkillGame
// 0x0034 (0x0130 - 0x00FC)
class UBioSeqAct_SkillGame : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00FC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_SkillGame.m_GameMessageSuccess
	unsigned char                                      UnknownData01[0x4];                                       // 0x0100(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_SkillGame.m_GameMessageFailure
	unsigned char                                      UnknownData02[0x4];                                       // 0x0104(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_SkillGame.m_GameMessageDuringGame
	unsigned char                                      UnknownData03[0x4];                                       // 0x0108(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_SkillGame.m_preGameButtonAText
	unsigned char                                      UnknownData04[0x4];                                       // 0x010C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_SkillGame.m_preGameButtonBText
	unsigned char                                      UnknownData05[0x4];                                       // 0x0110(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_SkillGame.m_preGameButtonXText
	unsigned long                                      m_bDoNotUseSalvage : 1;                                   // 0x0114(0x0004) (Edit)
	unsigned long                                      m_Completed : 1;                                          // 0x0114(0x0004)
	unsigned long                                      m_bSkillGameFailed : 1;                                   // 0x0114(0x0004) (Edit)
	TEnumAsByte<ECustomSkillGameComplete>              m_CompletionState;                                        // 0x0118(0x0001)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	int                                                m_nNumberOfButtons;                                       // 0x011C(0x0004) (Edit)
	float                                              m_fButtonTimeout;                                         // 0x0120(0x0004) (Edit)
	float                                              m_fButtonStartDelay;                                      // 0x0124(0x0004) (Edit)
	int                                                m_nMinSalvage;                                            // 0x0128(0x0004) (Edit)
	int                                                m_nMaxSalvage;                                            // 0x012C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SkillGame");
		return ptr;
	}


	void GrantCustomGameXp(class ABioWorldInfo* oBWorldInfo);
	void OnCancel();
	void OnFailure(int i_salvage);
	void OnSuccess(int i_salvage);
};


// Class BIOC_Base.BioSeqAct_SoundGroupPitch
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_SoundGroupPitch : public USequenceAction
{
public:
	struct FName                                       m_sSoundGroupName;                                        // 0x00EC(0x0008) (Edit)
	float                                              m_fNewPitch;                                              // 0x00F4(0x0004) (Edit)
	unsigned long                                      m_bHasBeenSet : 1;                                        // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SoundGroupPitch");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SoundGroupVolume
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_SoundGroupVolume : public USequenceAction
{
public:
	struct FName                                       SoundGroupName;                                           // 0x00EC(0x0008) (Edit)
	float                                              TargetVolume;                                             // 0x00F4(0x0004) (Edit)
	float                                              FadeDuration;                                             // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SoundGroupVolume");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SpawnHenchman
// 0x0018 (0x0104 - 0x00EC)
class UBioSeqAct_SpawnHenchman : public USequenceAction
{
public:
	class AActor*                                      m_locationAsActor;                                        // 0x00EC(0x0004) (Const)
	unsigned long                                      bSpawnOnLeft : 1;                                         // 0x00F0(0x0004) (Edit)
	float                                              m_rearOffsetMagnitude;                                    // 0x00F4(0x0004) (Edit)
	float                                              m_sidewaysOffsetMagnitude;                                // 0x00F8(0x0004) (Edit)
	struct FName                                       m_henchmanTag;                                            // 0x00FC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SpawnHenchman");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SpawnTacticalArrow
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_SpawnTacticalArrow : public USequenceAction
{
public:
	class AActor*                                      oLocation;                                                // 0x00EC(0x0004) (Edit)
	class AActor*                                      m_oTacticalMarker;                                        // 0x00F0(0x0004)
	class UClass*                                      m_clsTacticalMarker;                                      // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SpawnTacticalArrow");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SquadStartHoldingPosition
// 0x001C (0x011C - 0x0100)
class UBioSeqAct_SquadStartHoldingPosition : public UBioSequenceLatentAction
{
public:
	TArray<class ABioSquadHoldMarker*>                 m_aoHoldMarkers;                                          // 0x0100(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bLeaderHoldPosition : 1;                                // 0x010C(0x0004) (Edit)
	float                                              m_fTimeOut;                                               // 0x0110(0x0004) (Edit)
	float                                              m_fCountDown;                                             // 0x0114(0x0004)
	class ABioBaseSquad*                               m_oSquad;                                                 // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SquadStartHoldingPosition");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_StageSwitchCamera
// 0x0018 (0x0118 - 0x0100)
class UBioSeqAct_StageSwitchCamera : public UBioSequenceLatentAction
{
public:
	unsigned long                                      useForNextCamera : 1;                                     // 0x0100(0x0004) (Edit)
	unsigned long                                      forceCrossingLineOfAction : 1;                            // 0x0100(0x0004) (Edit)
	unsigned long                                      saveOldCameraData : 1;                                    // 0x0100(0x0004) (Edit)
	struct FName                                       explicitCamera;                                           // 0x0104(0x0008) (Edit)
	int                                                Intimacy;                                                 // 0x010C(0x0004) (Edit)
	TEnumAsByte<EBioCommonStageCameras>                standardCamera;                                           // 0x0110(0x0001) (Edit)
	TEnumAsByte<EBioAutoSet>                           Camera;                                                   // 0x0111(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0112(0x0002) MISSED OFFSET
	class ABioStage*                                   Stage;                                                    // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_StageSwitchCamera");
		return ptr;
	}


	int BioGetCameraNumber();
};


// Class BIOC_Base.BioSeqAct_StartConversation
// 0x0014 (0x0114 - 0x0100)
class UBioSeqAct_StartConversation : public UBioSequenceLatentAction
{
public:
	class UBioConversation*                            Conv;                                                     // 0x0100(0x0004) (Edit)
	unsigned long                                      setTargetBusyForDuration : 1;                             // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bPassiveConversation : 1;                               // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bNoGestures : 1;                                        // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bLookAtActive : 1;                                      // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bDisableMovieMode : 1;                                  // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                          // 0x0104(0x0004) (Edit)
	class AActor*                                      m_oOwner;                                                 // 0x0108(0x0004) (Transient)
	unsigned long                                      m_bConvReRunDetected : 1;                                 // 0x010C(0x0004) (Transient)
	unsigned long                                      m_bPreLoading : 1;                                        // 0x010C(0x0004) (Transient)
	unsigned long                                      m_bPlayRequested : 1;                                     // 0x010C(0x0004) (Transient)
	float                                              m_fInterruptRange;                                        // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_StartConversation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_StatLog
// 0x0020 (0x010C - 0x00EC)
class UBioSeqAct_StatLog : public USequenceAction
{
public:
	unsigned long                                      m_bShouldDeactivate : 1;                                  // 0x00EC(0x0004) (Transient)
	unsigned long                                      m_bIsInitialized : 1;                                     // 0x00EC(0x0004) (Transient)
	struct FPointer                                    m_pGroup;                                                 // 0x00F0(0x0004) (Const, Native)
	unsigned long                                      bIncludeObjComment : 1;                                   // 0x00F4(0x0004) (Edit)
	TEnumAsByte<EBioStatGroup>                         m_StatGroup;                                              // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	struct FString                                     m_sFileName;                                              // 0x00FC(0x000C) (Edit, NeedCtorLink)
	int                                                m_iRepeats;                                               // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_StatLog");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_StopLoadingMovie
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_StopLoadingMovie : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_StopLoadingMovie");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_TeleportToObject
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_TeleportToObject : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                                 // 0x00EC(0x0004) (Edit)
	class AActor*                                      m_oTarget;                                                // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bUseTargetOrientation : 1;                              // 0x00F4(0x0004) (Edit)
	unsigned long                                      m_bDisableCollision : 1;                                  // 0x00F4(0x0004) (Edit)
	unsigned long                                      m_bDisablePhysics : 1;                                    // 0x00F4(0x0004) (Edit)
	unsigned long                                      m_bSnapToFloor : 1;                                       // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_TeleportToObject");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_Term_AllActionsComplete
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_Term_AllActionsComplete : public USequenceAction
{
public:
	class AActor*                                      oInstigator;                                              // 0x00EC(0x0004) (Edit)
	class ABioPawn*                                    oWho;                                                     // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Term_AllActionsComplete");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_Term_NoLongerSeePlayer
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_Term_NoLongerSeePlayer : public USequenceAction
{
public:
	class ABioPawn*                                    oInstigator;                                              // 0x00EC(0x0004) (Edit)
	class ABioPawn*                                    oWho;                                                     // 0x00F0(0x0004) (Edit)
	class AActor*                                      oData;                                                    // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Term_NoLongerSeePlayer");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_Term_SeePlayer
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_Term_SeePlayer : public USequenceAction
{
public:
	class ABioPawn*                                    oInstigator;                                              // 0x00EC(0x0004) (Edit)
	class ABioPawn*                                    oWho;                                                     // 0x00F0(0x0004) (Edit)
	class AActor*                                      oData;                                                    // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Term_SeePlayer");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ThrowGrenadeAt
// 0x0024 (0x0124 - 0x0100)
class UBioSeqAct_ThrowGrenadeAt : public UBioSequenceLatentStateAction
{
public:
	class ABioPawn*                                    oPawn;                                                    // 0x0100(0x0004) (Edit)
	class APawn*                                       oTarget;                                                  // 0x0104(0x0004) (Edit)
	struct FVector                                     vTarget;                                                  // 0x0108(0x000C) (Edit)
	int                                                nGrenadeType;                                             // 0x0114(0x0004)
	unsigned long                                      m_bDone : 1;                                              // 0x0118(0x0004)
	int                                                m_nReason;                                                // 0x011C(0x0004)
	int                                                nCompletionReason;                                        // 0x0120(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ThrowGrenadeAt");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ToggleLightEnv
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ToggleLightEnv : public USeqAct_Toggle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ToggleLightEnv");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ToggleSidebarVisibility
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ToggleSidebarVisibility : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ToggleSidebarVisibility");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_TurnTowards
// 0x001C (0x011C - 0x0100)
class UBioSeqAct_TurnTowards : public UBioSequenceLatentAction
{
public:
	class AActor*                                      oTurnActor;                                               // 0x0100(0x0004) (Edit)
	class AActor*                                      oTarget;                                                  // 0x0104(0x0004) (Edit)
	unsigned long                                      bForce : 1;                                               // 0x0108(0x0004) (Edit)
	struct FRotator                                    rDesiredRot;                                              // 0x010C(0x000C) (Transient)
	unsigned long                                      bStarted : 1;                                             // 0x0118(0x0004) (Transient)
	unsigned long                                      bFailedToStart : 1;                                       // 0x0118(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_TurnTowards");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_UnLockTarget
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_UnLockTarget : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                                    // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_UnLockTarget");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_UpdateEndGameStats
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_UpdateEndGameStats : public USequenceAction
{
public:
	unsigned long                                      m_bLogStats : 1;                                          // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_UpdateEndGameStats");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_UpgradeVehicle
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_UpgradeVehicle : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_UpgradeVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_UseArtPlaceable
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_UseArtPlaceable : public USequenceAction
{
public:
	class AActor*                                      oWho;                                                     // 0x00EC(0x0004) (Edit)
	class ABioArtPlaceable*                            oArtPlaceable;                                            // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_UseArtPlaceable");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_UseCover
// 0x0024 (0x0124 - 0x0100)
class UBioSeqAct_UseCover : public UBioSequenceLatentStateAction
{
public:
	class ABioPawn*                                    m_oPawn;                                                  // 0x0100(0x0004) (Edit)
	class AActor*                                      m_oCoverObject;                                           // 0x0104(0x0004) (Edit)
	int                                                m_nSlotID;                                                // 0x0108(0x0004) (Edit)
	TArray<class AActor*>                              m_oCoverFromObjects;                                      // 0x010C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bCheckPerceptionWhileUsingCover : 1;                    // 0x0118(0x0004) (Edit)
	unsigned long                                      m_bDone : 1;                                              // 0x0118(0x0004)
	int                                                nCompletionReason;                                        // 0x011C(0x0004)
	int                                                m_nReason;                                                // 0x0120(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_UseCover");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_UsePowerOn
// 0x002C (0x012C - 0x0100)
class UBioSeqAct_UsePowerOn : public UBioSequenceLatentAction
{
public:
	class APawn*                                       oPawn;                                                    // 0x0100(0x0004) (Edit)
	struct FName                                       nmPower;                                                  // 0x0104(0x0008)
	TEnumAsByte<EBioAutoSet>                           ePower;                                                   // 0x010C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	class AActor*                                      oTarget;                                                  // 0x0110(0x0004) (Edit)
	float                                              fReqStab;                                                 // 0x0114(0x0004) (Edit)
	float                                              fTimeOut;                                                 // 0x0118(0x0004) (Edit)
	int                                                nCompletionReason;                                        // 0x011C(0x0004)
	unsigned long                                      m_bDone : 1;                                              // 0x0120(0x0004)
	int                                                m_nReason;                                                // 0x0124(0x0004)
	class UBio2DA*                                     m_oPower2DA;                                              // 0x0128(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_UsePowerOn");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_WalkWaypointSet
// 0x001C (0x011C - 0x0100)
class UBioSeqAct_WalkWaypointSet : public UBioSequenceLatentStateAction
{
public:
	class ABioWaypointSet*                             m_oWaypointSet;                                           // 0x0100(0x0004) (Edit)
	unsigned long                                      m_bStartAtNearestPoint : 1;                               // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bWalking : 1;                                           // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bCountingUp : 1;                                        // 0x0104(0x0004) (Edit)
	TEnumAsByte<EeWalkWaypointsTypes>                  m_eWalkType;                                              // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	float                                              m_fMoveTolerance;                                         // 0x010C(0x0004) (Edit)
	int                                                m_nNextWaypoint;                                          // 0x0110(0x0004) (Edit)
	unsigned long                                      m_bDone : 1;                                              // 0x0114(0x0004) (Transient)
	int                                                nCompletionReason;                                        // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_WalkWaypointSet");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqCond_CheckChunkStatus
// 0x0001 (0x00D5 - 0x00D4)
class UBioSeqCond_CheckChunkStatus : public USequenceCondition
{
public:
	TEnumAsByte<EBioSeqCondCheckChunkStatusCriteria>   eCriteria;                                                // 0x00D4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqCond_CheckChunkStatus");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqCond_InCombat
// 0x0000 (0x00D4 - 0x00D4)
class UBioSeqCond_InCombat : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqCond_InCombat");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqCond_IsDriving
// 0x0000 (0x00D4 - 0x00D4)
class UBioSeqCond_IsDriving : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqCond_IsDriving");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData
// 0x001C (0x0058 - 0x003C)
class UBioSeqData : public UObject
{
public:
	struct FName                                       StateName;                                                // 0x003C(0x0008)
	int                                                ResourcesNeeded;                                          // 0x0044(0x0004)
	struct FPointer                                    KismetActionCallbackThis;                                 // 0x0048(0x0004) (Native)
	struct FFuncPointer                                KismetActionCallback;                                     // 0x004C(0x0004) (Const, Native)
	TEnumAsByte<EeCompletionEventType>                 m_eCompletionType;                                        // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                m_nCompletionReason;                                      // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData");
		return ptr;
	}


	void OnDisabled(class ABioAiController* oController, bool bStarted);
	bool CanDisable(class ABioAiController* oController, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	struct FString GetDebugDescription();
	bool CancelOnLOS(class ABioAiController* oController, class APawn* oLOSTarget);
	void OnCancel(class ABioAiController* oController, bool bStarted);
	void OnStart(class ABioAiController* oController);
	bool CanCancel(class ABioAiController* oController);
	bool OnTick(class ABioAiController* oController, float fDeltaT);
	class UBioEpicPawnBehavior* GetPawnBehavior(class AActor* oActor);
	void DoCallBack(int nReason);
};


// Class BIOC_Base.BioSeqData_ActionBase
// 0x0000 (0x0058 - 0x0058)
class UBioSeqData_ActionBase : public UBioSeqData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_ActionBase");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_BehaviorBase
// 0x0000 (0x0058 - 0x0058)
class UBioSeqData_BehaviorBase : public UBioSeqData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_BehaviorBase");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_CombatMode
// 0x0000 (0x0058 - 0x0058)
class UBioSeqData_CombatMode : public UBioSeqData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_CombatMode");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_DEBUGInfo
// 0x0080 (0x00D8 - 0x0058)
class UBioSeqData_DEBUGInfo : public UBioSeqData
{
public:
	unsigned long                                      m_bProfileAIActions : 1;                                  // 0x0058(0x0004)
	unsigned long                                      m_bProfilePerception : 1;                                 // 0x0058(0x0004)
	unsigned long                                      m_bPlayerAutoTarget : 1;                                  // 0x0058(0x0004)
	unsigned long                                      m_bAutoTarget : 1;                                        // 0x0058(0x0004)
	struct FAvoidanceLocationsArray                    CurrentAvoid;                                             // 0x005C(0x0034) (NeedCtorLink)
	TArray<struct FAvoidanceLocationsArray>            m_aAvoidanceObsticals;                                    // 0x0090(0x000C) (NeedCtorLink)
	TArray<struct FLastCompletionRecords>              m_ActionCompleteMovementList;                             // 0x009C(0x000C) (NeedCtorLink)
	TArray<struct FLastCompletionRecords>              m_ActionCompleteCombatList;                               // 0x00A8(0x000C) (NeedCtorLink)
	class AActor*                                      m_oProfileTarget;                                         // 0x00B4(0x0004)
	class AActor*                                      m_oSightToTarget;                                         // 0x00B8(0x0004)
	TArray<struct FLOSLinesRecord>                     m_aoLOsLines;                                             // 0x00BC(0x000C) (NeedCtorLink)
	TArray<struct FVector>                             m_aoBoundLines;                                           // 0x00C8(0x000C) (NeedCtorLink)
	class UBioActorBehavior*                           m_oPlayerBehaviour;                                       // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_DEBUGInfo");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_Delay
// 0x0004 (0x005C - 0x0058)
class UBioSeqData_Delay : public UBioSeqData
{
public:
	float                                              m_fTimeToWait;                                            // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_Delay");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_StateBase
// 0x0000 (0x0058 - 0x0058)
class UBioSeqData_StateBase : public UBioSeqData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_StateBase");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_DoWorldInteraction
// 0x0011 (0x0069 - 0x0058)
class UBioSeqData_DoWorldInteraction : public UBioSeqData_StateBase
{
public:
	class ABioWp_ActionStation*                        WI_Station;                                               // 0x0058(0x0004) (Edit)
	TArray<class UBioActivityTiming*>                  Activities;                                               // 0x005C(0x000C) (Edit, NeedCtorLink, EditInline)
	TEnumAsByte<EWI_Mode>                              m_Mode;                                                   // 0x0068(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_DoWorldInteraction");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_MobTarget
// 0x0008 (0x0060 - 0x0058)
class UBioSeqData_MobTarget : public UBioSeqData_StateBase
{
public:
	class AActor*                                      MoveTarget;                                               // 0x0058(0x0004)
	float                                              MoveTolerance;                                            // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_MobTarget");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_MoveAndAttack
// 0x001C (0x0074 - 0x0058)
class UBioSeqData_MoveAndAttack : public UBioSeqData
{
public:
	class AActor*                                      oTarget;                                                  // 0x0058(0x0004) (Edit)
	unsigned long                                      bWalk : 1;                                                // 0x005C(0x0004) (Edit)
	unsigned long                                      bUseMobMovement : 1;                                      // 0x005C(0x0004) (Edit)
	class AActor*                                      oAttackTarget;                                            // 0x0060(0x0004) (Edit)
	class UBioCapability*                              oCapability;                                              // 0x0064(0x0004) (Edit)
	float                                              fReqStabilityRatio;                                       // 0x0068(0x0004) (Edit)
	float                                              fAbortStabilityRatio;                                     // 0x006C(0x0004) (Edit)
	float                                              fTimeOut;                                                 // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_MoveAndAttack");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_MoveOutOfPawnsWay
// 0x0000 (0x0058 - 0x0058)
class UBioSeqData_MoveOutOfPawnsWay : public UBioSeqData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_MoveOutOfPawnsWay");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_MoveToObject
// 0x000C (0x0064 - 0x0058)
class UBioSeqData_MoveToObject : public UBioSeqData_StateBase
{
public:
	class AActor*                                      MoveTarget;                                               // 0x0058(0x0004)
	float                                              MoveTolerance;                                            // 0x005C(0x0004) (Edit)
	unsigned long                                      bWalking : 1;                                             // 0x0060(0x0004) (Edit)
	unsigned long                                      Terminate : 1;                                            // 0x0060(0x0004)
	unsigned long                                      bRequiresPrecisionMovement : 1;                           // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_MoveToObject");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_MoveToPoint
// 0x0014 (0x006C - 0x0058)
class UBioSeqData_MoveToPoint : public UBioSeqData_StateBase
{
public:
	struct FVector                                     MoveTarget;                                               // 0x0058(0x000C) (Edit)
	float                                              MoveTolerance;                                            // 0x0064(0x0004) (Edit)
	unsigned long                                      bWalking : 1;                                             // 0x0068(0x0004) (Edit)
	unsigned long                                      Terminate : 1;                                            // 0x0068(0x0004)
	unsigned long                                      m_bReset : 1;                                             // 0x0068(0x0004)
	unsigned long                                      bRequiresPrecisionMovement : 1;                           // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_MoveToPoint");
		return ptr;
	}


	void ResetMoveTarget(const struct FVector& vNewLocation, float fMoveTolerance);
};


// Class BIOC_Base.BioSeqData_MoveToPointList
// 0x0014 (0x006C - 0x0058)
class UBioSeqData_MoveToPointList : public UBioSeqData_StateBase
{
public:
	TArray<struct FVector>                             m_aMoveTargets;                                           // 0x0058(0x000C) (Edit, NeedCtorLink)
	float                                              m_fMoveTolerance;                                         // 0x0064(0x0004) (Edit)
	unsigned long                                      m_bWalking : 1;                                           // 0x0068(0x0004) (Edit)
	unsigned long                                      Terminate : 1;                                            // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_MoveToPointList");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_PartyLookForAndUseCover
// 0x0030 (0x0088 - 0x0058)
class UBioSeqData_PartyLookForAndUseCover : public UBioSeqData
{
public:
	TArray<class AActor*>                              aoCoverFrom;                                              // 0x0058(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        aoCoverFromRank;                                          // 0x0064(0x000C) (Edit, NeedCtorLink)
	struct FCoverRecord                                oCoverInfo;                                               // 0x0070(0x0014) (Edit)
	unsigned long                                      m_bHasFoundCover : 1;                                     // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_PartyLookForAndUseCover");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_PlayAnimation
// 0x0020 (0x0078 - 0x0058)
class UBioSeqData_PlayAnimation : public UBioSeqData_StateBase
{
public:
	TArray<class UAnimSet*>                            AnimationSets;                                            // 0x0058(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               Animation;                                                // 0x0064(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      Looping : 1;                                              // 0x0070(0x0004) (Edit)
	unsigned long                                      Random : 1;                                               // 0x0070(0x0004) (Edit)
	int                                                CurrentAnimation;                                         // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_PlayAnimation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_QueueDelay
// 0x0008 (0x0060 - 0x0058)
class UBioSeqData_QueueDelay : public UBioSeqData_ActionBase
{
public:
	float                                              m_fDelay;                                                 // 0x0058(0x0004) (Edit)
	float                                              m_fTimeCount;                                             // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_QueueDelay");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_RandomWalk
// 0x0014 (0x006C - 0x0058)
class UBioSeqData_RandomWalk : public UBioSeqData_StateBase
{
public:
	int                                                m_nMaxWalkDistance;                                       // 0x0058(0x0004) (Edit)
	float                                              m_fDelayAfterWalk;                                        // 0x005C(0x0004) (Edit)
	struct FVector                                     m_vDestination;                                           // 0x0060(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_RandomWalk");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_SelectWeapon
// 0x0008 (0x0060 - 0x0058)
class UBioSeqData_SelectWeapon : public UBioSeqData_ActionBase
{
public:
	TEnumAsByte<ESwitchToWeapon>                       nNewWeapon;                                               // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned long                                      m_bStartedSwitch : 1;                                     // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_SelectWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_StartConversation
// 0x0008 (0x0060 - 0x0058)
class UBioSeqData_StartConversation : public UBioSeqData_StateBase
{
public:
	class AActor*                                      m_oOwner;                                                 // 0x0058(0x0004)
	class UBioConversation*                            m_oConversation;                                          // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_StartConversation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_StartFiring
// 0x001C (0x0074 - 0x0058)
class UBioSeqData_StartFiring : public UBioSeqData_ActionBase
{
public:
	class AActor*                                      oTarget;                                                  // 0x0058(0x0004) (Edit)
	float                                              fReqStabilityRatio;                                       // 0x005C(0x0004) (Edit)
	float                                              fAbortStabilityRatio;                                     // 0x0060(0x0004) (Edit)
	float                                              fTimeOut;                                                 // 0x0064(0x0004) (Edit)
	unsigned long                                      m_bStartedFiring : 1;                                     // 0x0068(0x0004)
	unsigned long                                      m_bLOS : 1;                                               // 0x0068(0x0004)
	unsigned long                                      m_bInCoverAtStart : 1;                                    // 0x0068(0x0004)
	unsigned long                                      m_bIgnorePerceptionCheck : 1;                             // 0x0068(0x0004)
	struct FName                                       m_nmTechique;                                             // 0x006C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_StartFiring");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_TempLookAt_Action
// 0x001C (0x0074 - 0x0058)
class UBioSeqData_TempLookAt_Action : public UBioSeqData_BehaviorBase
{
public:
	class AActor*                                      oGoal;                                                    // 0x0058(0x0004) (Edit)
	struct FVector                                     vPoint;                                                   // 0x005C(0x000C) (Edit)
	struct FVector                                     vRelitivePoint;                                           // 0x0068(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_TempLookAt_Action");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_ThrowGrenade
// 0x0018 (0x0070 - 0x0058)
class UBioSeqData_ThrowGrenade : public UBioSeqData_ActionBase
{
public:
	struct FVector                                     vTarget;                                                  // 0x0058(0x000C) (Edit)
	class AActor*                                      oTarget;                                                  // 0x0064(0x0004) (Edit)
	int                                                nGrenadeType;                                             // 0x0068(0x0004) (Edit)
	unsigned long                                      bStartThrow : 1;                                          // 0x006C(0x0004)
	unsigned long                                      bTerminate_LostLOS : 1;                                   // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_ThrowGrenade");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_UseArtPlaceable
// 0x0008 (0x0060 - 0x0058)
class UBioSeqData_UseArtPlaceable : public UBioSeqData_BehaviorBase
{
public:
	class ABioArtPlaceable*                            oAPToUse;                                                 // 0x0058(0x0004) (Edit)
	unsigned long                                      bWalkToAP : 1;                                            // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_UseArtPlaceable");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_UseArtPlaceable_Action
// 0x0008 (0x0060 - 0x0058)
class UBioSeqData_UseArtPlaceable_Action : public UBioSeqData_ActionBase
{
public:
	class ABioArtPlaceable*                            oTarget;                                                  // 0x0058(0x0004) (Edit)
	unsigned long                                      m_bStartUse : 1;                                          // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_UseArtPlaceable_Action");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_UseCover
// 0x0018 (0x0070 - 0x0058)
class UBioSeqData_UseCover : public UBioSeqData_StateBase
{
public:
	class UBioCoverInterface*                          oCoverObject;                                             // 0x0058(0x0004) (Edit)
	unsigned long                                      m_bIsInCover : 1;                                         // 0x005C(0x0004)
	struct FVector                                     m_vHidingLocation;                                        // 0x0060(0x000C)
	unsigned long                                      m_bTerminateCover : 1;                                    // 0x006C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_UseCover");
		return ptr;
	}


	bool GetCrouchByCoverType(int SlotIdx);
	void Empty();
	void UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll);
	bool Claim(class AController* NewClaim, int SlotIdx);
	void UpdateHideLocation(class ABioPawn* pPawn, int SlotIdx);
};


// Class BIOC_Base.BioSeqData_UsePower
// 0x0024 (0x007C - 0x0058)
class UBioSeqData_UsePower : public UBioSeqData_ActionBase
{
public:
	struct FName                                       nmPowerName;                                              // 0x0058(0x0008) (Edit)
	class AActor*                                      oTarget;                                                  // 0x0060(0x0004) (Edit)
	float                                              fTimeOut;                                                 // 0x0064(0x0004) (Edit)
	struct FVector                                     vTarget;                                                  // 0x0068(0x000C)
	unsigned long                                      m_bStartedCasting : 1;                                    // 0x0074(0x0004)
	unsigned long                                      m_bAcquiredActive : 1;                                    // 0x0074(0x0004)
	unsigned long                                      m_bLOS : 1;                                               // 0x0074(0x0004)
	unsigned long                                      m_bOrderedByPlayer : 1;                                   // 0x0074(0x0004)
	class UBioPower*                                   m_oPowerCache;                                            // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_UsePower");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqData_WalkWaypoints
// 0x0015 (0x006D - 0x0058)
class UBioSeqData_WalkWaypoints : public UBioSeqData_StateBase
{
public:
	class ABioWaypointSet*                             m_oWaypointSet;                                           // 0x0058(0x0004)
	class AActor*                                      m_oMoveTarget;                                            // 0x005C(0x0004)
	int                                                m_nNextWaypoint;                                          // 0x0060(0x0004) (Edit)
	unsigned long                                      m_bCountingUp : 1;                                        // 0x0064(0x0004) (Edit)
	unsigned long                                      m_bResumeWalking : 1;                                     // 0x0064(0x0004) (Edit)
	unsigned long                                      m_bWalking : 1;                                           // 0x0064(0x0004) (Edit)
	unsigned long                                      m_bDone : 1;                                              // 0x0064(0x0004) (Edit)
	unsigned long                                      m_bPaused : 1;                                            // 0x0064(0x0004) (Edit)
	float                                              m_fMoveTolerance;                                         // 0x0068(0x0004) (Edit)
	TEnumAsByte<EeWalkWaypointsTypes>                  m_eWalkType;                                              // 0x006C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqData_WalkWaypoints");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_AbilityDisabled
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_AbilityDisabled : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_AbilityDisabled");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_AbilityEnabled
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_AbilityEnabled : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_AbilityEnabled");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_AllActionsComplete
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_AllActionsComplete : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_AllActionsComplete");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_AreaMap
// 0x000C (0x0120 - 0x0114)
class UBioSeqEvt_AreaMap : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                                   // 0x0114(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_AreaMap");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_ArtPlaceableSkillGameFailed
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_ArtPlaceableSkillGameFailed : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_ArtPlaceableSkillGameFailed");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_ArtPlaceableSkillGameSuccess
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_ArtPlaceableSkillGameSuccess : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_ArtPlaceableSkillGameSuccess");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_BackgroundStreamingDone
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_BackgroundStreamingDone : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_BackgroundStreamingDone");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_CinematicSkipped
// 0x000C (0x0120 - 0x0114)
class UBioSeqEvt_CinematicSkipped : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                                   // 0x0114(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_CinematicSkipped");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_Conversation
// 0x0010 (0x0124 - 0x0114)
class UBioSeqEvt_Conversation : public USequenceEvent
{
public:
	TEnumAsByte<EConversationScriptType>               eScriptType;                                              // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	struct FName                                       sScriptName;                                              // 0x0118(0x0008) (Edit)
	class UBioConversation*                            Conv;                                                     // 0x0120(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_Conversation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_ConvNode
// 0x000C (0x0120 - 0x0114)
class UBioSeqEvt_ConvNode : public USequenceEvent
{
public:
	int                                                m_nNodeID;                                                // 0x0114(0x0004) (Edit)
	int                                                m_nConvResRefID;                                          // 0x0118(0x0004) (Edit)
	unsigned long                                      m_bSetWaitFlags : 1;                                      // 0x011C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_ConvNode");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_EnterFollowFormation
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_EnterFollowFormation : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_EnterFollowFormation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_EnterRestFormation
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_EnterRestFormation : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_EnterRestFormation");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_ForegroundStreamingDone
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_ForegroundStreamingDone : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_ForegroundStreamingDone");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_GalaxyMap
// 0x000C (0x0120 - 0x0114)
class UBioSeqEvt_GalaxyMap : public USequenceEvent
{
public:
	struct FString                                     sEvent;                                                   // 0x0114(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_GalaxyMap");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_LeaderChanged
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_LeaderChanged : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_LeaderChanged");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_MemberAdded
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_MemberAdded : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_MemberAdded");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_MemberRemoved
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_MemberRemoved : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_MemberRemoved");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_NoLongerSeePlayer
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_NoLongerSeePlayer : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_NoLongerSeePlayer");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnAttacked
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_OnAttacked : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnAttacked");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnCastAt
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_OnCastAt : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnCastAt");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnLookingAt
// 0x0001 (0x0115 - 0x0114)
class UBioSeqEvt_OnLookingAt : public USequenceEvent
{
public:
	TEnumAsByte<EeLookingAtType>                       m_eTriggerType;                                           // 0x0114(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnLookingAt");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnNotLookingAt
// 0x0001 (0x0115 - 0x0114)
class UBioSeqEvt_OnNotLookingAt : public USequenceEvent
{
public:
	TEnumAsByte<EeNotLookingAtType>                    m_eTriggerType;                                           // 0x0114(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnNotLookingAt");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnPlaceableStartMoving
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_OnPlaceableStartMoving : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnPlaceableStartMoving");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnPlaceableStopMoving
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_OnPlaceableStopMoving : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnPlaceableStopMoving");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnPlayerActivate
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_OnPlayerActivate : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnPlayerActivate");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_SeePlayer
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_SeePlayer : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_SeePlayer");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_VehicleEnter
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_VehicleEnter : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_VehicleEnter");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_VehicleExit
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_VehicleExit : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_VehicleExit");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_VehicleLeaveWorld
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_VehicleLeaveWorld : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_VehicleLeaveWorld");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqVar_ObjectFindByTag
// 0x0010 (0x00B4 - 0x00A4)
class UBioSeqVar_ObjectFindByTag : public USeqVar_Object
{
public:
	struct FString                                     m_sObjectTagToFind;                                       // 0x00A4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bSearchUniqueTag : 1;                                   // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqVar_ObjectFindByTag");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqVar_ObjectListFindByTag
// 0x000C (0x00BC - 0x00B0)
class UBioSeqVar_ObjectListFindByTag : public USeqVar_ObjectList
{
public:
	struct FString                                     m_sObjectTagToFind;                                       // 0x00B0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqVar_ObjectListFindByTag");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqVar_StoryManagerFloat
// 0x0028 (0x00CC - 0x00A4)
class UBioSeqVar_StoryManagerFloat : public USeqVar_Float
{
public:
	TEnumAsByte<EBioRegionAutoSet>                     Region;                                                   // 0x00A4(0x0001) (Edit)
	TEnumAsByte<EBioPlotAutoSet>                       Plot;                                                     // 0x00A5(0x0001) (Edit)
	TEnumAsByte<EBioAutoSet>                           Float;                                                    // 0x00A6(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00A7(0x0001) MISSED OFFSET
	int                                                m_nIndex;                                                 // 0x00A8(0x0004)
	struct FString                                     m_sVarName;                                               // 0x00AC(0x000C) (NeedCtorLink)
	int                                                m_nPrevRegionIndex;                                       // 0x00B8(0x0004)
	int                                                m_nPrevPlotIndex;                                         // 0x00BC(0x0004)
	struct FString                                     m_sRefName;                                               // 0x00C0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqVar_StoryManagerFloat");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqVar_StoryManagerInt
// 0x0028 (0x00CC - 0x00A4)
class UBioSeqVar_StoryManagerInt : public USeqVar_Int
{
public:
	TEnumAsByte<EBioRegionAutoSet>                     Region;                                                   // 0x00A4(0x0001) (Edit)
	TEnumAsByte<EBioPlotAutoSet>                       Plot;                                                     // 0x00A5(0x0001) (Edit)
	TEnumAsByte<EBioAutoSet>                           Int;                                                      // 0x00A6(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00A7(0x0001) MISSED OFFSET
	int                                                m_nIndex;                                                 // 0x00A8(0x0004)
	struct FString                                     m_sVarName;                                               // 0x00AC(0x000C) (NeedCtorLink)
	int                                                m_nPrevRegionIndex;                                       // 0x00B8(0x0004)
	int                                                m_nPrevPlotIndex;                                         // 0x00BC(0x0004)
	struct FString                                     m_sRefName;                                               // 0x00C0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqVar_StoryManagerInt");
		return ptr;
	}

};


// Class BIOC_Base.BioCurveDrivenParameter
// 0x0034 (0x0070 - 0x003C)
class UBioCurveDrivenParameter : public UObject
{
public:
	struct FString                                     sParameterName;                                           // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FName                                       nmParameterName;                                          // 0x0048(0x0008)
	unsigned long                                      bScaleToLifetime : 1;                                     // 0x0050(0x0004) (Edit)
	unsigned long                                      bLoop : 1;                                                // 0x0050(0x0004) (Edit)
	struct FRawDistributionFloat                       m_curve;                                                  // 0x0054(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCurveDrivenParameter");
		return ptr;
	}


	float GetValue(float fTime, float fScale);
};


// Class BIOC_Base.BioDecalComponent
// 0x00FC (0x03B4 - 0x02B8)
class UBioDecalComponent : public UDecalComponent
{
public:
	struct FRawDistributionFloat                       FadeInTime;                                               // 0x02B8(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FRawDistributionFloat                       FadeOutTime;                                              // 0x02D4(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FRawDistributionFloat                       DecalLifetime;                                            // 0x02F0(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FRawDistributionFloat                       DecalSize;                                                // 0x030C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FRawDistributionFloat                       DecalRoll;                                                // 0x0328(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FRawDistributionFloat                       DecalYaw;                                                 // 0x0344(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FRawDistributionFloat                       DecalPitch;                                               // 0x0360(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	unsigned long                                      bScaleByDistance : 1;                                     // 0x037C(0x0004) (Edit)
	unsigned long                                      bProjectOnShields : 1;                                    // 0x037C(0x0004) (Edit)
	TArray<class UBioCurveDrivenParameter*>            aDecalMaterialParameters;                                 // 0x0380(0x000C) (Edit, NeedCtorLink, EditInline)
	struct FRawDistributionFloat                       SizeScale;                                                // 0x038C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	class UMaterialInstanceConstant*                   m_MaterialInstance;                                       // 0x03A8(0x0004) (Transient)
	class USpotLightComponent*                         m_SkeletalDecal;                                          // 0x03AC(0x0004) (ExportObject, Transient, Component, EditInline)
	class USkeletalMeshComponent*                      m_SkeletalReceiver;                                       // 0x03B0(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDecalComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioDecalLifetimeAgeFadeInOut
// 0x0000 (0x0054 - 0x0054)
class UBioDecalLifetimeAgeFadeInOut : public UDecalLifetimeAge
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDecalLifetimeAgeFadeInOut");
		return ptr;
	}

};


// Class BIOC_Base.BioDecalLifetimeDataAgeFadeInOut
// 0x0010 (0x0060 - 0x0050)
class UBioDecalLifetimeDataAgeFadeInOut : public UDecalLifetimeDataAge
{
public:
	float                                              FadeInTime;                                               // 0x0050(0x0004)
	float                                              FadeOutTime;                                              // 0x0054(0x0004)
	unsigned long                                      bReused : 1;                                              // 0x0058(0x0004)
	class UParticleModuleColorOverLife*                ParticleColorModule;                                      // 0x005C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDecalLifetimeDataAgeFadeInOut");
		return ptr;
	}

};


// Class BIOC_Base.BioEffectsMaterialsPriorityMap
// 0x0010 (0x004C - 0x003C)
class UBioEffectsMaterialsPriorityMap : public UObject
{
public:
	TArray<struct FEffectMaterialPriority>             PriorityMap;                                              // 0x003C(0x000C) (Edit, EditConst, NeedCtorLink)
	class UBioEffectsMaterialsPriorityMap*             m_GlobalEffectsPriorityMap;                               // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEffectsMaterialsPriorityMap");
		return ptr;
	}

};


// Class BIOC_Base.BioGrenadeVFXAppearance
// 0x0000 (0x003C - 0x003C)
class UBioGrenadeVFXAppearance : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenadeVFXAppearance");
		return ptr;
	}

};


// Class BIOC_Base.BioMetaVFX
// 0x0018 (0x0054 - 0x003C)
class UBioMetaVFX : public UObject
{
public:
	TArray<class UBioVFXTemplate*>                     m_aCreatureVFXs;                                          // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<class UBioVFXTemplate*>                     m_aPlaceableVFXs;                                         // 0x0048(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMetaVFX");
		return ptr;
	}


	void STATIC_ApplyEffect(class UBioMetaVFX* MetaEffect, class UObject* Target, float fLifeTime);
	void STATIC_ApplyEffectByName(const struct FString& sEffect, class UObject* Target, float fLifeTime);
};


// Class BIOC_Base.BioPowerVFXAppearance
// 0x005C (0x0098 - 0x003C)
class UBioPowerVFXAppearance : public UObject
{
public:
	struct FName                                       nmProjectileAttachPoint;                                  // 0x003C(0x0008) (Edit)
	struct FPowerVFXData                               PlayerCrust;                                              // 0x0044(0x0008) (Edit)
	struct FPowerVFXData                               PlayerMaterial;                                           // 0x004C(0x0008) (Edit)
	struct FPowerVFXData                               UsingEffect;                                              // 0x0054(0x0008) (Edit)
	struct FPowerVFXData                               FramebufferEffect;                                        // 0x005C(0x0008) (Edit)
	struct FPowerVFXData                               TargetCrust;                                              // 0x0064(0x0008) (Edit)
	struct FPowerVFXData                               TargetMaterial;                                           // 0x006C(0x0008) (Edit)
	class UBioDeathVFX*                                m_pDeathVFX;                                              // 0x0074(0x0004) (Edit, Const)
	struct FPowerVFXData                               ImpactVisualEffect;                                       // 0x0078(0x0008) (Edit)
	struct FPowerVFXData                               WorldImpactVisualEffect;                                  // 0x0080(0x0008) (Edit)
	struct FPowerVFXData                               CastingBeam;                                              // 0x0088(0x0008) (Edit)
	class UBioVFXTemplate*                             vfxProjectileEffect;                                      // 0x0090(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxReleaseEffect;                                         // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPowerVFXAppearance");
		return ptr;
	}

};


// Class BIOC_Base.BioVFXAppearanceVehicleThruster
// 0x0004 (0x0040 - 0x003C)
class UBioVFXAppearanceVehicleThruster : public UObject
{
public:
	class UBioVFXTemplate*                             vfxThrusterBurner;                                        // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVFXAppearanceVehicleThruster");
		return ptr;
	}

};


// Class BIOC_Base.BioVFXTemplate
// 0x00B8 (0x00F4 - 0x003C)
class UBioVFXTemplate : public UObject
{
public:
	class UPrefab*                                     oPrefab;                                                  // 0x003C(0x0004) (Edit)
	float                                              fLifeTime;                                                // 0x0040(0x0004) (Edit)
	unsigned long                                      bCreateNewSoundEverySpawn : 1;                            // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bFadeOnPause : 1;                                       // 0x0044(0x0004) (Edit)
	unsigned long                                      bEnableCollision : 1;                                     // 0x0044(0x0004) (Edit)
	unsigned long                                      bUseActorScale : 1;                                       // 0x0044(0x0004) (Edit)
	unsigned long                                      bIsCrustEffect : 1;                                       // 0x0044(0x0004) (Edit)
	unsigned long                                      bIsImpactCrustEffect : 1;                                 // 0x0044(0x0004) (Edit)
	unsigned long                                      bAllowParticlesToFinish : 1;                              // 0x0044(0x0004) (Edit)
	unsigned long                                      bAttachToNearestBone : 1;                                 // 0x0044(0x0004) (Edit)
	unsigned long                                      bIsInitialized : 1;                                       // 0x0044(0x0004)
	unsigned long                                      m_bInstancePoolEnabled : 1;                               // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bIgnorePooling : 1;                                     // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bDisableBoolDecay : 1;                                  // 0x0044(0x0004) (Edit)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x0044(0x0004) (Edit)
	unsigned long                                      bSharedBetweenInstances : 1;                              // 0x0044(0x0004)
	unsigned long                                      m_bUseIntensityCurve : 1;                                 // 0x0044(0x0004) (Edit)
	class USoundCue*                                   oSoundCue;                                                // 0x0048(0x0004) (Edit)
	TArray<class USoundCue*>                           m_aSoundsForIntensityLevels;                              // 0x004C(0x000C) (Edit, NeedCtorLink)
	float                                              m_fFadeInTime;                                            // 0x0058(0x0004) (Edit)
	float                                              m_fFadeOutTime;                                           // 0x005C(0x0004) (Edit)
	float                                              fImpactRadius;                                            // 0x0060(0x0004) (Edit)
	float                                              fParticleTimeout;                                         // 0x0064(0x0004) (Edit)
	float                                              fEffectMaterialTimeout;                                   // 0x0068(0x0004) (Edit)
	TEnumAsByte<EBioVFXPriority>                       ePriority;                                                // 0x006C(0x0001) (Edit)
	TEnumAsByte<EBioVFXCost>                           eCost;                                                    // 0x006D(0x0001) (Edit)
	TEnumAsByte<EEffectsMaterialType>                  eCharacterMaterial;                                       // 0x006E(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x006F(0x0001) MISSED OFFSET
	float                                              m_afCostTable[0x5];                                       // 0x0070(0x0004) (Config)
	float                                              m_fInstancePoolRechargePeriod;                            // 0x0084(0x0004) (Edit)
	int                                                m_nInstancePoolMax;                                       // 0x0088(0x0004) (Edit)
	int                                                m_nDefaultPoolMax;                                        // 0x008C(0x0004) (Edit)
	int                                                m_nDefaultPoolMin;                                        // 0x0090(0x0004) (Edit)
	class UPostProcessChain*                           oFrameBufferEffect;                                       // 0x0094(0x0004) (Edit)
	TArray<class UBioCurveDrivenParameter*>            aPostProcessParameters;                                   // 0x0098(0x000C) (Edit, NeedCtorLink, EditInline)
	int                                                nMaxInstancesAllowed;                                     // 0x00A4(0x0004) (Edit)
	int                                                nNumActiveInstances;                                      // 0x00A8(0x0004) (Transient)
	class UBioVFXTemplate*                             oSharedFramebufferEffect;                                 // 0x00AC(0x0004) (Transient)
	class ABioVisualEffect*                            oInstancedSharedFrameBufferEffect;                        // 0x00B0(0x0004) (Transient)
	float                                              m_fMaxRange;                                              // 0x00B4(0x0004) (Edit)
	struct FRawDistributionFloat                       m_rawIntensityVsDistanceDistribution;                     // 0x00B8(0x001C) (Edit, Component, NeedCtorLink)
	TArray<class UBioCurveDrivenParameter*>            aInstanceParameters;                                      // 0x00D4(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              fPercentageOfDirection;                                   // 0x00E0(0x0004) (Edit)
	TArray<class UBioDecalComponent*>                  Decals;                                                   // 0x00E4(0x000C) (Edit, ExportObject, Component, NeedCtorLink, NoClear, EditInline)
	class UBioCameraShake*                             m_cameraShake;                                            // 0x00F0(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVFXTemplate");
		return ptr;
	}


	void InitializeTemplate();
};


// Class BIOC_Base.BioVisualImpactSet
// 0x0000 (0x003C - 0x003C)
class UBioVisualImpactSet : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVisualImpactSet");
		return ptr;
	}

};


// Class BIOC_Base.BioVISSimple
// 0x0034 (0x0070 - 0x003C)
class UBioVISSimple : public UBioVisualImpactSet
{
public:
	TArray<struct FBioVISSData>                        VisualEffectMappings;                                     // 0x003C(0x000C) (Edit, NeedCtorLink, EditInline)
	class UBioVISSimple*                               MaterialParent;                                           // 0x0048(0x0004) (Edit)
	struct FRawDistributionVector                      rRotationBias;                                            // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	class UBioVFXTemplate*                             vfxDefaultVisualEffect;                                   // 0x0068(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxDefaultMaterialEffect;                                 // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVISSimple");
		return ptr;
	}


	void PreloadEffects();
	class ABioVisualEffect* ApplyVisualImpact(const struct FVector& vImpactLocation, const struct FRotator& rImpactRotation, const struct FRotator& rDirectionOfImpact, const struct FTraceHitInfo& oHitInfo, class AActor* oBase, bool bApplyMaterialEffect, bool bApplyVisualEffect);
};


// Class BIOC_Base.BioVISFootstep
// 0x000C (0x007C - 0x0070)
class UBioVISFootstep : public UBioVISSimple
{
public:
	TArray<struct FBioVISFootstepData>                 DirtGrimeMappings;                                        // 0x0070(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVISFootstep");
		return ptr;
	}


	class ABioVisualEffect* ApplyFootstepVisualImpact(const struct FVector& vFootstepLocation, const struct FRotator& rFootstepRotation, const struct FTraceHitInfo& oHit, float fSpeedRatio, class AActor* oActor);
	float GetCombatValue(class UPhysicalMaterial* oPhysMat);
	float GetDirtValue(class UPhysicalMaterial* oPhysMat);
	float GetGrimeValue(class UPhysicalMaterial* oPhysMat);
};


// Class BIOC_Base.BioVISGrenade
// 0x0008 (0x0078 - 0x0070)
class UBioVISGrenade : public UBioVISSimple
{
public:
	float                                              ImpactRadius;                                             // 0x0070(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxExplosionEffect;                                       // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVISGrenade");
		return ptr;
	}


	class ABioVisualEffect* ApplyGrenadeVisualImpact(const struct FVector& vPosition, const struct FVector& vHitNormal, const struct FVector& vDirection);
	void PreloadEffects();
};


// Class BIOC_Base.BioVisualEffect
// 0x00F4 (0x0358 - 0x0264)
class ABioVisualEffect : public APrefabInstance
{
public:
	unsigned long                                      bDeleteSelf : 1;                                          // 0x0264(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x0264(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0264(0x0004) (Edit)
	unsigned long                                      bLoopLife : 1;                                            // 0x0264(0x0004) (Edit)
	unsigned long                                      bPauseOnDeath : 1;                                        // 0x0264(0x0004) (Edit)
	unsigned long                                      bIsComponentOnly : 1;                                     // 0x0264(0x0004)
	TEnumAsByte<EBioVFXState>                          eCurrentState;                                            // 0x0268(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	float                                              fLifeDuration;                                            // 0x026C(0x0004) (Edit)
	float                                              m_accruedTime;                                            // 0x0270(0x0004)
	float                                              fTotalDuration;                                           // 0x0274(0x0004)
	class UBioVFXTemplate*                             pTemplate;                                                // 0x0278(0x0004)
	class USeqAct_Interp*                              Matinee;                                                  // 0x027C(0x0004)
	struct FString                                     sStateNames[0x3];                                         // 0x0280(0x000C) (NeedCtorLink)
	float                                              fStateDurations[0x3];                                     // 0x02A4(0x0004)
	float                                              fStateStartTimes[0x3];                                    // 0x02B0(0x0004)
	float                                              fStateEndTimes[0x3];                                      // 0x02BC(0x0004)
	float                                              fCurrentTime;                                             // 0x02C8(0x0004)
	int                                                nMaxDecals;                                               // 0x02CC(0x0004) (Const)
	int                                                nLastDecal;                                               // 0x02D0(0x0004) (Transient)
	class UBioDecalComponent*                          aDecalList[0x3];                                          // 0x02D4(0x0004) (ExportObject, Transient, Component, EditInline)
	class UBioDecalComponent*                          pLastDecal;                                               // 0x02E0(0x0004) (ExportObject, Transient, Component, EditInline)
	class USoundCue*                                   oSoundCue;                                                // 0x02E4(0x0004) (Edit)
	class UAudioComponent*                             oAudioComponent;                                          // 0x02E8(0x0004) (ExportObject, Component, EditInline)
	class UBioCameraShake*                             m_cameraShake;                                            // 0x02EC(0x0004)
	TArray<class AActor*>                              m_cameraShakenActors;                                     // 0x02F0(0x000C) (NeedCtorLink)
	class UBioVisualEffectObserver*                    m_observer;                                               // 0x02FC(0x0004)
	int                                                m_nAttachedToBoneCount;                                   // 0x0300(0x0004)
	class UObject*                                     m_pInstigator;                                            // 0x0304(0x0004)
	struct FMultiMap_Mirror                            m_mObjectFloatPropertyMap;                                // 0x0308(0x0014) (Const, Native, NoExport)
	struct FMultiMap_Mirror                            m_mTrackMaterialFloatMap;                                 // 0x031C(0x0014) (Const, Native, NoExport)
	struct FMultiMap_Mirror                            m_mObjectVectorPropertyMap;                               // 0x0330(0x0014) (Const, Native, NoExport)
	struct FMultiMap_Mirror                            m_mTrackMaterialVectorMap;                                // 0x0344(0x0014) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVisualEffect");
		return ptr;
	}


	bool SetSound(int nIndexInSoundArray);
	class ABioVisualEffect* STATIC_CreateVFXOnPosition(class UBioVFXTemplate* a_pTemplate, const struct FVector& vPosition, const struct FRotator& rOrientation, float fLifeTime, bool bUseVFXPool);
	class ABioVisualEffect* STATIC_CreateVFXOnMesh(class UBioVFXTemplate* a_pTemplate, class AActor* Target, const struct FName& sBoneName, float fLifeTime, class USkeletalMeshComponent* mTargetMesh, bool bUseVFXPool);
	class ABioVisualEffect* STATIC_CreateCrustEffect(class UBioVFXTemplate* a_pTemplate, class AActor* Target, float fLifeTime, bool bUseVFXPool);
	void SetLifeTime(float fLife);
	void SetVectorParameter(const struct FName& sParameter, const struct FVector& vValue);
	void SetScalarParameter(const struct FName& sParameter, float fValue);
	float GetStateDuration(TEnumAsByte<EBioVFXState> eState);
	float GetEffectDuration();
	bool IsAttached();
	bool SetBasePrefab(class UPrefab* pBase);
	bool SetState(TEnumAsByte<EBioVFXState> eState, bool bForceSetState, bool bPlayAudio);
	bool SetPaused(bool bPause, bool bForceRefresh);
	void PauseOnDeath(bool bPause);
	void LoopDuration(bool bLoop);
};


// Class BIOC_Base.BioVisualEffectObserver
// 0x0000 (0x003C - 0x003C)
class UBioVisualEffectObserver : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVisualEffectObserver");
		return ptr;
	}

};


// Class BIOC_Base.BioVisualEffectObserverActor
// 0x0008 (0x0044 - 0x003C)
class UBioVisualEffectObserverActor : public UBioVisualEffectObserver
{
public:
	class AActor*                                      m_actor;                                                  // 0x003C(0x0004)
	unsigned long                                      m_isActorDeletedOnEffectDeath : 1;                        // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVisualEffectObserverActor");
		return ptr;
	}

};


// Class BIOC_Base.BioVisualEffectPool
// 0x0034 (0x0070 - 0x003C)
class UBioVisualEffectPool : public UObject
{
public:
	int                                                m_nMinEffectsInPool;                                      // 0x003C(0x0004)
	int                                                m_nMaxEffectsInPool;                                      // 0x0040(0x0004)
	class UBioVFXTemplate*                             m_VFXTemplate;                                            // 0x0044(0x0004) (Transient)
	unsigned long                                      m_bInstancePoolEnabled : 1;                               // 0x0048(0x0004)
	float                                              m_fInstancePoolRechargePeriod;                            // 0x004C(0x0004)
	int                                                m_nInstancePoolMax;                                       // 0x0050(0x0004)
	int                                                m_nInstancePoolCurrent;                                   // 0x0054(0x0004) (Transient)
	float                                              m_fInstancePoolTimeAccumulator;                           // 0x0058(0x0004) (Transient)
	float                                              m_fTimeTillDecay;                                         // 0x005C(0x0004) (Transient)
	float                                              m_fDecayPeriod;                                           // 0x0060(0x0004) (Config)
	TArray<class ABioVisualEffect*>                    m_EffectPool;                                             // 0x0064(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVisualEffectPool");
		return ptr;
	}


	void PrimePoolEffects(int a_nNumEffects);
	class ABioVisualEffect* GetEffect();
	void SetPoolSize(int a_nMaxSize, int a_nMinSize);
	void Initialize(class UBioVFXTemplate* a_oTemplate, int nMaxNumEffects, int nMinNumEffects);
};


// Class BIOC_Base.BioVISWeapon
// 0x0004 (0x0074 - 0x0070)
class UBioVISWeapon : public UBioVISSimple
{
public:
	unsigned long                                      m_bApplyMaterialEffectToFriendlies : 1;                   // 0x0070(0x0004) (Edit)
	unsigned long                                      m_bApplyVisualEffectToFriendlies : 1;                     // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVISWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioVISXModSet
// 0x000C (0x0048 - 0x003C)
class UBioVISXModSet : public UBioVisualImpactSet
{
public:
	TArray<struct FBioVISXData>                        VisualEffectMappings;                                     // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVISXModSet");
		return ptr;
	}


	void ApplyVisualImpact(const struct FVector& vHitLocation, const struct FRotator& rHitRotation, const struct FRotator& rDirectionOfImpact, class UBioVISWeapon* oWeaponVIS, const struct FTraceHitInfo& oHit, class AActor* oBase);
};


// Class BIOC_Base.BioWeaponVFXAppearance
// 0x0060 (0x009C - 0x003C)
class UBioWeaponVFXAppearance : public UObject
{
public:
	struct FName                                       nmMuzzleFlash;                                            // 0x003C(0x0008) (Edit)
	struct FName                                       nmMuzzleFlash2;                                           // 0x0044(0x0008) (Edit)
	struct FName                                       nmTracer;                                                 // 0x004C(0x0008) (Edit)
	struct FName                                       nmCoolDown;                                               // 0x0054(0x0008) (Edit)
	struct FName                                       nmSabotage;                                               // 0x005C(0x0008) (Edit)
	class UBioVISWeapon*                               VisualImpactSet;                                          // 0x0064(0x0004) (Edit)
	class UBioVISGrenade*                              m_VisualExplosionSet;                                     // 0x0068(0x0004) (Edit)
	float                                              fPerShotIncrease;                                         // 0x006C(0x0004) (Edit)
	float                                              fIncreaseTime;                                            // 0x0070(0x0004) (Edit)
	float                                              fCooldownPerSecond;                                       // 0x0074(0x0004) (Edit)
	class UBioDeathVFX*                                m_pDeathVFX;                                              // 0x0078(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxMuzzleFlash;                                           // 0x007C(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxMuzzleFlash2;                                          // 0x0080(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxTracer;                                                // 0x0084(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxCoolDown;                                              // 0x0088(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxSabotage;                                              // 0x008C(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxImpactCrust;                                           // 0x0090(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxGunCrust;                                              // 0x0094(0x0004) (Edit)
	class UBioVFXTemplate*                             vfxWhileFiring;                                           // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWeaponVFXAppearance");
		return ptr;
	}

};


// Class BIOC_Base.BioEmissionAreaList
// 0x0000 (0x003C - 0x003C)
class UBioEmissionAreaList : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEmissionAreaList");
		return ptr;
	}

};


// Class BIOC_Base.BioEmissionAreaListBoneList
// 0x000C (0x0048 - 0x003C)
class UBioEmissionAreaListBoneList : public UBioEmissionAreaList
{
public:
	TArray<struct FBoneListEmissionArea>               m_EmissionAreas;                                          // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEmissionAreaListBoneList");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleCollisionDecal
// 0x0014 (0x00F4 - 0x00E0)
class UBioParticleModuleCollisionDecal : public UParticleModuleCollision
{
public:
	class UBioDecalComponent*                          DecalTemplate;                                            // 0x00E0(0x0004) (Edit, ExportObject, Component, NoClear, EditInline)
	struct FString                                     CollisionEmitter;                                         // 0x00E4(0x000C) (Edit, ExportObject, NeedCtorLink, NoClear)
	class UParticleSystem*                             CollisionEmitterTemplate;                                 // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleCollisionDecal");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleEmitterSpeedBase
// 0x0000 (0x0044 - 0x0044)
class UBioParticleModuleEmitterSpeedBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleEmitterSpeedBase");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleLocationAttachedMesh
// 0x0021 (0x006D - 0x004C)
class UBioParticleModuleLocationAttachedMesh : public UParticleModuleLocationBase
{
public:
	class UBioEmissionAreaList*                        m_EmissionAreaList;                                       // 0x004C(0x0004) (Edit)
	TArray<struct FEmissionAreaWeight>                 m_EmissionAreaWeights;                                    // 0x0050(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               m_ValidEmissionSet;                                       // 0x005C(0x000C) (NeedCtorLink)
	unsigned long                                      m_bCheckAgainstValidEmissionSet : 1;                      // 0x0068(0x0004)
	unsigned long                                      bUseAttachedLocalSpace : 1;                               // 0x0068(0x0004) (Edit)
	TEnumAsByte<EmissionAreaSpecificationType>         m_SpecificationType;                                      // 0x006C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleLocationAttachedMesh");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleLocationPrimitiveNearestSurface
// 0x0018 (0x00A0 - 0x0088)
class UBioParticleModuleLocationPrimitiveNearestSurface : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      bInitialLocationOnly : 1;                                 // 0x0088(0x0004) (Edit, ExportObject, NoClear)
	unsigned long                                      bMovingLocationOnly : 1;                                  // 0x0088(0x0004) (Edit, ExportObject, NoClear)
	unsigned long                                      bDirectionRelativeToEmitter : 1;                          // 0x0088(0x0004) (Edit, ExportObject, NoClear)
	unsigned long                                      bTestActors : 1;                                          // 0x0088(0x0004) (Edit, ExportObject, NoClear)
	float                                              fRadius;                                                  // 0x008C(0x0004) (Edit, ExportObject, NoClear)
	TEnumAsByte<ELocationNearestSurface>               eIfNoCollision;                                           // 0x0090(0x0001) (Edit, ExportObject, NoClear)
	TEnumAsByte<EBioParticleCollisionComplete>         eOnCollision;                                             // 0x0091(0x0001) (Edit, ExportObject, NoClear)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0092(0x0002) MISSED OFFSET
	TArray<struct FVector>                             m_aSearchDirections;                                      // 0x0094(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleLocationPrimitiveNearestSurface");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleMultiplyByEmitterSpeed
// 0x0014 (0x0058 - 0x0044)
class UBioParticleModuleMultiplyByEmitterSpeed : public UBioParticleModuleEmitterSpeedBase
{
public:
	TEnumAsByte<EMultiplyByEmitterSpeedProperty>       MultipliedProperty;                                       // 0x0044(0x0001) (Edit, Const, ExportObject, NoClear)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              MinUsedSpeed;                                             // 0x0048(0x0004) (Edit, Const, ExportObject, NoClear)
	float                                              MaxUsedSpeed;                                             // 0x004C(0x0004) (Edit, Const, ExportObject, NoClear)
	float                                              MultiplierAtMin;                                          // 0x0050(0x0004) (Edit, Const, ExportObject, NoClear)
	float                                              MultiplierAtMax;                                          // 0x0054(0x0004) (Edit, Const, ExportObject, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleMultiplyByEmitterSpeed");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleSoundBase
// 0x0000 (0x0044 - 0x0044)
class UBioParticleModuleSoundBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleSoundBase");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleSound
// 0x0008 (0x004C - 0x0044)
class UBioParticleModuleSound : public UBioParticleModuleSoundBase
{
public:
	class USoundCue*                                   oSoundCue;                                                // 0x0044(0x0004) (Edit, ExportObject, NoClear)
	unsigned long                                      bPerEmitter : 1;                                          // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleSound");
		return ptr;
	}

};


// Class BIOC_Base.BioParticleModuleVelocityWorldSpace
// 0x0000 (0x007C - 0x007C)
class UBioParticleModuleVelocityWorldSpace : public UParticleModuleVelocity
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioParticleModuleVelocityWorldSpace");
		return ptr;
	}

};


// Class BIOC_Base.BioConvNodeTrack
// 0x0014 (0x006C - 0x0058)
class UBioConvNodeTrack : public UInterpTrack
{
public:
	TArray<struct FBioTrackKey>                        m_aTrackKeys;                                             // 0x0058(0x000C) (NeedCtorLink)
	int                                                m_nCurrentKey;                                            // 0x0064(0x0004) (Transient)
	int                                                m_nNextKey;                                               // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioConvNodeTrack");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioConvNodeTrackDebug
// 0x000C (0x0078 - 0x006C)
class UBioConvNodeTrackDebug : public UBioConvNodeTrack
{
public:
	TArray<struct FString>                             m_aDbgStrings;                                            // 0x006C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioConvNodeTrackDebug");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioConvNodeTrackInst
// 0x0004 (0x0040 - 0x003C)
class UBioConvNodeTrackInst : public UInterpTrackInst
{
public:
	float                                              m_fLastUpdatePosition;                                    // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioConvNodeTrackInst");
		return ptr;
	}

};


// Class BIOC_Base.BioConvNodeTrackDebugInst
// 0x0004 (0x0044 - 0x0040)
class UBioConvNodeTrackDebugInst : public UBioConvNodeTrackInst
{
public:
	class UBioSeqAct_DebugMessage*                     m_pMsgObj;                                                // 0x0040(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioConvNodeTrackDebugInst");
		return ptr;
	}

};


// Class BIOC_Base.BioEvtSysTrackDOF
// 0x001C (0x0088 - 0x006C)
class UBioEvtSysTrackDOF : public UBioConvNodeTrack
{
public:
	TArray<struct FBioDOFTrackData>                    m_aDOFData;                                               // 0x006C(0x000C) (Edit, NeedCtorLink)
	float                                              m_fDOFDefaultBlurKernel;                                  // 0x0078(0x0004) (Transient, Config)
	float                                              m_fDOFDefaultExponent;                                    // 0x007C(0x0004) (Transient, Config)
	float                                              m_fDOFDefaultMaxNearBlur;                                 // 0x0080(0x0004) (Transient, Config)
	float                                              m_fDOFDefaultMaxFarBlur;                                  // 0x0084(0x0004) (Transient, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackDOF");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackDOFInst
// 0x0030 (0x0070 - 0x0040)
class UBioEvtSysTrackDOFInst : public UBioConvNodeTrackInst
{
public:
	float                                              m_fOldFalloffExponent;                                    // 0x0040(0x0004) (Transient)
	float                                              m_fOldBlurKernelSize;                                     // 0x0044(0x0004) (Transient)
	float                                              m_fOldMaxNearBlurAmount;                                  // 0x0048(0x0004) (Transient)
	float                                              m_fOldMaxFarBlurAmount;                                   // 0x004C(0x0004) (Transient)
	struct FColor                                      m_cOldModulateBlurColor;                                  // 0x0050(0x0004) (Transient)
	float                                              m_fOldFocusInnerRadius;                                   // 0x0054(0x0004) (Transient)
	float                                              m_fOldFocusDistance;                                      // 0x0058(0x0004) (Transient)
	struct FVector                                     m_vOldFocusPosition;                                      // 0x005C(0x000C) (Transient)
	float                                              m_fInterpolateElapsed;                                    // 0x0068(0x0004) (Transient)
	int                                                m_nCurEffect;                                             // 0x006C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackDOFInst");
		return ptr;
	}

};


// Class BIOC_Base.BioEvtSysTrackFuncShot
// 0x0014 (0x0080 - 0x006C)
class UBioEvtSysTrackFuncShot : public UBioConvNodeTrack
{
public:
	TArray<struct FBioFuncShotData>                    m_aShotData;                                              // 0x006C(0x000C) (Edit, NeedCtorLink)
	struct FName                                       m_nmOldShotType;                                          // 0x0078(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackFuncShot");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackFuncShotInst
// 0x0000 (0x0040 - 0x0040)
class UBioEvtSysTrackFuncShotInst : public UBioConvNodeTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackFuncShotInst");
		return ptr;
	}

};


// Class BIOC_Base.BioEvtSysTrackGesture
// 0x004C (0x00B8 - 0x006C)
class UBioEvtSysTrackGesture : public UBioConvNodeTrack
{
public:
	TArray<struct FBioGestureData>                     m_aGestures;                                              // 0x006C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     sActorTag;                                                // 0x0078(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EBioGestureAllPoses>                   eStartingPose;                                            // 0x0084(0x0001) (Edit)
	TEnumAsByte<EBioGestureOverrideType>               eOverrideType;                                            // 0x0085(0x0001) (Edit)
	TEnumAsByte<EBioGestureFindActorMode>              eFindActorMode;                                           // 0x0086(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0087(0x0001) MISSED OFFSET
	struct FName                                       nmStartingPoseSet;                                        // 0x0088(0x0008)
	struct FName                                       nmStartingPoseAnim;                                       // 0x0090(0x0008)
	class UBioGestureRulesData*                        pRulesData;                                               // 0x0098(0x0004) (Transient)
	class UBioGestureRuntimeData*                      pRuntimeData;                                             // 0x009C(0x0004) (Transient)
	struct FString                                     m_sOldActorTag;                                           // 0x00A0(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      m_bActorChanged : 1;                                      // 0x00AC(0x0004) (Transient)
	unsigned long                                      m_bReloadPreviewAnimsets : 1;                             // 0x00AC(0x0004) (Transient)
	unsigned long                                      m_bAllowMovingChainKeys : 1;                              // 0x00AC(0x0004) (Transient)
	unsigned long                                      m_bARPUGenerated : 1;                                     // 0x00AC(0x0004)
	unsigned long                                      m_bUseDynamicAnimsets : 1;                                // 0x00AC(0x0004)
	class UMaterial*                                   m_pRightArrow;                                            // 0x00B0(0x0004) (Transient)
	float                                              m_fStartPoseOffset;                                       // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackGesture");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackGestureInst
// 0x001C (0x005C - 0x0040)
class UBioEvtSysTrackGestureInst : public UBioConvNodeTrackInst
{
public:
	class ABioPawn*                                    m_pPawn;                                                  // 0x0040(0x0004) (Transient)
	unsigned long                                      m_bActiveTrack : 1;                                       // 0x0044(0x0004) (Transient)
	struct FMap_Mirror                                 m_mapCachedAnimsets;                                      // 0x0048(0x0014) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackGestureInst");
		return ptr;
	}


	class AActor* STATIC_FindActorByTagForScript(const struct FName& nmTagToFind, class UInterpTrackInst* pTrackInst);
};


// Class BIOC_Base.BioEvtSysTrackLookAt
// 0x001C (0x0088 - 0x006C)
class UBioEvtSysTrackLookAt : public UBioConvNodeTrack
{
public:
	TArray<struct FBioLookAtTrackData>                 m_aLookAtKeys;                                            // 0x006C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     m_sActorTag;                                              // 0x0078(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bActorChanged : 1;                                      // 0x0084(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackLookAt");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackLookAtInst
// 0x0004 (0x0044 - 0x0040)
class UBioEvtSysTrackLookAtInst : public UBioConvNodeTrackInst
{
public:
	class ABioPawn*                                    m_pPawn;                                                  // 0x0040(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackLookAtInst");
		return ptr;
	}

};


// Class BIOC_Base.BioEvtSysTrackSetFacing
// 0x0028 (0x0094 - 0x006C)
class UBioEvtSysTrackSetFacing : public UBioConvNodeTrack
{
public:
	TArray<struct FBioSetFacingData>                   m_aFacingKeys;                                            // 0x006C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     m_sActorTag;                                              // 0x0078(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bActorChanged : 1;                                      // 0x0084(0x0004) (Transient)
	struct FString                                     m_sOldActorTag;                                           // 0x0088(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackSetFacing");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackSetFacingInst
// 0x0004 (0x0044 - 0x0040)
class UBioEvtSysTrackSetFacingInst : public UBioConvNodeTrackInst
{
public:
	class AActor*                                      m_pActor;                                                 // 0x0040(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackSetFacingInst");
		return ptr;
	}

};


// Class BIOC_Base.BioEvtSysTrackSubtitles
// 0x0010 (0x007C - 0x006C)
class UBioEvtSysTrackSubtitles : public UBioConvNodeTrack
{
public:
	TArray<struct FBioSubtitleTrackData>               m_aSubtitleData;                                          // 0x006C(0x000C) (Edit, NeedCtorLink)
	class UBioTlkFileSet*                              m_pTlkFileSet;                                            // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackSubtitles");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackSubtitlesInst
// 0x0000 (0x0040 - 0x0040)
class UBioEvtSysTrackSubtitlesInst : public UBioConvNodeTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackSubtitlesInst");
		return ptr;
	}

};


// Class BIOC_Base.BioEvtSysTrackSwitchCamera
// 0x000C (0x0078 - 0x006C)
class UBioEvtSysTrackSwitchCamera : public UBioConvNodeTrack
{
public:
	TArray<struct FBioCameraSwitchData>                m_aCameras;                                               // 0x006C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackSwitchCamera");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackSwitchCameraInst
// 0x0004 (0x0044 - 0x0040)
class UBioEvtSysTrackSwitchCameraInst : public UBioConvNodeTrackInst
{
public:
	class UBioEvtSysTrackDOF*                          m_pDOFTrack;                                              // 0x0040(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackSwitchCameraInst");
		return ptr;
	}

};


// Class BIOC_Base.BioEvtSysTrackVOElements
// 0x0054 (0x00C0 - 0x006C)
class UBioEvtSysTrackVOElements : public UBioConvNodeTrack
{
public:
	int                                                m_nStrRefID;                                              // 0x006C(0x0004) (Edit)
	unsigned long                                      m_bIgnoreExportShrinking : 1;                             // 0x0070(0x0004) (Edit)
	unsigned long                                      m_bIgnoreExportGrowing : 1;                               // 0x0070(0x0004) (Edit)
	struct FString                                     sActorTag;                                                // 0x0074(0x000C) (NeedCtorLink)
	struct FString                                     m_sAnimSetName;                                           // 0x0080(0x000C) (NeedCtorLink)
	struct FString                                     m_sAnimName;                                              // 0x008C(0x000C) (NeedCtorLink)
	struct FFaceFXInfo                                 fxInfo;                                                   // 0x0098(0x0020) (Transient, NeedCtorLink)
	unsigned long                                      m_bPlaySound : 1;                                         // 0x00B8(0x0004) (Transient)
	float                                              m_fPreviewLeadInTime;                                     // 0x00BC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackVOElements");
		return ptr;
	}


	struct FString STATIC_KeyDataDisplayName();
	struct FString STATIC_KeyDataArrayName();
	struct FString STATIC_NewKeyDefaultName();
	bool STATIC_AllowKeyNaming();
};


// Class BIOC_Base.BioEvtSysTrackVOElementsInst
// 0x0078 (0x00B8 - 0x0040)
class UBioEvtSysTrackVOElementsInst : public UBioConvNodeTrackInst
{
public:
	struct FName                                       m_nProceduralCameraClass;                                 // 0x0040(0x0008) (Config)
	TArray<struct FBioVOActorType>                     m_aDefaultActorTypes;                                     // 0x0048(0x000C) (Transient, Config, NeedCtorLink)
	struct FMap_Mirror                                 m_mapPawnHistory;                                         // 0x0054(0x0014) (Native, Transient)
	class UBioActorFactory*                            m_pFactory;                                               // 0x0068(0x0004) (Transient)
	class AActor*                                      m_pConvOwner;                                             // 0x006C(0x0004) (Transient)
	struct FName                                       m_nmConvOwnerTag;                                         // 0x0070(0x0008) (Transient)
	class ABioStage*                                   m_pConvStage;                                             // 0x0078(0x0004) (Transient)
	int                                                m_nSpeakerIndex;                                          // 0x007C(0x0004) (Transient)
	class UBioConversation*                            m_pConversation;                                          // 0x0080(0x0004) (Transient)
	struct FVector                                     m_vCamPos;                                                // 0x0084(0x000C) (Transient)
	struct FRotator                                    m_rCamRot;                                                // 0x0090(0x000C) (Transient)
	float                                              m_fFOV;                                                   // 0x009C(0x0004) (Transient)
	float                                              m_fNearPlane;                                             // 0x00A0(0x0004) (Transient)
	struct FBioStageDOFData                            m_tDOFData;                                               // 0x00A4(0x000C) (Transient)
	unsigned long                                      m_bGoodCamData : 1;                                       // 0x00B0(0x0004) (Transient)
	unsigned long                                      m_bMale : 1;                                              // 0x00B0(0x0004) (Transient)
	class ABioPawn*                                    m_pPawn;                                                  // 0x00B4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEvtSysTrackVOElementsInst");
		return ptr;
	}

};


// Class BIOC_Base.BioScalarParameterInstTrack
// 0x0004 (0x0040 - 0x003C)
class UBioScalarParameterInstTrack : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioScalarParameterInstTrack");
		return ptr;
	}

};


// Class BIOC_Base.BioScalarParameterTrack
// 0x0010 (0x007C - 0x006C)
class UBioScalarParameterTrack : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x006C(0x0008) (Edit)
	float                                              InterpValue;                                              // 0x0074(0x0004)
	class ABioVisualEffect*                            m_pParentEffect;                                          // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioScalarParameterTrack");
		return ptr;
	}

};


// Class BIOC_Base.BioVectorParameterInstTrack
// 0x000C (0x0048 - 0x003C)
class UBioVectorParameterInstTrack : public UInterpTrackInst
{
public:
	struct FVector                                     ResetVector;                                              // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVectorParameterInstTrack");
		return ptr;
	}

};


// Class BIOC_Base.BioVectorParameterTrack
// 0x0018 (0x0084 - 0x006C)
class UBioVectorParameterTrack : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x006C(0x0008) (Edit)
	struct FVector                                     InterpValue;                                              // 0x0074(0x000C)
	class ABioVisualEffect*                            m_pParentEffect;                                          // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVectorParameterTrack");
		return ptr;
	}

};


// Class BIOC_Base.BioVisualEffectTrack
// 0x0010 (0x0068 - 0x0058)
class UBioVisualEffectTrack : public UInterpTrack
{
public:
	TArray<struct FBioVisualEffectTrackKey>            VisualEffects;                                            // 0x0058(0x000C) (NeedCtorLink)
	class ABioVisualEffect*                            Properties;                                               // 0x0064(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVisualEffectTrack");
		return ptr;
	}

};


// Class BIOC_Base.BioVisualEffectTrackInst
// 0x0008 (0x0044 - 0x003C)
class UBioVisualEffectTrackInst : public UInterpTrackInst
{
public:
	class ABioVisualEffect*                            m_VFX;                                                    // 0x003C(0x0004)
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVisualEffectTrackInst");
		return ptr;
	}


	void Create(class ABioVisualEffect* Base);
};


// Class BIOC_Base.UnVince
// 0x0014 (0x0050 - 0x003C)
class UUnVince : public UObject
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x003C(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.UnVince.uniqueTagToJoinTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.UnVince");
		return ptr;
	}


	void STATIC_LeaderChanged(class ABioPawn* OldLeader, class ABioPawn* NewLeader);
	void STATIC_PartyProfiling(class ABioPawn* oPawn, bool bJoining);
	void STATIC_XPGainedPawnKilledHelper(class ABioPawn* Player, class ABioPawn* deadPawn, int xpGained);
	void STATIC_CharacterCreationFinished(const struct FString& PlayerName, const struct FString& playerClass, unsigned char Background, unsigned char priAttribute, unsigned char secAttribute, const struct FString& Message);
	void STATIC_CharacterCreationStarted();
	void STATIC_VinceLogTalentInfoPlayerAndSquad(class ABioPawn* pPawn, bool bIsTalentChange);
	void STATIC_RecordVehicleDeath(class ASVehicle* pTarget, class AController* pInstigator, const struct FVector& vHitLocation, class UClass* clsDamageType, class UBioDamageType* pDamage);
	void STATIC_RecordDeath(class ABioPawn* pTarget, class AController* pInstigator, const struct FVector& vHitLocation, class UClass* clsDamageType);
	void STATIC_RecordWeaponFired(class ABioPawn* Instigator);
	void STATIC_LogTestResult(const struct FString& TestName, const struct FString& TestDescription, TEnumAsByte<EBioTestSeverity> TestResult);
	void STATIC_CreateSurvey(const struct FString& question, const struct FString& Context);
	void STATIC_Terminate();
	void STATIC_CycleLog();
	void STATIC_CloseLog();
	void STATIC_OpenLog();
};


// Class BIOC_Base.BioCodexMap
// 0x0028 (0x0064 - 0x003C)
class UBioCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 SectionMap;                                               // 0x003C(0x0014) (Const, Native)
	struct FMap_Mirror                                 PageMap;                                                  // 0x0050(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCodexMap");
		return ptr;
	}

};


// Class BIOC_Base.BioDiscoveredCodexMap
// 0x0014 (0x0050 - 0x003C)
class UBioDiscoveredCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 DiscoveredCodex;                                          // 0x003C(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDiscoveredCodexMap");
		return ptr;
	}


	void Clear();
};


// Class BIOC_Base.BioGlobalVariableTable
// 0x0028 (0x0064 - 0x003C)
class UBioGlobalVariableTable : public UObject
{
public:
	TArray<int>                                        BoolVariables;                                            // 0x003C(0x000C) (NeedCtorLink)
	TArray<int>                                        IntVariables;                                             // 0x0048(0x000C) (NeedCtorLink)
	TArray<float>                                      FloatVariables;                                           // 0x0054(0x000C) (NeedCtorLink)
	class UBio2DA*                                     oNameLookupTable;                                         // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGlobalVariableTable");
		return ptr;
	}


	void ClearAllVariables();
	void SetFloatByName(const struct FName& nmLabel, float fValue);
	float GetFloatByName(const struct FName& nmLabel);
	void SetIntByName(const struct FName& nmLabel, int nValue);
	int GetIntByName(const struct FName& nmLabel);
	void SetBoolByName(const struct FName& nmLabel, bool bValue);
	bool GetBoolByName(const struct FName& nmLabel);
	void SetFloat(int nIndex, float fValue);
	float GetFloat(int nIndex);
	void SetInt(int nIndex, int nValue);
	int GetInt(int nIndex);
	void SetBool(int nIndex, bool bValue, bool bEvaluateAchievement);
	bool GetBool(int nIndex);
};


// Class BIOC_Base.BioOutcomeMap
// 0x0014 (0x0050 - 0x003C)
class UBioOutcomeMap : public UObject
{
public:
	struct FMap_Mirror                                 OutcomeMapping;                                           // 0x003C(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioOutcomeMap");
		return ptr;
	}

};


// Class BIOC_Base.BioQuestMap
// 0x0050 (0x008C - 0x003C)
class UBioQuestMap : public UObject
{
public:
	struct FMap_Mirror                                 QuestMap;                                                 // 0x003C(0x0014) (Const, Native)
	struct FMap_Mirror                                 TaskEvalMap;                                              // 0x0050(0x0014) (Const, Native)
	struct FMap_Mirror                                 IntTaskEvalMap;                                           // 0x0064(0x0014) (Const, Native)
	struct FMap_Mirror                                 FloatTaskEvalMap;                                         // 0x0078(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioQuestMap");
		return ptr;
	}

};


// Class BIOC_Base.BioQuestProgressionMap
// 0x0018 (0x0054 - 0x003C)
class UBioQuestProgressionMap : public UObject
{
public:
	int                                                nQuestProgressCounter;                                    // 0x003C(0x0004)
	struct FMap_Mirror                                 QuestProgression;                                         // 0x0040(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioQuestProgressionMap");
		return ptr;
	}


	void Clear();
};


// Class BIOC_Base.BioStateEventMap
// 0x0014 (0x0050 - 0x003C)
class UBioStateEventMap : public UObject
{
public:
	struct FMap_Mirror                                 StateEventMap;                                            // 0x003C(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioStateEventMap");
		return ptr;
	}

};


// Class BIOC_Base.BioBaseAppearance
// 0x0030 (0x0074 - 0x0044)
class UBioBaseAppearance : public UBioBaseComponent
{
public:
	TEnumAsByte<EBioBaseAppearanceReportMethod>        m_eReportMethod;                                          // 0x0044(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	struct FName                                       m_nmPhysicsImpactBone;                                    // 0x0048(0x0008) (Edit)
	float                                              m_fNotifyRBCollisionThreshold;                            // 0x0050(0x0004) (Edit)
	unsigned long                                      m_bNotifyRBCollision : 1;                                 // 0x0054(0x0004) (Edit)
	unsigned long                                      m_bIsTargetZoneEnabled : 1;                               // 0x0054(0x0004) (Edit)
	TArray<struct FName>                               m_aTargetZone;                                            // 0x0058(0x000C) (Edit, NeedCtorLink)
	float                                              m_fVFXScale;                                              // 0x0064(0x0004) (Edit)
	class UBioShieldView*                              m_oShieldView;                                            // 0x0068(0x0004) (Edit)
	class UBioDeathVFX*                                m_pDeathVFX;                                              // 0x006C(0x0004) (Edit, Const)
	class UBioDeathVFXControl*                         m_pDeathVFXControl;                                       // 0x0070(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioBaseAppearance");
		return ptr;
	}


	class USkeletalMesh* GetModelByName(const struct FString& S);
	bool GetTargetZoneName(int nIndex, struct FName* nmZoneName);
	bool GetTargetZoneLocation(int nIndex, class USkeletalMeshComponent* oMeshComponent, struct FVector* vLocation);
};


// Class BIOC_Base.Bio_Appr_Character
// 0x00B4 (0x0128 - 0x0074)
class UBio_Appr_Character : public UBioBaseAppearance
{
public:
	TEnumAsByte<EeModelType>                           ModelType;                                                // 0x0074(0x0001) (Edit)
	TEnumAsByte<EBioAttributesItemRaceType>            m_ItemRaceType;                                           // 0x0075(0x0001) (Edit)
	TEnumAsByte<EBio_Appr_CharacterTalentRaceType>     m_TalentRaceType;                                         // 0x0076(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0077(0x0001) MISSED OFFSET
	unsigned long                                      HideEquipedItems : 1;                                     // 0x0078(0x0004) (Edit)
	unsigned long                                      CanStrafe : 1;                                            // 0x0078(0x0004) (Edit)
	unsigned long                                      bLoopSingleFootstep : 1;                                  // 0x0078(0x0004) (Edit)
	unsigned long                                      m_bCullFootsteps : 1;                                     // 0x0078(0x0004) (Edit)
	TArray<class UBio_Appr_Character_Head*>            Head;                                                     // 0x007C(0x000C) (Edit, NeedCtorLink)
	class UBio_Appr_Character_Body*                    Body;                                                     // 0x0088(0x0004) (Edit)
	struct FName                                       BloodColor;                                               // 0x008C(0x0008) (Edit)
	class UBio_Appr_Character_Settings*                m_oSettings;                                              // 0x0094(0x0004) (Edit, ExportObject, Transient, EditConst, Component, EditInline)
	struct FName                                       CreatureSpeed;                                            // 0x0098(0x0008) (Edit)
	TArray<class UBioVISFootstep*>                     Footsteps;                                                // 0x00A0(0x000C) (Edit, NeedCtorLink)
	class UBioVFXTemplate*                             LifetimeCrust;                                            // 0x00AC(0x0004) (Edit)
	float                                              LifetimeMaterialFadeDuration;                             // 0x00B0(0x0004) (Edit)
	float                                              m_fCullFootstepDistance;                                  // 0x00B4(0x0004) (Edit)
	TArray<struct FFootStepAttachment>                 m_FootStepAttachments;                                    // 0x00B8(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     m_vFootstepLineCheckOffset;                               // 0x00C4(0x000C) (Edit)
	struct FVector                                     vProceduralCameraPosition;                                // 0x00D0(0x000C) (Edit)
	struct FRotator                                    rProceduralCameraRotation;                                // 0x00DC(0x000C) (Edit)
	struct FVector                                     vCameraFocusPoint;                                        // 0x00E8(0x000C) (Edit)
	float                                              fFov;                                                     // 0x00F4(0x0004) (Edit)
	float                                              fNearClip;                                                // 0x00F8(0x0004) (Edit)
	float                                              fDOFFocusInnerRadius;                                     // 0x00FC(0x0004) (Edit)
	float                                              fDOFFocusDistance;                                        // 0x0100(0x0004) (Edit)
	class UBioLookAtDefinition*                        m_LookAtDefinition;                                       // 0x0104(0x0004) (Edit)
	TArray<struct FLookAtBoneDef>                      m_aLookBoneDefs;                                          // 0x0108(0x000C) (Edit, NeedCtorLink)
	class UAnimSet*                                    m_pDefaultGesturesPoseSet;                                // 0x0114(0x0004) (Edit)
	struct FName                                       m_nmDefaultGesturesPoseAnim;                              // 0x0118(0x0008) (Edit)
	class UBioDynamicAnimSet*                          m_pCookedDefGestPoseSet;                                  // 0x0120(0x0004)
	class UFaceFXAsset*                                DefaultFaceFXAsset;                                       // 0x0124(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Character_Body
// 0x0180 (0x01F4 - 0x0074)
class UBio_Appr_Character_Body : public UBioBaseAppearance
{
public:
	class UBio2DA*                                     m_oMaterialVariationTranslationTable;                     // 0x0074(0x0004) (Edit)
	TArray<struct FArmorTypes>                         Armor;                                                    // 0x0078(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FString                                     AppearancePrefix;                                         // 0x0084(0x000C) (Edit, NeedCtorLink)
	class UBio_Appr_Character_HeadGear*                m_oHeadGearAppearance;                                    // 0x0090(0x0004) (Edit)
	class UBio_Appr_Character_Body_Settings*           m_oSettings;                                              // 0x0094(0x0004) (Edit, ExportObject, Transient, EditConst, Component, EditInline)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x0098(0x000C) (Edit, NeedCtorLink)
	struct FOverrideAnimTreeTemplate                   AnimTreeTemplates[0x7];                                   // 0x00A4(0x0008) (Edit)
	float                                              CollisionHeight;                                          // 0x00DC(0x0004) (Edit)
	float                                              CollisionRadius;                                          // 0x00E0(0x0004) (Edit)
	float                                              CollisionCrouchHeight;                                    // 0x00E4(0x0004) (Edit)
	float                                              CollisionReadyHeight;                                     // 0x00E8(0x0004) (Edit)
	float                                              Scale;                                                    // 0x00EC(0x0004) (Edit)
	unsigned long                                      bIsCrawler : 1;                                           // 0x00F0(0x0004) (Edit)
	unsigned long                                      bSuppressCrawlerRoll : 1;                                 // 0x00F0(0x0004) (Edit)
	unsigned long                                      bUseAutoGeneratedHitCollision : 1;                        // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableStartAnims : 1;                                    // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableSkidAnims : 1;                                     // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableStopAnims : 1;                                     // 0x00F0(0x0004) (Edit)
	unsigned long                                      bAllowStartAnimInCombat : 1;                              // 0x00F0(0x0004) (Edit)
	unsigned long                                      bAllowSkidAnimInCombat : 1;                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      bAllowStopAnimInCombat : 1;                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableMountRootMotion : 1;                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableStartRootMotion : 1;                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableStopRootMotion : 1;                                // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableExploreDeathAnim : 1;                              // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableCombatDeathAnim : 1;                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableLookAtTargeting : 1;                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      bUseWallSlideSpeedAdjust : 1;                             // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableRagdollRecovery : 1;                               // 0x00F0(0x0004) (Edit)
	unsigned long                                      bInvertRagdollRecoverBoneAxis : 1;                        // 0x00F0(0x0004) (Edit)
	unsigned long                                      bRecoverDirSwap : 1;                                      // 0x00F0(0x0004) (Edit)
	unsigned long                                      bInvertRagdollRecoverDirSwapBoneAxis : 1;                 // 0x00F0(0x0004) (Edit)
	unsigned long                                      bHACKIsGethArmature : 1;                                  // 0x00F0(0x0004) (Edit)
	unsigned long                                      bEnableMeshAdj : 1;                                       // 0x00F0(0x0004) (Edit)
	unsigned long                                      bUseManualAdj : 1;                                        // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanHop : 1;                                            // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanLeanWeaponFire : 1;                                 // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanPortArms : 1;                                       // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanCrouch : 1;                                         // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanWalk : 1;                                           // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanMount : 1;                                          // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanFly : 1;                                            // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bCanLand : 1;                                           // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bSuppressPitch : 1;                                     // 0x00F0(0x0004) (Edit)
	unsigned long                                      m_bGlideInExploration : 1;                                // 0x00F4(0x0004) (Edit)
	float                                              BaseEyeHeight;                                            // 0x00F8(0x0004) (Edit)
	struct FVector                                     m_vCrouchedWeaponOffset;                                  // 0x00FC(0x000C) (Edit)
	struct FVector                                     m_vCrouchedLeanLeftWeaponOffset;                          // 0x0108(0x000C) (Edit)
	struct FVector                                     m_vCrouchedLeanRightWeaponOffset;                         // 0x0114(0x000C) (Edit)
	struct FVector                                     m_vStandingWeaponOffset;                                  // 0x0120(0x000C) (Edit)
	struct FVector                                     m_vStandingLeanLeftWeaponOffset;                          // 0x012C(0x000C) (Edit)
	struct FVector                                     m_vStandingLeanRightWeaponOffset;                         // 0x0138(0x000C) (Edit)
	float                                              InclineUpMoveMod;                                         // 0x0144(0x0004) (Edit)
	float                                              InclineDownMoveMod;                                       // 0x0148(0x0004) (Edit)
	float                                              SkidTurnThreshold;                                        // 0x014C(0x0004) (Edit)
	float                                              PawnMoveStopDecelTime;                                    // 0x0150(0x0004) (Edit)
	float                                              DamageArc_Front;                                          // 0x0154(0x0004) (Edit)
	float                                              DamageArc_Rear;                                           // 0x0158(0x0004) (Edit)
	float                                              DamagePct_Front;                                          // 0x015C(0x0004) (Edit)
	float                                              DamagePct_Left;                                           // 0x0160(0x0004) (Edit)
	float                                              DamagePct_Right;                                          // 0x0164(0x0004) (Edit)
	float                                              LookAtRotationMinHoldTime;                                // 0x0168(0x0004) (Edit)
	float                                              LookAtRotationMaxHoldTime;                                // 0x016C(0x0004) (Edit)
	float                                              LookAtRotationMaxHoldAngle;                               // 0x0170(0x0004) (Edit)
	float                                              LookAtSpeedDEBUG;                                         // 0x0174(0x0004) (Edit)
	struct FName                                       RagdollRecoverBone;                                       // 0x0178(0x0008) (Edit)
	TEnumAsByte<EAxis>                                 RagdollRecoverBoneAxis;                                   // 0x0180(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 RagdollRecoverDirSwapBoneAxis;                            // 0x0181(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0182(0x0002) MISSED OFFSET
	float                                              RagdollRecoverPhysBlendTime;                              // 0x0184(0x0004) (Edit)
	struct FName                                       RagdollRecoverDirSwapBone;                                // 0x0188(0x0008) (Edit)
	struct FString                                     AudioAppearancePrefix;                                    // 0x0190(0x000C) (Edit, NeedCtorLink)
	float                                              MeshAdjRate;                                              // 0x019C(0x0004) (Edit)
	float                                              ManualMeshAdj;                                            // 0x01A0(0x0004) (Edit)
	struct FWeaponAnimSpec                             m_weaponAnimSpecs[0x4];                                   // 0x01A4(0x0014) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Body");
		return ptr;
	}


	bool GetMaterial(int ArmorType, int ModelVar, int MaterialVar, TArray<class UMaterialInterface*>* Materials);
	bool IsValidVariation(int ArmorType, int ModelVar, int MaterialVar);
	class UPhysicsAsset* GetPhysics(int ArmorType, int ModelVar);
	struct FString GetPhysics_Name(int ArmorType, int ModelVar);
	class USkeletalMesh* GetModel(int ArmorType, int ModelVar);
};


// Class BIOC_Base.Bio_Appr_Character_Hair
// 0x0014 (0x0088 - 0x0074)
class UBio_Appr_Character_Hair : public UBioBaseAppearance
{
public:
	class UBio_Appr_Character_Hair_Settings*           m_oSettings;                                              // 0x0074(0x0004) (Edit, ExportObject, Transient, EditConst, Component, EditInline)
	class USkeletalMesh*                               m_oModelMesh;                                             // 0x0078(0x0004) (Edit, ExportObject)
	TArray<class UMaterialInterface*>                  m_aMaterials;                                             // 0x007C(0x000C) (Edit, ExportObject, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Hair");
		return ptr;
	}


	class USkeletalMesh* GetModel();
};


// Class BIOC_Base.Bio_Appr_Character_Head
// 0x0060 (0x00D4 - 0x0074)
class UBio_Appr_Character_Head : public UBioBaseAppearance
{
public:
	class UBio_Appr_Character_Head_Settings*           m_oSettings;                                              // 0x0074(0x0004) (Edit, ExportObject, Transient, EditConst, Component, EditInline)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0078(0x0004) (Edit)
	TArray<struct FBioCharacterHeadAppearanceMaterialConfig> m_aMaterialConfig;                                        // 0x007C(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      HeadTrack : 1;                                            // 0x0088(0x0004) (Edit)
	unsigned long                                      UseWrinkles : 1;                                          // 0x0088(0x0004) (Edit)
	struct FString                                     MorphConstraints;                                         // 0x008C(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x0098(0x000C) (Edit, NeedCtorLink)
	TArray<class UBio_Appr_Character_Hair*>            m_aHairAppearance;                                        // 0x00A4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FBioWrinkleConfig>                   TextureOverrides;                                         // 0x00B0(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  WrinkleNormalMap;                                         // 0x00BC(0x0004) (Edit)
	class UTexture2D*                                  WrinkleNormalMask_2;                                      // 0x00C0(0x0004) (Edit)
	class UTexture2D*                                  WrinkleNormalMask_3;                                      // 0x00C4(0x0004) (Edit)
	class UFaceFXAsset*                                DefaultFaceFXAsset;                                       // 0x00C8(0x0004) (Edit)
	class UMaterialInterface*                          m_oPortraitMaterial;                                      // 0x00CC(0x0004) (Edit)
	class USkeletalMesh*                               m_oModelMesh;                                             // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_Head");
		return ptr;
	}


	class USkeletalMesh* GetModel();
};


// Class BIOC_Base.Bio_Appr_Character_HeadGear
// 0x00B8 (0x012C - 0x0074)
class UBio_Appr_Character_HeadGear : public UBioBaseAppearance
{
public:
	struct FName                                       m_nmPrefix;                                               // 0x0074(0x0008) (Edit)
	struct FBioHeadGearAppearanceArmorSpec             m_aArmorSpec[0x5];                                        // 0x007C(0x0018) (Edit, NeedCtorLink)
	class UBio_Appr_Character_HeadGear_Settings*       m_oSettings;                                              // 0x00F4(0x0004) (Edit, ExportObject, Transient, EditConst, Component, EditInline)
	TEnumAsByte<EBioArmorType>                         m_eArmorType;                                             // 0x00F8(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	TArray<struct FBioFacePlateMeshSpec>               m_aFacePlateMeshSpec;                                     // 0x00FC(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<class UMaterialInterface*>                  m_apFacePlateMaterial;                                    // 0x0108(0x000C) (Edit, NeedCtorLink)
	TArray<class USkeletalMesh*>                       m_apVisorMesh;                                            // 0x0114(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInterface*>                  m_apVisorMaterial;                                        // 0x0120(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Character_HeadGear");
		return ptr;
	}

};


// Class BIOC_Base.BioBaseAppearancePlaceable
// 0x00A8 (0x011C - 0x0074)
class UBioBaseAppearancePlaceable : public UBioBaseAppearance
{
public:
	struct FName                                       PackageName;                                              // 0x0074(0x0008) (Edit)
	struct FName                                       PlaceablePrefix;                                          // 0x007C(0x0008) (Edit)
	int                                                MaterialPerVariation;                                     // 0x0084(0x0004) (Edit)
	TArray<struct FName>                               MaterialVariationList;                                    // 0x0088(0x000C) (Edit, NeedCtorLink)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0094(0x0004) (Edit)
	class UPhysicsAsset*                               DestroyedPhysicsAsset;                                    // 0x0098(0x0004) (Edit)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x009C(0x000C) (Edit, NeedCtorLink)
	class UBioFSM*                                     FSM;                                                      // 0x00A8(0x0004) (Edit)
	class USoundCue*                                   SoundCue;                                                 // 0x00AC(0x0004) (Edit)
	class UStaticMesh*                                 m_oStaticMesh;                                            // 0x00B0(0x0004) (Edit)
	class UStaticMesh*                                 m_oDestroyedStaticMesh;                                   // 0x00B4(0x0004) (Edit)
	class USkeletalMesh*                               m_oSkeletalMesh;                                          // 0x00B8(0x0004) (Edit)
	class USkeletalMesh*                               m_oDestroyedSkeletalMesh;                                 // 0x00BC(0x0004) (Edit)
	TArray<struct FAudioAPLStatePair>                  m_AudioStates;                                            // 0x00C0(0x000C) (Edit, NeedCtorLink)
	class UAudioComponent*                             oAudioComponent;                                          // 0x00CC(0x0004) (ExportObject, Component, EditInline)
	int                                                nInstigatorVFXOffset;                                     // 0x00D0(0x0004)
	TArray<struct FVisualEffectAttachment>             VisualEffects;                                            // 0x00D4(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<struct FVisualEffectAttachment>             VFXOnInstigator;                                          // 0x00E0(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              Scale;                                                    // 0x00EC(0x0004) (Edit)
	class UAnimTree*                                   AnimationTree;                                            // 0x00F0(0x0004)
	class UClass*                                      pNewActorClass;                                           // 0x00F4(0x0004)
	struct FString                                     sThumbnailLabel;                                          // 0x00F8(0x000C) (NeedCtorLink)
	struct FString                                     sMenuLabel;                                               // 0x0104(0x000C) (NeedCtorLink)
	struct FVector                                     m_vTargetLocationOffset;                                  // 0x0110(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioBaseAppearancePlaceable");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Container
// 0x0000 (0x011C - 0x011C)
class UBio_Appr_Container : public UBioBaseAppearancePlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Container");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Door
// 0x0000 (0x011C - 0x011C)
class UBio_Appr_Door : public UBioBaseAppearancePlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Door");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Inert
// 0x0000 (0x011C - 0x011C)
class UBio_Appr_Inert : public UBioBaseAppearancePlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Inert");
		return ptr;
	}

};


// Class BIOC_Base.Bio_Appr_Useable
// 0x0000 (0x011C - 0x011C)
class UBio_Appr_Useable : public UBioBaseAppearancePlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.Bio_Appr_Useable");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceItem
// 0x0000 (0x0074 - 0x0074)
class UBioAppearanceItem : public UBioBaseAppearance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItem");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceItemEquippable
// 0x0000 (0x0074 - 0x0074)
class UBioAppearanceItemEquippable : public UBioAppearanceItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItemEquippable");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceItemSophisticated
// 0x0010 (0x0084 - 0x0074)
class UBioAppearanceItemSophisticated : public UBioAppearanceItemEquippable
{
public:
	TArray<struct FBioAppearanceItemSophisticatedVariant> m_variants;                                               // 0x0074(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	int                                                m_previewVariantLabel;                                    // 0x0080(0x0004) (Edit, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItemSophisticated");
		return ptr;
	}


	class UPhysicsAsset* GetPhysicsAsset(int variant);
	class UAnimTree* GetAnimationTree(int variant);
	class UAnimSet* GetAnimationSet(int variant);
	void ApplyMaterials(int variant, class USkeletalMeshComponent* SkeletalMeshComponent);
	class USkeletalMesh* GetSkeletalMesh(int variant);
};


// Class BIOC_Base.BioAppearanceItemWeapon
// 0x001C (0x00A0 - 0x0084)
class UBioAppearanceItemWeapon : public UBioAppearanceItemSophisticated
{
public:
	class UAnimSet*                                    m_oPawnWeaponAnimations;                                  // 0x0084(0x0004) (Edit)
	TArray<struct FBioAppearanceItemWeaponVFXSpec>     m_vfxSpecs;                                               // 0x0088(0x000C) (Edit, NeedCtorLink)
	class UBio2DA*                                     m_vfxWeaponType;                                          // 0x0094(0x0004)
	class UBio2DA*                                     m_vfxDamageEnum;                                          // 0x0098(0x0004)
	unsigned long                                      m_isEBioAppearanceItemWeaponVFXDamageEnumValid : 1;       // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItemWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceVehicle
// 0x01C8 (0x023C - 0x0074)
class UBioAppearanceVehicle : public UBioBaseAppearance
{
public:
	class UBioAppearanceVehicleSettings*               m_oSettings;                                              // 0x0074(0x0004) (Edit, ExportObject, Transient, EditConst, Component, EditInline)
	class UAnimSet*                                    m_oVehicleAnimSet;                                        // 0x0078(0x0004) (Edit)
	class UAnimTree*                                   m_oVehicleAnimTree;                                       // 0x007C(0x0004) (Edit)
	class UPhysicsAsset*                               m_oPhysicsAsset;                                          // 0x0080(0x0004) (Edit)
	struct FName                                       m_nmPhysicsBone;                                          // 0x0084(0x0008) (Edit)
	TArray<struct FBioVehicleAttachmentInfo>           m_aAttachment;                                            // 0x008C(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<struct FBioVehicleTurretInfo>               m_aTurrets;                                               // 0x0098(0x000C) (Edit, NeedCtorLink)
	TArray<struct FBioVehicleThrusterInfo>             m_aThrusters;                                             // 0x00A4(0x000C) (Edit, NeedCtorLink)
	int                                                m_nThrusterVFXIndex;                                      // 0x00B0(0x0004) (Edit)
	TArray<class UBioVFXAppearanceVehicleThruster*>    m_aThrusterVFX;                                           // 0x00B4(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   m_oVehicleSoundCue;                                       // 0x00C0(0x0004) (Edit)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleStart;                                           // 0x00C4(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleStop;                                            // 0x00DC(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleThrusterStart;                                   // 0x00F4(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleThrusterStop;                                    // 0x010C(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleInAcceleration;                                  // 0x0124(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleInDeceleration;                                  // 0x013C(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsSoftActivated;                            // 0x0154(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsSoftDeactivated;                          // 0x016C(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsMedActivated;                             // 0x0184(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsMedDeactivated;                           // 0x019C(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsHardActivated;                            // 0x01B4(0x0018) (Edit, NeedCtorLink)
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsHardDeactivated;                          // 0x01CC(0x0018) (Edit, NeedCtorLink)
	float                                              m_fSuspensionSoundContactForceThresholdSoft;              // 0x01E4(0x0004) (Edit)
	float                                              m_fSuspensionSoundContactForceThresholdMedium;            // 0x01E8(0x0004) (Edit)
	float                                              m_fSuspensionSoundContactForceThresholdHard;              // 0x01EC(0x0004) (Edit)
	class UMorphTargetSet*                             m_oDamageMorphSet;                                        // 0x01F0(0x0004) (Edit)
	struct FName                                       m_oDamageNodeWeight;                                      // 0x01F4(0x0008) (Edit)
	class UBioVFXTemplate*                             m_oDamageVFXTemplate;                                     // 0x01FC(0x0004) (Edit)
	float                                              m_fDamageVFXStartThresholdPercent;                        // 0x0200(0x0004) (Edit)
	TArray<struct FName>                               m_aWeaponItemLabel;                                       // 0x0204(0x000C) (Edit, NeedCtorLink)
	float                                              m_fCameraFollowDistance;                                  // 0x0210(0x0004) (Edit)
	float                                              m_fCameraFollowHeight;                                    // 0x0214(0x0004) (Edit)
	struct FName                                       m_nmCameraHook;                                           // 0x0218(0x0008) (Edit)
	float                                              m_fVehicleScale;                                          // 0x0220(0x0004) (Edit)
	float                                              m_fUnitWheelRadius;                                       // 0x0224(0x0004) (Edit)
	class UBioVehicleTrackSet*                         TrackSet;                                                 // 0x0228(0x0004) (Edit)
	class USkeletalMesh*                               m_oVehicleModelMesh;                                      // 0x022C(0x0004) (Edit)
	TArray<class UMaterialInterface*>                  m_aMaterials;                                             // 0x0230(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioBaseInterface
// 0x0004 (0x0040 - 0x003C)
class UBioBaseInterface : public UObject
{
public:
	class UBioActorBehavior*                           m_pBioActorBehavior;                                      // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioBaseInterface");
		return ptr;
	}

};


// Class BIOC_Base.BioInterface_Appearance
// 0x000C (0x004C - 0x0040)
class UBioInterface_Appearance : public UBioBaseInterface
{
public:
	class AActor*                                      pActor;                                                   // 0x0040(0x0004)
	class UBioMorphFace*                               m_oMorphFace;                                             // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bEnableMorphFaces : 1;                                  // 0x0048(0x0004) (Config)
	unsigned long                                      m_bForceRunTimeUpdates : 1;                               // 0x0048(0x0004) (Transient, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInterface_Appearance");
		return ptr;
	}


	class UClass* STATIC_GetSaveObjectClass();
	void ResetToDefaults();
	bool UpdateAppearance(bool bForceUpdate);
};


// Class BIOC_Base.BioInterface_Appearance_ArtPlaceable
// 0x0000 (0x004C - 0x004C)
class UBioInterface_Appearance_ArtPlaceable : public UBioInterface_Appearance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInterface_Appearance_ArtPlaceable");
		return ptr;
	}


	bool UpdateAppearance(bool bForceUpdate);
};


// Class BIOC_Base.BioInterface_Appearance_Pawn
// 0x007C (0x00C8 - 0x004C)
class UBioInterface_Appearance_Pawn : public UBioInterface_Appearance
{
public:
	class UBio_Appr_Character_Settings*                m_oSettings;                                              // 0x004C(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       CreatureSpeedOverride;                                    // 0x0050(0x0008) (Edit, Const)
	class UBioMaterialOverride*                        m_pMaterialParameters;                                    // 0x0058(0x0004) (ExportObject, NeedCtorLink, EditInline)
	struct FBioPawnHeadGearVisibility                  m_headGearVisibilityOverride;                             // 0x005C(0x001C) (Edit, Const)
	struct FBioPawnHeadGearVisibility                  m_headGearVisibilityRunTimeOverride;                      // 0x0078(0x001C)
	struct FBioPawnHeadGearVisibility                  m_cachedHeadGearVisibility;                               // 0x0094(0x001C)
	unsigned long                                      m_bHeadGearVisiblePreference : 1;                         // 0x00B0(0x0004)
	struct FName                                       m_nmCreatureSpeed;                                        // 0x00B4(0x0008)
	struct FName                                       m_nmBloodColor;                                           // 0x00BC(0x0008)
	class UBio2DA*                                     m_oCreatureSpeedsTable;                                   // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInterface_Appearance_Pawn");
		return ptr;
	}


	float GetDefaultCollisionReadyHeight();
	float GetDefaultCollisionCrouchHeight();
	float GetDefaultCollisionRadius();
	float GetDefaultCollisionHeight();
	void SetCreatureSpeed(const struct FName& NewSpeedOverride);
	void GetCreatureSpeeds(struct FCreatureSpeeds* SpeedsRecord);
	bool UpdateAppearance(bool bForceUpdate);
	void ExtractResources(class ABioPawn* Pawn, class UBio_Appr_Character* Appearance);
};


// Class BIOC_Base.BioInterfaceAppearanceVehicle
// 0x000C (0x0058 - 0x004C)
class UBioInterfaceAppearanceVehicle : public UBioInterface_Appearance
{
public:
	TArray<struct FBioVehicleTurretRunTimeInfo>        m_aTurretRuntimeInfo;                                     // 0x004C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInterfaceAppearanceVehicle");
		return ptr;
	}


	void ResetToDefaults();
	bool UpdateAppearance(bool bForceUpdate);
};


// Class BIOC_Base.BioItem
// 0x0034 (0x0078 - 0x0044)
class UBioItem : public UBioBaseComponent
{
public:
	class UBioAppearanceItem*                          m_oAppearance;                                            // 0x0044(0x0004) (Edit)
	class UBioAttributesItem*                          m_oAttributes;                                            // 0x0048(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	int                                                m_nID;                                                    // 0x004C(0x0004)
	class UClass*                                      m_clsAppearanceClass;                                     // 0x0050(0x0004) (Deprecated)
	unsigned long                                      m_bNewInInventory : 1;                                    // 0x0054(0x0004)
	int                                                m_plotConditionalID;                                      // 0x0058(0x0004)
	float                                              m_fSalvageMultiplier;                                     // 0x005C(0x0004) (Config)
	TArray<struct FBioItemPropertyStatus>              m_aItemPropertyStatus;                                    // 0x0060(0x000C) (NeedCtorLink)
	class UBio2DA*                                     m_p2DA;                                                   // 0x006C(0x0004)
	class UBio2DA*                                     m_pCategory2DA;                                           // 0x0070(0x0004)
	class UBio2DA*                                     m_pItemProperty2DA;                                       // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItem");
		return ptr;
	}


	class UClass* STATIC_GetSaveObjectClass();
	bool ComputeCategoryDisplayInfo(int* categoryGuiIcon);
	void GenerateName(struct FString* sName);
	bool GetItemPropertyInfo(int nItemPropertyIndex, struct FBioItemPropertyInfo* stPropInfo);
	int GetNumItemProperties();
	int GetMaxItemPropertyCount();
	int GetItemGuiClassIcon();
	void RemoveItemProperty(int nItemPropertyID);
	void AddItemProperty(int nItemPropertyID);
	void Initialize();
	struct FName GetItemTypeName();
	float CalculateSalvageValue();
	float CalculatePrice();
	float CalculateBasePrice();
	bool ValidateItem();
	void DescribeItem();
};


// Class BIOC_Base.BioItemSophisticated
// 0x0024 (0x009C - 0x0078)
class UBioItemSophisticated : public UBioItem
{
public:
	unsigned char                                      m_MIN_ITEM_SOPHISTICATION;                                // 0x0078(0x0001) (Const, Config)
	unsigned char                                      m_MAX_ITEM_SOPHISTICATION;                                // 0x0079(0x0001) (Const, Config)
	unsigned char                                      m_eSophistication;                                        // 0x007A(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x007B(0x0001) MISSED OFFSET
	class UBioMaterialOverride*                        m_pMaterialParameters;                                    // 0x007C(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UBioGamePropertyContainer*                   m_oGameProperties;                                        // 0x0080(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioGamePropertyManager*                     m_oAppliedGameProperties;                                 // 0x0084(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_manufacturer;                                           // 0x0088(0x0004)
	class UBio2DA*                                     m_pManufacturer2DA;                                       // 0x008C(0x0004)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0090(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioItemSophisticated.m_srSophistication

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSophisticated");
		return ptr;
	}


	class UBioMaterialOverride* GetMaterialParameters();
	void GenerateName(struct FString* sName);
	void GetManufacturerInfo(struct FBioManufacturerDetails* stManufacturerDetails);
	void Initialize();
	void DescribeItem();
	void TickItem(float fDeltaTime);
	class UPhysicsAsset* GetPhysicsAsset();
	class UAnimTree* GetAnimationTree();
	class UAnimSet* GetAnimationSet();
	void ApplyMaterials(class USkeletalMeshComponent* oSkelMesh);
	class USkeletalMesh* GetSkeletalMesh();
	int ComputeSophistication(class UBioPawnBehavior* oBehavior);
	void SetSophistication(unsigned char sophistication);
	int ComputeNonWeaponSophistication(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioEquipmentSlot> eEquipmentSlot);
};


// Class BIOC_Base.BioItemEquippable
// 0x0001 (0x009D - 0x009C)
class UBioItemEquippable : public UBioItemSophisticated
{
public:
	TEnumAsByte<EBioEquipmentType>                     m_eEquipmentType;                                         // 0x009C(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemEquippable");
		return ptr;
	}


	void OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget);
	void DescribeItem();
	void OnUnequipInternal(class ABioPawn* oPawn);
	void OnUnequip(class ABioPawn* oPawn);
	void OnEquipInternal(class ABioPawn* oPawn);
	void OnEquip(class ABioPawn* oPawn);
};


// Class BIOC_Base.BioItemXModdable
// 0x000F (0x00AC - 0x009D)
class UBioItemXModdable : public UBioItemEquippable
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TArray<struct FBioItemXModdableSlotSpec>           m_slotSpecs;                                              // 0x00A0(0x000C) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemXModdable");
		return ptr;
	}


	void OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget);
	void Load(class UBioItemXModdableSaveObject* pData);
	void Save(class UBioItemXModdableSaveObject* pData);
	class UBioItemXMod* GetXMod(int nType, int nIndex);
	int FindXMod(class UBioItemXMod* pXMod);
	class UBioItemXMod* UninstallXMod(int Type, int Index);
	int InstallXMod(class UBioItemXMod* xMod, int Index);
	class UClass* STATIC_GetSaveObjectClass();
	bool RetrieveXModAtVirtualSlot(int nSlot, struct FBioItemXModVirtualSlot* strVSlot);
	int TotalVirtualXModSlots();
	void TickItem(float fDeltaTime);
	void DescribeItem();
	float AddPriceOfAllXMods();
};


// Class BIOC_Base.BioItemArmor
// 0x0001 (0x00AD - 0x00AC)
class UBioItemArmor : public UBioItemXModdable
{
public:
	TEnumAsByte<EBioArmorType>                         m_eArmorType;                                             // 0x00AC(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemArmor");
		return ptr;
	}


	void OnUnequipInternal(class ABioPawn* oPawn);
	void OnEquipInternal(class ABioPawn* oPawn);
	void DescribeItem();
	int ComputeSophistication(class UBioPawnBehavior* oBehavior);
	struct FName GetItemTypeName();
};


// Class BIOC_Base.BioItemArmorShielded
// 0x0007 (0x00B4 - 0x00AD)
class UBioItemArmorShielded : public UBioItemArmor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	class UBioAttributesShield*                        m_pShieldAttributes;                                      // 0x00B0(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemArmorShielded");
		return ptr;
	}


	void Initialize();
	void DescribeItem();
	struct FName GetItemTypeName();
	void OnUnequipInternal(class ABioPawn* oPawn);
	void OnEquipInternal(class ABioPawn* oPawn);
	void InitializeShields(class ABioPawn* oPawn);
};


// Class BIOC_Base.BioItemBioAmp
// 0x0000 (0x00AC - 0x00AC)
class UBioItemBioAmp : public UBioItemXModdable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemBioAmp");
		return ptr;
	}


	void DescribeItem();
	int ComputeSophistication(class UBioPawnBehavior* oBehavior);
};


// Class BIOC_Base.BioItemEnumerations
// 0x0000 (0x003C - 0x003C)
class UBioItemEnumerations : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemEnumerations");
		return ptr;
	}

};


// Class BIOC_Base.BioItemGrenade
// 0x0020 (0x00CC - 0x00AC)
class UBioItemGrenade : public UBioItemXModdable
{
public:
	class UBioAttributesDamage*                        m_pDamageAttributes;                                      // 0x00AC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioVISGrenade*                              m_pVisualImpactSet;                                       // 0x00B0(0x0004)
	class UBioVISGrenade*                              m_pVisualImpactSetDefault;                                // 0x00B4(0x0004)
	class USkeletalMesh*                               m_pMesh;                                                  // 0x00B8(0x0004)
	class USkeletalMesh*                               m_pMeshDefault;                                           // 0x00BC(0x0004)
	class UPhysicsAsset*                               m_pPhysicsAsset;                                          // 0x00C0(0x0004)
	class UPhysicsAsset*                               m_pPhysicsAssetDefault;                                   // 0x00C4(0x0004)
	class UBioDeathVFX*                                m_pDeathVFX;                                              // 0x00C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemGrenade");
		return ptr;
	}


	void GenerateName(struct FString* sName);
	void SetDeathVFX(class UBioDeathVFX* oDeathVFX);
	class UBioDeathVFX* GetDeathVFX();
	void SetPhysicsAsset(class UPhysicsAsset* oPhysicsAsset);
	class UPhysicsAsset* GetPhysicsAsset();
	void SetMesh(class USkeletalMesh* oMesh);
	class USkeletalMesh* GetMesh();
	void SetVisualImpactSet(class UBioVISGrenade* oVisualImpactSet);
	class UBioVISGrenade* GetVisualImpactSet();
	float CalculatePrice();
	void Initialize();
	void OnUnequipInternal(class ABioPawn* oPawn);
	void OnEquipInternal(class ABioPawn* oPawn);
	struct FName GetItemTypeName();
};


// Class BIOC_Base.BioItemImporter
// 0x0020 (0x0064 - 0x0044)
class UBioItemImporter : public UBioBaseComponent
{
public:
	struct FName                                       m_nmDefaultItem2DAPackage;                                // 0x0044(0x0008)
	struct FName                                       m_aItem2DANames[0x2];                                     // 0x004C(0x0008)
	class UBio2DA*                                     m_aItem2DA[0x2];                                          // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemImporter");
		return ptr;
	}


	class UBioItem* STATIC_LoadGameItemByLabel(const struct FString& sLabel, unsigned char sophistication, const struct FName& nmPackage, class UObject* InOuter, int manuID);
	class UBioItem* STATIC_LoadGameItem(int nId, unsigned char sophistication, const struct FName& nmPackage, class UObject* InOuter, int manuID, class UObject* InExistingObject);
};


// Class BIOC_Base.BioItemVehicleBase
// 0x0000 (0x00AC - 0x00AC)
class UBioItemVehicleBase : public UBioItemXModdable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemVehicleBase");
		return ptr;
	}


	void DescribeItem();
};


// Class BIOC_Base.BioItemWeapon
// 0x0020 (0x00CC - 0x00AC)
class UBioItemWeapon : public UBioItemXModdable
{
public:
	TEnumAsByte<EBioItemWeaponType>                    m_eWeaponType;                                            // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	struct FName                                       m_nmHook;                                                 // 0x00B0(0x0008) (Edit)
	struct FName                                       m_nmOffhandHook;                                          // 0x00B8(0x0008) (Edit)
	class UBioWeaponSoundsSet*                         m_oSounds;                                                // 0x00C0(0x0004) (Edit)
	class UClass*                                      m_weaponClass;                                            // 0x00C4(0x0004)
	class UBioAttributesDamage*                        m_pDamageAttributes;                                      // 0x00C8(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemWeapon");
		return ptr;
	}


	void DescribeItem();
	struct FName GetItemTypeName();
	void Initialize();
};


// Class BIOC_Base.BioItemWeaponMelee
// 0x0001 (0x00CD - 0x00CC)
class UBioItemWeaponMelee : public UBioItemWeapon
{
public:
	TEnumAsByte<EBioItemWeaponMeleeType>               m_eWeaponMeleeType;                                       // 0x00CC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemWeaponMelee");
		return ptr;
	}


	void DescribeItem();
	struct FName GetItemTypeName();
};


// Class BIOC_Base.BioItemWeaponRanged
// 0x0010 (0x00DC - 0x00CC)
class UBioItemWeaponRanged : public UBioItemWeapon
{
public:
	TEnumAsByte<EBioItemWeaponRangedType>              m_eWeaponRangedType;                                      // 0x00CC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              m_fMinRangeConst;                                         // 0x00D0(0x0004) (Config)
	float                                              m_fBestRangeConst;                                        // 0x00D4(0x0004) (Config)
	float                                              m_fMaxRangeConst;                                         // 0x00D8(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemWeaponRanged");
		return ptr;
	}


	void DescribeItem();
	void Initialize();
	void WeaponRanges(float* MinRange, float* BestRange, float* MaxRange);
	int ComputeSophistication(class UBioPawnBehavior* oBehavior);
	struct FName GetItemTypeName();
};


// Class BIOC_Base.BioItemXMod
// 0x0004 (0x00A0 - 0x009C)
class UBioItemXMod : public UBioItemSophisticated
{
public:
	int                                                m_type;                                                   // 0x009C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemXMod");
		return ptr;
	}


	class UClass* STATIC_GetSaveObjectClass();
	void OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget);
	void DescribeItem();
};


// Class BIOC_Base.BioWeaponSoundsSet
// 0x000C (0x0048 - 0x003C)
class UBioWeaponSoundsSet : public UObject
{
public:
	TArray<struct FBioSoundSet>                        m_aSoundSets;                                             // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWeaponSoundsSet");
		return ptr;
	}

};


// Class BIOC_Base.BioShield
// 0x0018 (0x005C - 0x0044)
class UBioShield : public UBioBaseComponent
{
public:
	class UBioAttributesShield*                        m_pAttributes;                                            // 0x0044(0x0004)
	class UBioShieldView*                              m_oView;                                                  // 0x0048(0x0004)
	class UStaticMeshComponent*                        m_MeshComponent;                                          // 0x004C(0x0004) (ExportObject, Component, EditInline)
	TEnumAsByte<EBioShieldState>                       m_eState;                                                 // 0x0050(0x0001)
	TEnumAsByte<EBioShieldState>                       m_ePendingState;                                          // 0x0051(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0052(0x0002) MISSED OFFSET
	float                                              m_fResetTime;                                             // 0x0054(0x0004)
	unsigned long                                      m_bIsInitialized : 1;                                     // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioShield");
		return ptr;
	}


	void Regenerate(float fAmount, class AActor* oShieldOwner);
	bool IsOnline();
	void SetState(TEnumAsByte<EBioShieldState> eState);
	void Tick(float fTimeDelta, class AActor* oShieldOwner);
	void Reset();
	bool OnDamage(class AActor* oShieldOwner, const struct FVector& vHitLocation, class UClass* clsDamageType, class UBioDamageType* pDamage, float* fDamage);
	void OnAttributesModified(class AActor* oShieldOwner);
	void ShutDown();
	void Deactivate();
	void Initialize(class UBioAttributesShield* pAttributes, class UBioShieldView* oShieldView, class UMeshComponent* oMesh);
	void OnEvent(TEnumAsByte<EBioShieldEvent> eEvent, class AActor* oShieldOwner, const struct FVector& vHitLocation);
	void OnStateTransition(TEnumAsByte<EBioShieldState> eFromState, TEnumAsByte<EBioShieldState> eToState);
};


// Class BIOC_Base.BioShieldView
// 0x0064 (0x00A8 - 0x0044)
class UBioShieldView : public UBioBaseComponent
{
public:
	struct FBioShieldViewEventSpec                     m_aEventSpec[0x6];                                        // 0x0044(0x0010) (Edit, NeedCtorLink)
	class UStaticMesh*                                 m_pShieldMesh;                                            // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioShieldView");
		return ptr;
	}


	void OnEvent(TEnumAsByte<EBioShieldEvent> eEvent, class AActor* oShieldOwner, class UBioShield* oShield, const struct FVector& vHitLocation, const struct FRotator& rHitNormal);
};


// Class BIOC_Base.BioActorType
// 0x0058 (0x009C - 0x0044)
class UBioActorType : public UBioBaseComponent
{
public:
	class UClass*                                      m_clsActor;                                               // 0x0044(0x0004) (Const)
	unsigned long                                      m_bIsGrenadeObstruction : 1;                              // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bGenerateTreasure : 1;                                  // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      m_bMin1Health : 1;                                        // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bIsAffectedByBioRadialImpulse : 1;                      // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bBlockBioRadialImpulse : 1;                             // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bTargetable : 1;                                        // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bCombatTargetable : 1;                                  // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bDefaultActionPossibleOverridden : 1;                   // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bIsThorianControlled : 1;                               // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bPlotProtected : 1;                                     // 0x0048(0x0004) (Edit)
	unsigned long                                      m_bSuppressDisintegration : 1;                            // 0x0048(0x0004) (Edit)
	int                                                m_nTreasureType;                                          // 0x004C(0x0004) (Edit, Const)
	struct FString                                     ActorGameName;                                            // 0x0050(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioActorType.ActorGameNameStrRef
	float                                              m_fPhysicsDamageRelativeVelocityThreshold;                // 0x0060(0x0004) (Edit)
	float                                              m_fPhysicsDamageScalar;                                   // 0x0064(0x0004) (Edit)
	float                                              m_fPhysicsDamageImpulseScalar;                            // 0x0068(0x0004) (Edit)
	float                                              m_fPhysicsDamageMinThreshold;                             // 0x006C(0x0004) (Edit)
	float                                              m_fPhysicsDamageMaxAllowedPerHit;                         // 0x0070(0x0004) (Edit)
	int                                                m_nPhysicsLevel;                                          // 0x0074(0x0004) (Edit)
	float                                              m_fUseRange;                                              // 0x0078(0x0004) (Edit)
	int                                                m_nRequiredScanLevel;                                     // 0x007C(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0080(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioActorType.m_nTargetTipText
	class UClass*                                      AIController;                                             // 0x0084(0x0004) (Edit)
	TArray<struct FName>                               m_aPowers;                                                // 0x0088(0x000C) (Edit, NeedCtorLink)
	class UBio2DA*                                     m_CharacterIcons;                                         // 0x0094(0x0004)
	int                                                m_nCharHeadId;                                            // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActorType");
		return ptr;
	}


	bool IsDisintegrationSuppressed();
	bool IsPlotProtected();
	void GetSquadName();
	int GetSquadIcon(bool bIsDead);
};


// Class BIOC_Base.BioInteractiveActorType
// 0x0000 (0x009C - 0x009C)
class UBioInteractiveActorType : public UBioActorType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInteractiveActorType");
		return ptr;
	}

};


// Class BIOC_Base.BioArtPlaceableType
// 0x005C (0x00F8 - 0x009C)
class UBioArtPlaceableType : public UBioInteractiveActorType
{
public:
	class UBioBaseAppearancePlaceable*                 m_oApperance;                                             // 0x009C(0x0004) (Edit)
	unsigned long                                      m_isCover : 1;                                            // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bAlwaysReceiveImpulse : 1;                              // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bDamageOnImpulse : 1;                                   // 0x00A0(0x0004) (Edit)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bPhysicsAffectable : 1;                                 // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bWakeOnLevelStart : 1;                                  // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bPhysicsAffectableOnDestroyed : 1;                      // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bPhysicsFixedAnimated : 1;                              // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bIsContainer : 1;                                       // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bCanForceOpen : 1;                                      // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bAllowRoleCustomization : 1;                            // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bIsStatic : 1;                                          // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bIsMovable : 1;                                         // 0x00A0(0x0004) (Edit)
	unsigned long                                      m_bIsDeletable : 1;                                       // 0x00A0(0x0004) (Edit)
	float                                              m_fHealth;                                                // 0x00A4(0x0004) (Edit)
	float                                              m_fDamagePerUnitImpulse;                                  // 0x00A8(0x0004) (Edit)
	class UBioDamageType*                              m_pImpulseDamageType;                                     // 0x00AC(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FName                                       m_nmDestroyedState;                                       // 0x00B0(0x0008)
	struct FName                                       m_nmDamagedState;                                         // 0x00B8(0x0008)
	TEnumAsByte<EeBioAPLUseCase>                       m_eUseCase;                                               // 0x00C0(0x0001) (Edit)
	TEnumAsByte<EeArtPlaceableStates>                  m_StartingState;                                          // 0x00C1(0x0001) (Edit)
	TEnumAsByte<EeArtPlaceableStates>                  m_InertState;                                             // 0x00C2(0x0001)
	TEnumAsByte<EeArtPlaceableStates>                  m_State0;                                                 // 0x00C3(0x0001) (Edit)
	TEnumAsByte<EeArtPlaceableStates>                  m_State1;                                                 // 0x00C4(0x0001) (Edit)
	TEnumAsByte<EBioSkillGameDifficulty>               m_SkillDifficulty;                                        // 0x00C5(0x0001) (Edit)
	TEnumAsByte<EeArtPlaceableRole>                    m_eRole;                                                  // 0x00C6(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00C7(0x0001) MISSED OFFSET
	struct FName                                       DefaultStartingState;                                     // 0x00C8(0x0008)
	struct FName                                       OnUseSucceed;                                             // 0x00D0(0x0008)
	struct FName                                       OnUseFail;                                                // 0x00D8(0x0008)
	struct FName                                       DefaultInertState;                                        // 0x00E0(0x0008) (Edit)
	class UBioArtPlaceableRoles*                       m_RoleData;                                               // 0x00E8(0x0004) (Edit)
	TArray<struct FCoverInformation>                   m_aCoverSlots;                                            // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableType");
		return ptr;
	}


	void ApplyRoleToBehavior(class UBioArtPlaceableBehavior* oBehave);
	void AllowRoleCustomization(bool bYes);
	void ApplyRole(int nNewRole, class UBioArtPlaceableBehavior* oBehave);
};


// Class BIOC_Base.BioArtPlaceableInertType
// 0x0000 (0x00F8 - 0x00F8)
class UBioArtPlaceableInertType : public UBioArtPlaceableType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableInertType");
		return ptr;
	}

};


// Class BIOC_Base.BioArtPlaceableRoles
// 0x0024 (0x0060 - 0x003C)
class UBioArtPlaceableRoles : public UObject
{
public:
	struct FArtPlaceableRole                           oDefaults;                                                // 0x003C(0x0018) (Edit, NeedCtorLink, EditInline)
	TArray<struct FArtPlaceableRole>                   aRoles;                                                   // 0x0054(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableRoles");
		return ptr;
	}

};


// Class BIOC_Base.BioPawnType
// 0x0104 (0x01A0 - 0x009C)
class UBioPawnType : public UBioInteractiveActorType
{
public:
	float                                              m_fPowerUsePercent;                                       // 0x009C(0x0004) (Edit)
	class UBio_Appr_Character*                         m_oAppearance;                                            // 0x00A0(0x0004) (Edit)
	class UBio_Appr_Character_Settings*                m_oAppearanceSettings;                                    // 0x00A4(0x0004) (Edit, ExportObject, EditConst, Component, EditInline)
	TEnumAsByte<EBioBaseAppearanceReportMethod>        m_eReportMethod;                                          // 0x00A8(0x0001) (Edit)
	TEnumAsByte<EBioPawnClassification>                m_eDefaultClassification;                                 // 0x00A9(0x0001) (Edit)
	TEnumAsByte<EPhysics>                              m_eUseRollingInPhysicsMode;                               // 0x00AA(0x0001) (Edit)
	TEnumAsByte<EPhysics>                              m_StartingPhysicsMode;                                    // 0x00AB(0x0001) (Edit)
	unsigned long                                      m_bIsArmorOverridden : 1;                                 // 0x00AC(0x0004) (Edit)
	unsigned long                                      m_bCanBeBumped : 1;                                       // 0x00AC(0x0004) (Edit)
	unsigned long                                      m_bTerminateRagdollOnDeath : 1;                           // 0x00AC(0x0004) (Edit)
	unsigned long                                      m_bShouldGrantExperienceOnKill : 1;                       // 0x00AC(0x0004) (Edit)
	unsigned long                                      m_bCanBePhysicsImpacted : 1;                              // 0x00AC(0x0004) (Edit)
	unsigned long                                      m_bShowHelmet : 1;                                        // 0x00AC(0x0004) (Deprecated)
	unsigned long                                      m_bShowVisor : 1;                                         // 0x00AC(0x0004) (Deprecated)
	unsigned long                                      m_bShowFacePlate : 1;                                     // 0x00AC(0x0004) (Deprecated)
	class UBioMorphFace*                               m_oMorphFace;                                             // 0x00B0(0x0004) (Edit)
	class UBioMaterialOverride*                        m_oMaterialOverrides;                                     // 0x00B4(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, EditInline)
	struct FName                                       m_nmSightType;                                            // 0x00B8(0x0008) (Edit, Const, EditInline)
	struct FName                                       m_nmHearingType;                                          // 0x00C0(0x0008) (Edit, Const, EditInline)
	int                                                m_nMinAutoLODLevel;                                       // 0x00C8(0x0004) (Edit)
	struct FSoundSpec                                  m_aSoundSpec[0x3];                                        // 0x00CC(0x0008) (Edit)
	struct FParticleSystemSpec                         m_aParticleSystemSpec[0x5];                               // 0x00E4(0x0014) (Edit, NeedCtorLink)
	float                                              m_fPhysicsRecoverSpeedThreshold;                          // 0x0148(0x0004) (Edit)
	float                                              m_fPhysicsSettleDownTime;                                 // 0x014C(0x0004) (Edit)
	float                                              m_fPhysicsDeathSpeedThreshold;                            // 0x0150(0x0004) (Edit)
	float                                              m_fDeathAnimationMagnitudeThreshold;                      // 0x0154(0x0004) (Edit)
	float                                              m_fPhysicsThreshold;                                      // 0x0158(0x0004) (Edit)
	float                                              m_fPhysicsThresholdRegenerationRate;                      // 0x015C(0x0004) (Edit)
	class UBioCreatureSoundSet*                        m_pSndSetVOPkg;                                           // 0x0160(0x0004) (Edit)
	class UFaceFXAnimSet*                              m_pSndSetFaceFXPkg;                                       // 0x0164(0x0004) (Edit)
	class USoundCue*                                   m_oRollingIdle;                                           // 0x0168(0x0004) (Edit)
	class USoundCue*                                   m_oRollingStartMoving;                                    // 0x016C(0x0004) (Edit)
	struct FName                                       m_nmGrenadeSocket;                                        // 0x0170(0x0008) (Edit)
	class UBioVFXTemplate*                             m_vfxDepartuerEffect;                                     // 0x0178(0x0004) (Edit)
	class UBioVFXTemplate*                             m_vfxArivalEffect;                                        // 0x017C(0x0004) (Edit)
	float                                              m_fAINoiseMag;                                            // 0x0180(0x0004) (Edit)
	float                                              m_fPhysicsDeathDamageThreshold;                           // 0x0184(0x0004) (Deprecated)
	struct FVector                                     m_vCrouchedWeaponOffset;                                  // 0x0188(0x000C) (Deprecated)
	struct FVector                                     m_vStandingWeaponOffset;                                  // 0x0194(0x000C) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnType");
		return ptr;
	}

};


// Class BIOC_Base.BioPawnChallengeScaledType
// 0x0038 (0x01D8 - 0x01A0)
class UBioPawnChallengeScaledType : public UBioPawnType
{
public:
	class UBio2DA*                                     m_tblEquipment;                                           // 0x01A0(0x0004) (Edit, Const)
	unsigned long                                      m_bEnsureXModIntegrity : 1;                               // 0x01A4(0x0004) (Edit, Const)
	TEnumAsByte<EBioPawnChallengeRank>                 m_eRank;                                                  // 0x01A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A9(0x0003) MISSED OFFSET
	struct FName                                       m_aRankNames[0x4];                                        // 0x01AC(0x0008) (Const)
	class UBio2DA*                                     m_tblChallenge;                                           // 0x01CC(0x0004) (Const)
	class UBio2DA*                                     m_tblAttributes;                                          // 0x01D0(0x0004) (Edit, Const)
	class UBio2DA*                                     m_tblTalents;                                             // 0x01D4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnChallengeScaledType");
		return ptr;
	}


	TEnumAsByte<EBioPawnChallengeRank> GetBioPawnChallengeRank();
	int ComputeRankedChallengeLevel(int effectiveChallengeLevel);
};


// Class BIOC_Base.BioStageType
// 0x0010 (0x00AC - 0x009C)
class UBioStageType : public UBioActorType
{
public:
	class USkeletalMesh*                               m_Mesh;                                                   // 0x009C(0x0004) (Edit)
	TArray<struct FBioStageCamera>                     m_CameraList;                                             // 0x00A0(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioStageType");
		return ptr;
	}

};


// Class BIOC_Base.BioVehicleBaseType
// 0x000C (0x00A8 - 0x009C)
class UBioVehicleBaseType : public UBioInteractiveActorType
{
public:
	class UBioAppearanceVehicle*                       m_oAppearance;                                            // 0x009C(0x0004) (Edit)
	class UBioAppearanceVehicleSettings*               m_oAppearanceSettings;                                    // 0x00A0(0x0004) (Edit, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      m_bMovementEnabled : 1;                                   // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleBaseType");
		return ptr;
	}

};


// Class BIOC_Base.BioActorBehavior
// 0x0140 (0x0184 - 0x0044)
class UBioActorBehavior : public UBioBaseComponent
{
public:
	unsigned long                                      m_bAreShieldsDisabled : 1;                                // 0x0044(0x0004) (Config)
	unsigned long                                      AllowFriendlyCollateral : 1;                              // 0x0044(0x0004) (Config)
	unsigned long                                      ActorGameNameOverride : 1;                                // 0x0044(0x0004) (Edit)
	unsigned long                                      bActive : 1;                                              // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bMin1HealthOverride : 1;                                // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bMin1Health : 1;                                        // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bIsDead : 1;                                            // 0x0044(0x0004) (Edit)
	unsigned long                                      bUseStringRefActorGameName : 1;                           // 0x0044(0x0004) (Config)
	unsigned long                                      bDisableFacefx : 1;                                       // 0x0044(0x0004) (Config)
	unsigned long                                      Mountable : 1;                                            // 0x0044(0x0004) (Edit)
	unsigned long                                      AllowFall : 1;                                            // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bIsBusy : 1;                                            // 0x0044(0x0004)
	unsigned long                                      m_bInActionStation : 1;                                   // 0x0044(0x0004)
	unsigned long                                      m_bAllowDamageInCombatStasis : 1;                         // 0x0044(0x0004) (ExportObject, EditInline)
	unsigned long                                      m_bTargetable : 1;                                        // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bTargetableOverride : 1;                                // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bCombatTargetable : 1;                                  // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bCombatTargetableOverride : 1;                          // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bUseRangeOverride : 1;                                  // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bRequiredScanLevelOverride : 1;                         // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bTargetTipTextOverride : 1;                             // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bDefaultActionPossibleOverridden : 1;                   // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bDefaultActionPossible : 1;                             // 0x0044(0x0004)
	unsigned long                                      m_bPhysicsDamageEnabled : 1;                              // 0x0044(0x0004) (Config)
	unsigned long                                      m_bPhysicsDamageLoggingEnabled : 1;                       // 0x0044(0x0004) (Config)
	unsigned long                                      m_bPlotProtected : 1;                                     // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bPlotProtectedOverride : 1;                             // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bSuppressDisintegration : 1;                            // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bSuppressDisintegrationOverride : 1;                    // 0x0044(0x0004) (Edit)
	class UBioInventory*                               m_oInventory;                                             // 0x0048(0x0004) (ExportObject, EditConst, NeedCtorLink, EditInline)
	struct FString                                     ActorGameName;                                            // 0x004C(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0058(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioActorBehavior.ActorGameNameStrRef
	class UBioActorType*                               m_oActorType;                                             // 0x005C(0x0004) (Edit)
	struct FColor                                      ActorGameNameColor;                                       // 0x0060(0x0004) (Edit)
	class UBioInterface_Appearance*                    m_oAppearanceType;                                        // 0x0064(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, EditInline)
	class UBioGamePropertyManager*                     m_oAppliedGameProperties;                                 // 0x0068(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioGamePropertyContainer*                   m_oGameProperties;                                        // 0x006C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              m_fInteractionRange;                                      // 0x0070(0x0004)
	class UBioCombatLog*                               m_oCombatLog;                                             // 0x0074(0x0004)
	float                                              m_fHenchAimLagFactor;                                     // 0x0078(0x0004) (Transient, Config)
	float                                              m_fMaxHenchAimDist;                                       // 0x007C(0x0004) (Transient, Config)
	TArray<class UBioSuperMode*>                       m_lSuperModeList;                                         // 0x0080(0x000C) (Transient, NeedCtorLink)
	class UBioSuperMode*                               m_oCurrentActiveSuperMode;                                // 0x008C(0x0004) (Transient)
	class UBioActive*                                  m_oCurrentModalActive;                                    // 0x0090(0x0004) (Transient)
	class AActor*                                      m_oCurrentTarget;                                         // 0x0094(0x0004) (Transient)
	class AActor*                                      m_oLastTarget;                                            // 0x0098(0x0004) (Transient)
	TArray<class UBioActive*>                          m_aRegisteredActive;                                      // 0x009C(0x000C) (Transient, NeedCtorLink)
	TArray<class UBioReactive*>                        m_aRegisteredReactive;                                    // 0x00A8(0x000C) (Transient, NeedCtorLink)
	TArray<class UBioReactive*>                        m_aPendingReactive;                                       // 0x00B4(0x000C) (Transient, NeedCtorLink)
	TArray<class UBioReactive*>                        m_aActivatedReactive;                                     // 0x00C0(0x000C) (Transient, NeedCtorLink)
	int                                                m_nPreviousSuperMode;                                     // 0x00CC(0x0004) (Transient)
	struct FName                                       m_nmPowerAffectingActor;                                  // 0x00D0(0x0008)
	float                                              m_fPowerAffectingActorTime;                               // 0x00D8(0x0004)
	class UBioShield*                                  m_oShield;                                                // 0x00DC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioCameraShakeInterface*                    m_cameraShakeInterface;                                   // 0x00E0(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioStickyGrenadeInterface*                  m_stickyGrenadeInterface;                                 // 0x00E4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioVFXInterface*                            m_vfxInterface;                                           // 0x00E8(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              m_fFiringObsticalAbortPercentage;                         // 0x00EC(0x0004) (Config)
	float                                              m_fFiringAbortCutoffRadius;                               // 0x00F0(0x0004) (Config)
	struct FBioActorPawnBehaviorLOSCache               m_ActorBehaviorLOSCache;                                  // 0x00F4(0x000C) (Transient, NeedCtorLink)
	int                                                m_nLeaveActionStation;                                    // 0x0100(0x0004)
	class UBioDamageType*                              m_pBumpDamage;                                            // 0x0104(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioDamageType*                              m_pPhysicsDamage;                                         // 0x0108(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_nInvulnerabilityCount;                                  // 0x010C(0x0004)
	float                                              m_fDamageVulnerability;                                   // 0x0110(0x0004) (ExportObject, EditInline)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioActorBehavior.m_srStasisPowerText
	TEnumAsByte<EBioActionFrameworkErrorCodes>         m_eActionFrameworkErrorCode;                              // 0x0118(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	class UBioDeathVFXGameState*                       m_pDeathVFXGameState;                                     // 0x011C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              m_fUseRange;                                              // 0x0120(0x0004) (Edit)
	int                                                m_nRequiredScanLevel;                                     // 0x0124(0x0004) (Edit)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0128(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioActorBehavior.m_aTargetTipDefaults
	int                                                m_nMaxTargetTipStrings;                                   // 0x0134(0x0004)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0138(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioActorBehavior.m_nTargetTipTextOverridden
	float                                              m_fPhysicsDamagePerRelVel;                                // 0x013C(0x0004) (Config)
	float                                              m_fPhysicsDamageImpulsePerRelVel;                         // 0x0140(0x0004) (Config)
	float                                              m_fPhysicsDamageTimer;                                    // 0x0144(0x0004)
	float                                              m_fPhysicsDamageTimerMax;                                 // 0x0148(0x0004)
	float                                              m_fPhysicsSoundLastTimePlayed;                            // 0x014C(0x0004) (Transient)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0150(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioActorBehavior.m_aPowerText
	struct FMap_Mirror                                 m_mLatentSequenceDataStore;                               // 0x015C(0x0014) (Const, Native)
	struct FMap_Mirror                                 m_mapAnimationStateTrakingList;                           // 0x0170(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActorBehavior");
		return ptr;
	}


	void GrenadeDetached(class AActor* oGrenade);
	void GrenadeAttached(class AActor* oGrenade);
	bool GetPowerText(struct FString* sPowerText);
	bool IsDisintegrationSuppressed();
	bool IsPlotProtected();
	bool IsInvulnerable();
	void MakeInvulnerable(bool B);
	void DelayTacticalOrders();
	void ApplyTacticalOrders();
	class UClass* STATIC_GetSaveObjectClass();
	bool ExitCombatStasis();
	bool EnterCombatStasis(float fDuration, bool bAllowDamage);
	bool MoveActorToFloor(class AActor* oActor);
	class AActor* STATIC_SpawnActorFromType(const struct FString& sActorResource, const struct FVector& vLocation, const struct FRotator& rRotation, float fLifeSpan, class AActor* oOwner);
	float GetMaxHealth();
	class UBioBaseAppearance* GetAppearanceTemplate();
	bool TermRagdoll();
	bool InitRagdoll();
	bool IsRadialImpulseObstructed(const struct FVector& vStart, const struct FVector& vEnd);
	bool ApplyRadialImpulse(const struct FVector& vLineOfSightOrigin, const struct FVector& vImpulseOrigin, float fImpulseMagnitude, const struct FName& nmPhysicsBoneName);
	bool ExplosionHurtRadius(float fBaseDamage, float fExplosionRadius, class UClass* clsDamageType, class UBioDamageType* pDamage, float fMomentum, const struct FVector& vDamageImpactOrigin, const struct FVector& vImpactOriginOffset, int nMaxTargetZones, class AActor* oIgnoredActor, class AController* oInstigatedByController, bool bDoFullDamage);
	bool IsObstructed(const struct FVector& vStart, const struct FVector& vEnd, class AActor* oCandidate);
	class UBioInventory* GetInventory();
	bool STATIC_DetachMesh(class USkeletalMeshComponent* Mesh, class USkeletalMeshComponent* subMesh);
	bool STATIC_AttachMeshToClosestBone(class USkeletalMeshComponent* Mesh, float fMeshDrawScale, class USkeletalMeshComponent* subMesh, const struct FVector& subMeshPosition, const struct FRotator& subMeshRotation);
	class UAudioComponent* PlayVOElements(const struct FString& sText, class USoundCue* oVOSound, class UFaceFXAnimSet* oVOLipSet, const struct FString& sVOLipAnim, bool bLetFaceFXPlayAudio, bool bAutoDestroy, struct FBioVOSettings* cSettings);
	void RanOverByVehicle(class ABioVehicleBase* oVehicle);
	void OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget);
	bool GetBusyState();
	void SetBusyState(bool bSetBusy);
	void SetActive(bool bSetActive);
	bool IsCurrentTarget(class AActor* oCandidateTarget);
	bool IsPenetratedByInstantWeaponFire(class UClass* clsDamageType, class UBioDamageType* pDamage);
	void OnAnimEnd(class UAnimNodeSequence* oAnimation, float PlayedTime, float ExcessTime);
	void ReactToDeath(float Damage, float fDeathDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage);
	void CacheDeathVFXGameState(float fDamage, float fDeathDamage, class AController* pInstigatorController, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UBioDamageType* pDamage);
	void AmplifyDamage(float* Damage);
	void HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* oDirectlyHitActor, class UDamageType* pDamage);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* pDamageCausingActor, class UDamageType* pDamage);
	bool IsFriendlyFire(class AController* pInstigatorController, class UBioDamageType* pDamage);
	void ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter);
	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UDamageType* pDamage);
	void SetActorGameName(const struct FString& newActorGameName);
	struct FString GetActorGameName();
	bool IsMin1Health();
	void InitializeRunTimeOnlyTransients();
	void BioRelateActors();
	bool ShouldChallengeScale();
	TEnumAsByte<EBioActionFrameworkErrorCodes> GetActionFrameworkErrorCode();
	void SetActionFrameworkErrorCode(TEnumAsByte<EBioActionFrameworkErrorCodes> eError);
	bool HasCapability(class UBioCapability* oCap);
	bool IsAbilityEnabled(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	int AbilityEnable(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	void ComputeStepOutLocations(class AController* oCoverUser, int nStepFlags, const struct FVector& vSlotLoc, const struct FRotator& rSlotRot, float fLeftDist, float fRightDist, const struct FVector& vExtents, struct FVector* vHidePos, struct FVector* vStepLeftPost, struct FVector* vStepRightPost, struct FVector* vLeanLeftLocation, struct FVector* vLeanRightLocation);
	bool WeaponLineOfSightThreshold(class AActor* oTarget, bool bCrouched, float fThreshold);
	bool WeaponLineOfSightFromLocation(const struct FVector& vLoc, class AActor* oTarget, bool bCrouched, unsigned char LeanDirection);
	bool GetCurrentMoveTarget(class AActor** oMoveTarget, struct FVector* vTarget);
	void RemoveAllLatentSequenceData();
	void RemoveLatentSequenceData(class UClass* ClsType);
	class UBioSeqData* MakeLatentSequenceData(class UClass* ClsType);
	class UBioSeqData* GetLatentSequenceData(class UClass* ClsType);
	void DumpLatentSequenceData();
	class ABioBaseSquad* GetSquad();
	void InitializeForPlay();
	void SoftResetMovementAndAnimationState();
	void HardResetActionAndAnimationState();
	void ReleasePendingReactive(class UBioReactive* oReactive);
	bool ReleaseActiveByClass(class UClass* oActiveToRelease);
	bool ReleaseActive();
	class UBioReactive* AcquireReactive(class UClass* clsReactive, class AActor* oInstigator);
	class UBioActive* SearchForActive(class UClass* clsActive);
	class UBioActive* AcquireActive(class UClass* clsActive, bool bAutoStartActive);
	void RegisterReactive(class UClass* clsReactive, class UBioReactive* oReactive);
	void RegisterActive(class UClass* clsActive, class UBioActive* oActive);
	void EnableCollision(bool bState);
	void OnPhysicsImpulse(class UMeshComponent* oMesh, bool bIsForce, struct FVector* Impulse, struct FVector* Position, struct FName* BoneName);
	bool IsAbleToInstigate();
	bool IsDefaultActionPossible();
	bool IsWithinUseRange(const struct FVector& vRefLocation);
	float GetUseRange();
	bool GetScanable(int nInstigatorScanLevel);
	bool GetCombatTargetable();
	bool GetTargetable();
	bool IsCombatSelectable(class ABioPlayerController* pPlayerController);
	bool IsExploreSelectable(class ABioPlayerController* pPlayerController);
	bool GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState);
	bool GetTargetZoneLocationN(int nIndex, struct FVector* vLocation);
	struct FVector GetTargetZoneLocation();
	void RecordGeneralDamage(class APawn* oInstigator, struct FBioDamageReporter* tDamageReporter);
	void ClearDamageReporter(struct FBioDamageReporter* tDamageReporter);
	void OnCastAt(class AActor* oWho, class APawn* oAttacker, struct FName* Power);
	void OnAttacked(class AActor* oWho, class APawn* oAttacker, struct FName* Weapon);
	void GenerateOnCastAt(class UBioActorBehavior* oAttacker, struct FName* nPower);
	void GenerateOnAttacked(class UBioActorBehavior* oAttacker, struct FName* nWeapon);
	bool CanBeMounted(class APawn* oMounter);
	bool CanBeShot(class UBioActorBehavior* pOther);
	bool IsSuperModeCurrentAndActive(TEnumAsByte<EBioSuperModes> eSuperMode);
	void SetAnimationStateTrackingFor(const struct FName& nmNodeName, const struct FName& nmValue);
	struct FName GetAnimationStateTrackingFor(const struct FName& nmNodeName);
	void GetTargetTipText(class UBioEpicPawnBehavior* oSourcePawnBehav, struct FString* strTip);
	class AActor* GetTarget();
	bool SetTarget(class AActor* oTarget, bool bLockOnTarget);
	class UBioSuperMode* FindSuperMode(class UClass* clsSuperMode);
	bool SetSuperMode(TEnumAsByte<EBioSuperModes> nSuperMode, bool bActivate, bool bReturnToSuperMode);
	TEnumAsByte<EBioSuperModes> GetPreviousSuperMode();
	void TickBehavior(float DeltaTime);
};


// Class BIOC_Base.BioArtPlaceableBehavior
// 0x00B0 (0x0234 - 0x0184)
class UBioArtPlaceableBehavior : public UBioActorBehavior
{
public:
	TEnumAsByte<EeMateralVariation>                    MaterialVariation;                                        // 0x0184(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0185(0x0003) MISSED OFFSET
	struct FName                                       m_nCurrentMaterialVar;                                    // 0x0188(0x0008)
	struct FName                                       StartingState;                                            // 0x0190(0x0008) (Edit)
	unsigned long                                      m_bStartingStateOverride : 1;                             // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bUseCaseOverride : 1;                                   // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bPlayerOnly : 1;                                        // 0x0198(0x0004) (Edit)
	unsigned long                                      Enabled : 1;                                              // 0x0198(0x0004) (Edit)
	unsigned long                                      bDebugHasKey : 1;                                         // 0x0198(0x0004)
	unsigned long                                      m_bInPhysics : 1;                                         // 0x0198(0x0004)
	unsigned long                                      m_bPhysicsAffectableOverride : 1;                         // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bPhysicsAffectable : 1;                                 // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bUseCustomCollisionSettings : 1;                        // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bDontInvalidatePaths : 1;                               // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bHealthOverride : 1;                                    // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bCanForceOpen : 1;                                      // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bCanForceOpenOverride : 1;                              // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bTreasureOverride : 1;                                  // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bMonitorDoor : 1;                                       // 0x0198(0x0004)
	unsigned long                                      bNoStateSave : 1;                                         // 0x0198(0x0004) (Edit)
	unsigned long                                      m_bSkillGameFailed : 1;                                   // 0x0198(0x0004)
	unsigned long                                      m_bSkillGameXpAwarded : 1;                                // 0x0198(0x0004)
	struct FName                                       m_State0;                                                 // 0x019C(0x0008) (Edit)
	struct FName                                       m_State1;                                                 // 0x01A4(0x0008) (Edit)
	TEnumAsByte<EeBioAPLUseCase>                       m_eUseCase;                                               // 0x01AC(0x0001) (Edit)
	TEnumAsByte<EBioSkillGameDifficulty>               m_SkillDifficulty;                                        // 0x01AD(0x0001) (Edit)
	TEnumAsByte<EBioRegionAutoSet>                     Region;                                                   // 0x01AE(0x0001) (Edit)
	TEnumAsByte<EBioPlotAutoSet>                       Plot;                                                     // 0x01AF(0x0001) (Edit)
	TEnumAsByte<EBioAutoSet>                           Conditional;                                              // 0x01B0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01B1(0x0003) MISSED OFFSET
	class ABioWorldInfo*                               BioWorld;                                                 // 0x01B4(0x0004) (Transient)
	float                                              m_fSkillProgress;                                         // 0x01B8(0x0004) (Transient)
	struct FName                                       m_nmCurrentActivity;                                      // 0x01BC(0x0008) (Transient)
	struct FString                                     m_sConnectedObjectA;                                      // 0x01C4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     m_sConnectedObjectB;                                      // 0x01D0(0x000C) (Edit, NeedCtorLink)
	float                                              m_fHealth;                                                // 0x01DC(0x0004) (Edit)
	float                                              m_fCurrentHealth;                                         // 0x01E0(0x0004)
	int                                                m_nTreasureID;                                            // 0x01E4(0x0004) (Edit)
	struct FVector                                     m_vLastImpactVector;                                      // 0x01E8(0x000C) (Transient)
	class ABioWp_DoorMarker*                           m_oDoorMarker;                                            // 0x01F4(0x0004)
	int                                                m_nIndex;                                                 // 0x01F8(0x0004)
	struct FString                                     m_sVarName;                                               // 0x01FC(0x000C) (NeedCtorLink)
	int                                                m_nPrevRegionIndex;                                       // 0x0208(0x0004) (Transient)
	int                                                m_nPrevPlotIndex;                                         // 0x020C(0x0004) (Transient)
	struct FName                                       m_nmLastState;                                            // 0x0210(0x0008) (Transient)
	unsigned long                                      m_bInMatinee : 1;                                         // 0x0218(0x0004) (Transient)
	TArray<class UAnimSet*>                            m_aBackupAnimSets;                                        // 0x021C(0x000C) (Transient, NeedCtorLink)
	TArray<class AActor*>                              m_aAttachedGrenades;                                      // 0x0228(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableBehavior");
		return ptr;
	}


	void DetonateAttachedGrenades();
	void GrenadeDetached(class AActor* oGrenade);
	void GrenadeAttached(class AActor* oGrenade);
	class UBioBaseSaveObject* WriteSaveObject(class UObject* InOuter, class UBioBaseSaveObject* Save);
	void ReadSaveObject(class UBioBaseSaveObject* Save);
	class UClass* STATIC_GetSaveObjectClass();
	bool ProceedWithMove(class APawn* oPawn);
	void SetWaitingForMove(bool bVal);
	float GetMaxHealth();
	bool TermRagdoll();
	bool InitRagdoll();
	bool CanBeShot(class UBioActorBehavior* pOther);
	void RanOverByVehicle(class ABioVehicleBase* oVehicle);
	bool IsPhysicsAffectable();
	struct FName GetStateFailure();
	struct FName GetStateSuccess();
	bool IsTransitioning();
	void OnTransitionCPP(const struct FName& FromState, const struct FName& ToState);
	void ChangeStateMesh(struct FName* nmState);
	void SetActive(bool bSetActive);
	void SetCollision(bool bCollide);
	struct FName GetCurrentState();
	void ReactToDeath(float Damage, float fDeathDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage);
	void ReactToImpulse(const struct FVector& vMomentum, const struct FVector& vHitLocation);
	void ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter);
	void TakeDamageCPP(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, struct FVector* Momentum);
	void UsedKey(const struct FName& KeyName);
	bool HasKey(const struct FName& KeyName);
	void OnAppearanceSet(class UBioBaseAppearancePlaceable* oAppearance);
	void OnTransition(const struct FName& FromState, const struct FName& ToState, bool bCallCPP);
	void OnArtPlaceablePlotFail(class AActor* oUsingActor, const struct FName& nmToState);
	void OnArtPlaceableUsed(class AActor* User, const struct FName& ToState);
	bool IsInteractive();
	struct FName GetState();
	float GetHealth();
	void BioRelateActors();
	void InitializeRunTimeOnlyTransients();
	void BeginPlay();
	struct FName GetStartingState();
	bool CanForceOpen();
	int GetTreasureID();
	bool ContainsTreasure();
	void DoDoorFinished(const struct FName& ToState);
	bool HasTransition(const struct FName& ToState, const struct FName& Transition);
	bool SetState(const struct FName& ToState, const struct FName& NamedTransition, bool IgnoreTransition, bool bRightNow, bool bApplyVFX);
	void VerifyNotEditor();
	void ApplyVFXForState(const struct FName& NewState, bool bForce);
	void PreloadVFX();
	bool CanBeMounted(class APawn* oMounter);
	void PlaySoundForState(struct FName* oState);
	bool IsMeshPhysicsCapable();
	void UpdatePlaceableDamage();
	void HandleDamageablePlaceable(class AController* InstigatedBy, const struct FVector& HitLocation);
	void InitializeActionFramework();
	void OnPhysicsImpulse(class UMeshComponent* oMesh, bool bIsForce, struct FVector* Impulse, struct FVector* Position, struct FName* BoneName);
	bool GetTargetZoneLocationN(int nIndex, struct FVector* vLocation);
	struct FVector GetTargetZoneLocation();
	bool GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState);
};


// Class BIOC_Base.BioArtPlaceableShieldBehavior
// 0x0000 (0x0234 - 0x0234)
class UBioArtPlaceableShieldBehavior : public UBioArtPlaceableBehavior
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableShieldBehavior");
		return ptr;
	}


	void ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter);
	void Tick(float fTimeDelta);
};


// Class BIOC_Base.BioEpicPawnBehavior
// 0x00B0 (0x0234 - 0x0184)
class UBioEpicPawnBehavior : public UBioActorBehavior
{
public:
	TEnumAsByte<EActionStateVariable>                  m_eCurrentActionState;                                    // 0x0184(0x0001)
	TEnumAsByte<EActionStateVariable>                  m_ePreviousActionState;                                   // 0x0185(0x0001)
	TEnumAsByte<EBioCombatStance>                      m_eCombatStance;                                          // 0x0186(0x0001)
	TEnumAsByte<EBioAnimNodeCombatModeFadeOut>         m_combatModeFadeoutState;                                 // 0x0187(0x0001)
	TEnumAsByte<EBioEpicPawnBehaviorWeaponFireMode>    m_eWeaponFireMode;                                        // 0x0188(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	unsigned long                                      m_bIsLockedOnTarget : 1;                                  // 0x018C(0x0004)
	unsigned long                                      m_bDoCameraBehaviorTransition : 1;                        // 0x018C(0x0004)
	unsigned long                                      SquadLeader : 1;                                          // 0x018C(0x0004) (Edit)
	struct FName                                       m_CurrentTargetZoneName;                                  // 0x0190(0x0008) (Transient)
	unsigned long                                      m_bTargetZoneChanged : 1;                                 // 0x0198(0x0004) (Transient)
	unsigned long                                      m_bFoundFirstTargetZoneHit : 1;                           // 0x0198(0x0004) (Transient)
	unsigned long                                      m_bValidTargetZoneChanged : 1;                            // 0x0198(0x0004) (Transient)
	unsigned long                                      m_bDebugIgnoreArmor : 1;                                  // 0x0198(0x0004) (Transient)
	struct FName                                       m_ValidTargetZoneName;                                    // 0x019C(0x0008) (Transient)
	float                                              m_fZoneValidDelayTime;                                    // 0x01A4(0x0004) (Transient)
	class ABioBaseSquad*                               Squad;                                                    // 0x01A8(0x0004) (Edit)
	struct FName                                       SquadName;                                                // 0x01AC(0x0008)
	class UClass*                                      SquadClass;                                               // 0x01B4(0x0004)
	struct FString                                     DefaultSquadClass;                                        // 0x01B8(0x000C) (NeedCtorLink)
	int                                                m_nALLEnabled;                                            // 0x01C4(0x0004)
	int                                                m_nQueueEnabled;                                          // 0x01C8(0x0004)
	int                                                m_nStackEnabled;                                          // 0x01CC(0x0004)
	int                                                m_nWeaponsEnabled;                                        // 0x01D0(0x0004)
	int                                                m_nGrenadesEnabled;                                       // 0x01D4(0x0004)
	int                                                m_nPowersEnabled;                                         // 0x01D8(0x0004)
	int                                                m_nCombatTransitionEnabled;                               // 0x01DC(0x0004)
	float                                              m_fRotationFactor;                                        // 0x01E0(0x0004) (Transient)
	struct FRotator                                    m_rPrevRotation;                                          // 0x01E4(0x000C) (Transient)
	class UClass*                                      m_attributesClass;                                        // 0x01F0(0x0004)
	class UBioAttributesEpicPawn*                      m_PawnAttributes;                                         // 0x01F4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UBioCapability*>                      m_aoCapabilities;                                         // 0x01F8(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class UBioPower*>                           m_powers;                                                 // 0x0204(0x000C) (Edit, NeedCtorLink, EditInline)
	int                                                m_nCurrentPowerIndex;                                     // 0x0210(0x0004)
	int                                                m_nDoorProximityRefCount;                                 // 0x0214(0x0004) (Transient)
	struct FBioEpicPawnBehaviorCache                   m_epicPawnBehaviorCache;                                  // 0x0218(0x000C) (Transient, NeedCtorLink)
	class UBioPawnSquadInterface*                      m_oSquadInterface;                                        // 0x0224(0x0004) (Transient)
	TArray<struct FEpicPawnVisualEffect>               m_aVisualEffects;                                         // 0x0228(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEpicPawnBehavior");
		return ptr;
	}


	void SetMatriarchZen(bool bEnabled);
	bool DisplayEpicPawnVisualEffect(const struct FName& nmLabel);
	void OnShieldsDown();
	void AdjustSalvage(float fAmt);
	float GetSalvage();
	bool IsHealing();
	void Heal(float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired);
	float GetPercentHealth();
	float GetCurrentHealth();
	void InitializeRunTimeOnlyTransients();
	void SetCurrentHealth(float currentHealth);
	float GetMaxHealth();
	void UpdatePowersOnDeath();
	int FindPowerIndex(const struct FName& nmPowerName);
	class UBioPower* FindPower(const struct FName& nmPowerName);
	bool ApplyRadialImpulse(const struct FVector& vLineOfSightOrigin, const struct FVector& vImpulseOrigin, float fImpulseMagnitude, const struct FName& nmPhysicsBoneName);
	bool SetTarget(class AActor* oTarget, bool bLockOnTarget);
	bool IsLockedOnTarget();
	void LockOnTarget(bool B);
	class UClass* STATIC_GetSaveObjectClass();
	class UBioBaseSaveObject* WriteSaveObject(class UObject* InOuter, class UBioBaseSaveObject* Save);
	bool IsFriendlyFire(class AController* pInstigatorController, class UBioDamageType* pDamage);
	void ReactToDeath(float fDamage, float fDeathDamage, class AController* pInstigatedBy, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage);
	bool IsHostile(class AController* InstigatedBy);
	bool IsNeutral(class AController* InstigatedBy);
	bool IsFriendly(class AController* InstigatedBy);
	void GetHealthAndShieldsCapacities(int* fHealth, int* fShields);
	void GetHealthAndShieldsScaledToInt(int* fHealth, int* fShields);
	void GetHealthAndShieldsScaled(float* fHealth, float* fShields);
	void ClearAllActionsOnPawn(const struct FString& sClearLabel);
	int GetDoorProximityRefCount();
	void ModifyDoorProximityRefCount(bool bIncrement);
	bool IsCombatSelectable(class ABioPlayerController* pPlayerController);
	bool IsExploreSelectable(class ABioPlayerController* pPlayerController);
	void ProxyCacheGetWeaponMuzzleLocation(class ABioWeaponRanged* Weapon, struct FVector* muzzleLocation);
	void ProxyCacheGetMuzzleToTargetDirection(class ABioWeaponRanged* Weapon, struct FRotator* Direction);
	void ProxyCacheGetWeaponTargetPoint(class ABioWeaponRanged* Weapon, struct FVector* TargetPoint);
	struct FVector GetSelectionObstructionSource();
	float GetPlayerSelectionRange(class UBioPlayerSelection* pSelection);
	float GetPlayerSelectionAngleAtRange(class UBioPlayerSelection* pSelection, float fRange);
	void OnTargetInvalidated(class AActor* CurrentSelection);
	bool OnNewPlayerPawnSelection(class AActor* Selection, class UBioPlayerSelection* pPlayerSelection);
	TEnumAsByte<EActionStateVariable> SetPreviousActionState();
	TEnumAsByte<EActionStateVariable> SetActionState(TEnumAsByte<EActionStateVariable> eState, float fDelay);
	void TickPowers(float DeltaTime);
	void ClearCurrentPower();
	bool SetCurrentPower(const struct FName& nmPower, float* fCooldownRemaining);
	void AppendPawnCapabilitiesToList(TEnumAsByte<EBioCapabilityTypes> nCapType, TArray<class UBioCapability*>* oOutCaps);
	void RecomputeCapabilities();
	bool IsAbilityEnabledCombatTransition();
	bool IsAbilityEnabledPowers();
	bool IsAbilityEnabledGrenades();
	bool IsAbilityEnabledWeapons();
	bool IsAbilityEnabledStack();
	bool IsAbilityEnabledQueue();
	bool IsAbilityEnabledAll();
	void DoDisabledEvent(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	void DoEnabledEvent(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	bool IsAbilityEnabled_Power(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	int AbilityEnable_Power(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	bool IsAbilityEnabled_Offense(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	int AbilityEnable_Offense(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	bool IsAbilityEnabled_AI(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	int AbilityEnable_AI(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType);
	void OnWeaponInstantFire(class ABioWeaponRanged* oFiredWeapon);
	void InitializeActionFramework();
	struct FVector GetSelectionSourceLocation();
	void TickBehavior(float DeltaTime);
	int GetTargetZoneCount();
	bool GetTargetZoneNameN(int nIndex, struct FName* nmTargetZone);
	bool GetTargetZoneLocationN(int nIndex, struct FVector* vLocation);
	bool IsTargetZoneEnabled();
	struct FVector GetTargetZoneLocation();
	struct FName CanSeeTarget(float fDeltaTime, const struct FVector& vSourceLocation, class AActor* oTarget, bool bTraverseList, int nOptLevel);
};


// Class BIOC_Base.BioPawnBehavior
// 0x02EC (0x0520 - 0x0234)
class UBioPawnBehavior : public UBioEpicPawnBehavior
{
public:
	class UBioEquipment*                               m_oEquipment;                                             // 0x0234(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioPawnItemInterface*                       m_oItemInterface;                                         // 0x0238(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	unsigned long                                      m_bEnsureXModIntegrity : 1;                               // 0x023C(0x0004) (Edit, Const)
	unsigned long                                      m_bPowerUsePercentOverride : 1;                           // 0x023C(0x0004) (Edit)
	unsigned long                                      bCountingUp : 1;                                          // 0x023C(0x0004)
	unsigned long                                      CustomAnimation : 1;                                      // 0x023C(0x0004)
	unsigned long                                      m_bReadyForCombat : 1;                                    // 0x023C(0x0004)
	unsigned long                                      m_bPlayDamageAnim : 1;                                    // 0x023C(0x0004)
	unsigned long                                      m_bEnableStartAnim : 1;                                   // 0x023C(0x0004)
	unsigned long                                      m_bEnableSkidAnim : 1;                                    // 0x023C(0x0004)
	unsigned long                                      m_bEnableStopAnim : 1;                                    // 0x023C(0x0004)
	unsigned long                                      m_bAllowStartAnimInCombat : 1;                            // 0x023C(0x0004)
	unsigned long                                      m_bAllowSkidAnimInCombat : 1;                             // 0x023C(0x0004)
	unsigned long                                      m_bAllowStopAnimInCombat : 1;                             // 0x023C(0x0004)
	unsigned long                                      m_bMeshAdjOn : 1;                                         // 0x023C(0x0004)
	unsigned long                                      m_bUseManualMeshAdj : 1;                                  // 0x023C(0x0004)
	unsigned long                                      LogEnable : 1;                                            // 0x023C(0x0004) (Edit)
	unsigned long                                      AiLogEnable : 1;                                          // 0x023C(0x0004) (Edit)
	unsigned long                                      m_bCanBePhysicsImpacted : 1;                              // 0x023C(0x0004) (Edit)
	unsigned long                                      m_bCanBePhysicsImpactedOverride : 1;                      // 0x023C(0x0004) (Edit)
	unsigned long                                      m_bPawnFallTimeOk : 1;                                    // 0x023C(0x0004)
	unsigned long                                      m_bEnableLeaning : 1;                                     // 0x023C(0x0004) (Config)
	unsigned long                                      m_bShouldGrantExperienceOnKillOverride : 1;               // 0x023C(0x0004)
	unsigned long                                      m_bShouldGrantExperienceOnKill : 1;                       // 0x023C(0x0004)
	unsigned long                                      m_bIsFeigningDeath : 1;                                   // 0x023C(0x0004) (Edit)
	unsigned long                                      m_bCanUseDeathCapabilities : 1;                           // 0x023C(0x0004)
	unsigned long                                      m_bAllowPhysicsOnDeadBodies : 1;                          // 0x023C(0x0004) (Config)
	unsigned long                                      m_bIsBleedingOut : 1;                                     // 0x023C(0x0004)
	unsigned long                                      m_bIsBleedOutEnabled : 1;                                 // 0x023C(0x0004)
	class UBioTalentContainer*                         m_Talents;                                                // 0x0240(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              m_fHenchDamageResistance;                                 // 0x0244(0x0004) (Transient, Config)
	float                                              m_fHenchCasualDamageResistance;                           // 0x0248(0x0004) (Transient, Config)
	class AWeapon*                                     SecondaryWeapon;                                          // 0x024C(0x0004) (Transient)
	TEnumAsByte<EBioAnimCombatState>                   m_eCombatState;                                           // 0x0250(0x0001) (Transient)
	TEnumAsByte<EBioAnimStartState>                    m_eAnimStartState;                                        // 0x0251(0x0001) (Transient)
	TEnumAsByte<EBioAnimSkidTurnState>                 m_eAnimSkidState;                                         // 0x0252(0x0001) (Transient)
	TEnumAsByte<EBioAnimStopState>                     m_eAnimStopState;                                         // 0x0253(0x0001) (Transient)
	float                                              m_fPowerUsePercent;                                       // 0x0254(0x0004) (Edit)
	struct FName                                       CurrentWPSetTag;                                          // 0x0258(0x0008)
	class ABioWaypointSet*                             CurrentWPSet;                                             // 0x0260(0x0004)
	struct FName                                       WPRouteTag;                                               // 0x0264(0x0008)
	class ABioWaypointSet*                             WPRoute;                                                  // 0x026C(0x0004)
	TEnumAsByte<EeWalkWaypointsTypes>                  WalkType;                                                 // 0x0270(0x0001)
	TEnumAsByte<EBioAnimTurnDirState>                  m_eTurningDirection;                                      // 0x0271(0x0001)
	TEnumAsByte<EBioAnimGetUpState>                    m_eGetUpState;                                            // 0x0272(0x0001)
	unsigned char                                      DBG_Color_R;                                              // 0x0273(0x0001)
	unsigned char                                      DBG_Color_G;                                              // 0x0274(0x0001)
	unsigned char                                      DBG_Color_B;                                              // 0x0275(0x0001)
	TEnumAsByte<EPawnLootGUIMechanism>                 m_LootGUIMechanism;                                       // 0x0276(0x0001) (Config)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0277(0x0001) MISSED OFFSET
	int                                                NextWaypoint;                                             // 0x0278(0x0004)
	float                                              MinSpeedBoost;                                            // 0x027C(0x0004) (Const)
	float                                              MaxSpeedBoost;                                            // 0x0280(0x0004) (Const)
	float                                              PathFindSpeedBoostBonus;                                  // 0x0284(0x0004) (Const)
	struct FVector                                     m_vFixedRotation;                                         // 0x0288(0x000C) (Transient)
	float                                              m_fTurningAngle;                                          // 0x0294(0x0004)
	float                                              m_fAnimStartTime;                                         // 0x0298(0x0004) (Transient)
	float                                              m_fMoveStartElapsedTime;                                  // 0x029C(0x0004) (Transient)
	float                                              m_fMoveStopElapsedTime;                                   // 0x02A0(0x0004) (Transient)
	float                                              m_fAnimMoveSpeedSnapshot;                                 // 0x02A4(0x0004) (Transient)
	float                                              m_fAnimMoveStartSpeedSnapshot;                            // 0x02A8(0x0004) (Transient)
	float                                              m_fDamageAnimMag;                                         // 0x02AC(0x0004) (Transient)
	struct FVector                                     m_vDamageAnimDir;                                         // 0x02B0(0x000C) (Transient)
	int                                                m_nNextDamageAnimNode;                                    // 0x02BC(0x0004)
	float                                              m_fCurPhysSettleDownTime;                                 // 0x02C0(0x0004)
	unsigned long                                      m_bPlayDieAnimation : 1;                                  // 0x02C4(0x0004) (Transient)
	unsigned long                                      m_bInMatinee : 1;                                         // 0x02C4(0x0004) (Transient)
	unsigned long                                      m_bDoneYawInterpolation : 1;                              // 0x02C4(0x0004) (Transient)
	unsigned long                                      m_bDoneSpeedInterpolation : 1;                            // 0x02C4(0x0004) (Transient)
	unsigned long                                      m_bArmorOverridden : 1;                                   // 0x02C4(0x0004) (Transient)
	unsigned long                                      m_bHasWeaponFiredSinceLastBioAnimNodeBlendByFireSequenceQuery : 1;// 0x02C4(0x0004) (Transient)
	struct FName                                       m_sDeathBoneHit;                                          // 0x02C8(0x0008) (Transient)
	TArray<class UAnimSet*>                            m_aBackupAnimSets;                                        // 0x02D0(0x000C) (Transient, NeedCtorLink)
	float                                              m_fInclineUpMod;                                          // 0x02DC(0x0004)
	float                                              m_fInclineDownMod;                                        // 0x02E0(0x0004)
	float                                              m_fSkidTurnThresh;                                        // 0x02E4(0x0004)
	float                                              m_fPawnStopDecelTime;                                     // 0x02E8(0x0004)
	float                                              m_fDmgArc_Front;                                          // 0x02EC(0x0004)
	float                                              m_fDmgArc_Rear;                                           // 0x02F0(0x0004)
	float                                              m_fDmgPct_Front;                                          // 0x02F4(0x0004)
	float                                              m_fDmgPct_Left;                                           // 0x02F8(0x0004)
	float                                              m_fDmgPct_Right;                                          // 0x02FC(0x0004)
	float                                              m_fMeshAdjRate;                                           // 0x0300(0x0004)
	float                                              m_fManualMeshAdj;                                         // 0x0304(0x0004)
	float                                              m_fMeshAdjCheckFrequency;                                 // 0x0308(0x0004) (Config)
	float                                              m_fMeshAdjFarCheckFrequency;                              // 0x030C(0x0004) (Config)
	float                                              m_fMeshAdjFarCheckDistance;                               // 0x0310(0x0004) (Config)
	float                                              m_fMeshAdjTimeTillCheck;                                  // 0x0314(0x0004) (Transient)
	float                                              m_fMeshAdjLastDistFound;                                  // 0x0318(0x0004) (Transient)
	class AActor*                                      m_oMeshAdjLastBase;                                       // 0x031C(0x0004) (Transient)
	float                                              PawnMoveStartTimerThreshold;                              // 0x0320(0x0004) (Edit)
	float                                              PawnMoveStopTimerThreshold;                               // 0x0324(0x0004) (Edit)
	float                                              m_fDesiredMaxSpeed;                                       // 0x0328(0x0004) (Transient)
	float                                              m_fCurrentInclineMoveMod;                                 // 0x032C(0x0004) (Transient)
	float                                              m_fWalkSpeed;                                             // 0x0330(0x0004) (Transient)
	float                                              m_fSprintSpeed;                                           // 0x0334(0x0004) (Transient)
	float                                              m_fExploreSprintSpeed;                                    // 0x0338(0x0004) (Transient)
	float                                              m_fTacticalSpeed;                                         // 0x033C(0x0004) (Transient)
	float                                              m_fTacWalkSpeed;                                          // 0x0340(0x0004) (Transient)
	float                                              m_fTacCrouchSpeed;                                        // 0x0344(0x0004) (Transient)
	float                                              m_fTacCrouchWalkSpeed;                                    // 0x0348(0x0004) (Transient)
	float                                              m_fTurnRateHigh;                                          // 0x034C(0x0004) (Transient)
	float                                              m_fTurnRateLow;                                           // 0x0350(0x0004) (Transient)
	float                                              m_fTurnRateCombat;                                        // 0x0354(0x0004) (Transient)
	float                                              m_fTurnRateCombatCrouch;                                  // 0x0358(0x0004) (Transient)
	float                                              m_fTurnRateCombatSprint;                                  // 0x035C(0x0004) (Transient)
	float                                              m_fStdFriction;                                           // 0x0360(0x0004) (Transient)
	float                                              m_fAccelRate;                                             // 0x0364(0x0004) (Transient)
	float                                              m_fMaxDesSpdAccelRate;                                    // 0x0368(0x0004) (Transient)
	float                                              m_fMaxDesSpdDecelRate;                                    // 0x036C(0x0004) (Transient)
	float                                              m_fMaxDesSpdTacAccelRate;                                 // 0x0370(0x0004) (Transient)
	float                                              m_fMaxDesSpdTacDecelRate;                                 // 0x0374(0x0004) (Transient)
	float                                              m_fMaxDesSpdTacCrouchAccelRate;                           // 0x0378(0x0004) (Transient)
	float                                              m_fMaxDesSpdTacCrouchDecelRate;                           // 0x037C(0x0004) (Transient)
	struct FRotator                                    m_rLastStopRotation;                                      // 0x0380(0x000C) (Transient)
	struct FRotator                                    m_rSkidStartRotation;                                     // 0x038C(0x000C) (Transient)
	struct FRotator                                    m_rSkidTargetRotation;                                    // 0x0398(0x000C) (Transient)
	float                                              m_fSkidDSDecelRate;                                       // 0x03A4(0x0004) (Transient)
	float                                              m_fMoveStopDSDecelRate;                                   // 0x03A8(0x0004) (Transient)
	int                                                DBG_Offset;                                               // 0x03AC(0x0004)
	struct FVector                                     Dbg_Position;                                             // 0x03B0(0x000C)
	int                                                PathFind_LastMovment_Mode;                                // 0x03BC(0x0004)
	float                                              STAT_boost_track;                                         // 0x03C0(0x0004) (Transient)
	float                                              STAT_Dist_track;                                          // 0x03C4(0x0004) (Transient)
	TArray<float>                                      STAT_dist;                                                // 0x03C8(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      STAT_boost;                                               // 0x03D4(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      STAT_AITime;                                              // 0x03E0(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        STAT_PathFindMode;                                        // 0x03EC(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      STAT_PathFindModeTime;                                    // 0x03F8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               STAT_FollowState;                                         // 0x0404(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        STAT_GroundSpeed;                                         // 0x0410(0x000C) (Transient, NeedCtorLink)
	int                                                STAT_Samples;                                             // 0x041C(0x0004) (Transient)
	int                                                STAT_ERRORS;                                              // 0x0420(0x0004) (Transient)
	int                                                STAT_Teleports;                                           // 0x0424(0x0004) (Transient)
	int                                                STAT_AbortedMoveTowards;                                  // 0x0428(0x0004) (Transient)
	float                                              CAMHOOK_NORMAL_FRONTBACK;                                 // 0x042C(0x0004)
	float                                              CAMHOOK_NORMAL_RIGHTLEFT;                                 // 0x0430(0x0004)
	float                                              CAMHOOK_NORMAL_UPDOWN;                                    // 0x0434(0x0004)
	float                                              CAMHOOK_COLL_UPDOWN;                                      // 0x0438(0x0004)
	float                                              CAMHOOK_COLL_FRONTBACK;                                   // 0x043C(0x0004)
	float                                              CAMHOOK_COLL_RIGHTLEFT;                                   // 0x0440(0x0004)
	float                                              CAMHOOK_COMBAT_UPDOWN;                                    // 0x0444(0x0004)
	float                                              CAMHOOK_COMBAT_FRONTBACK;                                 // 0x0448(0x0004)
	float                                              CAMHOOK_COMBAT_RIGHTLEFT;                                 // 0x044C(0x0004)
	float                                              CAMHOOK_SNIPER_UPDOWN;                                    // 0x0450(0x0004)
	float                                              CAMHOOK_SNIPER_FRONTBACK;                                 // 0x0454(0x0004)
	float                                              CAMHOOK_SNIPER_RIGHTLEFT;                                 // 0x0458(0x0004)
	float                                              CAMHOOK_TACSEL_UPDOWN;                                    // 0x045C(0x0004)
	float                                              CAMHOOK_TACSEL_FRONTBACK;                                 // 0x0460(0x0004)
	float                                              CAMHOOK_TACSEL_RIGHTLEFT;                                 // 0x0464(0x0004)
	float                                              m_fPawnFallTime;                                          // 0x0468(0x0004)
	float                                              m_fPawnCalcFallTime;                                      // 0x046C(0x0004)
	TArray<struct FParticleSystemComponentSpec>        m_aParticleSystemComponentSpec;                           // 0x0470(0x000C) (Transient, Component, NeedCtorLink)
	struct FName                                       m_nmDebugKey;                                             // 0x047C(0x0008)
	class UBio2DA*                                     m_oExperience2DA;                                         // 0x0484(0x0004)
	int                                                m_nXP_Level_Cache;                                        // 0x0488(0x0004) (Transient)
	int                                                m_nXP_Cache;                                              // 0x048C(0x0004) (Transient)
	int                                                m_nBioticSlowMotionHandle;                                // 0x0490(0x0004) (Transient)
	float                                              m_fToxicHealRatio;                                        // 0x0494(0x0004)
	float                                              m_fToxicDamageMaximumAsPercentageOfHealth;                // 0x0498(0x0004)
	float                                              m_fDamageStabilityLossFactor;                             // 0x049C(0x0004) (Const)
	float                                              m_fPainSoundDamageThreshold;                              // 0x04A0(0x0004) (Config)
	struct FBioPawnBehaviorCache                       m_pawnBehaviorCache;                                      // 0x04A4(0x000C) (Transient)
	int                                                m_nRemainInRagdoll;                                       // 0x04B0(0x0004)
	float                                              m_fPhysicsForceIncurred;                                  // 0x04B4(0x0004)
	int                                                m_nUnlootableGrenadeCount;                                // 0x04B8(0x0004)
	float                                              m_fTwistThreshold;                                        // 0x04BC(0x0004)
	float                                              m_fBleedOutSoundTime;                                     // 0x04C0(0x0004)
	float                                              m_fBleedOutSoundDuration;                                 // 0x04C4(0x0004)
	class ABioVisualEffect*                            m_pBleedOutVFX;                                           // 0x04C8(0x0004)
	float                                              m_fBleedOutThreshold;                                     // 0x04CC(0x0004) (Const, Config)
	float                                              m_fBleedOutMinDamageResistance;                           // 0x04D0(0x0004) (Const, Config)
	float                                              m_fBleedOutCasualMinDamageResistance;                     // 0x04D4(0x0004) (Const, Config)
	float                                              m_fBleedOutMinHealthRegenRate;                            // 0x04D8(0x0004) (Const, Config)
	float                                              m_fCasualBonusHealthRegenRate;                            // 0x04DC(0x0004) (Const, Config)
	float                                              m_fHardCoreEnemyDamageReduction;                          // 0x04E0(0x0004) (Const, Config)
	float                                              m_fInsanityEnemyDamageReduction;                          // 0x04E4(0x0004) (Const, Config)
	float                                              m_fBleedOutSoundDurationStart;                            // 0x04E8(0x0004) (Const, Config)
	float                                              m_fBleedOutSoundDurationEnd;                              // 0x04EC(0x0004) (Const, Config)
	float                                              m_fDamageAdjustment;                                      // 0x04F0(0x0004) (Transient)
	float                                              m_fBleedOutSoundVolumeStart;                              // 0x04F4(0x0004) (Const, Config)
	float                                              m_fBleedOutSoundVolumeEnd;                                // 0x04F8(0x0004) (Const, Config)
	class USoundCue*                                   m_pBleedOutSoundCue;                                      // 0x04FC(0x0004) (Const)
	class UBioVFXTemplate*                             m_pBleedOutVFXTemplate;                                   // 0x0500(0x0004) (Const)
	struct FName                                       m_nmBleedOutVFXParameter;                                 // 0x0504(0x0008) (Const, Config)
	float                                              m_fDeathCapabilityActivationTime;                         // 0x050C(0x0004) (Const, Config)
	class UBioItem*                                    m_pWeapon;                                                // 0x0510(0x0004)
	class UBioItem*                                    m_pSecondaryWeapon;                                       // 0x0514(0x0004)
	int                                                m_nMountStrref;                                           // 0x0518(0x0004) (Const, Config)
	float                                              m_fVehicleExpScaleFactor;                                 // 0x051C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnBehavior");
		return ptr;
	}


	void UpdateBleedOut();
	bool HasPowersOfType(TEnumAsByte<EBioCapMode> eDiscipline);
	bool IsOfPowerRace(TEnumAsByte<EBio_Appr_CharacterTalentRaceType> eRace);
	float GetPowerUsePercent();
	float GetBleedOutThreshold();
	bool IsAbleToInstigate();
	bool GetCanBePhysicsImpacted();
	float GetHealthRegenRate();
	float GetDamageResistance();
	void RecoverFromBleedOut();
	void EnableBleedOut(bool B);
	void ForceAppearanceUpdate();
	TEnumAsByte<EActionStateVariable> SetActionState(TEnumAsByte<EActionStateVariable> eState, float fDelay);
	void SetTwistThreshold(float F);
	float GetTwistThreshold();
	class UBioItemWeaponRanged* GetCurrentWeaponItem();
	int GetUnlootableGrenadeCountSaveGames();
	void SetUnlootableGrenadeCountSaveGames(int N);
	int GetUnlootableGrenadeCount();
	void ModifyUnlootableGrenadeCount(int N);
	bool ExitCombatStasis();
	bool EnterCombatStasis(float fDuration, bool bAllowDamage);
	bool UseDeathCapability();
	void FeignDeathKismet(bool B);
	void FeignDeath(bool B, bool bForceState);
	void MoveWeaponToSocket(const struct FName& nmSocket);
	void OnShieldsDown();
	bool TermRagdoll();
	bool InitRagdoll();
	class UClass* STATIC_GetSaveObjectClass();
	float CacheGetWeaponDriftAngle();
	float CacheGetWeaponDriftZoneRadius();
	class UBioInventory* GetInventory();
	int GetCharmSkill();
	int GetIntimidateSkill();
	bool CanBeShot(class UBioActorBehavior* pOther);
	class UBioItem* CreateAndEquipEquipment(int nEquipmentId, int nSophistication, int nManufacturerID, class UObject* InExistingObject);
	void TickTalents(float fDeltaTime);
	void ActivateNextWeapon();
	void ProcessMeshAdj(float fDeltaTime);
	bool InPlayerParty();
	bool GetBioticAmpEquipped();
	void SetClass(TEnumAsByte<EBioPartyMemberClassBase> nValue);
	TEnumAsByte<EBioPartyMemberClassBase> GetClass();
	void AdjustGrenades(int nAmt);
	int GetGrenades();
	void AdjustMediGel(float fAmt);
	float GetMediGel();
	void AdjustCredits(int nAmt);
	int GetCredits();
	int GetXPLevel();
	void GiveXP(int nAmt);
	int GetXP();
	void SetGender(TEnumAsByte<EBioAttributePawnGender> nValue);
	TEnumAsByte<EBioAttributePawnGender> GetGender();
	void AdvanceTalkToCount(int nAmt);
	void SetTalkToCount(int nValue);
	int GetTalkToCount();
	TEnumAsByte<EBioPlayerCharacterSpectreRank> GetMarshalRank();
	void SetBackground_Notoritey(TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> nValue);
	TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> GetBackground_Notoritey();
	void SetBackground_Childhood(TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> nValue);
	TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> GetBackground_Childhood();
	void OnBioticExitMode();
	void OnBioticSwitchTarget();
	void OnBioticRelease();
	void OnBioticLock();
	void OnBioticEnterMode();
	void EndSlowMotion();
	bool HasKey(const struct FName& Key);
	void OnDeathAnimationFinished();
	void GrantSimpleDeathXP();
	bool CanPlayDeathAnimation();
	void LootCorpse(class ABioWorldInfo* BioWorldInfo);
	void ReactToDeath(float Damage, float fDeathDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage);
	void CacheDeathVFXGameState(float fDamage, float fDeathDamage, class AController* pInstigatorController, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UBioDamageType* pDamage);
	void PlayDamageSound(float fDamage);
	void PlayDamageAnim(float fDamage, struct FVector* vMomentum);
	void AddImpulse(struct FVector* vMomentum, struct FVector* vHitLocation);
	void AmplifyDamage(float* Damage);
	void ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter);
	int ComputeLevel();
	void AddToInitialSquad();
	void InitializeRunTimeOnlyTransients();
	void AddWeapon(const struct FString& sItemLabel, unsigned char sophistication);
	void StopParticleSystem(TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem);
	void StartParticleSystem(TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem);
	void InitializeParticleSystem(TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem, class ABioPawn* oInstigator);
	void BeginPlay();
	void ForceArmorOverride(bool B);
	bool IsArmorOverridden();
	void PostBeginPlay();
	void InitializePawnBehaviorForPlay();
	void BioRelateActors();
	void SoftResetMovementAndAnimationState();
	void HardResetActionAndAnimationState();
	void ScaleSecondaryAttributes(int rankedChallengeLevel);
	void OnPhysicsImpulse(class UMeshComponent* oMesh, bool bIsForce, struct FVector* Impulse, struct FVector* Position, struct FName* BoneName);
	void RanOverByVehicle(class ABioVehicleBase* oVehicle);
	void Heal(float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired);
	int GetPawnSurface();
	bool ShouldGrantExperienceOnKill();
	bool IsInCover();
	bool DoesCoverStateAllowFire();
	struct FVector GetSelectionObstructionSource();
	bool GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState);
	float GetPlayerSelectionRange(class UBioPlayerSelection* pSelection);
	float GetPlayerSelectionAngleAtRange(class UBioPlayerSelection* pSelection, float fRange);
	struct FVector GetSelectionSourceLocation();
	void OnTargetInvalidated(class AActor* CurrentSelection);
	bool OnNewPlayerPawnSelection(class AActor* Selection, class UBioPlayerSelection* pPlayerSelection);
	void AttemptDynamicChallengeScale();
	void TickBehavior(float DeltaTime);
	void AppendPawnCapabilitiesToList(TEnumAsByte<EBioCapabilityTypes> nCapType, TArray<class UBioCapability*>* oOutCaps);
	void RecomputeCapabilities();
	void GenerateOnCastAt(class UBioActorBehavior* oAttacker, struct FName* nPower);
	void GenerateOnAttacked(class UBioActorBehavior* oAttacker, struct FName* nWeapon);
	void AdjustStability(float fStability);
	class UBioAttributesItem* GetWeaponAttributes(class USkeletalMeshComponent* meshOfWeapon);
	void FindFirstValidSecondaryAttribute(class UBio2DA* table, int nRankedLevel, const struct FName& ColumnName, TEnumAsByte<EBioAttrModType> modType, class UBioGameProperty* oGameProperty);
	bool FindFirstValidPrimaryAttribute(class UBio2DA* table, int nRankedLevel, const struct FName& ColumnName, int* nValue);
	bool CanBeMounted(class APawn* oMounter);
	class UBioActive* AcquireActive(class UClass* clsActive, bool bAutoStartActive);
	void InitializeActionFramework();
	void PlaySound(TEnumAsByte<EBioPawnSound> ePawnSound, TEnumAsByte<EBioPlaySoundMode> eMode);
};


// Class BIOC_Base.BioPawnSquadInterface
// 0x0000 (0x0044 - 0x0044)
class UBioPawnSquadInterface : public UBioBaseComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnSquadInterface");
		return ptr;
	}


	class APawn* FindSquadMemberByTag(const struct FName& nmTag);
	int FindSquadIndex();
	void ChangeSquads(class ABioBaseSquad* NewSquad);
	void ChangeToPlayerSquad(const struct FString& sClass, const struct FName& SquadName);
	void ChangeToDefaultSquad();
	void PawnDestroyed();
	void LeaveSquad();
	void JoinSquad(class ABioBaseSquad* NewSquad);
};


// Class BIOC_Base.BioVehicleBehaviorBase
// 0x0088 (0x02BC - 0x0234)
class UBioVehicleBehaviorBase : public UBioEpicPawnBehavior
{
public:
	unsigned long                                      m_bWeaponsEnabled : 1;                                    // 0x0234(0x0004) (Edit)
	unsigned long                                      m_bIncludeDriverSquad : 1;                                // 0x0234(0x0004)
	unsigned long                                      m_bUpRightEnabled : 1;                                    // 0x0234(0x0004) (Edit)
	unsigned long                                      m_bIsThrustersOn : 1;                                     // 0x0234(0x0004)
	unsigned long                                      m_bPowertrainEnabled : 1;                                 // 0x0234(0x0004)
	unsigned long                                      m_bVehicleFunctionEnabled : 1;                            // 0x0234(0x0004)
	unsigned long                                      m_bVehicleAudioEnable : 1;                                // 0x0234(0x0004) (Config)
	unsigned long                                      m_bInheritsPlayerStats : 1;                               // 0x0234(0x0004) (Edit)
	unsigned long                                      m_bIsLowShield : 1;                                       // 0x0234(0x0004)
	TArray<struct FBioVehicleWeaponInfo>               m_aVehicleWeaponInfo;                                     // 0x0238(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     m_vRecoilImpulseAccumulator;                              // 0x0244(0x000C)
	class ABioBaseSquad*                               m_oDriverSquad;                                           // 0x0250(0x0004) (Transient)
	class ABioBaseSquad*                               m_oVehicleDefaultSquad;                                   // 0x0254(0x0004) (Transient)
	float                                              m_fThrusterScalarFR;                                      // 0x0258(0x0004)
	float                                              m_fThrusterScalarFL;                                      // 0x025C(0x0004)
	float                                              m_fThrusterScalarBR;                                      // 0x0260(0x0004)
	float                                              m_fThrusterScalarBL;                                      // 0x0264(0x0004)
	TArray<class ABioVisualEffect*>                    m_aThrusterVisualEffects;                                 // 0x0268(0x000C) (Transient, NeedCtorLink)
	class ABioVisualEffect*                            m_oDamageVisualEffect;                                    // 0x0274(0x0004) (Transient)
	unsigned long                                      m_bBrakesEnabled : 1;                                     // 0x0278(0x0004) (Transient)
	unsigned long                                      m_bIsPaused : 1;                                          // 0x0278(0x0004) (Transient)
	float                                              m_fPreviousStopThreshold;                                 // 0x027C(0x0004) (Transient)
	float                                              m_fTimeSinceLastAINoiseUpdate;                            // 0x0280(0x0004) (Transient)
	float                                              m_fAINoiseUpdatePeriod;                                   // 0x0284(0x0004) (Const, Transient)
	class UBioEquipmentVehicle*                        m_oEquipment;                                             // 0x0288(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	int                                                m_nLastDriverXPLevel;                                     // 0x028C(0x0004) (Transient)
	struct FVector                                     m_vForceExitLocation;                                     // 0x0290(0x000C)
	int                                                m_nCurrentZoomTurret;                                     // 0x029C(0x0004) (Transient)
	struct FVector                                     m_vPauseVelocity;                                         // 0x02A0(0x000C) (Transient)
	float                                              m_fPainSoundDamageThreshold;                              // 0x02AC(0x0004) (Config)
	float                                              m_fLowShieldThreshold;                                    // 0x02B0(0x0004) (Const, Config)
	class USoundCue*                                   m_pLowShieldSoundCue;                                     // 0x02B4(0x0004) (Const)
	class UBioShieldView*                              m_pShieldView;                                            // 0x02B8(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleBehaviorBase");
		return ptr;
	}


	class UClass* STATIC_GetSaveObjectClass();
	void ReactToDeath(float fDamage, float fDeathDamage, class AController* pInstigatedBy, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage);
	bool StartUprighting();
	void OnShieldsDown();
	void PlayDamageSound(float fDamage);
	void ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter);
	void BeginPlay();
	void InitializeRunTimeOnlyTransients();
	void StopLowShieldAlert();
	void SetMaterialParameterState(bool bState);
	bool OnVehiclePause(bool bPaused);
	bool UnEquipShields();
	bool EquipShields(class UBioItem* oNewItem);
	bool ScaleVehicleEquipment();
	int GetRequiredEquipmentSophisticationLevel(int nCurrentPlayerLevel);
	bool EquipDefaults(class UBioEquipmentVehicle* oEquipment);
	struct FName GetCameraHookName();
	float GetCameraFollowDistance();
	float GetCameraFollowHeight();
	void Heal(float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired);
	bool UpdateDamageModel();
	bool GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState);
	struct FVector GetSelectionSourceLocation();
	void OnTargetInvalidated(class AActor* CurrentSelection);
	bool OnNewPlayerPawnSelection(class AActor* Selection, class UBioPlayerSelection* pPlayerSelection);
	bool InitializeSounds();
	void UpdateThrusterScalars(float fXaxis, float fYaxis);
	void DeactivateThruster(int nIndex);
	void ActivateThruster(int nIndex, const struct FVector& vMaxForce, float fScale);
	void UpdateThrusters(float fDeltaTime);
	bool InitializeThrusters();
	void InitializeVehicleSquad();
	void SquadExit();
	void SquadEnter(class ABioBaseSquad* oEnterSquad);
	void OnDriverPartyDeath();
	bool UpdateCurrentZoomTurret(float fDeltaYaw, float fDeltaPitch);
	bool ExitZoomMode();
	bool EnterZoomMode(int nZoomTurretIndex);
	bool IsWorldLocationWithinTurretCone(int nTurretIndex, const struct FVector& vLocation);
	bool IsWeaponAimWithinTurretCone(class ABioWeaponRanged* oWeapon);
	struct FRotator SetDesiredTurretAimPoint(int nTurretIndex, const struct FVector& vTargetLocation);
	int GetWeaponIndex(class ABioWeapon* oWeapon);
	class ABioWeapon* GetWeaponAtIndex(int nIndex);
	bool DetachAndDestroyWeapon(class ABioWeapon* oWeapon);
	bool CreateAndAttachWeapon(class UClass* oWeaponClass, class UBioItemWeapon* oWeaponItem, int nTurretIndex, struct FBioVehicleWeaponInfo* oWeaponInfo);
	bool InitializeVehicleWeapons();
	bool InitializeVehicle();
	bool OnVehicleExit();
	bool OnVehicleEnter();
	void SetBrakeState(bool bStatus);
	void SetVehicleFunctionState(bool bStatus);
	void SetPowertrainState(bool bStatus);
	bool CanBeShot(class UBioActorBehavior* pOther);
	bool SetSuperMode(TEnumAsByte<EBioSuperModes> nSuperMode, bool bActivate, bool bReturnToSuperMode);
	bool ReleaseActive();
	void InitializePawnBehaviorForPlay();
	void InitializeActionFramework();
};


// Class BIOC_Base.BioVehicleBehaviorWheeled
// 0x0008 (0x02C4 - 0x02BC)
class UBioVehicleBehaviorWheeled : public UBioVehicleBehaviorBase
{
public:
	int                                                m_nVehicleCannon;                                         // 0x02BC(0x0004)
	int                                                m_nVehicleMachineGun;                                     // 0x02C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleBehaviorWheeled");
		return ptr;
	}


	void InitializeRunTimeOnlyTransients();
	void OnWeaponInstantFire(class ABioWeaponRanged* oFiredWeapon);
	void InitializeActionFramework();
	bool UnEquipMachineGun();
	bool UnEquipCannon();
	bool EquipMachineGun(class UBioItem* oNewItem);
	bool EquipCannon(class UBioItem* oNewItem);
	bool EquipDefaults(class UBioEquipmentVehicle* oEquipment);
	bool InitializeVehicle();
};


// Class BIOC_Base.BioCamera
// 0x0004 (0x0374 - 0x0370)
class ABioCamera : public ACamera
{
public:
	unsigned long                                      m_bCameraIsWidescreen : 1;                                // 0x0370(0x0004) (Config)
	unsigned long                                      m_bDisableCamera : 1;                                     // 0x0370(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCamera");
		return ptr;
	}


	void UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT);
	void SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime);
};


// Class BIOC_Base.BioCameraUtility
// 0x0174 (0x01B0 - 0x003C)
class UBioCameraUtility : public UObject
{
public:
	struct FTPOV                                       m_pov;                                                    // 0x003C(0x001C)
	float                                              m_fCamStickScalar;                                        // 0x0058(0x0004)
	float                                              m_fCameraCollisionTestPointRange;                         // 0x005C(0x0004)
	struct FVector                                     m_vLockedCameraLocation;                                  // 0x0060(0x000C) (Transient)
	struct FVector                                     m_avLockedClipPlanePt[0x8];                               // 0x006C(0x000C) (Transient)
	struct FVector                                     m_vLockedHook;                                            // 0x00CC(0x000C) (Transient)
	struct FVector                                     m_avLockedHookPlanePt[0x8];                               // 0x00D8(0x000C) (Transient)
	struct FVector                                     m_vLockedNewCameraLocation;                               // 0x0138(0x000C) (Transient)
	struct FVector                                     m_avLockedNewClipPlanePt[0x8];                            // 0x0144(0x000C) (Transient)
	unsigned long                                      m_isCameraShakeEnabled : 1;                               // 0x01A4(0x0004)
	unsigned long                                      m_bUseCollisionSource : 1;                                // 0x01A4(0x0004)
	class UBioCameraDebugger*                          m_pDebugger;                                              // 0x01A8(0x0004) (Transient)
	class AActor*                                      m_pCollidee;                                              // 0x01AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraUtility");
		return ptr;
	}


	bool IsCollisionEnabled();
	class UBioCameraDebugger* STATIC_GetDebugger();
	void SetCameraCollisionTestPointRange(float F);
};


// Class BIOC_Base.BioCameraBehavior
// 0x004C (0x01FC - 0x01B0)
class UBioCameraBehavior : public UBioCameraUtility
{
public:
	class AActor*                                      CameraSource;                                             // 0x01B0(0x0004)
	class AActor*                                      CameraTarget;                                             // 0x01B4(0x0004)
	float                                              m_fCameraStickXHoldDuration;                              // 0x01B8(0x0004)
	float                                              m_fCameraStickYHoldDuration;                              // 0x01BC(0x0004)
	struct FBioCameraUtilityOrientation                m_stickGovernedAccumulatedRotationSpeed;                  // 0x01C0(0x0008)
	float                                              CAMERA_SCALE_RATE_TIME;                                   // 0x01C8(0x0004) (Edit)
	float                                              CAMERA_SCALE_MAX;                                         // 0x01CC(0x0004) (Edit)
	float                                              CAMERA_STICK_INPUT_THRESH;                                // 0x01D0(0x0004) (Edit)
	float                                              CAMERA_BASE_PITCH_RATE;                                   // 0x01D4(0x0004) (Edit)
	float                                              CAMERA_BASE_YAW_RATE;                                     // 0x01D8(0x0004) (Edit)
	unsigned long                                      bConstrainAspectRatio : 1;                                // 0x01DC(0x0004)
	unsigned long                                      m_bUseExplorationSensitivity : 1;                         // 0x01DC(0x0004)
	TArray<struct FBioCameraUtilityStickInputSpec>     m_stickInputSpecs;                                        // 0x01E0(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FBioCameraUtilityOrientation                m_minSensitivity;                                         // 0x01EC(0x0008) (Const, Config)
	struct FBioCameraUtilityOrientation                m_maxSensitivity;                                         // 0x01F4(0x0008) (Const, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehavior");
		return ptr;
	}


	void DrawHUD(class UCanvas* Canvas);
	void UseExplorationSensitivity(bool B);
	void ResetInput();
	void Reset();
	class AActor* GetCameraTarget();
	class AActor* GetCameraSource();
	void SetCameraTarget(class AActor* Target);
	void SetCameraSource(class AActor* Source);
};


// Class BIOC_Base.BioCameraBehaviorConversation
// 0x00A4 (0x02A0 - 0x01FC)
class UBioCameraBehaviorConversation : public UBioCameraBehavior
{
public:
	struct FName                                       ConversationHook;                                         // 0x01FC(0x0008)
	struct FVector                                     m_vFixedCamPosition;                                      // 0x0204(0x000C)
	struct FRotator                                    m_rFixedCamRotation;                                      // 0x0210(0x000C)
	struct FVector                                     m_vProceduralCamPosition;                                 // 0x021C(0x000C)
	struct FRotator                                    m_rProceduralCamRotation;                                 // 0x0228(0x000C)
	float                                              m_fNearPlane;                                             // 0x0234(0x0004)
	struct FBioStageDOFData                            m_tDOFData;                                               // 0x0238(0x000C)
	unsigned long                                      m_bDOFDataChanged : 1;                                    // 0x0244(0x0004)
	unsigned long                                      m_bSavedData : 1;                                         // 0x0244(0x0004)
	unsigned long                                      m_bIdleCamEnabled : 1;                                    // 0x0244(0x0004) (Config)
	float                                              CAMERA_FOV;                                               // 0x0248(0x0004)
	struct FRotator                                    m_rRotationOffset;                                        // 0x024C(0x000C)
	float                                              m_fLateralOffset;                                         // 0x0258(0x0004)
	struct FVector                                     m_vPrevFixedCamPos;                                       // 0x025C(0x000C)
	struct FRotator                                    m_rPrevFixedCamRot;                                       // 0x0268(0x000C)
	float                                              m_fPrevCamFOV;                                            // 0x0274(0x0004)
	float                                              m_fPrevNearPlane;                                         // 0x0278(0x0004)
	struct FBioStageDOFData                            m_tPrevDOFData;                                           // 0x027C(0x000C)
	class UAnimSet*                                    m_pIdleCamAnimSet;                                        // 0x0288(0x0004)
	float                                              m_fIdleCamTimeIndex;                                      // 0x028C(0x0004)
	int                                                m_idleCamAnimIndex;                                       // 0x0290(0x0004)
	class UClass*                                      pProceduralCamera;                                        // 0x0294(0x0004)
	struct FName                                       m_nProceduralCameraClass;                                 // 0x0298(0x0008) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorConversation");
		return ptr;
	}


	void GetProceduralCam(bool bInvert, struct FVector* vCamLocation, struct FRotator* rCamRotation);
	void BlendIdleCameraAnimation();
	void InitProceduralCameraClass();
};


// Class BIOC_Base.BioCameraBehaviorDolly
// 0x0028 (0x0224 - 0x01FC)
class UBioCameraBehaviorDolly : public UBioCameraBehavior
{
public:
	float                                              m_fRadius;                                                // 0x01FC(0x0004) (Const, Transient)
	float                                              m_fDragPointOffsetZ;                                      // 0x0200(0x0004) (Const, Transient)
	float                                              m_fLookPointOffsetZ;                                      // 0x0204(0x0004) (Const, Transient)
	float                                              m_fDragPointOffsetLR;                                     // 0x0208(0x0004) (Const, Transient)
	float                                              m_fLookPointOffsetLR;                                     // 0x020C(0x0004) (Const, Transient)
	float                                              m_fFOV;                                                   // 0x0210(0x0004) (Const, Transient)
	unsigned long                                      m_bIsRotationForced : 1;                                  // 0x0214(0x0004) (Transient)
	struct FRotator                                    m_rForcedRotation;                                        // 0x0218(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorDolly");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorFlourish
// 0x0030 (0x022C - 0x01FC)
class UBioCameraBehaviorFlourish : public UBioCameraBehavior
{
public:
	float                                              m_fZOffset;                                               // 0x01FC(0x0004)
	float                                              m_fSpeedYaw;                                              // 0x0200(0x0004)
	float                                              m_fDesiredPitch;                                          // 0x0204(0x0004)
	float                                              m_fSpeedPitch;                                            // 0x0208(0x0004)
	float                                              m_fDesiredDistance;                                       // 0x020C(0x0004)
	float                                              m_fSpeedDistance;                                         // 0x0210(0x0004)
	unsigned long                                      m_bDoTimeDilation : 1;                                    // 0x0214(0x0004)
	float                                              m_fFinalTimeRate;                                         // 0x0218(0x0004)
	float                                              m_fDilationDuration;                                      // 0x021C(0x0004)
	float                                              m_fDilationTime;                                          // 0x0220(0x0004)
	float                                              m_fDilationDecayFactor;                                   // 0x0224(0x0004)
	float                                              m_fFOV;                                                   // 0x0228(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFlourish");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorFollow
// 0x0060 (0x025C - 0x01FC)
class UBioCameraBehaviorFollow : public UBioCameraBehavior
{
public:
	struct FName                                       FollowHook;                                               // 0x01FC(0x0008)
	float                                              CAMERA_OFFSET_HEIGHT;                                     // 0x0204(0x0004)
	float                                              CAMERA_OFFSET_RANGE;                                      // 0x0208(0x0004)
	float                                              CAMERA_OFFSET_RL;                                         // 0x020C(0x0004)
	float                                              CAMERA_FOV;                                               // 0x0210(0x0004)
	float                                              CAMERA_OFFSET_DYNAMIC_RL_MAX;                             // 0x0214(0x0004)
	float                                              CAMERA_OFFSET_DYNAMIC_RL_INIT;                            // 0x0218(0x0004)
	float                                              m_fDynamicRLBlendFast;                                    // 0x021C(0x0004)
	float                                              m_fDynamicRLBlendSlow;                                    // 0x0220(0x0004)
	float                                              CAMERA_OFFSET_HEIGHT_DEBUG;                               // 0x0224(0x0004)
	float                                              CAMERA_OFFSET_RANGE_DEBUG;                                // 0x0228(0x0004)
	float                                              CAMERA_OFFSET_RL_DEBUG;                                   // 0x022C(0x0004)
	float                                              CAMERA_FOV_DEBUG;                                         // 0x0230(0x0004)
	unsigned long                                      m_bEnableDynamicOffset : 1;                               // 0x0234(0x0004)
	float                                              m_fDynamicOffsetRL;                                       // 0x0238(0x0004)
	struct FVector                                     m_vTargetPrevLocation;                                    // 0x023C(0x000C)
	struct FVector                                     m_vCamPrevLocation;                                       // 0x0248(0x000C)
	struct FBioCameraUtilityOrientation                m_moveStickDelta;                                         // 0x0254(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollow");
		return ptr;
	}


	void SetCameraTarget(class AActor* Target);
	void SetCameraOffsetRL(float F);
	void SetCameraOffsetHeight(float F);
	void SetCameraOffsetRange(float F);
};


// Class BIOC_Base.BioCameraBehaviorFollowNormal
// 0x0010 (0x026C - 0x025C)
class UBioCameraBehaviorFollowNormal : public UBioCameraBehaviorFollow
{
public:
	unsigned long                                      m_bForcedCameraRotation : 1;                              // 0x025C(0x0004)
	struct FRotator                                    m_rForcedCameraRotation;                                  // 0x0260(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowNormal");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorFollowReadyStance
// 0x0000 (0x026C - 0x026C)
class UBioCameraBehaviorFollowReadyStance : public UBioCameraBehaviorFollowNormal
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowReadyStance");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorFollowReadyStanceLeft
// 0x0000 (0x026C - 0x026C)
class UBioCameraBehaviorFollowReadyStanceLeft : public UBioCameraBehaviorFollowReadyStance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowReadyStanceLeft");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorFollowReadyStanceRight
// 0x0000 (0x026C - 0x026C)
class UBioCameraBehaviorFollowReadyStanceRight : public UBioCameraBehaviorFollowReadyStance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowReadyStanceRight");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorFollowSniper
// 0x0070 (0x02DC - 0x026C)
class UBioCameraBehaviorFollowSniper : public UBioCameraBehaviorFollowReadyStance
{
public:
	struct FRotator                                    m_sourceOrientation;                                      // 0x026C(0x000C)
	struct FRotator                                    m_targetOrientation;                                      // 0x0278(0x000C)
	float                                              m_interpolationTime;                                      // 0x0284(0x0004)
	TEnumAsByte<EBioWeaponInterpolationState>          m_interpolationState;                                     // 0x0288(0x0001)
	TEnumAsByte<EBioInterpolationMethod>               m_interpolationMethods[0x3];                              // 0x0289(0x0001) (Edit)
	float                                              m_fZoomedKickbackScalingFactor;                           // 0x028C(0x0004)
	class ABioWeaponRanged*                            m_pWeapon;                                                // 0x0290(0x0004)
	struct FBioCameraUtilityOrientation                m_noise;                                                  // 0x0294(0x0008)
	struct FBioCameraUtilityOrientation                m_noiseChangeSpeed;                                       // 0x029C(0x0008)
	float                                              m_fNoiseChangeSpeedMin;                                   // 0x02A4(0x0004) (Config)
	float                                              m_fNoiseChangeSpeedMax;                                   // 0x02A8(0x0004) (Config)
	struct FBioCameraUtilityOrientation                m_noiseChangeAcceleration;                                // 0x02AC(0x0008)
	float                                              m_fNoiseChangeAccelerationMin;                            // 0x02B4(0x0004) (Config)
	float                                              m_fNoiseChangeAccelerationMax;                            // 0x02B8(0x0004) (Config)
	float                                              m_fNoiseScale;                                            // 0x02BC(0x0004)
	float                                              m_fNoiseScaleTarget;                                      // 0x02C0(0x0004)
	float                                              m_fNoiseScaleRate;                                        // 0x02C4(0x0004) (Config)
	struct FRotator                                    m_rCameraDeltaDueToNoise;                                 // 0x02C8(0x000C)
	class UBioCameraZoom*                              m_pZoom;                                                  // 0x02D4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              m_fConfigCamStickScalar;                                  // 0x02D8(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowSniper");
		return ptr;
	}


	int GetCurrentMagnificationLevel();
	void Focus(float fDistance, class ABioWorldInfo* pWorldInfo, class UDOFEffect* pDOFEffect);
	void SetNoiseScaleTarget(float F);
};


// Class BIOC_Base.BioCameraBehaviorFollowTacSel
// 0x0000 (0x026C - 0x026C)
class UBioCameraBehaviorFollowTacSel : public UBioCameraBehaviorFollowReadyStanceRight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowTacSel");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorFollowVehicleRigidCam
// 0x0044 (0x02A0 - 0x025C)
class UBioCameraBehaviorFollowVehicleRigidCam : public UBioCameraBehaviorFollow
{
public:
	int                                                m_nRelativeYaw;                                           // 0x025C(0x0004)
	int                                                m_nRelativePitch;                                         // 0x0260(0x0004)
	float                                              m_fYawInterpSpeed;                                        // 0x0264(0x0004) (Edit)
	float                                              m_fPitchInterpSpeed;                                      // 0x0268(0x0004) (Edit)
	unsigned long                                      m_bIsRigid : 1;                                           // 0x026C(0x0004) (Edit)
	unsigned long                                      m_bLockYaw : 1;                                           // 0x026C(0x0004) (Edit)
	unsigned long                                      m_bLockPitch : 1;                                         // 0x026C(0x0004) (Edit)
	unsigned long                                      m_bIsSoftAttached : 1;                                    // 0x026C(0x0004) (Edit)
	unsigned long                                      m_bCloseUpMode : 1;                                       // 0x026C(0x0004)
	unsigned long                                      m_bCloseUpInterpActive : 1;                               // 0x026C(0x0004)
	float                                              m_fSoftAttachedSpringConstant;                            // 0x0270(0x0004) (Edit)
	struct FVector                                     m_vSoftAttachedVelocity;                                  // 0x0274(0x000C) (Transient)
	struct FVector                                     m_vCurrentHookPosition;                                   // 0x0280(0x000C) (Transient)
	float                                              m_fCurrentOffsetRange;                                    // 0x028C(0x0004) (Transient)
	struct FInterpCurveFloat                           m_DesiredNormalizedRadiusAtRelativePitch;                 // 0x0290(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowVehicleRigidCam");
		return ptr;
	}


	bool SetCloseUpMode(bool bState, bool bDoInterp);
	void SetCameraSource(class AActor* Source);
};


// Class BIOC_Base.BioCameraBehaviorFollowVehicleZoom
// 0x0010 (0x026C - 0x025C)
class UBioCameraBehaviorFollowVehicleZoom : public UBioCameraBehaviorFollow
{
public:
	class ABioWeaponRanged*                            m_pWeapon;                                                // 0x025C(0x0004)
	float                                              m_fPitchOffset;                                           // 0x0260(0x0004) (Transient)
	float                                              m_fPitchOffsetMax;                                        // 0x0264(0x0004)
	class UBioCameraZoom*                              m_pZoom;                                                  // 0x0268(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFollowVehicleZoom");
		return ptr;
	}


	int GetCurrentMagnificationLevel();
	void Focus(float fDistance, class ABioWorldInfo* pWorldInfo, class UDOFEffect* pDOFEffect);
};


// Class BIOC_Base.BioCameraBehaviorFree
// 0x000C (0x0208 - 0x01FC)
class UBioCameraBehaviorFree : public UBioCameraBehavior
{
public:
	float                                              m_fMovementScalar;                                        // 0x01FC(0x0004) (Edit)
	float                                              m_fRotationScalar;                                        // 0x0200(0x0004) (Edit)
	unsigned long                                      m_bCameraLocked : 1;                                      // 0x0204(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorFree");
		return ptr;
	}


	void DrawHUD(class UCanvas* Canvas);
	bool IsCollisionEnabled();
};


// Class BIOC_Base.BioCameraBehaviorGalaxy
// 0x0120 (0x031C - 0x01FC)
class UBioCameraBehaviorGalaxy : public UBioCameraBehavior
{
public:
	float                                              m_fMovementScalar;                                        // 0x01FC(0x0004) (Transient)
	float                                              m_fRotationScalar;                                        // 0x0200(0x0004) (Transient)
	int                                                m_nCurrentState;                                          // 0x0204(0x0004) (Transient)
	struct FString                                     m_sSelectableObject;                                      // 0x0208(0x000C) (Transient, NeedCtorLink)
	struct FString                                     m_sCenterObject;                                          // 0x0214(0x000C) (Transient, NeedCtorLink)
	struct FString                                     m_sCrossHairObject;                                       // 0x0220(0x000C) (Transient, NeedCtorLink)
	struct FString                                     m_sCameraObject;                                          // 0x022C(0x000C) (Transient, NeedCtorLink)
	class AActor*                                      m_pCenterObject;                                          // 0x0238(0x0004) (Transient)
	class AActor*                                      m_pCrossHairObject;                                       // 0x023C(0x0004) (Transient)
	class AActor*                                      m_pCameraObject;                                          // 0x0240(0x0004) (Transient)
	float                                              m_fMaxOrbitDistance;                                      // 0x0244(0x0004) (Transient)
	float                                              m_fPlanarPitch;                                           // 0x0248(0x0004) (Transient)
	class AActor*                                      m_pSelectedObject;                                        // 0x024C(0x0004) (Transient)
	class AActor*                                      m_pSelectedCluster;                                       // 0x0250(0x0004) (Transient)
	class AActor*                                      m_pSelectedSystem;                                        // 0x0254(0x0004) (Transient)
	class AActor*                                      m_pSelectedPlanet;                                        // 0x0258(0x0004) (Transient)
	float                                              m_fZoomTime;                                              // 0x025C(0x0004) (Transient)
	struct FVector                                     m_vZoomLocation;                                          // 0x0260(0x000C) (Transient)
	struct FVector                                     m_vZoomDelta;                                             // 0x026C(0x000C) (Transient)
	struct FRotator                                    m_rZoomRotation;                                          // 0x0278(0x000C) (Transient)
	struct FVector                                     m_vLastCameraLocation;                                    // 0x0284(0x000C) (Transient)
	unsigned long                                      m_bTransitionDown : 1;                                    // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bFirstStage : 1;                                        // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bPlanetUsable : 1;                                      // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bPaused : 1;                                            // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bRefreshPlanetUsable : 1;                               // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bCachedSystemNoSave : 1;                                // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bCacheNoSaveLock : 1;                                   // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bRebuildPlanetRingCache : 1;                            // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bSelectedPlanetLastFrame : 1;                           // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bUseInternalPlanetEvent : 1;                            // 0x0290(0x0004) (Transient)
	unsigned long                                      m_bCheckPlanetModeAndSetMouseState : 1;                   // 0x0290(0x0004) (Transient)
	int                                                m_nPlanetDescription;                                     // 0x0294(0x0004) (Transient)
	int                                                m_nPlanetImageIndex;                                      // 0x0298(0x0004) (Transient)
	int                                                m_nPlanetMap;                                             // 0x029C(0x0004) (Transient)
	struct FString                                     m_sPlanetEvent;                                           // 0x02A0(0x000C) (Transient, NeedCtorLink)
	int                                                m_nButtonLabel;                                           // 0x02AC(0x0004) (Transient)
	int                                                m_nExitMap;                                               // 0x02B0(0x0004) (Transient)
	int                                                m_nActiveWorld;                                           // 0x02B4(0x0004) (Transient)
	int                                                m_nScanRange;                                             // 0x02B8(0x0004) (Transient)
	TArray<class AActor*>                              m_pScaleformObjects;                                      // 0x02BC(0x000C) (Transient, NeedCtorLink)
	int                                                m_nHighlightWorld;                                        // 0x02C8(0x0004) (Transient)
	class ADynamicSMActor*                             m_pTemplatePlanet;                                        // 0x02CC(0x0004) (Transient)
	float                                              m_fPlanetRotation;                                        // 0x02D0(0x0004) (Transient)
	class UBio2DA*                                     m_pClusterTable;                                          // 0x02D4(0x0004) (Transient)
	class UBio2DA*                                     m_pSystemTable;                                           // 0x02D8(0x0004) (Transient)
	class UBio2DA*                                     m_pPlanetTable;                                           // 0x02DC(0x0004) (Transient)
	class UBio2DA*                                     m_pMapTable;                                              // 0x02E0(0x0004) (Transient)
	class UBio2DA*                                     m_pPlotPlanetTable;                                       // 0x02E4(0x0004) (Transient)
	class UBio2DA*                                     m_pRelayTable;                                            // 0x02E8(0x0004) (Transient)
	TArray<class AActor*>                              m_pDynamicClusterPath;                                    // 0x02EC(0x000C) (Transient, NeedCtorLink)
	TArray<class AActor*>                              m_pDynamicObjects;                                        // 0x02F8(0x000C) (Transient, NeedCtorLink)
	int                                                m_nPlanetEventConditional;                                // 0x0304(0x0004) (Transient)
	int                                                m_nPlanetEventFunction;                                   // 0x0308(0x0004) (Transient)
	int                                                m_nPlanetEventParameter;                                  // 0x030C(0x0004) (Transient)
	int                                                m_nPlanetEventTransition;                                 // 0x0310(0x0004) (Transient)
	int                                                m_nPlanetEventTransParameter;                             // 0x0314(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0318(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioCameraBehaviorGalaxy.m_srPlanetEventMessage

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorGalaxy");
		return ptr;
	}


	void RevertToCachedAutoSaveSetting();
};


// Class BIOC_Base.BioCameraBehaviorLocked
// 0x0000 (0x01FC - 0x01FC)
class UBioCameraBehaviorLocked : public UBioCameraBehavior
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorLocked");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorSpectator
// 0x0024 (0x0220 - 0x01FC)
class UBioCameraBehaviorSpectator : public UBioCameraBehavior
{
public:
	float                                              m_fLockRange;                                             // 0x01FC(0x0004)
	float                                              m_fLockHeight;                                            // 0x0200(0x0004)
	float                                              m_fLockPitch;                                             // 0x0204(0x0004)
	float                                              m_fLockYaw;                                               // 0x0208(0x0004)
	unsigned long                                      m_bSuppliedLocalizedParams : 1;                           // 0x020C(0x0004)
	TArray<class APlayerStart*>                        m_aSpectateSpawnLocation;                                 // 0x0210(0x000C) (Transient, NeedCtorLink)
	int                                                m_nSpectateCurrentLocation;                               // 0x021C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorSpectator");
		return ptr;
	}


	void DrawHUD(class UCanvas* Canvas);
	void SetCameraTarget(class AActor* Target);
	void SetTargetLocalizedCameraParams(const struct FVector& vPosition, const struct FRotator& rRotation, const struct FRotator& rLockRotation);
	void GetTargetLocalizedCameraParams(struct FVector* vPosition, struct FRotator* rRotation, struct FRotator* rLockRotation);
};


// Class BIOC_Base.BioCameraBehaviorZoom
// 0x0004 (0x0270 - 0x026C)
class UBioCameraBehaviorZoom : public UBioCameraBehaviorFollowReadyStance
{
public:
	unsigned long                                      m_bIsLocked : 1;                                          // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorZoom");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraDebugger
// 0x000C (0x0048 - 0x003C)
class UBioCameraDebugger : public UObject
{
public:
	int                                                m_anFlag[0x3];                                            // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraDebugger");
		return ptr;
	}


	bool GetFlag(TEnumAsByte<EBioCameraDebuggerFlag> eFlag);
	void SetFlag(TEnumAsByte<EBioCameraDebuggerFlag> eFlag, bool B);
};


// Class BIOC_Base.BioCameraManager
// 0x0100 (0x02F0 - 0x01F0)
class ABioCameraManager : public AActor
{
public:
	TArray<struct FBioCameraManagerBehaviorSpec>       m_aBehaviorSpec;                                          // 0x01F0(0x000C) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_nActiveBehavior;                                        // 0x01FC(0x0004)
	int                                                m_nPreviousBehavior;                                      // 0x0200(0x0004)
	class ABioPlayerController*                        PlayerInterface;                                          // 0x0204(0x0004)
	class UBioCameraUtility*                           m_pCurrentUtility;                                        // 0x0208(0x0004) (Transient)
	class UBioCameraTransition*                        Transition;                                               // 0x020C(0x0004) (Transient)
	struct FTPOV                                       m_povDefault;                                             // 0x0210(0x001C)
	unsigned long                                      m_bIgnoreSlowMo : 1;                                      // 0x022C(0x0004)
	unsigned long                                      m_bCameraSwitchEnabled : 1;                               // 0x022C(0x0004)
	unsigned long                                      m_bCameraRightButtonOnly : 1;                             // 0x022C(0x0004)
	unsigned long                                      m_bIsCameraShakeEnabled : 1;                              // 0x022C(0x0004)
	float                                              m_fCameraTraceRange;                                      // 0x0230(0x0004) (Config)
	float                                              m_fVehicleTraceRange;                                     // 0x0234(0x0004) (Config)
	float                                              m_fSniperTraceRange;                                      // 0x0238(0x0004) (Config)
	struct FBioCameraManagerTraceInfo                  m_aTraceInfo[0x4];                                        // 0x023C(0x0024) (Transient)
	struct FMultiMap_Mirror                            m_mapTransitions;                                         // 0x02CC(0x0014) (Native, Transient)
	TArray<class ABioPawn*>                            m_apHiddenPawn;                                           // 0x02E0(0x000C) (Transient, NeedCtorLink)
	float                                              m_fHidePawnRadiusFactor;                                  // 0x02EC(0x0004) (Const, Transient, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraManager");
		return ptr;
	}


	void DrawHUD(class UCanvas* Canvas);
	void ComputeCameraLinePoint(struct FVector* vPoint, struct FVector* vBeside);
	class UBioCameraTransition* GetTransition(int nFromHandle, int nToHandle);
	void SetTransition(int nFromHandle, int nToHandle, class UBioCameraTransition* pTransition, bool bMirror);
	void OnUnPossess();
	void OnPossess(class APawn* pPawn);
	void SetPreserveTargetPoint(int nFromBehavior, int nToBehavior, bool bPreserveTargetPoint);
	bool ShouldPreserveTargetPoint(int nFromBehavior, int nToBehavior);
	float GetCameraStickScalar();
	void ToggleDebugCamera();
	void ToggleCollisionCameraLock();
	float GetRange(unsigned char nInputMode);
	bool GetTraceRange(TEnumAsByte<EBioCameraManagerTrace> eTrace, float fRange);
	bool GetTrace(TEnumAsByte<EBioCameraManagerTrace> eTrace, class AActor** oHit, struct FVector* vLocation, struct FVector* vNormal);
	void SetPlayerInterface(class ABioPlayerController* Interface);
	float GetCameraFOV();
	void SetCameraRotation(const struct FRotator& rRotation);
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class AActor* GetCameraTarget();
	class AActor* GetCameraSource();
	int GetPreviousBehavior();
	int GetActiveBehavior();
	void DeactivateCurrentBehavior();
	class UBioCameraTransition* ActivateBehavior(int nBehavior, class UBioCameraTransition* pTransitionOverride);
	int GetBehaviorCount();
	class UBioCameraBehavior* GetBehavior(int nBehavior);
	void RemoveBehavior(int nBehavior);
	int AddBehavior(class UClass* Behavior);
	void UpdateCamera(float fDeltaTime, float fAspectRatio, struct FTPOV* POV);
};


// Class BIOC_Base.BioCameraTransition
// 0x0054 (0x0204 - 0x01B0)
class UBioCameraTransition : public UBioCameraUtility
{
public:
	unsigned long                                      m_bTransitionComplete : 1;                                // 0x01B0(0x0004)
	unsigned long                                      m_bPreserveTargetPoint : 1;                               // 0x01B0(0x0004)
	class UBioCameraBehavior*                          m_pFromBehavior;                                          // 0x01B4(0x0004)
	class UBioCameraBehavior*                          m_pToBehavior;                                            // 0x01B8(0x0004)
	float                                              m_fCameraTransitionTime;                                  // 0x01BC(0x0004)
	struct FVector                                     m_vCameraTraceHitPoint;                                   // 0x01C0(0x000C)
	struct FVector                                     m_vInitialCameraLocation;                                 // 0x01CC(0x000C)
	float                                              m_fPreserveTargetPointDotProductThreshold;                // 0x01D8(0x0004) (Edit)
	unsigned long                                      m_bTickFromBehavior : 1;                                  // 0x01DC(0x0004) (Transient)
	float                                              m_fNormalizedDisplacement;                                // 0x01E0(0x0004)
	float                                              m_fNormalizedDisplacementThreshold;                       // 0x01E4(0x0004) (Const, Config)
	float                                              m_fNormalizedDisplacementScale;                           // 0x01E8(0x0004) (Const, Config)
	float                                              m_fNormalizedDisplacementScaleClamp;                      // 0x01EC(0x0004) (Const, Config)
	int                                                m_anTransferVar[0x5];                                     // 0x01F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraTransition");
		return ptr;
	}


	float GetNormalizedDisplacementScale();
	void SetNormalizedDisplacementScale(float F);
	void SetVarTransfer(TEnumAsByte<EBioCameraTransitionVar> eVar, bool bTransfer);
};


// Class BIOC_Base.BioCameraTransitionPop
// 0x0000 (0x0204 - 0x0204)
class UBioCameraTransitionPop : public UBioCameraTransition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraTransitionPop");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraTransitionRelativeFollow
// 0x0010 (0x0214 - 0x0204)
class UBioCameraTransitionRelativeFollow : public UBioCameraTransition
{
public:
	struct FName                                       FromHook;                                                 // 0x0204(0x0008)
	struct FName                                       ToHook;                                                   // 0x020C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraTransitionRelativeFollow");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraTransitionSlide
// 0x0000 (0x0204 - 0x0204)
class UBioCameraTransitionSlide : public UBioCameraTransition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraTransitionSlide");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraTransitionSlideAvoidBlock
// 0x0000 (0x0204 - 0x0204)
class UBioCameraTransitionSlideAvoidBlock : public UBioCameraTransitionSlide
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraTransitionSlideAvoidBlock");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraTransitionSlideUnlessBlocked
// 0x000C (0x0210 - 0x0204)
class UBioCameraTransitionSlideUnlessBlocked : public UBioCameraTransitionSlide
{
public:
	struct FVector                                     PathExtent;                                               // 0x0204(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraTransitionSlideUnlessBlocked");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraTransitionZoomLock
// 0x0004 (0x0218 - 0x0214)
class UBioCameraTransitionZoomLock : public UBioCameraTransitionRelativeFollow
{
public:
	class UBioCameraBehaviorZoom*                      m_pZoomBehavior;                                          // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraTransitionZoomLock");
		return ptr;
	}


	void SetZoomBehavior(class UBioCameraBehaviorZoom* pZoomBehavior);
};


// Class BIOC_Base.BioCameraZoom
// 0x0060 (0x009C - 0x003C)
class UBioCameraZoom : public UObject
{
public:
	struct FBioZoomFocusConfig                         m_focusConfig;                                            // 0x003C(0x0028) (Const, Config)
	struct FBioZoomMagnificationConfig                 m_magnificationConfig;                                    // 0x0064(0x0010) (Const, Config)
	int                                                m_nCurrentMagnificationLevel;                             // 0x0074(0x0004)
	float                                              m_fFOVTarget;                                             // 0x0078(0x0004)
	float                                              m_fFOVRate;                                               // 0x007C(0x0004)
	float                                              m_fFOVMin;                                                // 0x0080(0x0004)
	float                                              m_fFOVMax;                                                // 0x0084(0x0004)
	float                                              m_fCamStickScalarTarget;                                  // 0x0088(0x0004)
	float                                              m_fCamStickScalarRate;                                    // 0x008C(0x0004)
	float                                              m_fCamStickScalarMin;                                     // 0x0090(0x0004)
	float                                              m_fFocusDistance;                                         // 0x0094(0x0004)
	float                                              m_fFocusDistanceTarget;                                   // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraZoom");
		return ptr;
	}


	int GetCurrentMagnificationLevel();
	void Focus(float fDistance, class ABioWorldInfo* pWorldInfo, class UDOFEffect* pDOFEffect);
};


// Class BIOC_Base.BioActivityTiming
// 0x000C (0x0048 - 0x003C)
class UBioActivityTiming : public UObject
{
public:
	struct FName                                       ActivityName;                                             // 0x003C(0x0008) (Edit)
	float                                              ActivityTime;                                             // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActivityTiming");
		return ptr;
	}

};


// Class BIOC_Base.BioWorldInteractionType
// 0x0040 (0x007C - 0x003C)
class UBioWorldInteractionType : public UObject
{
public:
	TArray<class UAnimSet*>                            m_oBaseMaleAnimations;                                    // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            m_oBaseFemaleAnimations;                                  // 0x0048(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   m_oBaseSoundCue;                                          // 0x0054(0x0004) (Edit)
	TArray<struct FActivityRecord>                     m_ActivityRecords;                                        // 0x0058(0x000C) (Edit, NeedCtorLink)
	float                                              m_fBaseTime;                                              // 0x0064(0x0004) (Edit)
	float                                              m_fVarianceTime;                                          // 0x0068(0x0004) (Edit)
	int                                                m_nCurrentActivity;                                       // 0x006C(0x0004)
	int                                                m_nCurrentTwitch;                                         // 0x0070(0x0004)
	class UAudioComponent*                             m_oBaseSounds;                                            // 0x0074(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             m_oActivitySounds;                                        // 0x0078(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWorldInteractionType");
		return ptr;
	}

};


// Class BIOC_Base.BioActorFactoryLedgeMesh
// 0x0000 (0x0074 - 0x0074)
class UBioActorFactoryLedgeMesh : public UActorFactoryStaticMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActorFactoryLedgeMesh");
		return ptr;
	}

};


// Class BIOC_Base.BioLedgeMeshActor
// 0x0000 (0x01F8 - 0x01F8)
class ABioLedgeMeshActor : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLedgeMeshActor");
		return ptr;
	}

};


// Class BIOC_Base.BioArtPlaceable
// 0x00DC (0x02CC - 0x01F0)
class ABioArtPlaceable : public AActor
{
public:
	class UBioArtPlaceableBehavior*                    m_oBehavior;                                              // 0x01F0(0x0004) (Edit, EditConst, EditInline)
	class UAudioComponent*                             PlacablesSounds;                                          // 0x01F4(0x0004) (ExportObject, Component, EditInline)
	class UMeshComponent*                              DestroyedMesh;                                            // 0x01F8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UMeshComponent*                              PlaceableMesh;                                            // 0x01FC(0x0004) (Edit, ExportObject, Component, EditInline)
	class UMeshComponent*                              CoverMesh;                                                // 0x0200(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      m_bDisregardLineTestsFromBasedActor : 1;                  // 0x0204(0x0004) (Edit, Config)
	unsigned long                                      bDisabled : 1;                                            // 0x0204(0x0004) (Edit)
	unsigned long                                      bClaimAllSlots : 1;                                       // 0x0204(0x0004) (Edit)
	unsigned long                                      bDebugCover : 1;                                          // 0x0204(0x0004) (Edit)
	unsigned long                                      m_bCanCleanupCorpse : 1;                                  // 0x0204(0x0004) (Edit)
	unsigned long                                      m_bAlwaysTick : 1;                                        // 0x0204(0x0004) (Edit)
	int                                                m_nNumParticipants;                                       // 0x0208(0x0004)
	class UBioFSMComponent*                            FSM;                                                      // 0x020C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      m_bMoving : 1;                                            // 0x0210(0x0004) (Transient)
	unsigned long                                      m_bFirstFrameMove : 1;                                    // 0x0210(0x0004) (Transient)
	TArray<struct FCoverLinkRecord>                    m_aDisabledCoverLinks;                                    // 0x0214(0x000C) (NeedCtorLink)
	class UBioCoverInterface*                          m_oTempInterface;                                         // 0x0220(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class ABioDEBUGMarker*                             m_oDbgMarker;                                             // 0x0224(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<struct FCoverSlot>                          Slots;                                                    // 0x0228(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	TArray<class AController*>                         Claims;                                                   // 0x0234(0x000C) (NeedCtorLink)
	float                                              StandHeight;                                              // 0x0240(0x0004) (Const)
	float                                              MidHeight;                                                // 0x0244(0x0004) (Const)
	float                                              LowHeight;                                                // 0x0248(0x0004) (Const)
	float                                              AlignDist;                                                // 0x024C(0x0004) (Const)
	class ABioArtPlaceable*                            m_oNextArtPlaceableLink;                                  // 0x0250(0x0004) (Const)
	class ABioPawn*                                    m_oLastInstigator;                                        // 0x0254(0x0004)
	float                                              m_fNextProxCheck;                                         // 0x0258(0x0004) (Transient)
	TArray<class ABioVisualEffect*>                    VisualEffects;                                            // 0x025C(0x000C) (Transient, NeedCtorLink)
	class ULightEnvironmentComponent*                  m_pLightEnvComponent;                                     // 0x0268(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FMap_Mirror                                 m_mAttachedNavPoints;                                     // 0x026C(0x0014) (Native)
	TArray<class ABioBaseSquad*>                       m_aoSquads;                                               // 0x0280(0x000C) (Edit, NeedCtorLink)
	struct FName                                       m_nmMatineeNodeName;                                      // 0x028C(0x0008)
	struct FMultiMap_Mirror                            m_maoBlockedReachSpecs;                                   // 0x0294(0x0014) (Native, Transient)
	float                                              m_fCorpseCleanupFirstAttemptTime;                         // 0x02A8(0x0004) (Const, Transient, Config)
	float                                              m_fCorpseCleanupAttemptRetryTime;                         // 0x02AC(0x0004) (Const, Transient, Config)
	int                                                m_nMaxCorpseVisibilityCleanupAttempts;                    // 0x02B0(0x0004) (Const, Transient, Config)
	float                                              m_fMaxCorpseCleanupDistanceThreshold;                     // 0x02B4(0x0004) (Const, Transient, Config)
	float                                              m_fMaxCorpseCleanupScreenSizeThreshold;                   // 0x02B8(0x0004) (Const, Transient, Config)
	int                                                m_nCorpseCleanupAttempts;                                 // 0x02BC(0x0004) (Transient)
	class ABioArtPlaceable*                            NextPlaceable;                                            // 0x02C0(0x0004) (Const)
	int                                                m_nTickCount;                                             // 0x02C4(0x0004) (Transient)
	float                                              m_fMaxRelevancyDistance;                                  // 0x02C8(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceable");
		return ptr;
	}


	void DestroyedCleanupTimer();
	void FinishAnimControl();
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	class UClass* STATIC_GetSaveObjectClass();
	void OnSkillGameCanceled(class ABioPawn* oUsingPawn);
	void OnSkillGameSucceeded(class ABioPawn* oUsingPawn);
	void OnSkillGameFailed(class ABioPawn* oUsingPawn);
	void AbortReactive(const struct FName& nmToState);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void EncroachedBy(class AActor* Other);
	void RanInto(class AActor* Other);
	void BioBeginPlay();
	bool IsDynamicCover();
	void InitializeForPlay();
	void MAT_FinishAnimControl();
	void MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void MAT_BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	void EjectUsersOfAPCover();
	void RemoveFromSquadCover();
	void AddToSquadCover(class ABioBaseSquad* oSquad);
	bool BioDoProximityCheck();
	void DoTreasureTransfer(class ABioPawn* pOther);
	void TermRagdoll();
	void InitRagdoll();
	struct FRotator GetSlotRotation(int SlotIdx);
	struct FVector GetSlotLocation(int SlotIdx);
	int DecBlocked(int SlotIdx);
	int IncBlocked(int SlotIdx);
	int GetAiCoverSpots();
	class AController* GetSlotClaimedBy(int SlotIdx);
	bool GetSlotClaimed(int SlotIdx, class AController* oCtrl);
	bool GetSlotEnabled(int SlotIdx);
	TEnumAsByte<ECoverType> GetSlotType(int SlotIdx);
	void UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll);
	bool Claim(class AController* NewClaim, int SlotIdx);
	int GetStepFlags(int SlotIdx);
	struct FCoverSlot GetCoverSlot(int nIDX);
	void UpdateWpPointPosition();
	void SetActionStationWP(class ANavigationPoint* oWP, const struct FName& nmSocket);
};


// Class BIOC_Base.BioArtPlaceableCoverInterface
// 0x0004 (0x0044 - 0x0040)
class UBioArtPlaceableCoverInterface : public UBioCoverInterface
{
public:
	class ABioArtPlaceable*                            m_oArtPlaceable;                                          // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableCoverInterface");
		return ptr;
	}


	bool GetSlot(int SlotIdx, struct FCoverSlot* Slot);
	int DecBlocked(int SlotIdx);
	int IncBlocked(int SlotIdx);
	class AController* GetSlotClaimedBy(int SlotIdx);
	bool GetSlotClaimed(int SlotIdx, class AController* oCtrl);
	bool GetSlotEnabled(int SlotIdx);
	TEnumAsByte<ECoverType> GetSlotType(int SlotIdx);
	int GetStepFlags(int SlotIdx);
	void UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll);
	bool Claim(class AController* NewClaim, int SlotIdx);
	int GetSlotCount();
	struct FRotator GetSlotRotation(int nSlotID);
	struct FVector GetSlotLocation(int nSlotID);
	class AActor* GetCoverObject();
	void Reset();
	void InitFromActor(class AActor* oAct);
	bool IsValid();
};


// Class BIOC_Base.BioArtPlaceableShield
// 0x0000 (0x02CC - 0x02CC)
class ABioArtPlaceableShield : public ABioArtPlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableShield");
		return ptr;
	}


	void Tick(float fTimeDelta);
};


// Class BIOC_Base.BioContainer
// 0x0000 (0x02CC - 0x02CC)
class ABioContainer : public ABioArtPlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioContainer");
		return ptr;
	}

};


// Class BIOC_Base.BioDoor
// 0x000C (0x02D8 - 0x02CC)
class ABioDoor : public ABioArtPlaceable
{
public:
	float                                              m_fFarCloseDistance;                                      // 0x02CC(0x0004) (Edit)
	class APawn*                                       m_oPlayerWithinDoorProximity;                             // 0x02D0(0x0004)
	unsigned long                                      m_bSaveStateWhenPlayerEntered : 1;                        // 0x02D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDoor");
		return ptr;
	}


	float CalcDistanceFromDoorPlane(struct FVector* vWorldLocation);
	bool BioDoProximityCheck();
};


// Class BIOC_Base.BioAPCoverMeshComponent
// 0x0000 (0x023C - 0x023C)
class UBioAPCoverMeshComponent : public UCoverMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAPCoverMeshComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioProjectile
// 0x0024 (0x024C - 0x0228)
class ABioProjectile : public AProjectile
{
public:
	unsigned long                                      m_bEnablePhysicsTouch : 1;                                // 0x0228(0x0004)
	struct FBioProjectilePhysicsCollisionContext       m_oPhysicsCollisionContext;                               // 0x022C(0x001C) (ExportObject, EditInline)
	class UBioDamageType*                              m_pDamage;                                                // 0x0248(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioProjectile");
		return ptr;
	}


	void ProcessPhysicsTouch(class AActor* oOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal);
	void ProcessTouch(class AActor* oOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal);
	void Explode(const struct FVector& vHitLocation, const struct FVector& vHitNormal);
	bool IsValidTarget(class AActor* oActor);
};


// Class BIOC_Base.BioGrenadeProjectile
// 0x0028 (0x0274 - 0x024C)
class ABioGrenadeProjectile : public ABioProjectile
{
public:
	class USkeletalMeshComponent*                      m_Mesh;                                                   // 0x024C(0x0004) (Edit, ExportObject, Component, EditInline)
	class URB_Handle*                                  m_GrenadeHandle;                                          // 0x0250(0x0004) (ExportObject, Component, EditInline)
	struct FVector                                     m_ExpHitLocation;                                         // 0x0254(0x000C)
	struct FVector                                     m_ExpHitNormal;                                           // 0x0260(0x000C)
	unsigned long                                      m_bInstigatorIsPlayer : 1;                                // 0x026C(0x0004)
	unsigned long                                      m_bShowDebugAiming : 1;                                   // 0x026C(0x0004)
	class UBioItemGrenade*                             m_pItem;                                                  // 0x0270(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenadeProjectile");
		return ptr;
	}


	void Detonate();
	void SetVelocity(const struct FVector& vVelocity);
	void SetTargetPoint(const struct FVector& vTarget);
	void SetTargetActor(class AActor* oTarget);
	bool HurtRadius(float fBaseDamage, float fDamageRadius, class UClass* clsDamageType, float fMomentum, const struct FVector& vHurtOrigin, class AActor* oIgnoredActor, class AController* oInstigatedByController, bool bDoFullDamage, class UDamageType* pDamage);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool ShouldExplode(float DeltaTime);
	void Tick(float DeltaTime);
	void Initialize(class UBioDamageType* pDamage, class UBioItemGrenade* pItem);
	struct FVector GetActorTargetLocation(class AActor* oActor);
	bool IsValidTarget(class AActor* oActor);
	void InitializeUpgradableStats();
};


// Class BIOC_Base.BioGrenadeProjectileBallistic
// 0x0004 (0x0278 - 0x0274)
class ABioGrenadeProjectileBallistic : public ABioGrenadeProjectile
{
public:
	float                                              m_fProximityRadius;                                       // 0x0274(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenadeProjectileBallistic");
		return ptr;
	}


	bool ShouldExplode(float DeltaTime);
	void SetVelocity(const struct FVector& vVelocity);
	void SetTargetPoint(const struct FVector& vTarget);
	void SetTargetActor(class AActor* oTarget);
};


// Class BIOC_Base.BioGrenadeProjectileFrisbee
// 0x0038 (0x02AC - 0x0274)
class ABioGrenadeProjectileFrisbee : public ABioGrenadeProjectile
{
public:
	unsigned long                                      m_bIsStuck : 1;                                           // 0x0274(0x0004)
	class AActor*                                      m_oHeatSeekTarget;                                        // 0x0278(0x0004)
	struct FVector                                     m_vHitNormal;                                             // 0x027C(0x000C)
	float                                              m_fExplosionNoise;                                        // 0x0288(0x0004) (Config)
	float                                              m_fStickNoise;                                            // 0x028C(0x0004) (Config)
	class AActor*                                      m_oIntendedTarget;                                        // 0x0290(0x0004) (Transient)
	struct FVector                                     m_vIntendedTargetLocation;                                // 0x0294(0x000C) (Transient)
	struct FVector                                     m_vStartLocation;                                         // 0x02A0(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenadeProjectileFrisbee");
		return ptr;
	}


	void DoTouch(class AActor* oHitActor, const struct FVector& vHitLocation, const struct FVector& vHitNormal);
	void Unstick(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Stick(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void ProcessTouch(class AActor* HitActor, const struct FVector& vHitLocation, const struct FVector& vHitNormal);
	void SetVelocity(const struct FVector& vVelocity);
	void SetTargetPoint(const struct FVector& vTarget);
	void SetTargetActor(class AActor* oTarget);
	void Detonate();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
};


// Class BIOC_Base.BioLinePowerProjectile
// 0x0070 (0x02BC - 0x024C)
class ABioLinePowerProjectile : public ABioProjectile
{
public:
	class ABioVisualEffect*                            m_oProjectileVFX;                                         // 0x024C(0x0004) (Transient)
	class APawn*                                       m_oCaster;                                                // 0x0250(0x0004) (Transient)
	class UBioEpicPawnBehavior*                        m_oCasterBehavior;                                        // 0x0254(0x0004) (Transient)
	unsigned long                                      m_bCasterIsPlayer : 1;                                    // 0x0258(0x0004) (Transient)
	unsigned long                                      m_bFirstTargetHit : 1;                                    // 0x0258(0x0004) (Transient)
	unsigned long                                      m_bShowPowerAiming : 1;                                   // 0x0258(0x0004) (Transient)
	unsigned long                                      m_bShowPowerImpactText : 1;                               // 0x0258(0x0004) (Transient)
	TArray<class AActor*>                              m_aImpactedActors;                                        // 0x025C(0x000C) (Transient, NeedCtorLink)
	int                                                m_nImpactedCount;                                         // 0x0268(0x0004) (Transient)
	float                                              m_fVisualEffectRadius;                                    // 0x026C(0x0004) (Transient)
	class UBioPowerScript*                             m_oPowerScript;                                           // 0x0270(0x0004) (Transient)
	float                                              m_fImpactStability;                                       // 0x0274(0x0004) (Transient)
	class UBioPower*                                   m_oPower;                                                 // 0x0278(0x0004) (Transient)
	struct FVector                                     m_vWorldImpactPoint;                                      // 0x027C(0x000C) (Transient)
	struct FVector                                     m_vWorldImpactNormal;                                     // 0x0288(0x000C) (Transient)
	struct FVector                                     m_vLastLocation;                                          // 0x0294(0x000C) (Transient)
	struct FVector                                     m_vStartLocation;                                         // 0x02A0(0x000C) (Transient)
	class AActor*                                      m_oTarget;                                                // 0x02AC(0x0004) (Transient)
	struct FVector                                     m_vTargetLocation;                                        // 0x02B0(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLinePowerProjectile");
		return ptr;
	}


	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void ProcessTouch(class AActor* oOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal);
	void RecordDebugAimingInfo(const struct FVector& vStartLocation1, const struct FVector& vEndLocation1, const struct FVector& vStartLocation2, const struct FVector& vEndLocation2);
	void GetProjectileImpactLocation(class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal);
	void GetImpactLocation(class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal, struct FName* nmBoneName);
	bool DoImpact(class AActor* oActor, const struct FVector& vHitLocation, const struct FVector& vHitNormal, const struct FName& nmBoneName);
	bool ImpactActors(const struct FVector& vLocation, const struct FVector& vNormal, float fRadius);
	void TickAuthoritative(float DeltaSeconds);
	void DoTouch(class AActor* pOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal);
	bool InitializeData(class AActor* oCaster, float fStability, float fTravelSpeed, float fRadius, float fRange, const struct FVector& vTargetLocation, class UBioPowerScript* oPowerScript, class UBioPower* oPower, const struct FVector& vCasterVelocity);
};


// Class BIOC_Base.BioMapNote
// 0x0050 (0x0240 - 0x01F0)
class ABioMapNote : public AActor
{
public:
	unsigned long                                      m_bReducedVisibility : 1;                                 // 0x01F0(0x0004) (Edit)
	unsigned long                                      m_bShowOnRadar : 1;                                       // 0x01F0(0x0004) (Edit)
	unsigned long                                      m_bShowOnAreamap : 1;                                     // 0x01F0(0x0004) (Edit)
	unsigned long                                      m_bLinkedToJournal : 1;                                   // 0x01F0(0x0004) (Edit)
	float                                              m_fVisibleRange;                                          // 0x01F4(0x0004) (Edit)
	class UBioSWF*                                     m_oAreaMap;                                               // 0x01F8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioMapNote.m_sMapNoteName
	int                                                m_nLinkedQuest;                                           // 0x0200(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0204(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioMapNote.m_sJournalTask
	TEnumAsByte<EBioRegionAutoSet>                     Region;                                                   // 0x0208(0x0001) (Edit)
	TEnumAsByte<EBioPlotAutoSet>                       Plot;                                                     // 0x0209(0x0001) (Edit)
	TEnumAsByte<EBioAutoSet>                           Conditional;                                              // 0x020A(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x1];                                       // 0x020B(0x0001) MISSED OFFSET
	int                                                Argument;                                                 // 0x020C(0x0004) (Edit)
	int                                                m_nIndex;                                                 // 0x0210(0x0004)
	struct FString                                     m_sVarName;                                               // 0x0214(0x000C) (NeedCtorLink)
	int                                                m_nPrevRegionIndex;                                       // 0x0220(0x0004)
	int                                                m_nPrevPlotIndex;                                         // 0x0224(0x0004)
	struct FString                                     m_sRefName;                                               // 0x0228(0x000C) (NeedCtorLink)
	float                                              m_fUpdateDelay;                                           // 0x0234(0x0004) (Config)
	float                                              m_fUpdateTimer;                                           // 0x0238(0x0004) (Transient)
	unsigned long                                      m_bSeen : 1;                                              // 0x023C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMapNote");
		return ptr;
	}

};


// Class BIOC_Base.BioPathPoint
// 0x0004 (0x02D0 - 0x02CC)
class ABioPathPoint : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x02CC(0x0004) (Edit)
	unsigned long                                      bOrientPawnOnEvent : 1;                                   // 0x02CC(0x0004) (Edit, Deprecated)
	unsigned long                                      bAlwaysReachable : 1;                                     // 0x02CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPathPoint");
		return ptr;
	}


	bool DoReachedWaypointEvent(class ABioPawn* oPawn);
	bool OnCreatureReachedWayPoint(class APawn* PathFindingCreature);
};


// Class BIOC_Base.BioWaypointLinesComponent
// 0x0000 (0x01B8 - 0x01B8)
class UBioWaypointLinesComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWaypointLinesComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioWaypointSet
// 0x0010 (0x0200 - 0x01F0)
class ABioWaypointSet : public AActor
{
public:
	unsigned long                                      AlwaysShow : 1;                                           // 0x01F0(0x0004) (Edit)
	TArray<struct FNavReference>                       WaypointReferences;                                       // 0x01F4(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWaypointSet");
		return ptr;
	}


	class ANavigationPoint* GetWaypoint(int nIDX);
	int FindNearestPoint(const struct FVector& vLoc);
};


// Class BIOC_Base.BioWp_ActionStation
// 0x001C (0x02EC - 0x02D0)
class ABioWp_ActionStation : public ABioPathPoint
{
public:
	struct FVector                                     m_vOldPositon;                                            // 0x02D0(0x000C)
	unsigned long                                      m_bPositionLocked : 1;                                    // 0x02DC(0x0004)
	class ABioStage*                                   m_oStage;                                                 // 0x02E0(0x0004) (Edit)
	struct FName                                       m_nmStagePosition;                                        // 0x02E4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_ActionStation");
		return ptr;
	}


	bool OnCreatureReachedWayPoint(class APawn* PathFindingCreature);
};


// Class BIOC_Base.BioWP_AirPoint
// 0x0000 (0x02D0 - 0x02D0)
class ABioWP_AirPoint : public ABioPathPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWP_AirPoint");
		return ptr;
	}

};


// Class BIOC_Base.BioWp_APGate
// 0x001C (0x02EC - 0x02D0)
class ABioWp_APGate : public ABioPathPoint
{
public:
	TArray<class ABioArtPlaceable*>                    m_aoArtPlaceables;                                        // 0x02D0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               m_anmAllowedPawns;                                        // 0x02DC(0x000C) (Edit, NeedCtorLink)
	class AActor*                                      m_oMoveDestination;                                       // 0x02E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_APGate");
		return ptr;
	}


	class AActor* SpecialHandling(class APawn* Other);
};


// Class BIOC_Base.BioWp_DoorMarker
// 0x0028 (0x02F8 - 0x02D0)
class ABioWp_DoorMarker : public ABioPathPoint
{
public:
	class ABioDoor*                                    oMyDoor;                                                  // 0x02D0(0x0004) (Edit)
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                           // 0x02D4(0x0004) (Edit)
	unsigned long                                      bBlockedWhenClosed : 1;                                   // 0x02D4(0x0004) (Edit)
	unsigned long                                      bAICanOpenDoor : 1;                                       // 0x02D4(0x0004) (Edit)
	unsigned long                                      bTempDisabledCollision : 1;                               // 0x02D4(0x0004) (Const, Transient)
	TArray<struct FName>                               m_nmClosedStates;                                         // 0x02D8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               m_nmOpenedStates;                                         // 0x02E4(0x000C) (Edit, NeedCtorLink)
	struct FName                                       m_nmGotoStateToOpen;                                      // 0x02F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_DoorMarker");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	bool ProceedWithMove(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	bool IsDoorClosed();
	bool IsDoorOpen();
};


// Class BIOC_Base.BioWP_Hopper
// 0x0014 (0x02E4 - 0x02D0)
class ABioWP_Hopper : public ABioPathPoint
{
public:
	struct FVector                                     m_vOffsetFromSurface;                                     // 0x02D0(0x000C) (Edit)
	class APawn*                                       ReservedFor;                                              // 0x02DC(0x0004)
	unsigned long                                      bHopRequired : 1;                                         // 0x02E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWP_Hopper");
		return ptr;
	}

};


// Class BIOC_Base.BioWP_HopperCeiling
// 0x0000 (0x02E4 - 0x02E4)
class ABioWP_HopperCeiling : public ABioWP_Hopper
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWP_HopperCeiling");
		return ptr;
	}

};


// Class BIOC_Base.BioWP_HopperFloor
// 0x0000 (0x02E4 - 0x02E4)
class ABioWP_HopperFloor : public ABioWP_Hopper
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWP_HopperFloor");
		return ptr;
	}

};


// Class BIOC_Base.BioWP_HopperWall
// 0x0000 (0x02E4 - 0x02E4)
class ABioWP_HopperWall : public ABioWP_Hopper
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWP_HopperWall");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributeMapper
// 0x0008 (0x0044 - 0x003C)
class UBioAttributeMapper : public UObject
{
public:
	struct FName                                       m_powerName;                                              // 0x003C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributeMapper");
		return ptr;
	}


	class UBioAttributes* GetAttributes(class UObject* oSrc, TEnumAsByte<EBioGameEffectAttributeType> eType);
};


// Class BIOC_Base.BioAttributes
// 0x0004 (0x0048 - 0x0044)
class UBioAttributes : public UBioBaseComponent
{
public:
	unsigned long                                      m_bIsInitialized : 1;                                     // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributes");
		return ptr;
	}


	struct FString STATIC_IntToString(struct FBioComplexIntStructAttribute* attribute);
	int STATIC_GetBaseIntValue(struct FBioComplexIntStructAttribute* attribute);
	void STATIC_SetBaseIntValue(int baseValue, struct FBioComplexIntStructAttribute* attribute);
	int STATIC_GetCurrentIntValue(struct FBioComplexIntStructAttribute* attribute);
	struct FString STATIC_FloatToString(struct FBioComplexFloatStructAttribute* attribute);
	float STATIC_GetBaseFloatValue(struct FBioComplexFloatStructAttribute* attribute);
	void STATIC_SetBaseFloatValue(float baseValue, struct FBioComplexFloatStructAttribute* attribute);
	float STATIC_GetCurrentFloatValue(struct FBioComplexFloatStructAttribute* attribute);
	void ClearStringAttribute(const struct FName& nmAttribute, int nIndexOfAttributeInArray);
	void RemoveFloatAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray);
	void RemoveIntAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray);
	void RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void RemoveIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray);
	int AddFloatAttributeBaseOverrideModifier(const struct FName& attribute, float Value, int nIndexOfAttributeInArray);
	int AddIntAttributeBaseOverrideModifier(const struct FName& attribute, int Value, int nIndexOfAttributeInArray);
	void AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void AddIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray);
	void SetNameAttribute(const struct FName& attribute, const struct FName& nmValue, int nIndexOfAttributeInArray);
	void SetBoolAttribute(const struct FName& attribute, bool bValue, int nIndexOfAttributeInArray);
	void SetEnumAttribute(const struct FName& nmAttributeName, const struct FString& sValue, int nIndexOfAttributeInArray);
	void SetStringAttribute(const struct FName& attribute, const struct FString& sValue, int nIndexOfAttributeInArray);
	void SetByteAttribute(const struct FName& attribute, unsigned char cValue, int nIndexOfAttributeInArray);
	void SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray);
	void SetIntAttribute(const struct FName& attribute, int nValue, int nIndexOfAttributeInArray);
	void EnsureInitialized();
};


// Class BIOC_Base.BioAttributesDamage
// 0x0258 (0x02A0 - 0x0048)
class UBioAttributesDamage : public UBioAttributes
{
public:
	struct FBioComplexFloatStructAttribute             m_pPhasicFactor;                                          // 0x0048(0x005C) (NeedCtorLink)
	float                                              m_fInitialPhasicFactor;                                   // 0x00A4(0x0004) (Edit)
	struct FBioComplexFloatStructAttribute             m_pToxicFactor;                                           // 0x00A8(0x005C) (NeedCtorLink)
	float                                              m_fInitialToxicFactor;                                    // 0x0104(0x0004) (Edit)
	unsigned long                                      m_bHasImpulseOnDeath : 1;                                 // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bHasImpulse : 1;                                        // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bIgnorePhysicsThreshold : 1;                            // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bDamagesMySquad : 1;                                    // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bIsEMP : 1;                                             // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bIgnoresShields : 1;                                    // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bDamagesHealth : 1;                                     // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bIgnoresDamageResistance : 1;                           // 0x0108(0x0004) (Edit)
	unsigned long                                      m_bSuppressDeathCapabilities : 1;                         // 0x0108(0x0004) (Edit)
	TEnumAsByte<EBioAttributesDamageFalloff>           m_eExplosionFalloff;                                      // 0x010C(0x0001) (Edit)
	unsigned char                                      m_nWeaponType;                                            // 0x010D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x010E(0x0002) MISSED OFFSET
	struct FBioComplexFloatStructAttribute             m_pStabilityFactor;                                       // 0x0110(0x005C) (NeedCtorLink)
	float                                              m_fInitialStabilityFactor;                                // 0x016C(0x0004) (Edit)
	struct FBioComplexIntStructAttribute               m_pAntiThorianCount;                                      // 0x0170(0x0074) (NeedCtorLink)
	int                                                m_nInitialAntiThorianCount;                               // 0x01E4(0x0004) (Edit)
	struct FBioComplexFloatStructAttribute             m_pOrganicDamageFactor;                                   // 0x01E8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_pInorganicDamageFactor;                                 // 0x0244(0x005C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesDamage");
		return ptr;
	}


	void SetWeaponDamageType(unsigned char nWeaponType);
};


// Class BIOC_Base.BioAttributesEpicPawn
// 0x02C4 (0x030C - 0x0048)
class UBioAttributesEpicPawn : public UBioAttributes
{
public:
	float                                              m_HealthCurrent;                                          // 0x0048(0x0004)
	float                                              m_ShieldCurrent;                                          // 0x004C(0x0004)
	unsigned long                                      m_HealthAffectedByImmunity : 1;                           // 0x0050(0x0004)
	unsigned long                                      m_ShieldsAffectedByShieldIncrease : 1;                    // 0x0050(0x0004)
	unsigned long                                      m_MatriarchZen : 1;                                       // 0x0050(0x0004)
	struct FString                                     m_FirstName;                                              // 0x0054(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0060(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioAttributesEpicPawn.m_LastName
	struct FBioComplexFloatStructAttribute             m_HealthMax;                                              // 0x0064(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_HealthRegenRate;                                        // 0x00C0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_BioticMultiplier;                                       // 0x011C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_TechMultiplier;                                         // 0x0178(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_PowerCooldownMultiplier;                                // 0x01D4(0x005C) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_ScanLevel;                                              // 0x0230(0x0074) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_RadarRange;                                             // 0x02A4(0x005C) (NeedCtorLink)
	float                                              m_initialRadarRange;                                      // 0x0300(0x0004) (Edit, EditInline)
	float                                              m_initialHealthRegenRate;                                 // 0x0304(0x0004) (Edit, EditInline)
	class UBio2DA*                                     m_PrimaryAttributeLookupTable;                            // 0x0308(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesEpicPawn");
		return ptr;
	}


	struct FString GetName();
	struct FString GetDesignedName();
	void RemoveFloatAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray);
	int AddFloatAttributeBaseOverrideModifier(const struct FName& attribute, float Value, int nIndexOfAttributeInArray);
	void RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray);
};


// Class BIOC_Base.BioAttributesItem
// 0x007C (0x00C4 - 0x0048)
class UBioAttributesItem : public UBioAttributes
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0048(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioAttributesItem.m_Name
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioAttributesItem.m_Description
	struct FString                                     m_Label;                                                  // 0x0050(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EBioAttributesItemRaceType>            m_RaceType;                                               // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	struct FBioComplexFloatStructAttribute             m_BaseItemPrice;                                          // 0x0060(0x005C) (Edit, NeedCtorLink)
	int                                                m_ShopGuiItemPictureID;                                   // 0x00BC(0x0004) (Edit)
	unsigned long                                      m_IsExpanded : 1;                                         // 0x00C0(0x0004) (Transient)
	unsigned long                                      m_InstantChange : 1;                                      // 0x00C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItem");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesItemSophisticated
// 0x0008 (0x00CC - 0x00C4)
class UBioAttributesItemSophisticated : public UBioAttributesItem
{
public:
	int                                                m_appearanceVariant;                                      // 0x00C4(0x0004)
	int                                                m_MaterialParameterBlockIndex;                            // 0x00C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemSophisticated");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesItemEquippable
// 0x0000 (0x00CC - 0x00CC)
class UBioAttributesItemEquippable : public UBioAttributesItemSophisticated
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemEquippable");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesItemXModdable
// 0x0000 (0x00CC - 0x00CC)
class UBioAttributesItemXModdable : public UBioAttributesItemEquippable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemXModdable");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributesItemArmor
// 0x04B0 (0x057C - 0x00CC)
class UBioAttributesItemArmor : public UBioAttributesItemXModdable
{
public:
	int                                                m_MaterialFlags;                                          // 0x00CC(0x0004) (Edit)
	struct FBioComplexIntStructAttribute               m_weightVisualOverride;                                   // 0x00D0(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_modelVariant;                                           // 0x0144(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_materialConfig;                                         // 0x01B8(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_headGearModelVariant;                                   // 0x022C(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_headGearMaterialConfig;                                 // 0x02A0(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_visor;                                                  // 0x0314(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_facePlate;                                              // 0x0388(0x0074) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ResistanceDamage;                                       // 0x03FC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ResistanceTech;                                         // 0x0458(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_StabilityMovementPenalty;                               // 0x04B4(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ResistanceToxic;                                        // 0x0510(0x005C) (NeedCtorLink)
	float                                              m_fInitialResistanceDamage;                               // 0x056C(0x0004) (Edit, EditInline)
	float                                              m_fInitialResistanceTech;                                 // 0x0570(0x0004) (Edit, EditInline)
	float                                              m_fInitialStabilityMovementPenalty;                       // 0x0574(0x0004) (Edit, EditInline)
	float                                              m_fInitialResistanceToxic;                                // 0x0578(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemArmor");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesItemBioAmp
// 0x0120 (0x01EC - 0x00CC)
class UBioAttributesItemBioAmp : public UBioAttributesItemEquippable
{
public:
	struct FBioComplexFloatStructAttribute             m_Telekinetics;                                           // 0x00CC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SpatialDistortion;                                      // 0x0128(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Kinetics;                                               // 0x0184(0x005C) (NeedCtorLink)
	float                                              m_fInitialTelekinetics;                                   // 0x01E0(0x0004)
	float                                              m_fInitialSpatialDistortion;                              // 0x01E4(0x0004)
	float                                              m_fInitialKinetics;                                       // 0x01E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemBioAmp");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributesItemGrenade
// 0x020C (0x02D8 - 0x00CC)
class UBioAttributesItemGrenade : public UBioAttributesItemXModdable
{
public:
	struct FBioComplexFloatStructAttribute             m_Damage;                                                 // 0x00CC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Impulse;                                                // 0x0128(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_radius;                                                 // 0x0184(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_DamageMultiplierWhenBlocked;                            // 0x01E0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ImpulseMultiplierWhenBlocked;                           // 0x023C(0x005C) (NeedCtorLink)
	struct FString                                     m_sVisualImpactSet;                                       // 0x0298(0x000C) (NeedCtorLink)
	struct FString                                     m_sMesh;                                                  // 0x02A4(0x000C) (NeedCtorLink)
	struct FString                                     m_sPhysicsAsset;                                          // 0x02B0(0x000C) (NeedCtorLink)
	struct FString                                     m_sDeathVFX;                                              // 0x02BC(0x000C) (NeedCtorLink)
	class UBioItemGrenade*                             m_oGrenadeItem;                                           // 0x02C8(0x0004)
	float                                              m_fInitialDamage;                                         // 0x02CC(0x0004) (Edit)
	float                                              m_fInitialImpulse;                                        // 0x02D0(0x0004) (Edit)
	float                                              m_fInitialRadius;                                         // 0x02D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemGrenade");
		return ptr;
	}


	void ClearStringAttribute(const struct FName& nmAttribute, int nIndexOfAttributeInArray);
	void SetStringAttribute(const struct FName& attribute, const struct FString& sValue, int nIndexOfAttributeInArray);
};


// Class BIOC_Base.BioAttributesItemOmniTool
// 0x0120 (0x01EC - 0x00CC)
class UBioAttributesItemOmniTool : public UBioAttributesItemXModdable
{
public:
	struct FBioComplexFloatStructAttribute             m_Electronics;                                            // 0x00CC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Decryption;                                             // 0x0128(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Medical;                                                // 0x0184(0x005C) (NeedCtorLink)
	float                                              m_fInitialElectronics;                                    // 0x01E0(0x0004)
	float                                              m_fInitialDecryption;                                     // 0x01E4(0x0004)
	float                                              m_fInitialMedical;                                        // 0x01E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemOmniTool");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributesItemWeapon
// 0x01E0 (0x02AC - 0x00CC)
class UBioAttributesItemWeapon : public UBioAttributesItemXModdable
{
public:
	struct FBioComplexFloatStructAttribute             m_Damage;                                                 // 0x00CC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_DrawTimeMultiplier;                                     // 0x0128(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_WeaponFireNoise;                                        // 0x0184(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ProjectileImpactNoise;                                  // 0x01E0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ShotPhysicsImpulse;                                     // 0x023C(0x005C) (NeedCtorLink)
	int                                                m_SoundSetIndex;                                          // 0x0298(0x0004) (Edit)
	unsigned long                                      m_DualWield : 1;                                          // 0x029C(0x0004) (Edit)
	float                                              m_initialWeaponFireNoise;                                 // 0x02A0(0x0004) (Edit, EditInline)
	float                                              m_initialProjectileImpactNoise;                           // 0x02A4(0x0004) (Edit, EditInline)
	float                                              m_initialShotPhysicsImpulse;                              // 0x02A8(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemWeapon");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesItemWeaponMelee
// 0x0000 (0x02AC - 0x02AC)
class UBioAttributesItemWeaponMelee : public UBioAttributesItemWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemWeaponMelee");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesItemWeaponRanged
// 0x0998 (0x0C44 - 0x02AC)
class UBioAttributesItemWeaponRanged : public UBioAttributesItemWeapon
{
public:
	unsigned long                                      m_FullAuto : 1;                                           // 0x02AC(0x0004) (Edit)
	unsigned long                                      m_SupressionFire : 1;                                     // 0x02AC(0x0004) (Edit)
	unsigned long                                      m_isSecondaryMuzzleFlashEnabled : 1;                      // 0x02AC(0x0004) (Edit)
	unsigned long                                      m_hasFired : 1;                                           // 0x02AC(0x0004) (Edit)
	float                                              m_minZoomFOV;                                             // 0x02B0(0x0004) (Edit)
	float                                              m_maxZoomFOV;                                             // 0x02B4(0x0004) (Edit)
	float                                              m_zoomRate;                                               // 0x02B8(0x0004) (Edit)
	float                                              m_zoomCameraOffsetX;                                      // 0x02BC(0x0004) (Edit)
	float                                              m_zoomCameraOffsetY;                                      // 0x02C0(0x0004) (Edit)
	float                                              m_zoomCameraOffsetZ;                                      // 0x02C4(0x0004) (Edit)
	float                                              m_zoomKickbackDuration;                                   // 0x02C8(0x0004) (Edit)
	float                                              m_zoomSettleDuration;                                     // 0x02CC(0x0004) (Edit)
	struct FBioComplexIntStructAttribute               m_pExplosionEnabled;                                      // 0x02D0(0x0074) (NeedCtorLink)
	float                                              m_fExplosionRadius;                                       // 0x0344(0x0004) (Edit)
	float                                              m_fExplosionMomentum;                                     // 0x0348(0x0004) (Edit)
	float                                              m_nMaxTargetZones;                                        // 0x034C(0x0004) (Edit)
	float                                              m_fDamagePerExplosion;                                    // 0x0350(0x0004) (Edit)
	float                                              m_fImpactOriginOffsetAlongNegatedNormal;                  // 0x0354(0x0004) (Edit)
	struct FBioComplexIntStructAttribute               m_pImpactDelayEnabled;                                    // 0x0358(0x0074) (NeedCtorLink)
	float                                              m_fImpactDelayProjectileSpeed;                            // 0x03CC(0x0004) (Edit)
	float                                              m_fWeaponRecoilImpulse;                                   // 0x03D0(0x0004) (Edit)
	float                                              m_VFXLevel;                                               // 0x03D4(0x0004)
	TEnumAsByte<EWeaponPowerMode>                      m_ePowerMode;                                             // 0x03D8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D9(0x0003) MISSED OFFSET
	struct FName                                       m_nmPowerToUse;                                           // 0x03DC(0x0008)
	int                                                m_nPowerCount;                                            // 0x03E4(0x0004)
	struct FBioComplexIntStructAttribute               m_ProjectilesFired;                                       // 0x03E8(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_vfxType;                                                // 0x045C(0x0074) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Kickback;                                               // 0x04D0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_RoundsPerSec;                                           // 0x052C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_DriftAngleMax;                                          // 0x0588(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ProjectilesSpreadAngle;                                 // 0x05E4(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_TrackingPenalty;                                        // 0x0640(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_DriftAngleMin;                                          // 0x069C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_TargetIndicatorFixedDistance;                           // 0x06F8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SelHalfAngleFar;                                        // 0x0754(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SelHalfAngleClose;                                      // 0x07B0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SelRangeFar;                                            // 0x080C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SelRangeClose;                                          // 0x0868(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_HeatPerShot;                                            // 0x08C4(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_HeatMax;                                                // 0x0920(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_HeatLossRate;                                           // 0x097C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_HeatLossRateWhileOverheated;                            // 0x09D8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_HeatMin;                                                // 0x0A34(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_MagneticLockHalfAngleFarZoom;                           // 0x0A90(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_MagneticLockHalfAngleCloseZoom;                         // 0x0AEC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_MagneticLockRangeFarZoom;                               // 0x0B48(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_MagneticLockRangeCloseZoom;                             // 0x0BA4(0x005C) (NeedCtorLink)
	float                                              TEMP_CONFIG_m_DriftAngleMin;                              // 0x0C00(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_ImpactJumpPerShot;                          // 0x0C04(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_ImpactRollStepSizeMax;                      // 0x0C08(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_DriftAngleMax;                              // 0x0C0C(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_ImpactAngle;                                // 0x0C10(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_ImpactTrackingSpeed;                        // 0x0C14(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_Kickback;                                   // 0x0C18(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_TrackingPenalty;                            // 0x0C1C(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_SelHalfAngleClose;                          // 0x0C20(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_SelHalfAngleFar;                            // 0x0C24(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_SelRangeClose;                              // 0x0C28(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_SelRangeFar;                                // 0x0C2C(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_HeatPerShot;                                // 0x0C30(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_HeatMax;                                    // 0x0C34(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_HeatLossRate;                               // 0x0C38(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_HeatLossRateWhileOverheated;                // 0x0C3C(0x0004) (Edit, Config)
	float                                              TEMP_CONFIG_m_HeatMin;                                    // 0x0C40(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemWeaponRanged");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesItemXMod
// 0x0000 (0x00CC - 0x00CC)
class UBioAttributesItemXMod : public UBioAttributesItemSophisticated
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemXMod");
		return ptr;
	}


	void DescribeAttributes();
};


// Class BIOC_Base.BioAttributesPawn
// 0x0A84 (0x0D90 - 0x030C)
class UBioAttributesPawn : public UBioAttributesEpicPawn
{
public:
	int                                                m_XPLevel;                                                // 0x030C(0x0004)
	float                                              m_StabilityCurrent;                                       // 0x0310(0x0004)
	float                                              m_StabilityModifier;                                      // 0x0314(0x0004)
	TEnumAsByte<EBioAttributePawnGender>               m_Gender;                                                 // 0x0318(0x0001)
	TEnumAsByte<EBioAttributePawnRace>                 m_Race;                                                   // 0x0319(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x031A(0x0002) MISSED OFFSET
	float                                              m_ToxicCurrent;                                           // 0x031C(0x0004)
	unsigned long                                      m_EquipPistol : 1;                                        // 0x0320(0x0004)
	unsigned long                                      m_EquipAssault : 1;                                       // 0x0320(0x0004)
	unsigned long                                      m_EquipShotgun : 1;                                       // 0x0320(0x0004)
	unsigned long                                      m_EquipSniper : 1;                                        // 0x0320(0x0004)
	unsigned long                                      m_EquipArmorLight : 1;                                    // 0x0320(0x0004)
	unsigned long                                      m_EquipArmorMedium : 1;                                   // 0x0320(0x0004)
	unsigned long                                      m_EquipArmorHeavy : 1;                                    // 0x0320(0x0004)
	unsigned long                                      m_EquipBioAmp : 1;                                        // 0x0320(0x0004)
	unsigned long                                      m_EquipOmniTool : 1;                                      // 0x0320(0x0004)
	struct FBioComplexIntStructAttribute               m_Stamina;                                                // 0x0324(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_Focus;                                                  // 0x0398(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_Precision;                                              // 0x040C(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_Coordination;                                           // 0x0480(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_HazardLevel;                                            // 0x04F4(0x0074) (NeedCtorLink)
	int                                                m_initialStamina;                                         // 0x0568(0x0004) (Edit, EditInline)
	int                                                m_initialFocus;                                           // 0x056C(0x0004) (Edit, EditInline)
	int                                                m_initialPrecision;                                       // 0x0570(0x0004) (Edit, EditInline)
	int                                                m_initialCoordination;                                    // 0x0574(0x0004) (Edit, EditInline)
	struct FBioComplexFloatStructAttribute             m_StabilityMax;                                           // 0x0578(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_StabilityRegenRate;                                     // 0x05D4(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_StabilityCrouchBonus;                                   // 0x0630(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_StabilityCombatModeModifier;                            // 0x068C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_DamageDurationMult;                                     // 0x06E8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ResistanceSuppression;                                  // 0x0744(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ResistanceBiotic;                                       // 0x07A0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Visibility;                                             // 0x07FC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Audibility;                                             // 0x0858(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SkillElectronics;                                       // 0x08B4(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SkillDecryption;                                        // 0x0910(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_HealthPerLevel;                                         // 0x096C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ThreatMultiplier;                                       // 0x09C8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Blindness;                                              // 0x0A24(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Deafness;                                               // 0x0A80(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ExperienceMultiplier;                                   // 0x0ADC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_CreditsMultiplier;                                      // 0x0B38(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SalvageMultiplier;                                      // 0x0B94(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_MediGelMultiplier;                                      // 0x0BF0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_PhysicsResistance;                                      // 0x0C4C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_StormMax;                                               // 0x0CA8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_StormRegenPerSecond;                                    // 0x0D04(0x005C) (NeedCtorLink)
	float                                              m_initialStabilityCrouchBonus;                            // 0x0D60(0x0004) (Edit, EditInline)
	float                                              m_initialStabilityCombatModeModifier;                     // 0x0D64(0x0004) (Edit, EditInline)
	float                                              m_initialResistanceSuppression;                           // 0x0D68(0x0004) (Edit, EditInline)
	float                                              m_initialResistanceBiotic;                                // 0x0D6C(0x0004) (Edit, EditInline)
	float                                              m_initialVisibility;                                      // 0x0D70(0x0004) (Edit, EditInline)
	float                                              m_initialAudibility;                                      // 0x0D74(0x0004) (Edit, EditInline)
	float                                              m_initialSkillElectronics;                                // 0x0D78(0x0004) (Edit, EditInline)
	float                                              m_initialSkillDecryption;                                 // 0x0D7C(0x0004) (Edit, EditInline)
	float                                              m_initialHealthPerLevel;                                  // 0x0D80(0x0004) (Edit, EditInline)
	float                                              m_initialThreatMultiplier;                                // 0x0D84(0x0004) (Edit, EditInline)
	float                                              m_initialBlindness;                                       // 0x0D88(0x0004) (Edit, EditInline)
	float                                              m_initialDeafness;                                        // 0x0D8C(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesPawn");
		return ptr;
	}


	void RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void RemoveIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray);
	void AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void AddIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray);
	void SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray);
	void SetIntAttribute(const struct FName& attribute, int nValue, int nIndexOfAttributeInArray);
};


// Class BIOC_Base.BioAttributesPawnParty
// 0x01E8 (0x0F78 - 0x0D90)
class UBioAttributesPawnParty : public UBioAttributesPawn
{
public:
	int                                                m_Experience;                                             // 0x0D90(0x0004)
	int                                                m_TalentPoints;                                           // 0x0D94(0x0004)
	int                                                m_TalentPoolPoints;                                       // 0x0D98(0x0004)
	TEnumAsByte<EBioPartyMemberAbility>                m_AttributePrimary;                                       // 0x0D9C(0x0001)
	TEnumAsByte<EBioPartyMemberAbility>                m_AttributeSecondary;                                     // 0x0D9D(0x0001)
	TEnumAsByte<EBioPartyMemberClassBase>              m_ClassBase;                                              // 0x0D9E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0D9F(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData01[0x4];                                       // 0x0D9F(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioAttributesPawnParty.m_LocalizedClassName
	int                                                m_AutoLevelUpTemplateID;                                  // 0x0DA4(0x0004)
	struct FBioComplexIntStructAttribute               m_IsProficientPistol;                                     // 0x0DA8(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_IsProficientRifle;                                      // 0x0E1C(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_IsProficientShotgun;                                    // 0x0E90(0x0074) (NeedCtorLink)
	struct FBioComplexIntStructAttribute               m_IsProficientSniper;                                     // 0x0F04(0x0074) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesPawnParty");
		return ptr;
	}


	int GetParagon();
	int GetRenegade();
	bool SetMainAttributes(int primary, int secondary, int tertiary);
};


// Class BIOC_Base.BioAttributesPawnPlayer
// 0x0188 (0x1100 - 0x0F78)
class UBioAttributesPawnPlayer : public UBioAttributesPawnParty
{
public:
	int                                                m_SpecializationBonusID;                                  // 0x0F78(0x0004)
	TEnumAsByte<EBioPlayerCharacterSpectreRank>        m_SpectreRank;                                            // 0x0F7C(0x0001)
	TEnumAsByte<EBioPlayerCharacterBackgroundOrigin>   m_BackgroundOrigin;                                       // 0x0F7D(0x0001)
	TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> m_BackgroundNotoriety;                                    // 0x0F7E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0F7F(0x0001) MISSED OFFSET
	struct FBioComplexFloatStructAttribute             m_SkillCharm;                                             // 0x0F80(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SkillIntimidate;                                        // 0x0FDC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SkillHaggle;                                            // 0x1038(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_SkillSalesman;                                          // 0x1094(0x005C) (NeedCtorLink)
	float                                              MINIMUM_SKILL_HAGGLE;                                     // 0x10F0(0x0004) (Const, Config)
	float                                              MAXIMUM_SKILL_HAGGLE;                                     // 0x10F4(0x0004) (Const, Config)
	float                                              MINIMUM_SKILL_SALESMAN;                                   // 0x10F8(0x0004) (Const, Config)
	float                                              MAXIMUM_SKILL_SALESMAN;                                   // 0x10FC(0x0004) (Const, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesPawnPlayer");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributesPawnVehicle
// 0x0280 (0x058C - 0x030C)
class UBioAttributesPawnVehicle : public UBioAttributesEpicPawn
{
public:
	struct FBioComplexFloatStructAttribute             m_NitrousAmount;                                          // 0x030C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ThrusterAmount;                                         // 0x0368(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ThrusterAmountMax;                                      // 0x03C4(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ThrusterUsageRate;                                      // 0x0420(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ThrusterRebuildRate;                                    // 0x047C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ThrusterForce;                                          // 0x04D8(0x005C) (NeedCtorLink)
	float                                              m_RunOverVelocityThreshold;                               // 0x0534(0x0004)
	float                                              m_RunOverImpulseBase;                                     // 0x0538(0x0004)
	float                                              m_RunOverDamageBase;                                      // 0x053C(0x0004)
	float                                              m_fAINoiseThrusters;                                      // 0x0540(0x0004)
	float                                              m_fAINoiseEngineMin;                                      // 0x0544(0x0004)
	float                                              m_fAINoiseEngineMax;                                      // 0x0548(0x0004)
	float                                              m_fAINoiseCollisionMax;                                   // 0x054C(0x0004)
	float                                              m_initialNitrousAmount;                                   // 0x0550(0x0004) (Edit, EditInline)
	float                                              m_initialHealth;                                          // 0x0554(0x0004) (Edit, EditInline)
	float                                              m_initialThrusterAmount;                                  // 0x0558(0x0004) (Edit, EditInline)
	float                                              m_initialThrusterAmountMax;                               // 0x055C(0x0004) (Edit, EditInline)
	float                                              m_initialThrusterUsageRate;                               // 0x0560(0x0004) (Edit, EditInline)
	float                                              m_initialThrusterRebuildRate;                             // 0x0564(0x0004) (Edit, EditInline)
	float                                              m_initialThrusterForce;                                   // 0x0568(0x0004) (Edit, EditInline)
	float                                              m_initialRunOverVelocityThreshold;                        // 0x056C(0x0004) (Edit, EditInline)
	float                                              m_initialRunOverImpulseBase;                              // 0x0570(0x0004) (Edit, EditInline)
	float                                              m_initialRunOverDamageBase;                               // 0x0574(0x0004) (Edit, EditInline)
	float                                              m_initialAINoiseThrusters;                                // 0x0578(0x0004) (Edit, EditInline)
	float                                              m_initialAINoiseEngineMin;                                // 0x057C(0x0004) (Edit, EditInline)
	float                                              m_initialAINoiseEngineMax;                                // 0x0580(0x0004) (Edit, EditInline)
	float                                              m_initialAINoiseCollisionMax;                             // 0x0584(0x0004) (Edit, EditInline)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0588(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioAttributesPawnVehicle.m_ConfigVehicleName

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesPawnVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributesShield
// 0x0128 (0x0170 - 0x0048)
class UBioAttributesShield : public UBioAttributes
{
public:
	unsigned long                                      m_IsRechargeable : 1;                                     // 0x0048(0x0004)
	struct FBioComplexFloatStructAttribute             m_ShieldMax;                                              // 0x004C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ShieldRegenDelay;                                       // 0x00A8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ShieldRegenRate;                                        // 0x0104(0x005C) (NeedCtorLink)
	float                                              m_DamageCapacity;                                         // 0x0160(0x0004)
	float                                              m_fInitialShieldMax;                                      // 0x0164(0x0004) (Edit)
	float                                              m_fInitialShieldRegenDelay;                               // 0x0168(0x0004) (Edit)
	float                                              m_fInitialShieldRegenRate;                                // 0x016C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesShield");
		return ptr;
	}


	void RemoveFloatAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray);
	int AddFloatAttributeBaseOverrideModifier(const struct FName& attribute, float Value, int nIndexOfAttributeInArray);
	void RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray);
};


// Class BIOC_Base.BioPower
// 0x0624 (0x066C - 0x0048)
class UBioPower : public UBioAttributes
{
public:
	struct FName                                       m_nmPower;                                                // 0x0048(0x0008)
	struct FBioComplexFloatStructAttribute             m_CastingTime;                                            // 0x0050(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_TravelSpeed;                                            // 0x00AC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_Kickback;                                               // 0x0108(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_CooldownTime;                                           // 0x0164(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_CylinderRadius;                                         // 0x01C0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_MinimumRange;                                           // 0x021C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_MaximumRange;                                           // 0x0278(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ImpactRadius;                                           // 0x02D4(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_UseDuration;                                            // 0x0330(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_EffectDuration;                                         // 0x038C(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_VFXIntensity;                                           // 0x03E8(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ImpactVolumeLength;                                     // 0x0444(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_ImpactVolumeHalfAngle;                                  // 0x04A0(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_BuildUpTimeout;                                         // 0x04FC(0x005C) (NeedCtorLink)
	struct FBioComplexFloatStructAttribute             m_RequiredResource;                                       // 0x0558(0x005C) (NeedCtorLink)
	TArray<struct FBioPowerParam>                      m_aAdditionalParams;                                      // 0x05B4(0x000C) (NeedCtorLink)
	float                                              m_fCapabilityRank;                                        // 0x05C0(0x0004)
	float                                              m_fBestRangeConst;                                        // 0x05C4(0x0004) (Config)
	float                                              m_fAreaAttackThresholdConst;                              // 0x05C8(0x0004) (Config)
	unsigned long                                      m_bNeedsRangedWeapon : 1;                                 // 0x05CC(0x0004)
	unsigned long                                      m_bNeedsMeleeWeapon : 1;                                  // 0x05CC(0x0004)
	unsigned long                                      m_bStopOnFirstHit : 1;                                    // 0x05CC(0x0004)
	unsigned long                                      m_bGroundBasedPower : 1;                                  // 0x05CC(0x0004)
	unsigned long                                      m_bBlockedByObjects : 1;                                  // 0x05CC(0x0004)
	TArray<TEnumAsByte<EBioItemWeaponRangedType>>      m_aRangedWeaponTypes;                                     // 0x05D0(0x000C) (NeedCtorLink)
	TArray<TEnumAsByte<EBioItemWeaponMeleeType>>       m_aMeleeWeaponTypes;                                      // 0x05DC(0x000C) (NeedCtorLink)
	class UBioPowerVFXAppearance*                      m_VFXAppearance;                                          // 0x05E8(0x0004) (Transient)
	TEnumAsByte<EBioPowerDualType>                     m_eDualType;                                              // 0x05EC(0x0001) (Transient)
	TEnumAsByte<EBioPowerHUDType>                      m_eHUDType;                                               // 0x05ED(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05EE(0x0002) MISSED OFFSET
	struct FName                                       m_nmLinkedPower;                                          // 0x05F0(0x0008) (Transient)
	TArray<class AActor*>                              m_aImpactedActors;                                        // 0x05F8(0x000C) (Transient, NeedCtorLink)
	TEnumAsByte<EBioPowerAimType>                      m_eAimType;                                               // 0x0604(0x0001)
	TEnumAsByte<EBioCapMode>                           m_eDiscipline;                                            // 0x0605(0x0001)
	TEnumAsByte<EInventoryResourceTypes>               m_eRequiredResourceType;                                  // 0x0606(0x0001)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0607(0x0001) MISSED OFFSET
	struct FName                                       m_nmPlayerLinkedPower;                                    // 0x0608(0x0008) (Transient)
	class UBio2DA*                                     m_oPowerList;                                             // 0x0610(0x0004)
	int                                                m_nID;                                                    // 0x0614(0x0004)
	int                                                m_nIcon;                                                  // 0x0618(0x0004) (Transient)
	float                                              m_fTotalCooldownTime;                                     // 0x061C(0x0004)
	float                                              m_fCooldownRemaining;                                     // 0x0620(0x0004)
	int                                                m_nEnabled;                                               // 0x0624(0x0004) (Transient)
	int                                                m_nSuppressedCount;                                       // 0x0628(0x0004) (Transient)
	unsigned long                                      m_bCancelling : 1;                                        // 0x062C(0x0004) (Transient)
	class ABioVisualEffect*                            m_apVisualEffect[0xF];                                    // 0x0630(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPower");
		return ptr;
	}


	void AddParameter(const struct FName& nmParameter);
	bool LoadPlayerLinkedPower();
	bool LoadHUDType();
	bool LoadDiscipline();
	bool LoadRequiredResourceType();
	void CancelDualPowerInternal();
	bool LoadAimType();
	bool LoadDualPowerInfo();
	bool LoadRequiredWeaponType();
	void RemoveParameter(const struct FName& nmParameter);
	bool LoadAdditionalParams();
	bool AutoMapPower();
	bool IsRequiredResourceAvailable();
	bool IsRequiredWeaponEquipped();
	bool GetDescription(struct FString* sDescription);
	bool GetImpactText();
	bool GetDisplayName(struct FString* sDisplayName);
	int GetPowerIcon();
	float GetImpactNoise();
	float GetReleaseNoise();
	void CancelDualPower();
	class UBioPower* GetLinkedPower();
	bool IsDualPowerActive();
	bool CancelPower();
	bool IsActive();
	bool CanCasterMoveDuringPower();
	void Tick(float fDeltaTime);
	void SetTotalCooldownTime(float fTotalCooldown);
	float GetTotalCooldownTime(bool bCheckLinkedPower);
	void SetCooldownRemaining(float fCooldownRemaining, bool bFireCompletionEventIfZero);
	float GetCooldownRemaining(bool bCheckLinkedPower);
	bool StopPowerBuildUp(class AActor* oCaster, class AActor* oTarget, class UBioGameProperty* oGameProperty);
	bool GetPowerBuildUp(class AActor* oCaster, class AActor* oTarget, float* fPowerBuildUp, class UBioGameProperty** oGameProperty);
	bool StartPowerBuildUp(class AActor* oCaster, class AActor* oTarget);
	bool IsSuppressed();
	int SuppressPower(bool bSuppress);
	bool IsEnabled();
	bool EnablePower(bool bEnable);
	bool GetLocation(TEnumAsByte<EBioPowerLocation>* eLocation);
	bool GetImpactShape(TEnumAsByte<EBioPowerImpactShape>* eShape);
	bool GetProjectileAttachPoint(class APawn* pPawn, struct FVector* vAttachPoint);
	bool GetAnim(bool bUseCoverAnimations, struct FString* sAnim, struct FName* nmAnimSet);
	float GetParameter(const struct FName& nmParameter);
	void DoImpactVFX(class AActor* oActor, class UBioActivePower* pPowerInstance, const struct FName& BoneName, struct FVector* vLocation, struct FVector* vHitNormal);
	float GetVFXLifetime(TEnumAsByte<EBioPowerResource> eResource, class UBioActivePower* oPowerInstance);
	class UBioVFXTemplate* GetVFXTemplate(TEnumAsByte<EBioPowerResource> eResource);
	void EndVisualEffect(TEnumAsByte<EBioPowerResource> eResource, bool bAllowVFXToFinish);
	class ABioVisualEffect* GetVisualEffect(TEnumAsByte<EBioPowerResource> eResource);
	bool LoadVFXAppearance();
	bool GetPowerScript(struct FName* nmPowerScript);
	void STATIC_CreatePowerIndexMap(class UBio2DA* oPowers2DA);
	void InitializePower(const struct FName& nmPower);
	void RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray);
	void SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray);
};


// Class BIOC_Base.BioPowerManager
// 0x0028 (0x0064 - 0x003C)
class UBioPowerManager : public UObject
{
public:
	struct FName                                       m_nmWeaponPowerID;                                        // 0x003C(0x0008) (Transient)
	struct FName                                       m_nmHealPowerID;                                          // 0x0044(0x0008) (Transient)
	struct FName                                       m_nmArmorEmitterPowerID;                                  // 0x004C(0x0008) (Transient)
	float                                              m_fPowerHalfAngle;                                        // 0x0054(0x0004) (Transient, Config)
	TArray<class ABioLinePowerProjectile*>             m_aPowerProjectiles;                                      // 0x0058(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPowerManager");
		return ptr;
	}


	void GetAimTargetForPlayer(float fMaxRange, class AActor** oTarget, struct FVector* vTargetLocation);
	bool AreActorsFriendly(class AActor* oFirstActor, class AActor* oSecondActor);
	bool CanImpactActor(class AActor* oActor);
	bool CheckLOSToLocation(class AActor* oSourceActor, const struct FVector& vStartLocation, const struct FVector& vEndLocation, float fMaxRange, bool bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal);
	bool CheckLOSToActor(class AActor* oSourceActor, class AActor* oDestinationActor, const struct FVector& vStartLocation, float fMaxRange, bool bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal);
	void RemoveProjectile(class ABioLinePowerProjectile* oProjectile);
	void AddProjectile(class ABioLinePowerProjectile* oProjectile);
	bool GetCurrentArmorEmitterPower(class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray);
	bool GetCurrentHealPower(class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray);
	bool GetCurrentWeaponPower(class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray);
};


// Class BIOC_Base.BioMaterialExpressionAnisoSpec
// 0x0054 (0x00AC - 0x0058)
class UBioMaterialExpressionAnisoSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Direction;                                                // 0x0058(0x001C)
	struct FExpressionInput                            SpecColor;                                                // 0x0074(0x001C)
	struct FExpressionInput                            SpecPower;                                                // 0x0090(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionAnisoSpec");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionBlinnSpec
// 0x0054 (0x00AC - 0x0058)
class UBioMaterialExpressionBlinnSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                                   // 0x0058(0x001C)
	struct FExpressionInput                            SpecColor;                                                // 0x0074(0x001C)
	struct FExpressionInput                            SpecPower;                                                // 0x0090(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionBlinnSpec");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionDirt
// 0x0030 (0x0088 - 0x0058)
class UBioMaterialExpressionDirt : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)
	struct FName                                       GrimeScaleParamName;                                      // 0x0074(0x0008) (Edit)
	struct FName                                       GrimeTexParamName;                                        // 0x007C(0x0008) (Edit)
	class UTexture2D*                                  GrimeTex;                                                 // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionDirt");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionFresnel
// 0x0024 (0x007C - 0x0058)
class UBioMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                                   // 0x0058(0x001C)
	unsigned long                                      Inverted : 1;                                             // 0x0074(0x0004) (Edit)
	float                                              Power;                                                    // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionFresnel");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionHalfAngle
// 0x0000 (0x0058 - 0x0058)
class UBioMaterialExpressionHalfAngle : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionHalfAngle");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionKeyedFlipbook
// 0x0044 (0x009C - 0x0058)
class UBioMaterialExpressionKeyedFlipbook : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coord;                                                    // 0x0058(0x001C)
	struct FExpressionInput                            Time;                                                     // 0x0074(0x001C)
	int                                                FlipTexRows;                                              // 0x0090(0x0004) (Edit)
	int                                                FlipTexCols;                                              // 0x0094(0x0004) (Edit)
	class UTexture2D*                                  FlipTex;                                                  // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionKeyedFlipbook");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionPhongSpec
// 0x0054 (0x00AC - 0x0058)
class UBioMaterialExpressionPhongSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                                   // 0x0058(0x001C)
	struct FExpressionInput                            SpecColor;                                                // 0x0074(0x001C)
	struct FExpressionInput                            SpecPower;                                                // 0x0090(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionPhongSpec");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionSineSubtend
// 0x0038 (0x0090 - 0x0058)
class UBioMaterialExpressionSineSubtend : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0058(0x001C)
	struct FExpressionInput                            B;                                                        // 0x0074(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionSineSubtend");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialExpressionSpecPower
// 0x001C (0x0074 - 0x0058)
class UBioMaterialExpressionSpecPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0058(0x001C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialExpressionSpecPower");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialOverride
// 0x0024 (0x0060 - 0x003C)
class UBioMaterialOverride : public UObject
{
public:
	TArray<struct FTextureParameter>                   m_aTextureOverrides;                                      // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FColorParameter>                     m_aColorOverrides;                                        // 0x0048(0x000C) (Edit, NeedCtorLink)
	TArray<struct FScalarParameter>                    m_aScalarOverrides;                                       // 0x0054(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialOverride");
		return ptr;
	}


	class UClass* STATIC_GetSaveObjectClass();
};


// Class BIOC_Base.BioGameEffect
// 0x0024 (0x0060 - 0x003C)
class UBioGameEffect : public UObject
{
public:
	TEnumAsByte<EBioGameEffectClassPriority>           m_priority;                                               // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                m_nGameEffectId;                                          // 0x0040(0x0004)
	struct FName                                       m_nmGameEffectName;                                       // 0x0044(0x0008)
	class UBio2DA*                                     m_pEffectLevels2DA;                                       // 0x004C(0x0004)
	TArray<int>                                        m_aEffectLevelsRows;                                      // 0x0050(0x000C) (NeedCtorLink)
	int                                                m_nMaxRanks;                                              // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffect");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	class AActor* GetActorFromTarget(class UObject* oTarget);
	void Scale(int nRank);
	void SetScalingData(class UBio2DA* pEffectLevels2DA, TArray<int>* aEffectLevelRows, int* maxRanks);
	void Update(class UObject* oTarget);
	void Tick(class UObject* oTarget, float fDeltaTime);
};


// Class BIOC_Base.BioGameEffectAddForce
// 0x0048 (0x00A8 - 0x0060)
class UBioGameEffectAddForce : public UBioGameEffect
{
public:
	struct FVector                                     m_vForce;                                                 // 0x0060(0x000C)
	struct FName                                       m_nmBoneName;                                             // 0x006C(0x0008)
	struct FVector                                     m_vPosition;                                              // 0x0074(0x000C)
	struct FVector                                     m_vDestination;                                           // 0x0080(0x000C)
	unsigned long                                      m_bDecelerate : 1;                                        // 0x008C(0x0004)
	unsigned long                                      m_bApplyToAllBones : 1;                                   // 0x008C(0x0004)
	unsigned long                                      m_bApplied : 1;                                           // 0x008C(0x0004)
	unsigned long                                      m_bDestinationReached : 1;                                // 0x008C(0x0004)
	struct FVector                                     m_vDeceleration;                                          // 0x0090(0x000C)
	float                                              m_fMinVelocity;                                           // 0x009C(0x0004)
	class AActor*                                      m_oInstigator;                                            // 0x00A0(0x0004)
	float                                              m_fTimeElapsed;                                           // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAddForce");
		return ptr;
	}


	struct FName GetClosestBone(class AActor* oTarget);
	void Decelerate(class AActor* oActor);
	void Tick(class UObject* oTarget, float fDeltaTime);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, const struct FVector& vForce, const struct FName& nmBoneName, const struct FVector& vPosition, const struct FVector& vDestination, bool bDecelerateAtDestination, const struct FVector& vDeceleration, float fMinVelocity, class AActor* oInstigator, bool bApplyToAllBones);
};


// Class BIOC_Base.BioGameEffectAddItemProperty
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectAddItemProperty : public UBioGameEffect
{
public:
	int                                                m_nItemPropertyID;                                        // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAddItemProperty");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAdjustStability
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectAdjustStability : public UBioGameEffect
{
public:
	float                                              m_fAmount;                                                // 0x0060(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAdjustStability");
		return ptr;
	}


	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, float fAmount);
};


// Class BIOC_Base.BioGameEffectAttribute
// 0x0014 (0x0074 - 0x0060)
class UBioGameEffectAttribute : public UBioGameEffect
{
public:
	struct FName                                       m_attributeName;                                          // 0x0060(0x0008) (Edit)
	TEnumAsByte<EBioGameEffectAttributeType>           m_type;                                                   // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	int                                                m_nIndex;                                                 // 0x006C(0x0004) (Edit)
	class UBioAttributeMapper*                         m_oAttributeMapper;                                       // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttribute");
		return ptr;
	}


	class UBioAttributes* GetAttributes(class UObject* oTarget);
	class UBioAttributes* StaticGetAttributes(class UObject* oTarget, TEnumAsByte<EBioGameEffectAttributeType> eType);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAttributeBool
// 0x0004 (0x0078 - 0x0074)
class UBioGameEffectAttributeBool : public UBioGameEffectAttribute
{
public:
	unsigned long                                      m_value : 1;                                              // 0x0074(0x0004) (Edit)
	unsigned long                                      m_bSetToOppositeOnUnapply : 1;                            // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeBool");
		return ptr;
	}


	void STATIC_Create(class UBioGameProperty* oProperty, bool bValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeType> eType, bool bSetToOppositeOnUnapply);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAttributeByte
// 0x0008 (0x007C - 0x0074)
class UBioGameEffectAttributeByte : public UBioGameEffectAttribute
{
public:
	unsigned char                                      m_value;                                                  // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	unsigned long                                      m_bZeroOnUnapply : 1;                                     // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeByte");
		return ptr;
	}


	void STATIC_Create(class UBioGameProperty* oProperty, unsigned char Value, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeType> eType, bool bZeroOnUnapply);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAttributeString
// 0x000C (0x0080 - 0x0074)
class UBioGameEffectAttributeString : public UBioGameEffectAttribute
{
public:
	struct FString                                     m_value;                                                  // 0x0074(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeString");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAttributeEnum
// 0x0000 (0x0080 - 0x0080)
class UBioGameEffectAttributeEnum : public UBioGameEffectAttributeString
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeEnum");
		return ptr;
	}


	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAttributeNumeric
// 0x0008 (0x007C - 0x0074)
class UBioGameEffectAttributeNumeric : public UBioGameEffectAttribute
{
public:
	TEnumAsByte<EBioGameEffectAttributeAspect>         m_aspect;                                                 // 0x0074(0x0001) (Edit)
	TEnumAsByte<EBioAttrModType>                       m_modifier;                                               // 0x0075(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0076(0x0002) MISSED OFFSET
	int                                                m_baseOverrideIndex;                                      // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeNumeric");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAttributeFloat
// 0x0004 (0x0080 - 0x007C)
class UBioGameEffectAttributeFloat : public UBioGameEffectAttributeNumeric
{
public:
	float                                              m_value;                                                  // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeFloat");
		return ptr;
	}


	void STATIC_Create(class UBioGameProperty* GP, float fValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeAspect> eAspect, TEnumAsByte<EBioAttrModType> eModifier, TEnumAsByte<EBioGameEffectAttributeType> eType, int nIndex);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectAttributeInt
// 0x0008 (0x0084 - 0x007C)
class UBioGameEffectAttributeInt : public UBioGameEffectAttributeNumeric
{
public:
	int                                                m_value;                                                  // 0x007C(0x0004) (Edit)
	unsigned long                                      m_bSetToZeroOnUnapply : 1;                                // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeInt");
		return ptr;
	}


	void STATIC_Create(class UBioGameProperty* GP, int nValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeAspect> eAspect, TEnumAsByte<EBioAttrModType> eModifier, TEnumAsByte<EBioGameEffectAttributeType> eType, int nIndex, bool bSetToZeroOnUnapply);
	void Unapply(class UObject* oTarget);
	void RemoveModifier(class UBioAttributes* attribs);
	void AddModifier(class UBioAttributes* attribs);
	void SetBase(class UBioAttributes* attribs);
};


// Class BIOC_Base.BioGameEffectAttributeName
// 0x000C (0x0080 - 0x0074)
class UBioGameEffectAttributeName : public UBioGameEffectAttribute
{
public:
	struct FName                                       m_nmValue;                                                // 0x0074(0x0008)
	unsigned long                                      m_bSetToNoneOnUnapply : 1;                                // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectAttributeName");
		return ptr;
	}


	void STATIC_Create(class UBioGameProperty* oProperty, const struct FName& nmValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeType> eType, bool bSetToNoneOnUnapply);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectDisableAI
// 0x0010 (0x0070 - 0x0060)
class UBioGameEffectDisableAI : public UBioGameEffect
{
public:
	TEnumAsByte<EDisableType>                          m_eDisableType;                                           // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FName                                       m_nmSubType;                                              // 0x0064(0x0008)
	unsigned long                                      m_bApplied : 1;                                           // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectDisableAI");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, TEnumAsByte<EDisableType> eType, const struct FName& nmSubType);
};


// Class BIOC_Base.BioGameEffectDmgVulnerability
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectDmgVulnerability : public UBioGameEffect
{
public:
	float                                              m_fDamageVulnerability;                                   // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectDmgVulnerability");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, float fDamageVulnerability);
};


// Class BIOC_Base.BioGameEffectGiveGP
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectGiveGP : public UBioGameEffect
{
public:
	class UBioGameProperty*                            m_pGP;                                                    // 0x0060(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectGiveGP");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void SetGP(class UBioGameProperty* pGP);
};


// Class BIOC_Base.BioGameEffectHackAI
// 0x0008 (0x0068 - 0x0060)
class UBioGameEffectHackAI : public UBioGameEffect
{
public:
	class UBioEpicPawnBehavior*                        m_pSourceBehavior;                                        // 0x0060(0x0004) (Edit)
	class ABioBaseSquad*                               m_pOriginalSquad;                                         // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectHackAI");
		return ptr;
	}


	void STATIC_Create(class UBioGameProperty* oProperty, class UBioEpicPawnBehavior* oHacker);
	void Unapply(class UObject* pTarget);
	class UObject* Apply(class UObject* pTarget);
	void InitializeHackAI(class UBioEpicPawnBehavior* pSourceBehavior);
};


// Class BIOC_Base.BioGameEffectHeadExplode
// 0x0000 (0x0060 - 0x0060)
class UBioGameEffectHeadExplode : public UBioGameEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectHeadExplode");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectHeal
// 0x000C (0x006C - 0x0060)
class UBioGameEffectHeal : public UBioGameEffect
{
public:
	float                                              m_fHealthAmount;                                          // 0x0060(0x0004)
	float                                              m_fToxicAmount;                                           // 0x0064(0x0004)
	float                                              m_fResourcesRequired;                                     // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectHeal");
		return ptr;
	}


	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, float fHealthAmount, float fToxicAmount, float fResourcesRequired);
};


// Class BIOC_Base.BioGameEffectImporter
// 0x0014 (0x0058 - 0x0044)
class UBioGameEffectImporter : public UBioBaseComponent
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0044(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.BioGameEffectImporter.m_EffectCache

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectImporter");
		return ptr;
	}


	class UBioGameEffect* STATIC_CreateGameEffect(class UObject* _outer, class UBio2DA* gameEffectTable, int nGameEffectID);
};


// Class BIOC_Base.BioGameEffectItemAddXModSlots
// 0x0008 (0x0068 - 0x0060)
class UBioGameEffectItemAddXModSlots : public UBioGameEffect
{
public:
	int                                                m_type;                                                   // 0x0060(0x0004)
	int                                                m_count;                                                  // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectItemAddXModSlots");
		return ptr;
	}


	void Unapply(class UObject* Target);
	class UObject* Apply(class UObject* Target);
};


// Class BIOC_Base.BioGameEffectItemPopXModSlots
// 0x0008 (0x0068 - 0x0060)
class UBioGameEffectItemPopXModSlots : public UBioGameEffect
{
public:
	int                                                m_type;                                                   // 0x0060(0x0004)
	int                                                m_count;                                                  // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectItemPopXModSlots");
		return ptr;
	}


	void Unapply(class UObject* Target);
	class UObject* Apply(class UObject* Target);
};


// Class BIOC_Base.BioGameEffectItemRemoveXModSlot
// 0x0008 (0x0068 - 0x0060)
class UBioGameEffectItemRemoveXModSlot : public UBioGameEffect
{
public:
	int                                                m_type;                                                   // 0x0060(0x0004)
	int                                                m_index;                                                  // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectItemRemoveXModSlot");
		return ptr;
	}


	void Unapply(class UObject* Target);
	class UObject* Apply(class UObject* Target);
};


// Class BIOC_Base.BioGameEffectModifyGravity
// 0x0008 (0x0068 - 0x0060)
class UBioGameEffectModifyGravity : public UBioGameEffect
{
public:
	float                                              m_fScalingValue;                                          // 0x0060(0x0004)
	unsigned long                                      m_bApplied : 1;                                           // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectModifyGravity");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, float fScalingValue);
};


// Class BIOC_Base.BioGameEffectPowerAttributeBool
// 0x0008 (0x0080 - 0x0078)
class UBioGameEffectPowerAttributeBool : public UBioGameEffectAttributeBool
{
public:
	struct FName                                       m_powerName;                                              // 0x0078(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectPowerAttributeBool");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectPowerAttributeFloat
// 0x0008 (0x0088 - 0x0080)
class UBioGameEffectPowerAttributeFloat : public UBioGameEffectAttributeFloat
{
public:
	struct FName                                       m_powerName;                                              // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectPowerAttributeFloat");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectPowerBuildUp
// 0x000C (0x006C - 0x0060)
class UBioGameEffectPowerBuildUp : public UBioGameEffect
{
public:
	class UBioPower*                                   m_oPower;                                                 // 0x0060(0x0004)
	float                                              m_fBuildUpTime;                                           // 0x0064(0x0004)
	float                                              m_fBuildUpTimeout;                                        // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectPowerBuildUp");
		return ptr;
	}


	void Tick(class UObject* oTarget, float fDeltaTime);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, class UBioPower* oPower, float fTimeOut);
};


// Class BIOC_Base.BioGameEffectPowerGive
// 0x0008 (0x0068 - 0x0060)
class UBioGameEffectPowerGive : public UBioGameEffect
{
public:
	struct FName                                       m_powerName;                                              // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectPowerGive");
		return ptr;
	}


	void STATIC_Create(class UBioGameProperty* GP, const struct FName& powerName);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectPowerParameter
// 0x0008 (0x0088 - 0x0080)
class UBioGameEffectPowerParameter : public UBioGameEffectAttributeFloat
{
public:
	struct FName                                       m_powerName;                                              // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectPowerParameter");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
};


// Class BIOC_Base.BioGameEffectPowerText
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectPowerText : public UBioGameEffect
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0060(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioGameEffectPowerText.m_srText

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectPowerText");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty);
};


// Class BIOC_Base.BioGameEffectRagdoll
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectRagdoll : public UBioGameEffect
{
public:
	unsigned long                                      m_bApplied : 1;                                           // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectRagdoll");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty);
};


// Class BIOC_Base.BioGameEffectRegenerateShield
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectRegenerateShield : public UBioGameEffect
{
public:
	float                                              m_fAmount;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectRegenerateShield");
		return ptr;
	}


	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, float fAmount);
};


// Class BIOC_Base.BioGameEffectSetMaterialParameter
// 0x0008 (0x0068 - 0x0060)
class UBioGameEffectSetMaterialParameter : public UBioGameEffect
{
public:
	struct FName                                       m_nmMaterialParameter;                                    // 0x0060(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectSetMaterialParameter");
		return ptr;
	}

};


// Class BIOC_Base.BioGameEffectSetMaterialParameterColor
// 0x0010 (0x0078 - 0x0068)
class UBioGameEffectSetMaterialParameterColor : public UBioGameEffectSetMaterialParameter
{
public:
	float                                              m_fRed;                                                   // 0x0068(0x0004) (Const)
	float                                              m_fGreen;                                                 // 0x006C(0x0004) (Const)
	float                                              m_fBlue;                                                  // 0x0070(0x0004) (Const)
	float                                              m_fAlpha;                                                 // 0x0074(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectSetMaterialParameterColor");
		return ptr;
	}


	class UObject* Apply(class UObject* pTarget);
};


// Class BIOC_Base.BioGameEffectSetMaterialParameterScalar
// 0x0004 (0x006C - 0x0068)
class UBioGameEffectSetMaterialParameterScalar : public UBioGameEffectSetMaterialParameter
{
public:
	float                                              m_fValue;                                                 // 0x0068(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectSetMaterialParameterScalar");
		return ptr;
	}


	class UObject* Apply(class UObject* pTarget);
};


// Class BIOC_Base.BioGameEffectSetMaterialParameterTexture
// 0x0008 (0x0070 - 0x0068)
class UBioGameEffectSetMaterialParameterTexture : public UBioGameEffectSetMaterialParameter
{
public:
	struct FName                                       m_nmTexture;                                              // 0x0068(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectSetMaterialParameterTexture");
		return ptr;
	}


	class UObject* Apply(class UObject* pTarget);
};


// Class BIOC_Base.BioGameEffectSetProperty
// 0x001C (0x007C - 0x0060)
class UBioGameEffectSetProperty : public UBioGameEffect
{
public:
	unsigned long                                      m_bZeroOnUnapply : 1;                                     // 0x0060(0x0004) (Edit)
	struct FName                                       m_nmProperty;                                             // 0x0064(0x0008) (Edit)
	class UBio2DA*                                     m_p2DA;                                                   // 0x006C(0x0004) (Edit)
	int                                                m_nID;                                                    // 0x0070(0x0004) (Edit)
	struct FName                                       m_nmColumn;                                               // 0x0074(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectSetProperty");
		return ptr;
	}


	void Unapply(class UObject* pTarget);
	class UObject* Apply(class UObject* pTarget);
};


// Class BIOC_Base.BioGameEffectSingularity
// 0x0040 (0x00A0 - 0x0060)
class UBioGameEffectSingularity : public UBioGameEffect
{
public:
	struct FVector                                     m_vSingularityLocation;                                   // 0x0060(0x000C)
	float                                              m_fForce;                                                 // 0x006C(0x0004)
	struct FName                                       m_nmBoneName;                                             // 0x0070(0x0008)
	struct FVector                                     m_vPosition;                                              // 0x0078(0x000C)
	float                                              m_fForceInterval;                                         // 0x0084(0x0004)
	float                                              m_fOuterBubbleRange;                                      // 0x0088(0x0004)
	float                                              m_fVelocityThresholdOuterBubble;                          // 0x008C(0x0004)
	float                                              m_fInnerBubbleRange;                                      // 0x0090(0x0004)
	float                                              m_fBubbleForce;                                           // 0x0094(0x0004)
	unsigned long                                      m_bApplied : 1;                                           // 0x0098(0x0004)
	float                                              m_fDeltaTime;                                             // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectSingularity");
		return ptr;
	}


	void MoveActor(class AActor* oActor);
	void Tick(class UObject* oTarget, float fDeltaTime);
	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, const struct FVector& vSingularityLocation, float fForce, const struct FName& nmBoneName, const struct FVector& vPosition, float fForceInterval, float fOuterBubbleRange, float fVelocityThresholdOuterBubble, float fInnerBubbleRange, float fBubbleForce);
};


// Class BIOC_Base.BioGameEffectSuppression
// 0x0004 (0x0064 - 0x0060)
class UBioGameEffectSuppression : public UBioGameEffect
{
public:
	float                                              m_fDuration;                                              // 0x0060(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectSuppression");
		return ptr;
	}


	void Unapply(class UObject* oTarget);
	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty);
};


// Class BIOC_Base.BioGameEffectTakeDamage
// 0x0024 (0x0084 - 0x0060)
class UBioGameEffectTakeDamage : public UBioGameEffect
{
public:
	float                                              m_fDamage;                                                // 0x0060(0x0004)
	class AController*                                 m_oInstigatorController;                                  // 0x0064(0x0004)
	struct FVector                                     m_vHitLocation;                                           // 0x0068(0x000C)
	struct FVector                                     m_vMomentum;                                              // 0x0074(0x000C)
	class UBioDamageType*                              m_pDamage;                                                // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameEffectTakeDamage");
		return ptr;
	}


	class UObject* Apply(class UObject* oTarget);
	void STATIC_Create(class UBioGameProperty* oProperty, float fDamage, class AController* oInstigatorController, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UBioDamageType* pDamage);
};


// Class BIOC_Base.BioFSM
// 0x000C (0x0048 - 0x003C)
class UBioFSM : public UObject
{
public:
	TArray<class UBioState*>                           PlaceableStates;                                          // 0x003C(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFSM");
		return ptr;
	}


	class UBioState* GetStateByIndex(int Index);
	void DEBUG_DumpStates(class ABioPlayerController* BPC);
	class UBioState* GetState(const struct FName& RequestedState);
};


// Class BIOC_Base.BioFSMComponent
// 0x002C (0x0068 - 0x003C)
class UBioFSMComponent : public UObject
{
public:
	class UBioFSM*                                     FSMData;                                                  // 0x003C(0x0004) (Edit)
	class UBioState*                                   CurrentState;                                             // 0x0040(0x0004) (Edit)
	class UBioState*                                   PendingState;                                             // 0x0044(0x0004) (Edit)
	class UBioTransition*                              PendingTransition;                                        // 0x0048(0x0004) (Edit)
	TEnumAsByte<EeBioPendingStateChange>               PendingStateChange;                                       // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             OnTransition;                                             // 0x0050(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnTransitionDelegate__Delegate;                         // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFSMComponent");
		return ptr;
	}


	bool IsTransitioning();
	void CallTransitionDelegate(const struct FName& From, const struct FName& To);
	void TransitionStarted();
	bool HasState(const struct FName& ToState);
	class UBioState* SetState(const struct FName& ToState, const struct FName& NamedTransition, bool IgnoreTransition, bool bForceStateNow);
	class UBioTransition* GetTransition(const struct FName& ToState, const struct FName& NamedTransition);
	void TransitionComplete();
	void OnTransitionDelegate(const struct FName& FromState, const struct FName& ToState, bool bCallCPP);
};


// Class BIOC_Base.BioState
// 0x0020 (0x005C - 0x003C)
class UBioState : public UObject
{
public:
	struct FName                                       StateName;                                                // 0x003C(0x0008) (Edit, EditConst)
	struct FName                                       AnimationName;                                            // 0x0044(0x0008) (Edit, EditConst)
	TArray<class UBioTransition*>                      StateTransitions;                                         // 0x004C(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	unsigned long                                      bFinishAnimationBeforeTransition : 1;                     // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioState");
		return ptr;
	}


	class UBioTransition* GetTransition(const struct FName& ToState, const struct FName& NamedTransition);
	bool HasTransitionTo(const struct FName& ToState, const struct FName& NamedTransition);
};


// Class BIOC_Base.BioTransition
// 0x0018 (0x0054 - 0x003C)
class UBioTransition : public UObject
{
public:
	struct FName                                       TransitionToState;                                        // 0x003C(0x0008) (Edit, EditConst)
	struct FName                                       TransitionOptionalName;                                   // 0x0044(0x0008) (Edit, EditConst)
	struct FName                                       AnimationName;                                            // 0x004C(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTransition");
		return ptr;
	}

};


// Class BIOC_Base.BioConversation
// 0x01C0 (0x01FC - 0x003C)
class UBioConversation : public UObject
{
public:
	TArray<int>                                        m_StartingList;                                           // 0x003C(0x000C) (Edit, EditConst, NeedCtorLink)
	TArray<struct FBioDialogEntryNode>                 m_EntryList;                                              // 0x0048(0x000C) (Edit, EditConst, NeedCtorLink)
	TArray<struct FBioDialogReplyNode>                 m_ReplyList;                                              // 0x0054(0x000C) (Edit, EditConst, NeedCtorLink)
	TArray<struct FBioDialogSpeaker>                   m_SpeakerList;                                            // 0x0060(0x000C) (Edit, EditConst, NeedCtorLink)
	TArray<struct FBioDialogLookat>                    m_LookAtList;                                             // 0x006C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FBioDialogScript>                    m_ScriptList;                                             // 0x0078(0x000C) (Edit, EditConst, NeedCtorLink)
	unsigned long                                      m_bOneLinerConversation : 1;                              // 0x0084(0x0004) (Edit, EditConst)
	unsigned long                                      bUseFixedCameras : 1;                                     // 0x0084(0x0004) (Edit)
	int                                                m_nResRefID;                                              // 0x0088(0x0004) (Edit, EditConst)
	float                                              fGestureBlendOutTime;                                     // 0x008C(0x0004) (Edit)
	int                                                m_nCurrentEntry;                                          // 0x0090(0x0004) (Transient)
	float                                              m_fStartTime;                                             // 0x0094(0x0004) (Transient)
	TArray<int>                                        m_lstCurrentReplyIndices;                                 // 0x0098(0x000C) (Transient, NeedCtorLink)
	class AActor*                                      m_pConversationOwner;                                     // 0x00A4(0x0004) (Transient)
	class AActor*                                      m_pConversationPlayer;                                    // 0x00A8(0x0004) (Transient)
	class AActor*                                      m_pSpeaker;                                               // 0x00AC(0x0004) (Transient)
	class AActor*                                      m_oPreviousSpeaker;                                       // 0x00B0(0x0004) (Transient)
	class AActor*                                      m_pListener;                                              // 0x00B4(0x0004) (Transient)
	struct FVector                                     vLineOfAction;                                            // 0x00B8(0x000C) (Transient)
	int                                                m_nSelectedReply;                                         // 0x00C4(0x0004) (Transient)
	class UBioSeqAct_StartConversation*                m_pKismetStart;                                           // 0x00C8(0x0004) (Transient)
	int                                                m_nDialogMode;                                            // 0x00CC(0x0004) (Transient)
	int                                                m_nSubtitlesMode;                                         // 0x00D0(0x0004) (Transient)
	unsigned long                                      m_bHasAttachedCameraTrack : 1;                            // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bHasAttachedDOFTrack : 1;                               // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bSkipRequested : 1;                                     // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bForceUnskippable : 1;                                  // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bDisplayNonAmbientName : 1;                             // 0x00D4(0x0004) (Transient, Config)
	unsigned long                                      m_bSkipProtectionDisabled : 1;                            // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bAmbient : 1;                                           // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bDisableTargeting : 1;                                  // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bSkippable : 1;                                         // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bFailed : 1;                                            // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bInterrupted : 1;                                       // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bKismetInitiated : 1;                                   // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bConversationOver : 1;                                  // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bEnableLookAtWithStage : 1;                             // 0x00D4(0x0004) (Transient, Config)
	unsigned long                                      m_bPlayerIsFemale : 1;                                    // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bPassiveConversation : 1;                               // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bNoGestures : 1;                                        // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bForceShowReplies : 1;                                  // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bCleanupNeeded : 1;                                     // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bEarlyTermination : 1;                                  // 0x00D4(0x0004) (Transient)
	unsigned long                                      m_bRemoveWeapons : 1;                                     // 0x00D4(0x0004) (Transient, Config)
	unsigned long                                      m_bEnableConvCooking : 1;                                 // 0x00D4(0x0004) (Transient, Config)
	unsigned long                                      m_bNextLinePreLoadEnabled : 1;                            // 0x00D4(0x0004) (Transient, Config)
	unsigned long                                      m_bPlayerSexIsValid : 1;                                  // 0x00D4(0x0004) (Transient)
	class UBioTlkFile*                                 m_oTlkFile;                                               // 0x00D8(0x0004) (Transient)
	int                                                m_intimacy;                                               // 0x00DC(0x0004) (Transient)
	class ABioStage*                                   m_stage;                                                  // 0x00E0(0x0004) (Transient)
	struct FString                                     m_sAreaCode;                                              // 0x00E4(0x000C) (Transient, NeedCtorLink)
	float                                              m_fShowRepliesOffset;                                     // 0x00F0(0x0004) (Transient, Config)
	float                                              m_fShowLastLineOffset;                                    // 0x00F4(0x0004) (Transient, Config)
	float                                              m_fNodePlayTimer;                                         // 0x00F8(0x0004) (Transient)
	float                                              m_fInterruptRange;                                        // 0x00FC(0x0004) (Transient)
	struct FBioNextCamData                             m_tNextCamOverride;                                       // 0x0100(0x0038) (Transient)
	TArray<struct FBioSavedActorPos>                   m_aFSPrevPositions;                                       // 0x0138(0x000C) (Transient, NeedCtorLink)
	float                                              m_fSubtitleTimingModifier;                                // 0x0144(0x0004) (Transient, Config)
	float                                              m_fSubtitleTimingMinimum;                                 // 0x0148(0x0004) (Transient, Config)
	float                                              m_fVOInterruptRampDownTime;                               // 0x014C(0x0004) (Transient, Config)
	int                                                m_nNodeStateFlags;                                        // 0x0150(0x0004) (Transient)
	struct FString                                     m_sCurrentSubTitle;                                       // 0x0154(0x000C) (Transient, NeedCtorLink)
	class USoundCue*                                   m_pCurrentSound;                                          // 0x0160(0x0004) (Transient)
	struct FString                                     m_sCurrentFaceFXAnim;                                     // 0x0164(0x000C) (Transient, NeedCtorLink)
	float                                              m_fRemainingVOLength;                                     // 0x0170(0x0004) (Transient)
	float                                              m_fRemainingLastLineSubtitleDelay;                        // 0x0174(0x0004) (Transient)
	int                                                m_nDelayedReplyChoice;                                    // 0x0178(0x0004) (Transient)
	class UAudioComponent*                             m_pNoFaceFXAudioComp;                                     // 0x017C(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FMap_Mirror                                 m_mapPreviousWeps;                                        // 0x0180(0x0014) (Native, Transient)
	class UBioTlkFileSet*                              m_oTlkFileSet;                                            // 0x0194(0x0004)
	class USequence*                                   m_pEvtSystemSeq;                                          // 0x0198(0x0004)
	class UFaceFXAnimSet*                              m_pConvFaceFXSet;                                         // 0x019C(0x0004)
	class UFaceFXAnimSet*                              m_pMaleFaceFXSet;                                         // 0x01A0(0x0004) (Deprecated)
	class UFaceFXAnimSet*                              m_pFemaleFaceFXSet;                                       // 0x01A4(0x0004) (Deprecated)
	TArray<class UFaceFXAnimSet*>                      m_aMaleFaceSets;                                          // 0x01A8(0x000C) (NeedCtorLink)
	TArray<class UFaceFXAnimSet*>                      m_aFemaleFaceSets;                                        // 0x01B4(0x000C) (NeedCtorLink)
	TArray<struct FName>                               m_aForceConvCooking;                                      // 0x01C0(0x000C) (Transient, Config, NeedCtorLink)
	struct FColor                                      m_colSubtitleColor;                                       // 0x01CC(0x0004) (Transient, Config)
	struct FName                                       m_nmTutorialConversation;                                 // 0x01D0(0x0008) (Transient, Config)
	float                                              m_fTutorialDelay;                                         // 0x01D8(0x0004) (Transient, Config)
	float                                              m_fAudioHitchBuffer;                                      // 0x01DC(0x0004) (Transient)
	class USoundCue*                                   m_pPreLoadingSoundCue;                                    // 0x01E0(0x0004) (Transient)
	float                                              m_fPreLoadTimer;                                          // 0x01E4(0x0004) (Transient)
	TArray<int>                                        m_aPreLoadNodesVisited;                                   // 0x01E8(0x000C) (Transient, NeedCtorLink)
	float                                              m_fPreLoadStartDelay;                                     // 0x01F4(0x0004) (Transient)
	class ABioPawn*                                    m_pCurrentRampDownSpeaker;                                // 0x01F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioConversation");
		return ptr;
	}


	void BioVINCE_MapName_MissingLipSync();
	void BioVINCE_MapName_MissingVO();
	TEnumAsByte<EConvGUIStyles> GetReplyGUIStyle(int nIndex);
	bool FinishEntryNode(int nEntryIndex);
	bool NeedToDisplayReplies();
	void StopScript(const struct FString& script);
	int GetReplyExportID(int nIndex);
	int GetReplyCategory(int nIndex);
	struct FString GetReplyParaphraseText(int nIndex);
	struct FString GetReplyText(int nIndex, bool bParse);
	struct FString GetEntryText(bool bParse);
	class AActor* GetSpeaker(int nIndex);
	void UpdateFacing();
	void UpdateLookAtTargets(float fDeltaT);
	void UpdateLookAtList(class ABioPawn* pBioPawn);
	void switchToAmbient();
	bool IsAmbient();
	bool WaitingForReply();
	bool SkipNode();
	bool FinishSelectedReply();
	bool QueueReply(int nReply);
	bool SelectReply(int nReply);
	bool UpdateConversation(float fDeltaT);
	void EndConversation();
	bool StartConversation(class AActor* aOwner, class AActor* aPlayer);
	class AActor* GetConversationObject(int nObjectIndex, bool bNoisyErrors);
	void SetPositionRotator(class AActor* pActor, const struct FVector& Position, const struct FRotator& facing);
};


// Class BIOC_Base.BioStage
// 0x0090 (0x0280 - 0x01F0)
class ABioStage : public AActor
{
public:
	unsigned long                                      Enabled : 1;                                              // 0x01F0(0x0004) (Edit)
	unsigned long                                      m_bDoHeightAdjustment : 1;                                // 0x01F0(0x0004) (Edit)
	unsigned long                                      m_bLookAtActive : 1;                                      // 0x01F0(0x0004) (Edit)
	unsigned long                                      m_bDOFActive : 1;                                         // 0x01F0(0x0004) (Edit)
	unsigned long                                      m_bPositionLocked : 1;                                    // 0x01F0(0x0004)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x01F4(0x0004) (ExportObject, Component, EditInline)
	class UBioStageType*                               Type;                                                     // 0x01F8(0x0004) (Edit)
	TArray<struct FBioStageCameraCustom>               m_CameraCustomList;                                       // 0x01FC(0x000C) (Edit, NeedCtorLink)
	float                                              m_fCameraHeightDelta;                                     // 0x0208(0x0004)
	float                                              m_fCameraPitchDelta;                                      // 0x020C(0x0004)
	float                                              m_fCameraYawDelta;                                        // 0x0210(0x0004)
	float                                              m_fCameraFOVDelta;                                        // 0x0214(0x0004)
	float                                              m_fCameraNearPlaneDelta;                                  // 0x0218(0x0004)
	float                                              m_fCameraFocusInnerRadiusDelta;                           // 0x021C(0x0004)
	float                                              m_fCameraFocusDistanceDelta;                              // 0x0220(0x0004)
	unsigned long                                      m_bUseOldProceduralCameraAdjust : 1;                      // 0x0224(0x0004) (Transient, Config)
	unsigned long                                      m_bDisableProceduralCameraAdjust : 1;                     // 0x0224(0x0004) (Transient, Config)
	float                                              m_fHeightAdjust;                                          // 0x0228(0x0004) (Transient)
	float                                              m_fStageZ;                                                // 0x022C(0x0004) (Transient)
	float                                              m_fSpeakerFeetZ;                                          // 0x0230(0x0004) (Transient)
	float                                              m_fSpeakerEyeHeight;                                      // 0x0234(0x0004) (Transient)
	struct FName                                       m_sSpeakerTag;                                            // 0x0238(0x0008) (Transient)
	struct FName                                       m_sListenerTag;                                           // 0x0240(0x0008) (Transient)
	struct FName                                       m_sCurrentCamera;                                         // 0x0248(0x0008) (Transient)
	class AActor*                                      m_oPlacementOverride[0x9];                                // 0x0250(0x0004)
	struct FVector                                     m_vOldPositon;                                            // 0x0274(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioStage");
		return ptr;
	}


	void GetBestCameraPosition(class UBioConversation* Conv, bool bLineOfActionCheck, int nIntimacyLevel, struct FVector* vCamLoc, struct FRotator* vCamRot, float* fFov, float* fNearPlane, struct FBioStageDOFData* tDOFData);
	void BioVINCE_MapName_FailedStagePlacement();
	int CameraSpeaker(const struct FString& sLabel);
	int CameraListener(const struct FString& sLabel);
	class AActor* GetActorByNode(TEnumAsByte<EStageNodes> eNode);
	class AActor* GetActorOnNode(int nNode);
	void GetActorStageNodePosition(class AActor* pActor, bool bPuppetsUseParentNode, struct FVector* vPosition);
	struct FName GetStageCamName(TEnumAsByte<EStageNodes> eNode);
	void GetStageCamLocRot(TEnumAsByte<EStageNodes> eNode, struct FVector* vCamLoc, struct FRotator* vCamRot);
	void GetStageCamDOFData(int nCamIndex, struct FBioStageDOFData* tDOFData);
	float GetStageCamNearPlane(int nCamIndex);
	float GetStageCamFov(int nCamIndex);
	int GetStageCamIndex(const struct FName& nmCamName);
	void PlaceActors(class UBioConversation* Conv);
	void EndConversation();
};


// Class BIOC_Base.BioEquipment
// 0x002C (0x0070 - 0x0044)
class UBioEquipment : public UBioBaseComponent
{
public:
	class UBioItemEquippable*                          m_aEquipped[0x5];                                         // 0x0044(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      m_bIsQuickSlotActive : 1;                                 // 0x0058(0x0004)
	unsigned long                                      m_bAreWeaponsHidden : 1;                                  // 0x0058(0x0004)
	TEnumAsByte<EBioItemWeaponRangedType>              m_eQuickSlotCurrent;                                      // 0x005C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	class ABioWeapon*                                  m_QuickSlotArray[0x4];                                    // 0x0060(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEquipment");
		return ptr;
	}


	void TickEquipment(float fDeltaTime);
	void OnHide(bool bHide);
	void SetScalerMaterialParameter(const struct FName& ParameterName, float Value);
	void SetHiddenForAllWeapons(bool shouldHide);
	bool ReattachAllWeapons(class ABioPawn* Pawn);
	void ChangeToQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot);
	bool ComputePrevQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> fromslot, TEnumAsByte<EBioItemWeaponRangedType>* Slot);
	bool ComputeNextQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> fromslot, TEnumAsByte<EBioItemWeaponRangedType>* Slot);
	bool PrevQuickSlot();
	bool NextQuickSlot();
	void DeactivateCurrentQuickSlot();
	void ActivateCurrentQuickSlot();
	class UBioItemWeapon* ClearQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot);
	class UBioItemWeapon* SetQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot, class ABioPawn* Pawn, class UBioItemWeapon* itemWeapon);
	bool IsActiveQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot);
	bool IsQuickSlotEmpty(TEnumAsByte<EBioItemWeaponRangedType> Slot);
	class ABioWeapon* GetCurrentQuickSlot();
	bool IsEquipped(class UBioItemEquippable* Item);
	class UBioItemEquippable* Unequip(TEnumAsByte<EBioEquipmentSlot> Slot);
	bool Equip(class UBioItemEquippable* Item);
	bool STATIC_GetEquipmentType(TEnumAsByte<EBioEquipmentSlot> Slot, TEnumAsByte<EBioEquipmentType>* Type);
	bool STATIC_GetEquipmentSlot(TEnumAsByte<EBioEquipmentType> Type, TEnumAsByte<EBioEquipmentSlot>* Slot);
};


// Class BIOC_Base.BioEquipmentBase
// 0x0030 (0x0074 - 0x0044)
class UBioEquipmentBase : public UBioBaseComponent
{
public:
	class UObject*                                     m_oDelegateObject;                                        // 0x0044(0x0004) (Transient)
	TArray<struct FBioEquipmentBaseSlotType>           m_oEquipmentSlots;                                        // 0x0048(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      m_bInitialized : 1;                                       // 0x0054(0x0004) (Transient)
	TEnumAsByte<EBioGamePropertyEvent>                 m_eGamePropertyEvent;                                     // 0x0058(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnEquipAction__Delegate;                                // 0x005C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnUnEquipAction__Delegate;                              // 0x0068(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEquipmentBase");
		return ptr;
	}


	bool ScaleEquipment(int nSophisticationLevel);
	int GetEquippedSlotID(class UBioItem* oItem);
	bool UnequipSlot(int nSlot, class UBioItem** oOldItem);
	bool EquipSlot(class UBioItem* oNewItem, int nSlot, class UBioItem** oOldItem);
	bool ClearAll();
	bool Initialize(class AActor* oOwner, class UObject* oDelegateObj);
	bool OnUnEquipAction();
	bool OnEquipAction(class UBioItem* oNewItem);
};


// Class BIOC_Base.BioEquipmentVehicle
// 0x0000 (0x0074 - 0x0074)
class UBioEquipmentVehicle : public UBioEquipmentBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEquipmentVehicle");
		return ptr;
	}


	bool Initialize(class AActor* oOwner, class UObject* oDelegateObj);
};


// Class BIOC_Base.BioGUIBox
// 0x0048 (0x0084 - 0x003C)
class UBioGUIBox : public UObject
{
public:
	struct FColor                                      m_colorBackground;                                        // 0x003C(0x0004) (Edit)
	struct FColor                                      m_colorForeground;                                        // 0x0040(0x0004) (Edit)
	struct FCanvasProperties                           m_canvasProperties;                                       // 0x0044(0x0020)
	int                                                m_nCanvasWidth;                                           // 0x0064(0x0004)
	int                                                m_nCanvasHeight;                                          // 0x0068(0x0004)
	float                                              m_fX;                                                     // 0x006C(0x0004)
	float                                              m_fY;                                                     // 0x0070(0x0004)
	float                                              m_fWidth;                                                 // 0x0074(0x0004)
	float                                              m_fHeight;                                                // 0x0078(0x0004)
	class UFont*                                       m_font;                                                   // 0x007C(0x0004)
	unsigned long                                      m_bComputeDrawParameters : 1;                             // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGUIBox");
		return ptr;
	}


	void Draw(class UCanvas* oCanvas);
	void SetFont(class UFont* Font);
	void PopCanvasProperties(class UCanvas* oCanvas);
	void PushCanvasProperties(class UCanvas* oCanvas);
	void RenderContent(class UCanvas* oCanvas);
	void ComputeDrawParameters(class UCanvas* oCanvas);
	bool ShouldRender();
};


// Class BIOC_Base.BioDebugMenu
// 0x0020 (0x00A4 - 0x0084)
class UBioDebugMenu : public UBioGUIBox
{
public:
	struct FColor                                      m_colorSelected;                                          // 0x0084(0x0004) (Edit)
	int                                                m_nSelectedEntry;                                         // 0x0088(0x0004)
	int                                                m_nScrollPosition;                                        // 0x008C(0x0004)
	int                                                m_nMaxScrollPosition;                                     // 0x0090(0x0004)
	int                                                m_nLineCount;                                             // 0x0094(0x0004)
	TArray<struct FString>                             m_aMenuEntries;                                           // 0x0098(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDebugMenu");
		return ptr;
	}


	void ScrollUp();
	void ScrollDown();
	void RenderContent(class UCanvas* oCanvas);
	void ComputeDrawParameters(class UCanvas* oCanvas);
	bool ShouldRender();
	void Clear();
	void AddEntry(const struct FString& sMenuEntry);
};


// Class BIOC_Base.BioHUD
// 0x0088 (0x04FC - 0x0474)
class ABioHUD : public AHUD
{
public:
	class UBioMessageBox*                              m_messageBox;                                             // 0x0474(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioDebugMenu*                               m_oDebugMenu;                                             // 0x0478(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioMoviePlayer*                             m_moviePlayer;                                            // 0x047C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      m_bDisplayDialogData : 1;                                 // 0x0480(0x0004) (Config)
	unsigned long                                      m_bDisplayDialogDataTarget : 1;                           // 0x0480(0x0004)
	unsigned long                                      m_bShowPlayerLocation : 1;                                // 0x0480(0x0004)
	unsigned long                                      bDisplaySafeArea : 1;                                     // 0x0480(0x0004)
	unsigned long                                      bFontTest : 1;                                            // 0x0480(0x0004)
	unsigned long                                      m_bDisplayActorInfo : 1;                                  // 0x0480(0x0004) (Transient)
	unsigned long                                      m_bLockActorInfo : 1;                                     // 0x0480(0x0004) (Transient)
	unsigned long                                      m_bGUIResourcesLoaded : 1;                                // 0x0480(0x0004) (Transient)
	unsigned long                                      m_bShowHUDThisFrame : 1;                                  // 0x0480(0x0004) (Transient)
	unsigned long                                      m_bUseGeneratedItemNames : 1;                             // 0x0480(0x0004) (Transient, Config)
	unsigned long                                      m_bShowAnimNodeDebug : 1;                                 // 0x0480(0x0004) (Transient)
	class AActor*                                      m_oActorForInfoDisplay;                                   // 0x0484(0x0004) (Transient)
	class UMaterial*                                   oGUIMaterial;                                             // 0x0488(0x0004)
	float                                              m_fCanvasOrgX;                                            // 0x048C(0x0004) (Transient)
	float                                              m_fCanvasOrgY;                                            // 0x0490(0x0004) (Transient)
	float                                              m_fSafeAreaX;                                             // 0x0494(0x0004) (Config)
	float                                              m_fSafeAreaY;                                             // 0x0498(0x0004) (Config)
	int                                                nFontTestType;                                            // 0x049C(0x0004)
	float                                              m_fSafeXOffset;                                           // 0x04A0(0x0004)
	float                                              m_fSafeYOffset;                                           // 0x04A4(0x0004)
	int                                                m_textX;                                                  // 0x04A8(0x0004) (Transient)
	int                                                m_textY;                                                  // 0x04AC(0x0004) (Transient)
	int                                                m_lineHeight;                                             // 0x04B0(0x0004) (Const)
	int                                                m_charWidth;                                              // 0x04B4(0x0004) (Const)
	int                                                m_leftColumnX;                                            // 0x04B8(0x0004) (Const)
	int                                                m_rightColumnX;                                           // 0x04BC(0x0004) (Const)
	int                                                m_farrightColumnX;                                        // 0x04C0(0x0004) (Const)
	int                                                m_topRowY;                                                // 0x04C4(0x0004) (Const)
	struct FColor                                      YellowColor;                                              // 0x04C8(0x0004) (Const)
	struct FColor                                      OrangeColor;                                              // 0x04CC(0x0004) (Const)
	struct FColor                                      DarkGreyColor;                                            // 0x04D0(0x0004) (Const)
	class UTexture2D*                                  m_oSafeAreaTexture;                                       // 0x04D4(0x0004) (Transient)
	class UFont*                                       m_oGameTinyFont;                                          // 0x04D8(0x0004) (Transient)
	class UFont*                                       m_oGameSmallFont;                                         // 0x04DC(0x0004) (Transient)
	class UFont*                                       m_oGameMediumFont;                                        // 0x04E0(0x0004) (Transient)
	class UFont*                                       m_oGameLargeFont;                                         // 0x04E4(0x0004) (Transient)
	class UMaterialInstanceConstant*                   m_oTargetDetected;                                        // 0x04E8(0x0004) (Transient)
	class ABioBaseSquad*                               m_oTargetSquadPlayPen;                                    // 0x04EC(0x0004) (Transient)
	class AActor*                                      m_oAnimNodeDebugSource;                                   // 0x04F0(0x0004) (Transient)
	struct FName                                       m_nmAnimNodeDebugName;                                    // 0x04F4(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioHUD");
		return ptr;
	}


	void ShowPawnAnimNodeDebug(class UClass* aClass, const struct FName& nmStartingPoint);
	void ShowWeapAnimNodeDebug(const struct FName& nmStartingPoint);
	void ShowAnimNodeDebug(const struct FName& nmStartingPoint);
	void UpdateActorInfo();
	void HideLocation();
	void ShowLocation();
	void LockActorInfo();
	void DisplayActorInfo();
	void LoadGUIResources();
	void SetGUITexture(const struct FString& sMaterial);
	void DrawTextWithColor(const struct FString& valuename, const struct FString& Value, const struct FColor& LabelColor, const struct FColor& DataColor);
	void DrawText(const struct FString& valuename, const struct FString& Value, const struct FColor& LabelColor, const struct FColor& DataColor);
	void DisplayProfiling();
	void DrawCircle(float fX, float fY, float fRadius);
	void CDrawSquare(int nSize);
	bool PointInsideBox(float X, float Y, float CX, float CY, float nSize);
	void GetBoxCoordsFromAngle(float X, float Y, float Size, float Angle, float* XSt, float* YSt);
	bool BoxesIntersecting(int X1, int Y1, int nSize1, int X2, int Y2, int nSize2);
	void CDrawVertLine(float X, float Y1, float Y2);
	void CDrawHorzLine(float X1, float X2, float Y);
	void ConnectBoxes(float X1, float Y1, float nSize1, float X2, float Y2, float nSize2);
	struct FColor GetStabilityColor(float fCurrentStability);
	struct FString LoadTestTextStringFromFile();
	float SmartWrapStringToArray(const struct FString& sText, int nTextWidth, TArray<struct FString>* OutArray);
	void DrawFakeShadowText(int X, int Y, const struct FColor& DrawColor, const struct FString& sText);
	void DrawEngineHUD();
	void PostRender();
	void DoFontTest();
	void DrawTestFontString(int Y, const struct FString& sFontName, const struct FString& sTestString);
	void DrawTestFont(int Y, const struct FString& sFontName, int nPoint, bool bScaled, float fScale);
	void ToggleSafeArea();
	void DisplaySafeArea();
	void ProfileConversationExtra(class UBioConversation* oCurConv);
	struct FVector ProxyCanvasProject(const struct FVector& V);
	void ProxyCanvasDrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL);
	void ProxyCanvasSetPos(float X, float Y);
	struct FLinearColor ProxyMakeLinearColor(float R, float G, float B, float A);
	void DisplayCapability(int X, int Y, int idx, class UBioCapability* oCap, bool bShowOwner);
	int DisplaySquadMember(int X, int Y, class UBioPawnBehavior* targetBehavior, class ABioPawn* oBP);
	int DisplayStreaming(int X, int Y, class ABioPawn* oBP, class UBioPawnBehavior* targetBehavior);
	int DisplaySquad_QA(int X, int Y, class UBioPawnBehavior* targetBehavior);
	int DisplaySquad(int X, int Y, class UBioPawnBehavior* targetBehavior);
	int DisplayPerceptionList(int X, int Y, class ABioPawn* oBP);
	int DisplayActionQueue(int X, int Y, class ABioAiController* oAIC);
	int DisplayActionStack(int X, int Y, class ABioAiController* oAIC);
	struct FName GetNameOfEnumEntry(int nIndex, const struct FString& EnumName);
	void DisplayIcon(class UMaterialInstanceConstant* oMatInstance, const struct FVector& vWorldLocation, bool bScaleWithDistance, float fMinTextureSize, float fMaxTextureSize, float fScaleRange);
	void DisplayWeaponAttributes(class ABioWeapon* oWeapon);
	void DisplaySquadPlaypen(class UBioActorBehavior* targetActorBehavior, bool bShowPlaypen);
	void ProfileComponents(class UBioActorBehavior* targetActorBehavior);
	void ProfileStasis(class UBioActorBehavior* targetActorBehavior);
	void ProfilePerception(class UBioActorBehavior* targetActorBehavior);
	void ProfileSquadCaps(class UBioActorBehavior* targetActorBehavior);
	void ProfileCaps(class UBioActorBehavior* targetActorBehavior);
	void ProfileGestures(class UBioActorBehavior* targetActorBehavior);
	void ProfileSave();
	void ProfileAnim(class UBioActorBehavior* targetActorBehavior);
	void ProfileSquadFollow(class UBioActorBehavior* targetActorBehavior);
	void ProfileQAAI(class UBioActorBehavior* targetActorBehavior);
	void ProfileCamera();
	void ProfileVehicleWeapons(class UBioActorBehavior* targetActorBehavior);
	void ProfileVehicle(class UBioActorBehavior* targetActorBehavior);
	void ProfileGrenade(class UBioActorBehavior* targetActorBehavior);
	void ProfileRagdoll(class UBioActorBehavior* targetActorBehavior);
	void ProfileConversation(class UBioActorBehavior* targetActorBehavior);
	void ProfileConversationBug(class UBioActorBehavior* targetActorBehavior);
	void ProfileNoise(class UBioActorBehavior* targetActorBehavior);
	void ProfilePath(class UBioActorBehavior* targetActorBehavior);
	void ProfileAvoid(class UBioActorBehavior* targetActorBehavior);
	void ProfileSquad(class UBioActorBehavior* targetActorBehavior);
	void ProfileLookat(class UBioActorBehavior* targetActorBehavior);
	void ProfileMovement(class UBioActorBehavior* targetActorBehavior);
	void ProfileCover(class UBioActorBehavior* targetActorBehavior);
	void ProfileAI_Player(class UBioActorBehavior* targetActorBehavior);
	void ProfileAI_AI(class UBioActorBehavior* targetActorBehavior);
	void ProfileAI(class UBioActorBehavior* targetActorBehavior);
	void ProfileHopper(class UBioActorBehavior* targetActorBehavior);
	void ProfileInventory(class UBioActorBehavior* targetActorBehavior);
	void ProfilePower(class UBioActorBehavior* targetActorBehavior, const struct FName& nmPower);
	void ProfilePowers(class UBioActorBehavior* targetActorBehavior, const struct FName& nmPower);
	void ProfileWeaponAttributes(class UBioActorBehavior* targetActorBehavior);
	void ProfilePawnAttributes(class UBioActorBehavior* targetActorBehavior);
	void ProfileTalents(class UBioActorBehavior* targetActorBehavior);
	void ProfileCombat(class UBioActorBehavior* targetActorBehavior);
};


// Class BIOC_Base.BioMessageBox
// 0x0024 (0x00A8 - 0x0084)
class UBioMessageBox : public UBioGUIBox
{
public:
	TArray<struct FString>                             m_aRawText;                                               // 0x0084(0x000C) (NeedCtorLink)
	TArray<struct FString>                             m_aWrappedText;                                           // 0x0090(0x000C) (NeedCtorLink)
	int                                                m_nScrollPosition;                                        // 0x009C(0x0004)
	int                                                m_nLineCount;                                             // 0x00A0(0x0004)
	int                                                m_nMaxScrollPosition;                                     // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMessageBox");
		return ptr;
	}


	void PageUp();
	void PageDown();
	void ScrollUp();
	void ScrollDown();
	void RenderContent(class UCanvas* oCanvas);
	bool HasText();
	void SetTextArray(TArray<struct FString>* aText);
	void SetText(const struct FString& S);
	bool ShouldRender();
	void ComputeDrawParameters(class UCanvas* oCanvas);
};


// Class BIOC_Base.BioMoviePlayer
// 0x0014 (0x0050 - 0x003C)
class UBioMoviePlayer : public UObject
{
public:
	class UMaterial*                                   m_material;                                               // 0x003C(0x0004)
	class UTextureMovie*                               m_textureMovie;                                           // 0x0040(0x0004)
	struct FScriptDelegate                             __OnMovieFinished__Delegate;                              // 0x0044(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMoviePlayer");
		return ptr;
	}


	void ShutdownMovie();
	void Draw(class UCanvas* Canvas);
	void SetMaterial(class UMaterial* Material);
	void SetTextureMovie(class UTextureMovie* TextureMovie);
	void InitializeMovie();
	void OnMovieFinished(class UTextureMovie* TextureMovie);
};


// Class BIOC_Base.BioSubtitles
// 0x001C (0x0058 - 0x003C)
class UBioSubtitles : public UObject
{
public:
	struct FString                                     m_sSubtitle;                                              // 0x003C(0x000C) (NeedCtorLink)
	struct FColor                                      m_FontColor;                                              // 0x0048(0x0004)
	unsigned long                                      m_bAlert : 1;                                             // 0x004C(0x0004)
	TEnumAsByte<ESubtitlesRenderMode>                  m_DefaultRenderMode;                                      // 0x0050(0x0001) (Config)
	TEnumAsByte<ESubtitlesRenderMode>                  m_CurrentRenderMode;                                      // 0x0051(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0052(0x0002) MISSED OFFSET
	float                                              m_fTimeRemaining;                                         // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSubtitles");
		return ptr;
	}


	void UpdateSubtitles(float fDeltaT);
	void ClearHistory();
	TEnumAsByte<ESubtitlesRenderMode> SetRenderMode(TEnumAsByte<ESubtitlesRenderMode> RenderMode, bool bForceDisplay);
	TEnumAsByte<ESubtitlesRenderMode> GetRenderMode();
	bool HasSubtitle();
	void DisplaySubtitle(const struct FString& sSubtitle, float fDuration);
};


// Class BIOC_Base.BioUIWorld
// 0x006C (0x00A8 - 0x003C)
class UBioUIWorld : public UObject
{
public:
	struct FString                                     m_sMapFile;                                               // 0x003C(0x000C) (Edit, Config, NeedCtorLink)
	struct FName                                       m_fnCameraActorName;                                      // 0x0048(0x0008) (Edit, Config)
	unsigned long                                      m_bEnabled : 1;                                           // 0x0050(0x0004) (Edit, Config)
	unsigned long                                      m_bLoaded : 1;                                            // 0x0050(0x0004) (Transient)
	struct FPointer                                    m_pWorld;                                                 // 0x0054(0x0004) (Native, Transient)
	class ACameraActor*                                m_pCameraActor;                                           // 0x0058(0x0004) (Native, Transient)
	TArray<struct FPointer>                            m_aCommandQueue;                                          // 0x005C(0x000C) (Const, Native, Transient)
	struct FPointer                                    m_pCriticalSection;                                       // 0x0068(0x0004) (Const, Native, Transient)
	unsigned char                                      UnknownData00[0x14];                                      // 0x006C(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.BioUIWorld.m_mSpawnedPawnMap
	TArray<class AActor*>                              m_aoInitialActors;                                        // 0x0080(0x000C) (Const, Native, Transient)
	class UBioVFXTemplate*                             m_pFullBioticEffectTemplate;                              // 0x008C(0x0004) (Transient)
	class UBioVFXTemplate*                             m_pHalfBioticEffectTemplate;                              // 0x0090(0x0004) (Transient)
	class UBioVFXTemplate*                             m_pTechToolEffectTemplate;                                // 0x0094(0x0004) (Transient)
	class ABioVisualEffect*                            m_pFullBioticEffect;                                      // 0x0098(0x0004) (Transient)
	class ABioVisualEffect*                            m_pHalfBioticEffect;                                      // 0x009C(0x0004) (Transient)
	class ABioVisualEffect*                            m_pTechToolEffect;                                        // 0x00A0(0x0004) (Transient)
	class UBioSFHandler_NewCharacter*                  m_oNCHandler;                                             // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioUIWorld");
		return ptr;
	}


	void Tick(float a_fDeltaSeconds);
	void HidePawn(class ABioPawn* a_pOriginalPawn, bool bHidden);
	void AttachOmnitool(class ABioPawn* a_pSourcePawn, bool a_fnClassName);
	void PrimeTextures(class ABioPawn* a_pSourcePawn);
	void AttachBioticsAndTech(class ABioPawn* a_pSourcePawn, const struct FName& a_fnClassName);
	void MovePawn(class ABioPawn* a_pOriginalPawn, const struct FName& a_fnNewLocation);
	void SwapPawn(class ABioPawn* a_pSourcePawn, const struct FName& a_fnSourceVarName, class ABioPawn* a_pOtherPawn, const struct FName& a_fnOtherVarName);
	void ResetActors();
	void SetNameVariable(const struct FName& a_fnVariableName, const struct FName& a_nmValue);
	void SetObjectVariable(const struct FName& a_fnVariableName, class UObject* a_pValue);
	void UpdateHeadGearVisibility(class ABioPawn* pOriginalPawn);
	void UpdateAppearance(class ABioPawn* a_pOriginalPawn, const struct FName& a_fnClassAnimSet);
	void DestroyPawn(class ABioPawn* a_pOriginalPawn);
	void SpawnPawn(class ABioPawn* a_pOriginalPawn, const struct FName& a_fnSpawnLocation, const struct FName& a_fnSpawnVariable, const struct FName& a_fnClassAnimSet, const struct FName& a_fnRemoteEvent);
	void TriggerEvent(const struct FName& a_fnEventName, class AActor* a_pCaller);
};


// Class BIOC_Base.BioCreatureSoundSet
// 0x002C (0x0068 - 0x003C)
class UBioCreatureSoundSet : public UObject
{
public:
	TArray<class USoundCue*>                           m_aAllCues;                                               // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FMultiMap_Mirror                            m_mapSoundSetCueList;                                     // 0x0048(0x0014) (Edit, Native)
	struct FString                                     m_sSoundSetName;                                          // 0x005C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCreatureSoundSet");
		return ptr;
	}

};


// Class BIOC_Base.BioTlkFile
// 0x0030 (0x006C - 0x003C)
class UBioTlkFile : public UBioBaseTlkFile
{
public:
	unsigned long                                      m_bDisplayStringId : 1;                                   // 0x003C(0x0004) (Config)
	int                                                m_nLanguageID;                                            // 0x0040(0x0004) (Const)
	int                                                m_nHashTableSize;                                         // 0x0044(0x0004) (Const)
	TArray<struct FTlkHashEntry>                       m_HashTable;                                              // 0x0048(0x000C) (Const, Native)
	TArray<struct FBioHuffmanDecodeNode>               m_HuffmanTree;                                            // 0x0054(0x000C) (Const, Native)
	TArray<struct FBioHuffmanEntry>                    m_sStringEntries;                                         // 0x0060(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTlkFile");
		return ptr;
	}

};


// Class BIOC_Base.BioTlkFileSet
// 0x0018 (0x0054 - 0x003C)
class UBioTlkFileSet : public UObject
{
public:
	struct FMap_Mirror                                 m_mapTlkFiles;                                            // 0x003C(0x0014) (Native)
	class UBioTlkFile*                                 m_pCurrentTlkFile;                                        // 0x0050(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTlkFileSet");
		return ptr;
	}

};


// Class BIOC_Base.BioActorFactory
// 0x0004 (0x0068 - 0x0064)
class UBioActorFactory : public UActorFactory
{
public:
	class UBioActorType*                               m_oActorType;                                             // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActorFactory");
		return ptr;
	}

};


// Class BIOC_Base.BioSpawnPoint
// 0x0010 (0x0200 - 0x01F0)
class ABioSpawnPoint : public AActor
{
public:
	class UBioActorType*                               m_oActorType;                                             // 0x01F0(0x0004) (Edit)
	struct FName                                       m_nmSpawnedActorTag;                                      // 0x01F4(0x0008) (Edit)
	class UBioActorFactory*                            m_pFactory;                                               // 0x01FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpawnPoint");
		return ptr;
	}

};


// Class BIOC_Base.BioSpawnPointVehicle
// 0x0008 (0x0208 - 0x0200)
class ABioSpawnPointVehicle : public ABioSpawnPoint
{
public:
	class UBio2DA*                                     m_pGarage2DA;                                             // 0x0200(0x0004)
	int                                                m_nSpawnIndex;                                            // 0x0204(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpawnPointVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioCharacterImporter
// 0x00BC (0x00F8 - 0x003C)
class UBioCharacterImporter : public UObject
{
public:
	int                                                m_MAX_TALENT_PREREQS;                                     // 0x003C(0x0004) (Const, Config)
	struct FName                                       m_aCharacter2DAName[0x2];                                 // 0x0040(0x0008) (Transient)
	struct FName                                       m_aClasses2DAName[0x3];                                   // 0x0050(0x0008) (Transient)
	struct FName                                       m_nmStockCharactersPackage;                               // 0x0068(0x0008) (Transient)
	struct FName                                       m_nmStockClassesPackage;                                  // 0x0070(0x0008) (Transient)
	struct FPlayerInfo                                 m_stockPlayerCharacter;                                   // 0x0078(0x0028) (Config, NeedCtorLink)
	struct FString                                     m_femaleActorType;                                        // 0x00A0(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_maleActorType;                                          // 0x00AC(0x000C) (Config, NeedCtorLink)
	unsigned long                                      m_isPlayerOverrideInitialized : 1;                        // 0x00B8(0x0004) (Transient)
	struct FPlayerInfo                                 m_overridePlayerCharacter;                                // 0x00BC(0x0028) (Transient, NeedCtorLink)
	class UBio2DA*                                     m_aCharacter2DA[0x2];                                     // 0x00E4(0x0004) (Transient)
	class UBio2DA*                                     m_aClasses2DA[0x3];                                       // 0x00EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCharacterImporter");
		return ptr;
	}


	bool FindCharacterInfoByName(const struct FName& nmCharacter, const struct FName& nmPackage, int* Index, struct FString* actorTypeString, int* nIsHeadGearVisible);
	bool FindPlayerCharacterInfo(int* Index, struct FString* actorTypeString, int* nIsHeadGearVisible);
	bool GetSavedPlayerInformation(struct FString* actorTypeString);
	bool LoadCharacterDefinitionByIndexInternal(class UBioPawnBehavior* oBehavior, int nCharacterID);
	bool LoadCharacterDefinitionByIndex(class UBioPawnBehavior* oBehavior, int nCharacterID, const struct FName& nmPackage);
	void GetAllValuesForKey(class UBio2DA* o2DA, const struct FName& nmKeyColumn, int nKey, const struct FName& nmValueColumn, struct FBioIntArray* oValueArray);
	void GetAllRowsAndValuesForKey(class UBio2DA* o2DA, const struct FName& nmKeyColumn, int nKey, const struct FName& nmValueColumn, struct FBioIntArray* oRowIndexArray, struct FBioIntArray* oValueArray);
	void GetAllRowsForKey(class UBio2DA* o2DA, const struct FName& nmKeyColumn, int nKey, struct FBioIntArray* oRowIndexArray);
	void LoadAndEquipItem(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioCharacterImporterCharacter2DA> table, int Row, const struct FName& itemIDColumnName, const struct FName& sophisticationColumnName, const struct FName& nmManufacturerColumn);
	class UBioItem* LoadItem(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioCharacterImporterCharacter2DA> table, int Row, const struct FName& itemIDColumnName, const struct FName& sophisticationColumnName, const struct FName& nmManufacturerColumn);
	void LoadAndEquipItemOfUnknownType(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioCharacterImporterCharacter2DA> table, int Row, const struct FName& itemIDColumnName, const struct FName& sophisticationColumnName, const struct FName& nmManufacturerColumn);
	void AddAchievementUnlockedTalentTrees(class UBioPawnBehavior* Behavior);
	bool LoadSpecializationData(int classID, TArray<struct FBioSpecializationData>* specData);
	void LoadClassGUIInfo(int Row, struct FBioClassGuiInfo* stGuiInfo);
	void LoadPlayableClassRows(TArray<int>* classRows);
	void InitializePlayerOverrideInfo(const struct FString& Label, TEnumAsByte<EBioAttributePawnGender> gender, const struct FString& PlayerName, TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> Origin, TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> notoriety, class UBioMorphFace* Morph, int nBonusTalentID);
	bool LoadClassTalents(class UBioPawnBehavior* Behavior, int classID);
	bool GetEnumEntryIN(const struct FName& nmEnum, class UBio2DA* o2DA, int nRow, const struct FName& nmColumn, unsigned char* cValue);
	int GetRowIndex(class UBio2DA* o2DA, int nKeyValue);
	bool LoadClasses2DAs(const struct FName& nmPackage);
	bool LoadCharacter2DAs(const struct FName& nmPackage);
};


// Class BIOC_Base.BioInventory
// 0x006C (0x00B0 - 0x0044)
class UBioInventory : public UBioBaseComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioInventory.srInventoryTitle
	TArray<class UBioItem*>                            m_aItem;                                                  // 0x0048(0x000C) (ExportObject, NeedCtorLink, EditInline)
	TArray<struct FBioPlotPseudoItem>                  m_aPlotItem;                                              // 0x0054(0x000C) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_nResourceCredits;                                       // 0x0060(0x0004)
	int                                                m_nResourceGrenades;                                      // 0x0064(0x0004)
	float                                              m_fResourceMedigel;                                       // 0x0068(0x0004)
	float                                              m_fResourceSalvage;                                       // 0x006C(0x0004)
	int                                                m_nMaxCredits;                                            // 0x0070(0x0004) (Const, Config)
	int                                                m_nMaxGrenades;                                           // 0x0074(0x0004) (Const, Config)
	float                                              m_fMaxMedigel;                                            // 0x0078(0x0004) (Const, Config)
	float                                              m_fMaxSalvage;                                            // 0x007C(0x0004) (Const, Config)
	int                                                m_nResourceIdOffset;                                      // 0x0080(0x0004) (Const, Config)
	int                                                m_nPlotItemOffset;                                        // 0x0084(0x0004) (Const, Config)
	float                                              m_fTreasureStdDev;                                        // 0x0088(0x0004) (Const, Config)
	unsigned long                                      m_bUseLast : 1;                                           // 0x008C(0x0004)
	float                                              m_fNormalRandom2;                                         // 0x0090(0x0004)
	class UBio2DA*                                     m_oTreasureLookupTable;                                   // 0x0094(0x0004)
	class UBio2DA*                                     m_oTreasureTable;                                         // 0x0098(0x0004)
	class UBio2DA*                                     m_oTreasureDistribution;                                  // 0x009C(0x0004)
	class UBio2DA*                                     m_oPlotItemTable;                                         // 0x00A0(0x0004)
	class UBio2DA*                                     m_xModType2DA;                                            // 0x00A4(0x0004)
	int                                                m_nMinScalingLevel;                                       // 0x00A8(0x0004) (Const)
	int                                                m_nMaxScalingLevel;                                       // 0x00AC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInventory");
		return ptr;
	}


	float GetMaxMedigel();
	int GetMaxGrenades();
	void Sort();
	void ClearNewItemFlags();
	bool IsPlotItem(class UBioItem* oItem);
	class UClass* STATIC_GetSaveObjectClass();
	void ReadSaveObject(class UBioBaseSaveObject* Save);
	class UBioBaseSaveObject* WriteSaveObject(class UObject* InOuter, class UBioBaseSaveObject* Save);
	bool GrantScaledCredits(int nSize, bool i_bTickResource);
	float GetInventoryResourceFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType);
	void GetAttributeAdjustedAmountFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType, float* fAmt);
	void GetAttributeAdjustedAmountInt(TEnumAsByte<EInventoryResourceTypes> eInvResType, int* nAmt);
	int GetInventoryResourceInt(TEnumAsByte<EInventoryResourceTypes> eInvResType);
	void AdjustInventoryResourceFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType, float fAmt, bool bUseTalentAdjustedResources, bool bTickerResource);
	void AdjustInventoryResourceInt(TEnumAsByte<EInventoryResourceTypes> eInvResType, int nAmt, bool bUseTalentAdjustedResources, bool bTickerResource);
	void Empty();
	bool IsEmpty();
	void TickerResources(class UBioEventNotifier* notifier);
	void TickerItems(class UBioEventNotifier* notifier);
	bool SubsumePlotItems(class UBioInventory* Other, bool bFlagAsNew);
	bool SubsumeResources(class UBioInventory* Other, class UBioEventNotifier* notifier, bool bUseTalentAdjustedResources, bool bFlagAsNew);
	bool SubsumeItems(class UBioInventory* Other, bool bFlagAsNew);
	bool Subsume(class UBioInventory* Other, bool bFlagAsNew);
	void GenerateTreasure(int treasureID, int challengeLevel, bool shouldFilterItemsByConditional);
	class UBioItem* Swap(int nIndex, class UBioItem* pItem);
	float Appraise(int nIndex, TEnumAsByte<EInventoryResourceTypes> eResource);
	class UBioItem* Remove(int nIndex);
	int Add(class UBioItem* Item);
	int GetMaxSophistication();
	int GetMinSophistication();
	struct FString GetStringRepresentation();
};


// Class BIOC_Base.BioInventoryView
// 0x0010 (0x004C - 0x003C)
class UBioInventoryView : public UObject
{
public:
	class ABioPawn*                                    m_pawn;                                                   // 0x003C(0x0004)
	class UBioInventory*                               m_oInventory;                                             // 0x0040(0x0004)
	class UBioEquipment*                               m_oEquipment;                                             // 0x0044(0x0004)
	class UBioItemSelection*                           m_itemSelection;                                          // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInventoryView");
		return ptr;
	}


	void SetShieldRatio(float ratio);
	float GetShieldRatio();
	void ReplaceSelectedItem();
	void RemoveSelectedItem();
	bool IsSelectedItemVolatile();
	class UBioItem* GetSelectedItem();
	bool UninstallXMod(int xModType, int xModIndexInItem);
	bool InstallXMod(int filteredIndex, int xModTypeUsedForFilter);
	bool Drop();
	bool Equip(int filteredIndex, bool bXferXMods);
	bool Unequip();
	bool SetTargetInventory(class UBioInventory* pInv);
	bool SetTargetEquipment(class UBioEquipment* pEqp);
	bool SetTarget(class ABioPawn* pPawn);
	bool ResetTarget();
	bool SelectQuickslotItem(TEnumAsByte<EBioItemWeaponRangedType> eType);
	bool SelectEquipmentItem(TEnumAsByte<EBioEquipmentSlot> eSlot);
	bool SelectInventoryItem(int Index);
	void ExtractXModIndices(int nXModTypeID, TArray<int>* aIndices);
	void ExtractXModIndicesByEquipmentType(TEnumAsByte<EBioEquipmentType> eEquipType, int xModTypeUsedForFilter, TArray<int>* aIndices);
	void ExtractEquippableIndices(TEnumAsByte<EBioEquipmentType> eEquipType, TArray<int>* aEquipIndices);
	void ExtractWeaponIndices(TEnumAsByte<EBioItemWeaponRangedType> eWeaponRangedType, TArray<int>* aEquipIndices);
	void ClearObjectRefs();
};


// Class BIOC_Base.BioInventoryGuiInterface
// 0x0090 (0x00DC - 0x004C)
class UBioInventoryGuiInterface : public UBioInventoryView
{
public:
	float                                              MaxDamagePerSecond;                                       // 0x004C(0x0004) (Config)
	float                                              MaxRange;                                                 // 0x0050(0x0004) (Config)
	float                                              MaxHeatsinkEfficiency;                                    // 0x0054(0x0004) (Config)
	float                                              MaxKickbackEfficiency;                                    // 0x0058(0x0004) (Config)
	float                                              MaxChargeEfficiency;                                      // 0x005C(0x0004) (Config)
	float                                              MaxEffectBoost;                                           // 0x0060(0x0004) (Config)
	float                                              MaxDamageResistance;                                      // 0x0064(0x0004) (Config)
	float                                              MaxShieldStrength;                                        // 0x0068(0x0004) (Config)
	float                                              MaxTechResistance;                                        // 0x006C(0x0004) (Config)
	float                                              MaxGrenadeDamage;                                         // 0x0070(0x0004) (Config)
	float                                              MaxGrenadeImpulse;                                        // 0x0074(0x0004) (Config)
	float                                              MaxGrenadeRadius;                                         // 0x0078(0x0004) (Config)
	unsigned char                                      UnknownData00[0xC];                                       // 0x007C(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioInventoryGuiInterface.lstRacialLabels
	TArray<struct FGuiEquipSlotDetails>                lstSlotDetails;                                           // 0x0088(0x000C) (Config, NeedCtorLink)
	TArray<TEnumAsByte<EGuiEquipSlots>>                lstEquipSlotOrder;                                        // 0x0094(0x000C) (NeedCtorLink)
	TArray<struct FItemInfo>                           EquippableItemsList;                                      // 0x00A0(0x000C) (NeedCtorLink)
	TEnumAsByte<EGuiEquipSlots>                        m_eCurrentSlot;                                           // 0x00AC(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	int                                                m_nInventorySize;                                         // 0x00B0(0x0004)
	unsigned long                                      m_bInventoryChangedSize : 1;                              // 0x00B4(0x0004)
	unsigned long                                      m_shouldSortInventory : 1;                                // 0x00B4(0x0004)
	unsigned long                                      m_bShouldCacheInventoryInfo : 1;                          // 0x00B4(0x0004) (ExportObject, EditInline)
	TArray<struct FResourceInfo>                       ResourcesList;                                            // 0x00B8(0x000C) (NeedCtorLink)
	unsigned long                                      m_bDebugLoggingEnabled : 1;                               // 0x00C4(0x0004) (Transient, Config)
	struct FMultiMap_Mirror                            m_CachedItemInfo;                                         // 0x00C8(0x0014) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInventoryGuiInterface");
		return ptr;
	}


	void BuildEquippableXModList(int nXModSlotType);
	float Appraise(int nIndex, TEnumAsByte<EInventoryResourceTypes> eResource);
	void ConvertItemIntoResource(int nFilteredIndex, TEnumAsByte<EInventoryResourceTypes> eResource);
	void GetStatLabel(TEnumAsByte<EBioInventoryGuiInterfaceItemStat> eStat);
	TEnumAsByte<EGuiEquipSlots> GetPrevEquipSlot(TEnumAsByte<EGuiEquipSlots> eCompareSlot);
	TEnumAsByte<EGuiEquipSlots> GetNextEquipSlot(TEnumAsByte<EGuiEquipSlots> eCompareSlot);
	TEnumAsByte<EGuiEquipSlots> GetFirstEquipSlot();
	bool HasEquipSlot(TEnumAsByte<EGuiEquipSlots> eSlot);
	void DescribeGuiItemStats(const struct FBioInventoryGuiInterfaceItemStats& stats);
	void DescribeGuiItem(const struct FItemInfo& ItemToDescribe);
	void ComplementAndScale(float FMax, float* fValue);
	void Scale(float FMax, float* fValue);
	bool Drop();
	bool Equip(int filteredIndex, bool bXferXMods);
	bool Unequip();
	bool DirectSetTargetInventory(class UBioInventory* pInv);
	bool SetTargetInventory(class UBioInventory* pInv);
	bool DirectSetTarget(class ABioPawn* pPawn);
	bool SetTarget(class ABioPawn* pPawn);
	bool GetEquippedItem(struct FItemInfo* stEquippedItem);
	void SelectItemSlot(TEnumAsByte<EGuiEquipSlots> eSlot);
	void MapSlotToType(TEnumAsByte<EGuiEquipSlots> eSlot, int* nWeapon, int* nEquipment);
	void ItemStatValue(class UBioItem* oItem, TEnumAsByte<EGuiItemStatTypes> eItemStatType, struct FBioInventoryGuiInterfaceItemStat* Stat);
	int Round(float F);
	bool CanBearArmorWeight(class ABioPawn* oPawn, class UBioItemArmor* oArmor);
	void PrepareSlotList(TEnumAsByte<EGuiEquipSlots> Slot, TArray<TEnumAsByte<EGuiEquipSlots>>* slotList);
	void BuildResourcesList();
	void BuildEquippableItemList();
	void BuildResourceInfo(TEnumAsByte<EInventoryResourceTypes> eResource, float fQty, struct FResourceInfo* oResourceInfo);
	bool IsMerchandisable(TEnumAsByte<EGuiEquipSlots> eItemsSlot);
	struct FXModInfo CreateXModInfo(class UBioItemXMod* oItem, int nXModType);
	struct FItemInfo CreateItemInfo(class UBioItem* oItem, TEnumAsByte<EGuiEquipSlots> slotType, int nOverrideIndex);
	void FullReset();
	void ClearCachedItemInfo();
	void CacheItemInfo(class UBioItem* oItem, struct FItemInfo* rItemInfo);
	bool FindCachedItemInfo(class UBioItem* oItem, TEnumAsByte<EGuiEquipSlots> slotType, struct FItemInfo* rItemInfo);
	struct FBioInventoryGuiInterfaceItemStats ExtractRawItemStats(class UBioItemSophisticated* oItem, TEnumAsByte<EGuiItemStatTypes> ePrimaryStatType, TEnumAsByte<EGuiItemStatTypes> eSecondaryStatType, TEnumAsByte<EGuiItemStatTypes> eTertiaryStatType);
	void GetStatTypes(TEnumAsByte<EGuiEquipSlots> eSlot, TEnumAsByte<EGuiItemStatTypes>* ePrimaryStatType, TEnumAsByte<EGuiItemStatTypes>* eSecondaryStatType, TEnumAsByte<EGuiItemStatTypes>* eTertiaryStatType);
	void FilterEquippableItemsByPlotConditional(class ABioWorldInfo* WorldInfo);
	void SortEquippableItems(int nSortMode);
};


// Class BIOC_Base.BioInventoryViewConsole
// 0x0000 (0x004C - 0x004C)
class UBioInventoryViewConsole : public UBioInventoryView
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInventoryViewConsole");
		return ptr;
	}

};


// Class BIOC_Base.BioMountFallVolume
// 0x0004 (0x0230 - 0x022C)
class ABioMountFallVolume : public AVolume
{
public:
	unsigned long                                      Enabled : 1;                                              // 0x022C(0x0004) (Edit)
	unsigned long                                      AllowMount : 1;                                           // 0x022C(0x0004) (Edit)
	unsigned long                                      AllowFall : 1;                                            // 0x022C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMountFallVolume");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class BIOC_Base.BioTrigger
// 0x0004 (0x0200 - 0x01FC)
class ABioTrigger : public ATrigger
{
public:
	unsigned long                                      Enabled : 1;                                              // 0x01FC(0x0004) (Edit)
	unsigned long                                      OneShot : 1;                                              // 0x01FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTrigger");
		return ptr;
	}


	void BioBeginPlay();
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class BIOC_Base.BioEventNotifier
// 0x0068 (0x00A4 - 0x003C)
class UBioEventNotifier : public UObject
{
public:
	TArray<struct FBioDisplayNotice>                   m_lstNotices;                                             // 0x003C(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      m_bNoticesNotarized : 1;                                  // 0x0048(0x0004) (Transient)
	unsigned long                                      m_bEnabled : 1;                                           // 0x0048(0x0004) (Transient)
	unsigned long                                      m_bTalentNoticeReady : 1;                                 // 0x0048(0x0004) (Transient)
	unsigned long                                      m_bHUDAcknowledgedTalentNotify : 1;                       // 0x0048(0x0004) (Transient)
	TArray<struct FBioTalentNotice>                    m_lstTalentNotices;                                       // 0x004C(0x000C) (Transient, NeedCtorLink)
	class UBioSFHandler_MessageBox*                    m_oTalentNotifyBoxHandler;                                // 0x0058(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srTalentOk
	unsigned char                                      UnknownData01[0x4];                                       // 0x0060(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srTalentSkipRemainder
	unsigned char                                      UnknownData02[0x4];                                       // 0x0064(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srLevelUp
	unsigned char                                      UnknownData03[0x4];                                       // 0x0068(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srQuestAdded
	unsigned char                                      UnknownData04[0x4];                                       // 0x006C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srQuestUpdated
	unsigned char                                      UnknownData05[0x4];                                       // 0x0070(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srQuestCompleted
	unsigned char                                      UnknownData06[0x4];                                       // 0x0074(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srCodexEntry
	unsigned char                                      UnknownData07[0x4];                                       // 0x0078(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srParagonReceived
	unsigned char                                      UnknownData08[0x4];                                       // 0x007C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srRenegadeReceived
	unsigned char                                      UnknownData09[0x4];                                       // 0x0080(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srMedigel
	unsigned char                                      UnknownData10[0x4];                                       // 0x0084(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srSalvage
	unsigned char                                      UnknownData11[0x4];                                       // 0x0088(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srMap
	unsigned char                                      UnknownData12[0x4];                                       // 0x008C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srAbility
	unsigned char                                      UnknownData13[0x4];                                       // 0x0090(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEventNotifier.srHonor
	int                                                nParagonPlotVar;                                          // 0x0094(0x0004) (Config)
	int                                                nRenegadePlotVar;                                         // 0x0098(0x0004) (Config)
	float                                              fPassivePopupDisplayTime;                                 // 0x009C(0x0004) (Config)
	class UBio2DA*                                     oPlotIntTalent2DA;                                        // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEventNotifier");
		return ptr;
	}


	void RemoveTalentNotify(class ABioPawn* oCharacter);
	void OnTalentNoticeInput(bool bAPressed, int nContext);
	bool PendingTalentNotify(class ABioPawn* oCharacter);
	void ShowTalentNotify(class ABioPawn* oCharacter);
	void AddNotice(int nType, int nContext, int nTimeToLive, int nIconIndex, const struct FString& strTitle, int nQuantity, int nQuantMin, int nQuantMax);
	void NotarizeNotices();
	void HasListChanged();
	void RetrieveNotices(TArray<struct FBioDisplayNotice>* lstNotices);
};


// Class BIOC_Base.BioWorldInfo
// 0x03A4 (0x07F8 - 0x0454)
class ABioWorldInfo : public AWorldInfo
{
public:
	int                                                WindEnableFake;                                           // 0x0454(0x0004) (Config)
	float                                              WindGustChance;                                           // 0x0458(0x0004) (Config)
	int                                                WindBase;                                                 // 0x045C(0x0004) (Config)
	int                                                WindMax;                                                  // 0x0460(0x0004) (Config)
	float                                              WindShortestGustTime;                                     // 0x0464(0x0004) (Config)
	float                                              WindLongestGustTime;                                      // 0x0468(0x0004) (Config)
	int                                                WindBaseYaw;                                              // 0x046C(0x0004) (Config)
	float                                              m_fFakeWindGustTime;                                      // 0x0470(0x0004)
	float                                              m_fFakeWindGustCalcTime;                                  // 0x0474(0x0004)
	float                                              m_fFakeWindCurGustLength;                                 // 0x0478(0x0004)
	float                                              m_fFakeWindMag;                                           // 0x047C(0x0004)
	int                                                m_nWindYaw;                                               // 0x0480(0x0004)
	float                                              m_nWindGrowthA;                                           // 0x0484(0x0004)
	float                                              m_nWindGrowthB;                                           // 0x0488(0x0004)
	class ABioPlayerSquad*                             m_playerSquad;                                            // 0x048C(0x0004) (Transient)
	unsigned long                                      m_bAllowTreasureLogging : 1;                              // 0x0490(0x0004) (Const, Config)
	unsigned long                                      m_bBuildLongPathsForMap : 1;                              // 0x0490(0x0004) (Edit)
	unsigned long                                      m_bFlushSFHud : 1;                                        // 0x0490(0x0004)
	unsigned long                                      m_bDebugCameras : 1;                                      // 0x0490(0x0004) (Config)
	unsigned long                                      m_bPartyMembersImmuneToExternalForce : 1;                 // 0x0490(0x0004) (Config)
	unsigned long                                      m_bSetGameSpeed : 1;                                      // 0x0490(0x0004)
	unsigned long                                      m_bForceDisableTutorials : 1;                             // 0x0490(0x0004) (Config)
	unsigned long                                      m_bShowVinceSurveys : 1;                                  // 0x0490(0x0004) (Config)
	unsigned long                                      m_bParse : 1;                                             // 0x0490(0x0004)
	class UBioSaveGame*                                CurrentGame;                                              // 0x0494(0x0004) (Transient)
	unsigned long                                      bDesignerSaysNoSave : 1;                                  // 0x0498(0x0004) (Transient)
	unsigned long                                      bSystemNoSave : 1;                                        // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bJournalShowingMissions : 1;                            // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bCodexShowingPrimary : 1;                               // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bCinematicSkip : 1;                                     // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bDisableCinematicSkip : 1;                              // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bForceCinematicDamage : 1;                              // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bAdvancedDifficultyScaling : 1;                         // 0x0498(0x0004) (Transient, Config)
	unsigned long                                      m_bCauseUnscaledDamage : 1;                               // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bShowAlignmentGains : 1;                                // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bWaitingForStreamingLoadIdle : 1;                       // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bWaitingForStreamingLoadVisibleComplete : 1;            // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bHasPlayerTeleported : 1;                               // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bMessageBoxTutorialVisible : 1;                         // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bPreTutorialMoviePausedState : 1;                       // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bLastSaveCreatorInvalid : 1;                            // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bLastProfileCreatorInvalid : 1;                         // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bGameWasPaused : 1;                                     // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bRequestPlayersOnlyOn : 1;                              // 0x0498(0x0004) (Transient)
	unsigned long                                      m_bRequestPlayersOnlyOff : 1;                             // 0x0498(0x0004) (Transient)
	int                                                nNoSaveVolumeCount;                                       // 0x049C(0x0004) (Transient)
	class AActor*                                      oPlayerSavePosOverride;                                   // 0x04A0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04A4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfo.srNoSaveReason
	unsigned char                                      UnknownData01[0xC];                                       // 0x04A8(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioWorldInfo.lstNoSaveVolumeReasons
	unsigned char                                      UnknownData02[0x4];                                       // 0x04B4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfo.srDefaultNoSaveReason
	unsigned char                                      UnknownData03[0x4];                                       // 0x04B8(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfo.srNoSaveInCombat
	unsigned char                                      UnknownData04[0x4];                                       // 0x04BC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfo.srNoSaveWhenVehicleBadPlace
	TArray<struct FString>                             GlobalTlkFiles;                                           // 0x04C0(0x000C) (Config, NeedCtorLink)
	TArray<class UBioTlkFile*>                         lstMaleTlkFiles;                                          // 0x04CC(0x000C) (Transient, NeedCtorLink)
	TArray<class UBioTlkFile*>                         lstFemaleTlkFiles;                                        // 0x04D8(0x000C) (Transient, NeedCtorLink)
	TArray<class UClass*>                              lstOverlapToTouchClasses;                                 // 0x04E4(0x000C) (NeedCtorLink)
	class UBioTimerList*                               TimerList;                                                // 0x04F0(0x0004)
	class UBioGlobalVariableTable*                     m_oGlobalVariables;                                       // 0x04F4(0x0004) (Transient)
	class UBioQuestProgressionMap*                     m_oQuestProgress;                                         // 0x04F8(0x0004) (Transient)
	class UBioDiscoveredCodexMap*                      m_oDiscoveredCodex;                                       // 0x04FC(0x0004) (Transient)
	TEnumAsByte<EJournalSortMethods>                   m_nJournalSortMethod;                                     // 0x0500(0x0001) (Transient)
	TEnumAsByte<EBioBrowserStates>                     m_lstBrowserAlerts[0x8];                                  // 0x0501(0x0001) (Transient)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0509(0x0003) MISSED OFFSET
	int                                                m_nJournalLastSelectedMission;                            // 0x050C(0x0004) (Transient)
	int                                                m_nJournalLastSelectedAssignment;                         // 0x0510(0x0004) (Transient)
	int                                                m_nCodexLastSelectedPrimary;                              // 0x0514(0x0004) (Transient)
	int                                                m_nCodexLastSelectedSecondary;                            // 0x0518(0x0004) (Transient)
	class UBioConversation*                            m_oCurrentConversation;                                   // 0x051C(0x0004) (Transient)
	float                                              m_fNoBrowserWheelTimer;                                   // 0x0520(0x0004) (Transient)
	class UBioSeqAct_FaceOnlyVO*                       m_pCurrentFaceOnlyVO;                                     // 0x0524(0x0004) (Transient)
	class ABioCameraManager*                           CameraManager;                                            // 0x0528(0x0004) (Transient)
	class UBioEventNotifier*                           EventNotifier;                                            // 0x052C(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	class ABioPlayerController*                        LocalPlayerController;                                    // 0x0530(0x0004)
	class UBioInventory*                               m_oPendingLoot;                                           // 0x0534(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioInventory*                               m_oMomentaryLoot;                                         // 0x0538(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	TArray<class UBioItem*>                            m_buybackItemArray;                                       // 0x053C(0x000C) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_buybackArrayMaxSize;                                    // 0x0548(0x0004) (Config)
	struct FString                                     m_lootBagActorType;                                       // 0x054C(0x000C) (Config, NeedCtorLink)
	struct FName                                       m_lootBagTag;                                             // 0x0558(0x0008)
	TEnumAsByte<EBioLevelTypeObjectType>               m_LevelType;                                              // 0x0560(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0561(0x0003) MISSED OFFSET
	class UBioSubtitles*                               m_Subtitles;                                              // 0x0564(0x0004)
	struct FString                                     m_sFriendlyName;                                          // 0x0568(0x000C) (Edit, NeedCtorLink)
	class UBioSWF*                                     m_oAreaMap;                                               // 0x0574(0x0004) (Edit)
	class UBioSWF*                                     m_oParentAreaMap;                                         // 0x0578(0x0004) (Edit)
	struct FString                                     m_sCinematicSkipEvent;                                    // 0x057C(0x000C) (Transient, NeedCtorLink)
	float                                              m_fCinematicStartTime;                                    // 0x0588(0x0004) (Transient)
	int                                                m_nMiniGameID;                                            // 0x058C(0x0004) (Transient)
	int                                                m_nScalePawnsToCharacterLevel;                            // 0x0590(0x0004) (Config)
	float                                              m_fConversationInterruptDistance;                         // 0x0594(0x0004) (Config)
	float                                              m_fIdleCameraSpeed;                                       // 0x0598(0x0004) (Config)
	float                                              m_fNoSkipBuffer;                                          // 0x059C(0x0004) (Transient, Config)
	TArray<float>                                      m_fLookAtDelays;                                          // 0x05A0(0x000C) (Transient, Config, NeedCtorLink)
	float                                              m_fLookAtNoticeMaxRange;                                  // 0x05AC(0x0004) (Transient, Config)
	float                                              m_fLookAtNoticeInitialDelay;                              // 0x05B0(0x0004) (Transient, Config)
	float                                              m_fLookAtNoticeDuration;                                  // 0x05B4(0x0004) (Transient, Config)
	float                                              m_fLookAtNoticeSpeed;                                     // 0x05B8(0x0004) (Transient, Config)
	int                                                m_nCurrentTipID;                                          // 0x05BC(0x0004)
	unsigned char                                      UnknownData07[0x4];                                       // 0x05C0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfo.m_OverrideTip
	unsigned char                                      UnknownData08[0x4];                                       // 0x05C4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfo.m_srProfileNotSignedInWarningMsg
	TArray<struct FSlowMotionRequestType>              m_SlowMotionQ;                                            // 0x05C8(0x000C) (NeedCtorLink)
	int                                                m_nSlowMotionState;                                       // 0x05D4(0x0004)
	float                                              m_fCurrentSlomo;                                          // 0x05D8(0x0004)
	float                                              m_fInterpStepSize;                                        // 0x05DC(0x0004)
	int                                                m_nNextAssignableID;                                      // 0x05E0(0x0004)
	class ABioBaseSquad*                               m_oDefaultSquad;                                          // 0x05E4(0x0004)
	class ABioBaseSquad*                               m_oPlayerSquad;                                           // 0x05E8(0x0004)
	class ABioArtPlaceable*                            ArtPlaceableList;                                         // 0x05EC(0x0004) (Const)
	TArray<struct FWorldStreamingState>                m_WorldStreamingStates;                                   // 0x05F0(0x000C) (Edit, NeedCtorLink)
	class UBioInGamePropertyEditor*                    m_oPropertyEditor;                                        // 0x05FC(0x0004)
	unsigned char                                      UnknownData09[0x14];                                      // 0x0600(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.BioWorldInfo.m_mVFXPool
	float                                              m_fPlayerTeleportTimeSeconds;                             // 0x0614(0x0004) (Transient)
	TArray<struct FVFXTemplatePoolSizeSpec>            m_VFXTemplatePoolSizeOverride;                            // 0x0618(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              m_fMaxVFXBudget;                                          // 0x0624(0x0004) (Config)
	float                                              m_fUsedVFXBudget;                                         // 0x0628(0x0004)
	TArray<struct FVFXListNode>                        m_BoughtVFXList;                                          // 0x062C(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData10[0x14];                                      // 0x0638(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.BioWorldInfo.m_BoughtVFXMap
	struct FBoughtVFXListEnds                          m_aBoughtEffects[0x5];                                    // 0x064C(0x0008) (Const, Native, Transient)
	struct FWorldEnvironmentEffect                     m_ActiveEnvironmentEffect;                                // 0x0674(0x0028)
	struct FWorldEnvironmentEffect                     m_PendingEnvironmentEffect;                               // 0x069C(0x0028)
	class UBioPhysicsSounds*                           m_PhysicsSound;                                           // 0x06C4(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	TArray<struct FString>                             lstStateEventMapNames;                                    // 0x06C8(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             lstConsequenceMapNames;                                   // 0x06D4(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             lstOutcomeMapNames;                                       // 0x06E0(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             lstQuestMapNames;                                         // 0x06EC(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             lstCodexMapNames;                                         // 0x06F8(0x000C) (Config, NeedCtorLink)
	TArray<class UBioStateEventMap*>                   lstStateEventMaps;                                        // 0x0704(0x000C) (NeedCtorLink)
	TArray<class UBioStateEventMap*>                   lstConsequenceMaps;                                       // 0x0710(0x000C) (NeedCtorLink)
	TArray<class UBioOutcomeMap*>                      lstOutcomeMaps;                                           // 0x071C(0x000C) (NeedCtorLink)
	TArray<class UBioQuestMap*>                        lstQuestMaps;                                             // 0x0728(0x000C) (NeedCtorLink)
	TArray<class UBioCodexMap*>                        lstCodexMaps;                                             // 0x0734(0x000C) (NeedCtorLink)
	class UBio2DA*                                     oTutorials2DA;                                            // 0x0740(0x0004)
	struct FString                                     m_sActiveTutorialMovie;                                   // 0x0744(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0750(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfo.srTutorialOK
	TArray<struct FString>                             m_lstCinematicsSeen;                                      // 0x0754(0x000C) (Edit, NeedCtorLink)
	struct FString                                     m_sDestinationAreaMap;                                    // 0x0760(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     m_vDestination;                                           // 0x076C(0x000C) (Edit)
	TArray<int>                                        m_pScannedClusters;                                       // 0x0778(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        m_pScannedSystems;                                        // 0x0784(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        m_pScannedPlanets;                                        // 0x0790(0x000C) (Edit, NeedCtorLink)
	TArray<class UBioPawnBehavior*>                    m_oResetBehaviors;                                        // 0x079C(0x000C) (Transient, NeedCtorLink)
	TArray<class UBioActorBehavior*>                   m_aOrphanedBehaviors;                                     // 0x07A8(0x000C) (Transient, NeedCtorLink)
	class UBioUIWorld*                                 m_UIWorld;                                                // 0x07B4(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UBioSkillGame_Handler*                       SkillGameHandler;                                         // 0x07B8(0x0004)
	class UBioSkillGame*                               m_SkillGame;                                              // 0x07BC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              m_fGameOverPauseTime;                                     // 0x07C0(0x0004) (Const, Config)
	class UBioPowerManager*                            m_oPowerManager;                                          // 0x07C4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UAudioComponent*                             m_pEndGameMusic;                                          // 0x07C8(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   m_pEndGameMusicSoundCue;                                  // 0x07CC(0x0004) (Const)
	int                                                bForceFullGarbageCollection;                              // 0x07D0(0x0004) (Transient)
	int                                                m_nDesignerEnableTutorialPlotFlag;                        // 0x07D4(0x0004) (Transient, Config)
	int                                                m_nDesignerEnableDifficultyChecksPlotFlag;                // 0x07D8(0x0004) (Transient, Config)
	TArray<class ABioMusicVolume*>                     BioRegisteredMusic;                                       // 0x07DC(0x000C) (Transient, NeedCtorLink)
	float                                              m_fLoaded;                                                // 0x07E8(0x0004) (Transient)
	struct FScriptDelegate                             __TutorialCompletionCallback__Delegate;                   // 0x07EC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWorldInfo");
		return ptr;
	}


	void StartNoBrowserWheelTimer();
	bool SaveGamesExist();
	void HandleSkillGameButtonPress(int nButtonPressed);
	void UpdateLowestCombatDifficulty();
	void BioStartMatch();
	class UClass* STATIC_GetSaveObjectClass();
	void OnPlayerSquadDeath();
	void EndGame();
	void OnSaveGameNotFound(class UObject* oDelegateObject, const struct FName& nmDelegateFunctionName);
	void GetGlobalEvents(class UClass* EventClass, TArray<class USequenceObject*>* aEvents);
	void SetSoundGroupPitch(const struct FName& SoundGroupName, float fPitch);
	float GetSoundGroupPitch(const struct FName& SoundGroupName);
	void SetSoundGroupPriority(const struct FName& SoundGroupName, float fPriority);
	float GetSoundGroupPriority(const struct FName& SoundGroupName);
	void SetSoundGroupVolume(const struct FName& SoundGroupName, float fVolume, float fFadeDuration);
	float GetSoundGroupVolume(const struct FName& SoundGroupName);
	bool GetIsOriginalFileCreator();
	void SetInvalidSaveFileCreator(unsigned char nSaveFileType, bool bInvalid);
	void SetDisplayRealSaveGameNames(bool i_bValue);
	bool GetDisplayRealSaveGameNames();
	void SetGuiStartupSystemsInitialized(bool i_bValue);
	bool GetGuiStartupSystemsInitialized();
	void SetRenderStateOfPlayerToDefault(TEnumAsByte<EPlayerRenderStateSetting> RenderState);
	void SetRenderStateOfPlayer(TEnumAsByte<EPlayerRenderStateSetting> RenderState, float fValue);
	float GetRenderStateOfPlayer(TEnumAsByte<EPlayerRenderStateSetting> RenderState);
	void UpdateEnvironmentEffects(float fDeltaT);
	void UpdateSubtitles(float fDeltaT);
	class UBioSubtitles* GetSubtitles();
	void ApplyWind(float fDeltaT);
	void AdjustWind(float fDeltaT);
	void DoFakeWind(float fDeltaT);
	void PrintSlowMotionQ();
	void ClearAllSlowMotion();
	bool EndSlowMoRequest(int nReqID, float fExpireTime);
	int RequestSlowMotion(float fSpeed, float fLifeTime, int nPriority);
	void UpdateSlowMotionQ(float fDeltaTime);
	void SetGlobalTlk(bool bMale, bool bPurge);
	void LoadDLCTlkFiles(bool bMale, bool bFemale, bool bAddMale, bool bAddFemale);
	void LoadTlkFiles(bool bMale, bool bFemale, bool bAddMale, bool bAddFemale);
	void BioBeginPlay();
	bool IsAbleToSave(struct FString* sReason);
	bool CheckState(int nState);
	class ABioCameraManager* GetCameraManager();
	void InterruptConversation(class UBioConversation* oConv);
	void UpdateConversation(float fDeltaT);
	void EndCurrentFaceOnlyVO(class UBioSeqAct_FaceOnlyVO* pFOVO);
	void EndCurrentConversation();
	bool StartConversation(class UBioConversation* oConv, class AActor* Owner_, class AActor* Target);
	class UBioConversation* GetConversation();
	void ClearCurrentGame(bool bRestorGamerProfilePlotManagerVariables);
	class UBioGlobalVariableTable* GetGlobalVariables();
	class UBioGamerProfile* GetBioGamerProfile();
	void DownloadableContentMessageBox();
	void InitDownloadableContent();
	void InitGUIDependentStartupSystems(class UBioSFPanel* i_oPanel);
	void Tick(float fDeltaT);
	void UpdateTutorialMovie();
	bool LootBagActivated();
	bool CreateLootBag(class ULevel* spawnLevel, const struct FString& actorTypeString, struct FVector* SpawnLocation);
	class ABioPlayerController* GetLocalPlayerController();
	void TutorialCompletionCallback();
	void BioVINCE_MapName_PlayerDeath();
	void PlayEndGameMusic();
	void OnBioMatchStart();
	void HandleMessageBoxLoadingDownloadableContent(bool bAPressed, int nContext);
	void HandleMessageBoxCheckContentOnMemoryCard(bool bAPressed, int nContext);
	void HandleMessageBoxCheckForCorruptPackages(bool bAPressed, int nContext);
	class UBioCharacterImporter* STATIC_GetCharacterImporter();
	void UpdateVFXPools(float fDeltaT);
	void UpdateVFXStats(float fDeltaT);
	bool CheckResetBehavior(class UBioPawnBehavior* pBehavior);
	void ClearResetBehaviors();
	void OverrideVFXPoolSize(class UBioVFXTemplate* a_pEffect, int a_nMaxPoolSize, int a_nMinPoolSize);
	void GetDefaultVFXPoolSize(class UBioVFXTemplate* a_pEffect, int* a_rnMaxPoolSize, int* a_rnMinPoolSize);
	class UBioVisualEffectPool* GetVFXPool(class UBioVFXTemplate* pEffect);
	void OnGameLoaded();
	void InitializeForPlay();
	struct FString GetDetailedVersionString();
	struct FString GetEpicVersionString();
	struct FString GetVersionString();
	void MoveToArea(const struct FName& sAreaName, const struct FName& sNextAreaStartPoint);
	void AllBioActors(const struct FName& MatchTag, class AActor** Actor);
	bool GetLocalBoolVariable(TEnumAsByte<EBioLocalVariableObjectType> eObjectType, const struct FName& GetFunctionName, const struct FName& sTag, int nParam);
	float GetLocalFloatVariable(TEnumAsByte<EBioLocalVariableObjectType> eObjectType, const struct FName& GetFunctionName, const struct FName& sTag, int nParam);
	int GetLocalIntegerVariable(TEnumAsByte<EBioLocalVariableObjectType> eObjectType, const struct FName& GetFunctionName, const struct FName& sTag, int nParam);
	void ExecuteConsequence(int nConsequence, int nParam);
	void ExecuteStateTransition(int nTransition, int nParam);
	bool CheckConditional(int nConditional, int nParam);
	void CauseEvent(const struct FName& EventName);
	void TutorialDismissed(bool bAButtonPressed, int nContext);
	bool GetGuiInputPermission(unsigned char nEvent);
	void CancelTutorial(bool bFadeOut, const struct FName& nmTutorial);
	void ClearTutorialsViewed();
	bool IsTutorialRunning(const struct FName& nmTutorial);
	bool GetTutorialViewed(const struct FName& nmTutorial);
	void SetTutorialViewed(const struct FName& nmTutorial, bool bSetViewed);
	bool ShowTutorialMessageBox(class UObject* pCallbackObject, const struct FName& nmCallbackFunction);
	bool ShowTutorial(const struct FName& nmTutorial, bool bSetViewed, class UObject* oCallbackObject, const struct FName& oCallbackFunction, bool i_bIgnoreDesignerSuppression);
	void SetHasShownPRCMessage(bool i_bValue);
	bool GetHasShownPRCMessage();
	bool GetChallengeLevel(int* challengeLevel);
	float GetBuybackItemPriceAtIndex(int Index);
	class UBioItem* RemoveBuybackItem(int Index);
	void AppendBuybackItemsToInventory(class UBioInventory** Inventory);
	void AddBuybackItem(class UBioItem* Item);
	void SetDebugSave(int nSet);
	void BioDeleteGame(int nSaveGameSlot);
	void BioLoadGame(int nSaveGameSlot);
	void BioSaveGame(int nSaveGameSlot, const struct FName& sArea, bool bStartFromCurrentPosition, const struct FName& sNextAreaStartPoint);
	void OnNewGameStartRequest();
	bool TriggerCinematicSkippedEvent();
};


// Class BIOC_Base.BioPartyInfo
// 0x000C (0x0048 - 0x003C)
class UBioPartyInfo : public UObject
{
public:
	int                                                m_nCredits;                                               // 0x003C(0x0004) (Edit, Config)
	float                                              m_fMediGel;                                               // 0x0040(0x0004) (Edit, Config)
	float                                              m_fBlackSand;                                             // 0x0044(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPartyInfo");
		return ptr;
	}

};


// Class BIOC_Base.BioSPGame
// 0x0018 (0x0328 - 0x0310)
class ABioSPGame : public AGameInfo
{
public:
	class UAudioComponent*                             m_oLogoMovieAudioComponent;                               // 0x0310(0x0004) (ExportObject, Transient, Component, EditInline)
	class UBioPlayerInput*                             m_oPlayerInput;                                           // 0x0314(0x0004) (Transient)
	class UTextureMovie*                               m_oTextureMovie;                                          // 0x0318(0x0004)
	int                                                EnableCombatLogging;                                      // 0x031C(0x0004) (Config)
	int                                                EnableDamage;                                             // 0x0320(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0324(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSPGame.srGameOverString

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSPGame");
		return ptr;
	}


	void SpawnGameOverGUI();
	void AdjustHeightOfPawnSpawnedAtNavigationPoint(class APawn* Pawn, class ANavigationPoint* SpawnPoint);
	class ABioPawn* SpawnPawn(const struct FString& actorType, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	class ABioPawn* SpawnHenchman(const struct FName& pawnTag, class AActor* Player, float backOffset, float sideOffset, bool spawnLeft);
	class ABioPawn* SpawnPlayer(class ABioPlayerController* PlayerController, class ANavigationPoint* playerSpawnPoint);
	class APawn* SpawnPlayerSquadMembers(class ABioPlayerController* PlayerController, class ANavigationPoint* SpawnPoint);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* SpawnPoint);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	bool PreventDeath(class APawn* Killed_, class AController* Killer_, class UClass* DamageType, const struct FVector& HitLocation);
	void Reset();
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	class ANavigationPoint* FindStartingNavPoint(const struct FName& nmStartPoint);
	void OnMovieFinished(class UTextureMovie* TextureMovie);
	void PostLogin(class APlayerController* NewPlayer);
	void PreloadPackage(const struct FString& actorType);
	void CalculateHenchmanSpawn(class AActor* Player, float backOffset, float sideOffset, bool spawnLeft, struct FVector* SpawnPoint, struct FRotator* SpawnRotation);
	void SetupPartyMemberAttributes(class UBioPawnBehavior* Behavior, class UClass* attributesClass);
	void ChallengeScalePersistentLevelPawns();
	void ExtractLogoMovieSettings(int* nShouldPlay, int* nIsInterruptable);
};


// Class BIOC_Base.BioSoundNode_Base
// 0x0000 (0x0064 - 0x0064)
class UBioSoundNode_Base : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSoundNode_Base");
		return ptr;
	}

};


// Class BIOC_Base.BioSoundNodeAPActivity
// 0x0010 (0x0074 - 0x0064)
class UBioSoundNodeAPActivity : public UBioSoundNode_Base
{
public:
	TArray<struct FAPActivityEntry>                    m_nmSoundInputName;                                       // 0x0064(0x000C) (Edit, NeedCtorLink)
	float                                              m_fFadeTime;                                              // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSoundNodeAPActivity");
		return ptr;
	}

};


// Class BIOC_Base.BioSoundNodeAPState
// 0x0014 (0x0078 - 0x0064)
class UBioSoundNodeAPState : public UBioSoundNode_Base
{
public:
	TArray<struct FName>                               m_nmSoundInputName;                                       // 0x0064(0x000C) (NeedCtorLink)
	unsigned long                                      m_bLooping : 1;                                           // 0x0070(0x0004) (Edit)
	float                                              m_fCrossFadeTime;                                         // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSoundNodeAPState");
		return ptr;
	}

};


// Class BIOC_Base.BioSoundNodeAPTransition
// 0x000C (0x0070 - 0x0064)
class UBioSoundNodeAPTransition : public UBioSoundNode_Base
{
public:
	TArray<struct FTransitionData>                     m_oSoundInputs;                                           // 0x0064(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSoundNodeAPTransition");
		return ptr;
	}

};


// Class BIOC_Base.BioSoundNodeFootsteps
// 0x0010 (0x0074 - 0x0064)
class UBioSoundNodeFootsteps : public UBioSoundNode_Base
{
public:
	TArray<struct FFootstepData>                       m_nmFootData;                                             // 0x0064(0x000C) (NeedCtorLink)
	int                                                m_nFeet;                                                  // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSoundNodeFootsteps");
		return ptr;
	}

};


// Class BIOC_Base.BioTalent
// 0x0018 (0x005C - 0x0044)
class UBioTalent : public UBioBaseComponent
{
public:
	int                                                m_MAX_TALENT_RANK;                                        // 0x0044(0x0004) (Const, Config)
	int                                                m_nID;                                                    // 0x0048(0x0004)
	int                                                m_nRank;                                                  // 0x004C(0x0004)
	TArray<class UBioGameProperty*>                    m_aGameProperties;                                        // 0x0050(0x000C) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTalent");
		return ptr;
	}


	void AddGameProperty(class UBioGameProperty* GameProperty);
	void ScaleToRank(int Rank);
	void Unapply(class UObject* Target);
	void Apply(class UObject* Target);
	int GetRank();
	int GetID();
	void Initialize(int Id, int StartingRank);
};


// Class BIOC_Base.BioTalentContainer
// 0x003C (0x0080 - 0x0044)
class UBioTalentContainer : public UBioBaseComponent
{
public:
	int                                                m_PASSIVE_RANK_ICON;                                      // 0x0044(0x0004) (Const, Config)
	int                                                m_LOCKED_RANK_ICON;                                       // 0x0048(0x0004) (Const, Config)
	int                                                m_UNLOCKED_RANK_ICON;                                     // 0x004C(0x0004) (Const, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0050(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioTalentContainer.srPluralUnlockRequirement
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioTalentContainer.srSingularUnlockRequirement
	unsigned char                                      UnknownData02[0x4];                                       // 0x0058(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioTalentContainer.srRequiredUnlockRequirement
	TArray<struct FBioTalentSpecification>             m_TalentSpecArray;                                        // 0x005C(0x000C) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UBioTalent*>                          m_SimpleTalentArray;                                      // 0x0068(0x000C) (ExportObject, NeedCtorLink, EditInline)
	class ABioPawn*                                    m_Target;                                                 // 0x0074(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      m_IsLevelUpInProgress : 1;                                // 0x0078(0x0004)
	int                                                m_TalentPointsSpent;                                      // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTalentContainer");
		return ptr;
	}


	int GetNumberOfTalentPointsSpent();
	void ReloadTalentContainer(class UBioPawnBehavior* targetBehavior, TArray<struct FBioSimpleTalentSave>* simpleTalents, TArray<struct FBioComplexTalentSave>* complexTalents);
	void GetTalentSaveData(TArray<struct FBioSimpleTalentSave>* simpleTalents, TArray<struct FBioComplexTalentSave>* complexTalents);
	bool GetTalentRank(int TalentID, int* talentRank);
	bool GetTalentDebugData(TArray<struct FBioTalentDebugData>* dataArray, int* simpleTalentStartIndex);
	bool CanDecrementLevelUpRank(int talentIndex);
	bool CanIncrementLevelUpRank(int talentIndex);
	bool DecrementLevelUpRank(int talentIndex);
	bool IncrementLevelUpRank(int talentIndex);
	bool GetTalentLevelUpRank(int talentIndex, int* talentRank);
	bool GetTalentLevelUpIndex(int TalentID, int* talentIndex);
	bool GetDynamicLevelUpTalentData(int talentIndex, struct FBioTalentDynamicData* Data);
	bool GetStaticLevelUpTalentData(TArray<struct FBioTalentStaticData>* dataArray);
	bool GetNumLevelUpPoints(int* numPoints, int* pointsSpent);
	bool GetNumLevelUpTalents(int* numTalents);
	bool ClearLevelUp();
	bool ApplyLevelUp();
	bool InitializeLevelUp();
	void AddPrerequisiteTalent(int TalentID, int prereqID, int prereqRank);
	void ScaleTalentByIncrement(int Id, int rankIncrement);
	void ScaleTalentToRank(int Id, int Rank);
	bool IncreaseTalentMaxRankByIncrement(int Id, int MaxRankIncrement);
	bool IncreaseTalentMaxRank(int Id, int MaxRank);
	class UBioTalent* RemoveTalent(int Id);
	void AddSimpleTalent(class UBioTalent* Talent);
	bool AddSpecialization(int bonusIdentification, int ReplaceTalentID);
	bool AddBonusTalents(int bonusIdentifier);
	void AddTalent(class UBioTalent* Talent, int MaxRank, int LevelOffset, int LevelsPerRank, int VisualOrder);
	void SetTarget(class ABioPawn* Target);
};


// Class BIOC_Base.BioTalentImporter
// 0x001C (0x0060 - 0x0044)
class UBioTalentImporter : public UBioBaseComponent
{
public:
	class UBio2DA*                                     m_aTalent2DA[0x6];                                        // 0x0044(0x0004)
	unsigned long                                      m_bDefault2DAsLoaded : 1;                                 // 0x005C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTalentImporter");
		return ptr;
	}


	bool LoadTalent2DAs(const struct FName& nmPackage);
	bool STATIC_GetTalentRankGuiData(int TalentID, int MaxRank, TArray<int>* iconArray);
	bool STATIC_GetTalentGuiData(int TalentID);
	bool STATIC_LoadBonusTalentData(int Row, int* MaxRank, int* LevelOffset, int* LevelsPerRank, int* StartingRank, int* IsVisible, int* VisualOrder);
	bool STATIC_LoadBonusTalentRowsAndIDs(int bonusIdentifier, TArray<int>* Rows, TArray<int>* talentIDs);
	class UBioTalent* STATIC_LoadTalent(class UBioActorBehavior* Behavior, int TalentID, int Rank);
};


// Class BIOC_Base.BioLookAtTarget
// 0x001C (0x020C - 0x01F0)
class ABioLookAtTarget : public AActor
{
public:
	float                                              m_fDelay;                                                 // 0x01F0(0x0004) (Edit)
	float                                              m_fConeDeg;                                               // 0x01F4(0x0004) (Edit)
	float                                              m_fMinDistance;                                           // 0x01F8(0x0004) (Edit)
	float                                              m_fCODelayRemaining;                                      // 0x01FC(0x0004)
	float                                              m_fNCODelayRemaining;                                     // 0x0200(0x0004)
	float                                              m_fConeCos;                                               // 0x0204(0x0004)
	unsigned long                                      m_bCOSeen : 1;                                            // 0x0208(0x0004)
	unsigned long                                      m_bNCOSeen : 1;                                           // 0x0208(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLookAtTarget");
		return ptr;
	}

};


// Class BIOC_Base.BioAiController
// 0x00E4 (0x0414 - 0x0330)
class ABioAiController : public AAIController
{
public:
	class ABioAiController*                            OldController;                                            // 0x0330(0x0004) (Transient)
	unsigned long                                      m_bOverrideSquadAI : 1;                                   // 0x0334(0x0004) (Transient)
	unsigned long                                      m_bSuppressPathFindingerrors : 1;                         // 0x0334(0x0004) (Transient)
	struct FName                                       DefaultState;                                             // 0x0338(0x0008)
	struct FName                                       m_nPauseActionPrevState;                                  // 0x0340(0x0008)
	struct FVector                                     vMoveTarget;                                              // 0x0348(0x000C)
	unsigned long                                      bDebugDumpActionQueue : 1;                                // 0x0354(0x0004)
	unsigned long                                      m_bWasShooting : 1;                                       // 0x0354(0x0004)
	unsigned long                                      m_bWasThrowGrenade : 1;                                   // 0x0354(0x0004)
	unsigned long                                      m_bStartedFiring : 1;                                     // 0x0354(0x0004)
	unsigned long                                      m_bAllActionsClearing : 1;                                // 0x0354(0x0004)
	unsigned long                                      m_bDesignerClearAllActionsDisplay : 1;                    // 0x0354(0x0004) (Config)
	unsigned long                                      m_bPawnTeleportOnFailure : 1;                             // 0x0354(0x0004) (Config)
	class UBioDEBUGDelayLog*                           AI_Log;                                                   // 0x0358(0x0004) (Transient)
	float                                              FollowTimeout_Time;                                       // 0x035C(0x0004)
	struct FVector                                     FollowTimeout_LastLoc;                                    // 0x0360(0x000C)
	class ABioDEBUGMarker*                             DBGMarker;                                                // 0x036C(0x0004)
	class ABioDEBUGMarker*                             DBGErrorMarker;                                           // 0x0370(0x0004)
	struct FName                                       nmPauseControllerState;                                   // 0x0374(0x0008)
	struct FName                                       m_nmLastState;                                            // 0x037C(0x0008)
	struct FCoverRecord                                CurrentCoverSlot;                                         // 0x0384(0x0014)
	TArray<class UBioSeqData*>                         m_aoActionFrameworkQueue;                                 // 0x0398(0x000C) (NeedCtorLink)
	float                                              m_fActivateTime;                                          // 0x03A4(0x0004)
	float                                              m_fAbortTargetPercent;                                    // 0x03A8(0x0004)
	float                                              m_fMinTargetTargetPercent;                                // 0x03AC(0x0004)
	float                                              m_fMinCriticalTargetPercent;                              // 0x03B0(0x0004)
	float                                              m_fFireTimeOut;                                           // 0x03B4(0x0004)
	float                                              m_AIWeaponTargetStepoutBiases;                            // 0x03B8(0x0004) (Config)
	float                                              m_AIPowerTargetStepoutBiases;                             // 0x03BC(0x0004) (Config)
	int                                                m_nCurrentResourceMask;                                   // 0x03C0(0x0004)
	int                                                m_nFriendResourceMask;                                    // 0x03C4(0x0004)
	int                                                m_nBehaviorResourceMask;                                  // 0x03C8(0x0004)
	int                                                m_nStateResourceMask;                                     // 0x03CC(0x0004)
	int                                                m_nActionResourceMask;                                    // 0x03D0(0x0004)
	class UBioSeqData*                                 m_oSeqDataCache;                                          // 0x03D4(0x0004) (Edit, EditInline)
	class ABioPawn*                                    m_oBioPawnCache;                                          // 0x03D8(0x0004) (Edit, EditInline)
	class UBioSeqData*                                 m_oSeqDataTEMP;                                           // 0x03DC(0x0004) (Edit, Transient, EditInline)
	float                                              m_fStartFireDelay;                                        // 0x03E0(0x0004) (Transient)
	float                                              m_fPartyCoverSearchRadius;                                // 0x03E4(0x0004) (Config)
	float                                              m_fMobTargetMoveTolerance;                                // 0x03E8(0x0004) (Transient)
	class UBioGrenadeInterfaceAI*                      m_grenadeInterface;                                       // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UBioSeqData*>                         m_aoDelayedActionCompleteEvents;                          // 0x03F0(0x000C) (NeedCtorLink)
	struct FVector                                     m_vLastBumpTargetPosition;                                // 0x03FC(0x000C)
	TEnumAsByte<EeLastSawTarget>                       m_eLastSawTarget;                                         // 0x0408(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	float                                              m_fSquadTickTimer;                                        // 0x040C(0x0004) (Transient)
	float                                              m_fLastSteeringMoveAbortTime;                             // 0x0410(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAiController");
		return ptr;
	}


	void Initialize();
	void OnSelected(class AActor* oOther);
	void OnHacked();
	void OnProximityAlarm(class AActor* oTarget, int nRelationship);
	void OnSquadSeen(class AActor* oSquad);
	void OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation);
	void OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget);
	void OnDamaged(class AController* oInstigator, float fDamage);
	void OnCastAt(class APawn* oAttacker, const struct FName& nmPower);
	void OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon);
	void OnAbilityDisabled(int nEnableType, const struct FName& nmSubType);
	void OnAbilityEnabled(int nEnableType, const struct FName& nmSubType);
	void OnNoCombatAction();
	void OnDeath(class AController* oKiller);
	class UClass* STATIC_GetSaveObjectClass();
	void PostPollMove();
	bool CanMount();
	void DoneBehavior(const struct FName& Behavior);
	void DoneWeaponSelection(TEnumAsByte<ESwitchToWeapon> Weapon);
	void DoneGrenadeThrow();
	bool CanPullTrigger(float fDeltaT);
	void FiringPullTrigger();
	void ActionComplete_None(const struct FName& Action, int nReason);
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType);
	void NotifyCoverDisabled(class AActor* Link, int SlotIdx);
	void CancelCover(int nReason);
	bool IsEngagedWithCover();
	bool IsTakingCover();
	void OnDisengageWithCover(class AActor* oCoverObj);
	void OnEngagedWithCover(class AActor* oCoverObj);
	bool FindNearestOpenLocation(const struct FVector& vStartLocation, class APawn* oTarget, struct FVector* vFoundLocation);
	bool LeaderCanITeleport(const struct FVector& vOldLocation, const struct FVector& vNewLocation);
	bool HandleTeleport(const struct FVector& vLoc, bool bFindNearestOpenLocation, bool bForceTeleport, class APawn* oTarget);
	bool TeleportToLeader(float DistanceBack);
	void EndRestFormation();
	void BeginRestFormation();
	void CollectFollowingStats();
	void LogRouteCache();
	void PushOntoRouteCache(class ANavigationPoint* Marker);
	class AActor* GetLastObjectInRouteCache(class AActor* oMoveTarget);
	class AActor* DecrementRouteCache();
	int RouteCacheSize();
	void ClearRouteCache();
	void DropRouteCache();
	void UpDateFollowerMarkerPosition(int SquadId);
	bool IsAttackTargetValid(class APawn* oAttackTarget, bool bTestShooting, bool bTestExposed);
	bool HandleSteeringMovementFailed();
	void GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo);
	void LeaderChanged(class APawn* OldLeader, class APawn* NewLeader);
	bool ComputeGroundLevel(bool drawFail, bool drawSussess, struct FVector* vPoint);
	void DebugGroundHeight(const struct FVector& vLoc);
	bool IsControllerPaused();
	void UnPauseController();
	void PauseController();
	void ClearSomeActions_Queue(const struct FString& sClearLabel);
	void ClearSomeActions_State(const struct FString& sClearLabel);
	void ClearAllActions(const struct FString& sClearLabel);
	void AdjustFocus();
	void AdjustGroundSpeed();
	void OnCancelAction();
	void RestoreAI();
	void ChangeAI(class UClass* NewAIClass, bool bCacheOldController);
	void PostBeginPlay();
	void DumpAILog();
	void AILog_Internal(const struct FString& Text, const struct FName& group_);
	void ConLog_Internal(const struct FString& Text, const struct FName& group_);
	void Tick(float DeltaTime);
	bool PlayerActivate(class AActor* Target_);
	void AddMoveToTag(const struct FName& MoveToTag, float PointTolerance, bool bWalking, bool bHead);
	bool IsMetaActionInProgress();
	bool NotifyBump(class AActor* Other, const struct FVector& HitNormal);
	bool GetNextPredictedMoveLocation(struct FVector* out_vLoc);
	void LookAtPawn(class ABioPawn* oLookTarget, int nRank);
	void onLeftPlayPen(class ANavigationPoint* oNavPoint);
	void onStopFollowerHoldPosition();
	void onStartFollowerHoldPosition(class ABioSquadHoldMarker* oHoldMarker);
	void OnLeavingStasis();
	void OnEnteringStasis();
	void ExtendFiringTimeOut(float fTime);
	void OnStreamingLevelLeavingStasis();
	void OnStreamingLevelEnteringStasis();
	void UpdateGenericTacticalMovement(bool bMoving);
	class UBioEpicPawnBehavior* GetPawnBehavior(class APawn* oPawn);
	void BioSetAdjustLocation(const struct FVector& vAdjustLoc);
	void CancelCapability(class UBioCapability* oCapability);
	float GetCapabilityPowerBuildUp(class UBioCapability* oCapability);
	float GetCapabilityImpactRadius(class UBioCapability* oCapability);
	bool GetCapabilityIsEnabled(class UBioCapability* oCapability);
	float GetCapabilityCoolDownTimeRemaining(class UBioCapability* oCapability);
	class UBioSeqData* AddCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget);
	class UBioSeqData* DoCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget);
	void MobTarget(class AActor* oTarget, float fMoveTolerance);
	bool AdjustSteeringMoveSpeed(const struct FVector& vSteering);
	bool GetSteeringVector(struct FVector* vSteering);
	void SteeringMovement();
	class AActor* GetTarget();
	bool ExploreMode(float fDelaySeconds);
	bool ReadyMode(float fDelaySeconds);
	bool UnlockTarget(bool bSwitchActionState);
	bool LockTarget(class AActor* oTarget);
	class UBioSeqData* AddTempLookAt(class AActor* oTarget, const struct FVector& vPoint, const struct FVector& vRelitivePoint);
	class UBioSeqData* AddUseArtPlaceable(class ABioArtPlaceable* oAP);
	class UBioSeqData* AddUsePower(const struct FName& nmPower, class AActor* oTarget, bool bOrderedByPlayer, float fTimeOut, const struct FVector& vTarget);
	TEnumAsByte<EBioItemWeaponRangedType> SwitchWeaponTypeToRangedItemType(TEnumAsByte<ESwitchToWeapon> nSwitchType);
	TEnumAsByte<ESwitchToWeapon> RangedItemTypeToSwitchWeaponType(TEnumAsByte<EBioItemWeaponRangedType> nWeaponType);
	TEnumAsByte<ESwitchToWeapon> GetSelectedWeaponSwitchType();
	bool GetSelectedWeapon(TEnumAsByte<EBioItemWeaponRangedType>* out_Type);
	class UBioSeqData* AddSelectWeapon(TEnumAsByte<ESwitchToWeapon> NewWeapon);
	class UBioSeqData* AddThrowGrenade(class APawn* pTarget, const struct FVector& vTarget, int nGrenadeType);
	class UBioSeqData* AddStopFiring();
	class UBioSeqData* AddStartFiring(class AActor* pTarget, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, bool bIgnoreLOS);
	class UBioSeqData* PushUseCover(const struct FCoverRecord& oCoverInfo);
	class UBioSeqData* PushDoWorldInteraction(class ABioWp_ActionStation* ActionStation, TArray<class UBioActivityTiming*> Timings_);
	class UBioSeqData* PushPlayAnimation(TArray<class UAnimSet*> AnimationSets, TArray<struct FName> AnimName, bool Looping, bool Random);
	class UBioSeqData* PushMobTarget(class AActor* MoveToObject, float PointTolerance);
	class UBioSeqData* PushMoveAndAttack(class AActor* MoveToObject, bool bWalking, class UBioCapability* oCapability, float fReqStab, float fAbortStab, float fTimeOut, class AActor* oAttackTarget, bool bUseMobMovement);
	class UBioSeqData* PushRandomWalk(int MaxWalkDist_, float DelayAfterWalk_);
	class UBioSeqData* PushFollowSquadLeader();
	class UBioSeqData* PushMoveToPointList(float fTolerance, bool bWalking, TArray<struct FVector>* aMoveToLocations);
	class UBioSeqData* PushMoveToPoint(const struct FVector& vLoc, float PointTolerance, bool bWalking, bool bRequiresPrecisionMovement);
	class UBioSeqData* PushMoveToObject(class AActor* MoveToObject, float PointTolerance, bool bWalking, bool bRequiresPrecisionMovement);
	void ResumeWalking();
	class UBioSeqData* PushWalkWaypointSet(class ABioWaypointSet* oWaypointSet, TEnumAsByte<EeWalkWaypointsTypes> eWalkType, bool bWalking, float fMoveTolerance, int nNextWaypoint, bool bCounting_Up);
	class UBioSeqData* AddDelay(float DelayTime);
	class UBioSeqData* PushDelay(float DelayTime);
	bool IsOnPathNetwork(class APawn* oTarget);
	bool DirectWalkCheck(class AActor* pTarget, struct FVector* vTarget);
	void PrecisionMoveTo(const struct FVector& vLoc, const struct FRotator& rRot);
	bool WaitForActionToComplete(class UBioSeqData* oSeqData);
	void ClearFriendActionResource();
	void SetFriendActionResource(int nResource);
	bool ClearActionResource(TEnumAsByte<EeActionType> ActionTYP);
	bool ReserveActionResource(TEnumAsByte<EeActionType> ActionTYP, int nResource);
	bool CheckActionResource(int nResource);
	bool DoingCombatTransition();
	bool CanUsePowers();
	bool CanUseGrenades();
	bool CanUseWeapons();
	bool CanUseStack();
	bool CanUseQueue();
	void QueueCompletionEvent(class UBioSeqData* oCompletedAction);
	void HandleCompletionEvent(class UBioSeqData* oCompletedAction);
	void ActionStarving(class UClass* cSeqClass);
	bool ClearActionQueue();
	bool HasActions();
	void BioVINCE_MapName_Hench_Teleport(float X, float Y);
	void BioVINCE_MapName_Hench_FailToPath(float X, float Y);
	void BioOnPawnActionStateChanged();
};


// Class BIOC_Base.BioBasePlayerController
// 0x0004 (0x0584 - 0x0580)
class ABioBasePlayerController : public APlayerController
{
public:
	class UBioGrenadeInterfacePlayer*                  m_grenadeInterface;                                       // 0x0580(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioBasePlayerController");
		return ptr;
	}


	void QuickSave();
};


// Class BIOC_Base.BioPlayerController
// 0x02D0 (0x0854 - 0x0584)
class ABioPlayerController : public ABioBasePlayerController
{
public:
	class UClass*                                      SquadClass;                                               // 0x0584(0x0004)
	struct FName                                       SquadName;                                                // 0x0588(0x0008)
	struct FString                                     PlayerSquadClass;                                         // 0x0590(0x000C) (Config, NeedCtorLink)
	class APawn*                                       m_oCommandTarget;                                         // 0x059C(0x0004) (Transient)
	unsigned long                                      m_bCommandTargetChanged : 1;                              // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bWasMoving : 1;                                         // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bGotTiredStorming : 1;                                  // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bInConversation : 1;                                    // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bIsStoppedForConv : 1;                                  // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bDEBUGFlyUpPressed : 1;                                 // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bDEBUGFlyDownPressed : 1;                               // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bRadarIsJammed : 1;                                     // 0x05A0(0x0004) (Transient)
	unsigned long                                      m_bPauseOnControllerDisconnect : 1;                       // 0x05A0(0x0004) (Transient)
	struct FBioActionMapping                           m_aActionMap[0x6];                                        // 0x05A4(0x0010) (Transient)
	unsigned long                                      m_bDisableSquadCommandExit : 1;                           // 0x0604(0x0004)
	unsigned long                                      m_bInvertLookAxisY : 1;                                   // 0x0604(0x0004)
	unsigned long                                      m_bInvertLookAxisX : 1;                                   // 0x0604(0x0004)
	unsigned long                                      m_bUseCameraRelativeInputForVehicle : 1;                  // 0x0604(0x0004) (Config)
	unsigned long                                      m_bOverrideCanTeleportCheck : 1;                          // 0x0604(0x0004) (Config)
	unsigned long                                      m_bRadarArrow : 1;                                        // 0x0604(0x0004)
	unsigned long                                      m_bUpdateRadarHud : 1;                                    // 0x0604(0x0004) (Config)
	unsigned long                                      m_bApplyingOrders : 1;                                    // 0x0604(0x0004)
	unsigned long                                      m_bZoomCamFocusOnTarget : 1;                              // 0x0604(0x0004) (Const, Config)
	float                                              m_fCameraStickX;                                          // 0x0608(0x0004) (Transient)
	float                                              m_fCameraStickY;                                          // 0x060C(0x0004) (Transient)
	float                                              m_fMovementStickX;                                        // 0x0610(0x0004) (Transient)
	float                                              m_fMovementStickY;                                        // 0x0614(0x0004) (Transient)
	float                                              m_fMovementStickDeadzone;                                 // 0x0618(0x0004) (Config)
	float                                              m_fMovementDebounceDeadzone;                              // 0x061C(0x0004) (Config)
	float                                              m_fMovementWalkRunTrans;                                  // 0x0620(0x0004) (Config)
	float                                              m_fMovementWalkUpperMult;                                 // 0x0624(0x0004) (Config)
	float                                              m_fCurrentStormStamina;                                   // 0x0628(0x0004) (Transient)
	float                                              m_fForwardStormInputWeight;                               // 0x062C(0x0004) (Config)
	float                                              m_fLeaveConvPitch;                                        // 0x0630(0x0004) (Transient, Config)
	struct FName                                       m_nPauseActionPrevState;                                  // 0x0634(0x0008)
	float                                              m_fMoveToCoverSearchRadius_Short;                         // 0x063C(0x0004) (Config)
	float                                              m_fMoveToCoverSearchRadius_Medium;                        // 0x0640(0x0004) (Config)
	float                                              m_fMoveToCoverSearchRadius_Long;                          // 0x0644(0x0004) (Config)
	float                                              m_fMoveToCoverSearchRange_Short;                          // 0x0648(0x0004) (Config)
	float                                              m_fMoveToCoverSearchRange_Medium;                         // 0x064C(0x0004) (Config)
	float                                              m_fMoveToDropDistance;                                    // 0x0650(0x0004) (Config)
	float                                              m_fMoveToDelayTime;                                       // 0x0654(0x0004) (Config)
	float                                              m_fTacticalDelayTime;                                     // 0x0658(0x0004) (Config)
	float                                              CoverEnterTimer;                                          // 0x065C(0x0004) (Transient)
	float                                              CoverEnterInterval;                                       // 0x0660(0x0004) (Transient, Config)
	float                                              CoverExitCameraAngle;                                     // 0x0664(0x0004) (Transient, Config)
	float                                              CoverMovementModifier;                                    // 0x0668(0x0004) (Transient, Config)
	struct FVector                                     m_vCoverNormalCache[0x2];                                 // 0x066C(0x000C) (Transient)
	float                                              ZoomMovementModifier;                                     // 0x0684(0x0004) (Transient, Config)
	class UBioPlayerSelection*                         m_oPlayerSelection;                                       // 0x0688(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TEnumAsByte<EPlayerRank>                           m_ePlayerRank;                                            // 0x068C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x068D(0x0003) MISSED OFFSET
	float                                              m_fRadarGUISize;                                          // 0x0690(0x0004) (Config)
	float                                              m_fMaxZDifference;                                        // 0x0694(0x0004) (Config)
	float                                              m_fDifferenceScale;                                       // 0x0698(0x0004) (Config)
	float                                              m_fRadarUpdateTime;                                       // 0x069C(0x0004)
	float                                              m_fLastRadarPassTime;                                     // 0x06A0(0x0004)
	float                                              m_fLastRadarRange;                                        // 0x06A4(0x0004)
	float                                              m_fRadarRange;                                            // 0x06A8(0x0004)
	float                                              m_fRadarFOV;                                              // 0x06AC(0x0004)
	float                                              m_fLastRadarFOV;                                          // 0x06B0(0x0004)
	struct FMap_Mirror                                 m_RadarDataMap;                                           // 0x06B4(0x0014) (Native)
	struct FVector                                     m_vLocationRadarArrowPointsTo;                            // 0x06C8(0x000C)
	class ABioRadarMapBoundaries*                      m_oRadarMapBoundary;                                      // 0x06D4(0x0004) (Transient)
	TArray<int>                                        m_anRecoveredRadarIndexes;                                // 0x06D8(0x000C) (Transient, NeedCtorLink)
	int                                                m_nMaxRadarIndex;                                         // 0x06E4(0x0004) (Transient)
	TArray<int>                                        m_anDestroyedPawnIndexesToRecover;                        // 0x06E8(0x000C) (Transient, NeedCtorLink)
	TArray<class AActor*>                              m_aoPotentialRadarObjects;                                // 0x06F4(0x000C) (Transient, NeedCtorLink)
	TArray<class ABioRadarMapBoundaries*>              m_aoMapBoundaryObjects;                                   // 0x0700(0x000C) (Transient, NeedCtorLink)
	float                                              m_fDamageIndicatorDisplayTime;                            // 0x070C(0x0004) (Edit)
	float                                              m_afLastDisplayLevel[0x8];                                // 0x0710(0x0004)
	TArray<class APawn*>                               m_aoDamageCausers;                                        // 0x0730(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        m_anRecoveredDamageIndicatorIndexes;                      // 0x073C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FBioPlayerControllerTwistThresholdSpec> m_aTwistThresholdSpec;                                    // 0x0748(0x000C) (Edit, EditConst, NeedCtorLink, EditInline)
	float                                              m_fCombatModePenalty;                                     // 0x0754(0x0004) (Const)
	float                                              m_fSniperNoiseCoefficient;                                // 0x0758(0x0004) (Const, Config)
	float                                              m_fSniperNoiseConstant;                                   // 0x075C(0x0004) (Const, Config)
	class UDOFEffect*                                  m_pZoomCamDOFEffect;                                      // 0x0760(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_anCameraBehaviorHandle[0x10];                           // 0x0764(0x0004)
	class UBioCameraBehaviorFollowSniper*              m_pSniperCam;                                             // 0x07A4(0x0004)
	class UBioCameraBehaviorFollowVehicleZoom*         m_pVehicleZoomCam;                                        // 0x07A8(0x0004)
	class UBioForceFeedbackPlayer*                     m_pForceFeedback;                                         // 0x07AC(0x0004) (Const)
	struct FMap_Mirror                                 m_DamageIndicatorDataMap;                                 // 0x07B0(0x0014) (Native)
	TArray<struct FPostProcessInfo>                    PostProcessPresets;                                       // 0x07C4(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07D0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioPlayerController.m_srVehicleExitFailureMsg
	unsigned char                                      UnknownData02[0x4];                                       // 0x07D4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioPlayerController.m_srVehicleExitAButtonMsg
	int                                                lstHotKeyPawns[0xC];                                      // 0x07D8(0x0004)
	int                                                lstHotKeyEvents[0xC];                                     // 0x0808(0x0004)
	class USoundCue*                                   FootStepSoundCueDirect[0x7];                              // 0x0838(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPlayerController");
		return ptr;
	}


	void OnExternalUIChanged(bool bIsOpening);
	void ProxyOnExternalUIChanged(bool bIsOpening);
	void ProxyOnControllerChanged(int ControllerId, bool bIsConnected);
	void Initialize();
	void OnProximityAlarm(class AActor* oTarget, int nRelationship);
	void OnSquadSeen(class AActor* oSquad);
	void OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation);
	void OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget);
	void OnDamaged(class AController* oInstigator, float fDamage);
	void OnCastAt(class APawn* oAttacker, const struct FName& nmPower);
	void OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon);
	void OnAbilityDisabled(int nEnableType, const struct FName& nmSubType);
	void OnAbilityEnabled(int nEnableType, const struct FName& nmSubType);
	void OnNoCombatAction();
	void OnDeath(class AController* oKiller);
	bool IsMoveInputIgnored();
	void OnTeleportCameraSync(class USeqAct_Teleport* Action);
	void SpawnPlayerCamera();
	void setcoverdelay(float fTime);
	void UnlockGamerPicture(int PictureId);
	void UnlockAchievement(int AchievementId, bool bUpdatePlotState);
	void SetPostProcessEnableFlags(unsigned char EnableFlags);
	void InitializeGammaCorrectionSettings();
	void SetPostProcessValuesEx(int i_GammaPreset);
	void SetPostProcessValues(TEnumAsByte<ETVType> Preset);
	void ProxyClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* pWaveform);
	void ProxyClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* pWaveform);
	class UClass* STATIC_GetSaveObjectClass();
	void ToggleCrouch();
	void UnPossess();
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void SetStartupMode(bool bIsSpectate);
	void InitInputSystemMouse();
	void InitInputSystem();
	void UnPauseController();
	void PauseController();
	void CamInvert(const struct FName& nmAxis);
	void ToggleFlyCamControl();
	void ToggleFlyCam();
	bool CheckWalkDebugFlag();
	void SetCameraMode(const struct FName& NewCamMode);
	void PlayerTick(float DeltaTime);
	void PlayerCalcCamera(float fDeltaTime, struct FVector* POVLoc, struct FRotator* POVRot, float* newFOVAngle);
	void EndConversationMode();
	void StartConversationMode();
	void InitCameraManager();
	void PostBeginPlay();
	void SharedPost();
	void EnablePauseGameOnControllerRemoval();
	void DissablePauseGameOnControllerRemoval();
	bool IsAbleToInstigate();
	float ComputeMovementStickAngle(float fLRValue, float fFBValue);
	bool CanPerceiveTarget(class AActor* oTarget);
	bool GetTargetRelativeRotation(struct FVector* vDirection);
	bool GetCameraRelativeRotation(struct FVector* vDirection);
	void OnCameraUpdate(float fDeltaTime, struct FTPOV* POV);
	float GetCombatModePenalty();
	void LogCinematicMode(bool bIsStartingCinematic);
	void BioOnPawnActionStateChanged();
	bool FireLeaveWorldEvent();
	bool BioExitVehicle(bool bForceExit);
	bool BioEnterVehicle(class ABioVehicleBase* oVehicle);
	bool BioTryExitVehicle(bool bIsPlayerInput);
	bool BioTryEnterVehicle(bool bIsPlayerInput);
	void InitializeCommandTarget();
	void ReApplyTacticalOrders(class APawn* pPawn, float fDelay);
	void ApplyMovementOrders();
	void ApplyTacticalOrders();
	void SquadOrderDequeuePower(class APawn* pPawn);
	void SquadOrderUseGrenade(class APawn* pPawn);
	void SquadOrderEquipWeapon(unsigned char nWeapon, class APawn* pPawn);
	void SquadOrderUsePower(const struct FName& nmPower, class APawn* pPawn);
	void SquadOrderShootTarget(class APawn* pPawn);
	bool QuickCommandUseMappedAction(TEnumAsByte<EBioActionMappingSlot> nSlot);
	bool QuickCommandChangeCommandTarget(bool bRevertToSquadLeader, bool bClockwise);
	bool QuickCommandMoveTo(int iSquadMember);
	bool QuickCommandAttackTarget(int iSquadMember);
	bool QuickCommandChangeFormation(TEnumAsByte<EFollowFormation> eFormation, int iSquadMember);
	void ToggleSquadCommandVisibility(bool bVisible);
	bool EndSquadCommand();
	bool ToggleSquadCommand();
	void PlayerSquadSetActionState(unsigned char eState);
	struct FName GetHenchmanMappedPower(class APawn* oHenchman);
	bool SetHenchmanMappedPower(class APawn* oHenchman, const struct FName& nmPower);
	bool IsActionMappedToPlayerSlot(TEnumAsByte<EBioActionType> eType, const struct FName& nmPower);
	bool ClearMapByIndex(TEnumAsByte<EBioActionMappingSlot> nSlot);
	bool GetMappingByIndex(TEnumAsByte<EBioActionMappingSlot> nSlot, struct FBioActionMapping* stMapData);
	bool MapActionToAvailablePlayerSlot(TEnumAsByte<EBioActionType> eType, const struct FName& nmPower);
	bool MapAction(TEnumAsByte<EBioActionMappingSlot> nSlot, TEnumAsByte<EBioActionType> nType, const struct FName& nmPower, class APawn* oPawn);
	void InitializeDefaultMapping();
	bool IsNCO();
	bool IsCO();
	bool OnNewPlayerSelection(class AActor* Selection);
	void DisableDOF();
	void NonRelativeTransformVehicleInputs(float* fVerticalDir, float* fHorizontalDir);
	void TransformToCameraRelativeVehicleInputs(float* fVerticalDir, float* fHorizontalDir);
	void OutputConsoleText(const struct FString& Text);
	void RecoverForPlayerPawnActionState();
	void RecoverSelectionForPawnActionState();
	void RecoverCameraForPawnActionState();
	void RecoverCameraPostCinematic();
	void DrawSelectionReticule(const struct FVector& vLocation);
	void DrawCircle(const struct FVector& vLocation, const struct FVector& vNormal, float fRadius, const struct FColor& CircleColor);
};


// Class BIOC_Base.BioCheatManager
// 0x0150 (0x018C - 0x003C)
class UBioCheatManager : public UCheatManager
{
public:
	class ABioArtPlaceable*                            TestAP;                                                   // 0x003C(0x0004)
	struct FVector                                     m_vRootedLocation;                                        // 0x0040(0x000C)
	unsigned long                                      m_bRootLocationDebug : 1;                                 // 0x004C(0x0004)
	unsigned long                                      m_bEnableDebugPlayerMovement : 1;                         // 0x004C(0x0004)
	unsigned long                                      m_bReticuleIsSupp : 1;                                    // 0x004C(0x0004)
	unsigned long                                      m_bReticuleShowDebug : 1;                                 // 0x004C(0x0004)
	unsigned long                                      m_bShowWalkDebugLine : 1;                                 // 0x004C(0x0004)
	unsigned long                                      m_bShowTacSelDebugLine : 1;                               // 0x004C(0x0004)
	unsigned long                                      m_bShowAnimDebug : 1;                                     // 0x004C(0x0004)
	unsigned long                                      m_bShowDebugMessages : 1;                                 // 0x004C(0x0004)
	unsigned long                                      m_bFreeMoveTackSel : 1;                                   // 0x004C(0x0004)
	unsigned long                                      m_bLockReticule : 1;                                      // 0x004C(0x0004)
	unsigned long                                      m_bSuperSpeedActive : 1;                                  // 0x004C(0x0004)
	unsigned long                                      m_bPawnInMount : 1;                                       // 0x004C(0x0004)
	unsigned long                                      m_bPawnInFall : 1;                                        // 0x004C(0x0004)
	unsigned long                                      m_DisplayWeaponFire : 1;                                  // 0x004C(0x0004)
	unsigned long                                      m_bDisplayWeaponFire_Persist : 1;                         // 0x004C(0x0004)
	float                                              m_fReticuleKickbackMod;                                   // 0x0050(0x0004)
	float                                              m_fReticuleDamageMod;                                     // 0x0054(0x0004)
	float                                              m_fReticuleTBase;                                         // 0x0058(0x0004)
	float                                              m_fReticuleTMax;                                          // 0x005C(0x0004)
	float                                              m_fReticuleCBase;                                         // 0x0060(0x0004)
	float                                              m_fReticuleCMax;                                          // 0x0064(0x0004)
	float                                              m_fReticuleBaseAR;                                        // 0x0068(0x0004)
	float                                              m_fReticulePlrLvl;                                        // 0x006C(0x0004)
	float                                              m_fReticulePlrAcc;                                        // 0x0070(0x0004)
	float                                              m_fReticuleSuppMod;                                       // 0x0074(0x0004)
	float                                              m_fReticuleWeaponMoveMod;                                 // 0x0078(0x0004)
	float                                              m_fReticuleArmorMoveMod;                                  // 0x007C(0x0004)
	float                                              m_fReticuleMobilityMod;                                   // 0x0080(0x0004)
	float                                              m_fReticuleWeaponTARMod;                                  // 0x0084(0x0004)
	float                                              m_fReticuleWeaponCARMod;                                  // 0x0088(0x0004)
	float                                              m_fReticuleWeaponRng0Mod;                                 // 0x008C(0x0004)
	float                                              m_fReticuleWeaponRng1Mod;                                 // 0x0090(0x0004)
	float                                              m_fReticuleWeaponRng2Mod;                                 // 0x0094(0x0004)
	float                                              m_fReticuleWeaponRng3Mod;                                 // 0x0098(0x0004)
	float                                              m_fAimPitch;                                              // 0x009C(0x0004)
	float                                              m_fAimYaw;                                                // 0x00A0(0x0004)
	int                                                m_nAimTurningDir;                                         // 0x00A4(0x0004)
	int                                                m_nPawnCurrentYaw;                                        // 0x00A8(0x0004)
	int                                                m_nPawnDesiredYaw;                                        // 0x00AC(0x0004)
	float                                              m_fPawnRollAmt;                                           // 0x00B0(0x0004)
	float                                              m_fPawnTurnRate;                                          // 0x00B4(0x0004)
	int                                                m_nPawnCombatState;                                       // 0x00B8(0x0004)
	int                                                m_nAnimCombatState;                                       // 0x00BC(0x0004)
	struct FVector                                     m_vPawnLoc;                                               // 0x00C0(0x000C)
	float                                              m_fMoveXAxis;                                             // 0x00CC(0x0004)
	float                                              m_fMoveYAxis;                                             // 0x00D0(0x0004)
	float                                              m_fPawnCSpeed;                                            // 0x00D4(0x0004)
	float                                              m_fPawnDSpeed;                                            // 0x00D8(0x0004)
	float                                              m_fPawnInclineMod;                                        // 0x00DC(0x0004)
	int                                                m_nPawnSkidTurnState;                                     // 0x00E0(0x0004)
	struct FVector                                     m_vPawnLocWhileIdle;                                      // 0x00E4(0x000C)
	struct FVector                                     m_vPawnLastVelocity;                                      // 0x00F0(0x000C)
	float                                              m_fPawnStartDistance;                                     // 0x00FC(0x0004)
	float                                              m_fPawnElapsedTime;                                       // 0x0100(0x0004)
	float                                              m_fPawnStartTime;                                         // 0x0104(0x0004)
	float                                              m_fPawnFallTime;                                          // 0x0108(0x0004)
	float                                              m_fPawnCalcFallTime;                                      // 0x010C(0x0004)
	float                                              m_fTacSleMoveRate;                                        // 0x0110(0x0004)
	float                                              m_fTacSleMoveDist;                                        // 0x0114(0x0004)
	float                                              m_fSelectionRange;                                        // 0x0118(0x0004)
	TEnumAsByte<EBioProfilerType>                      m_CurrentProfiler;                                        // 0x011C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	class UBioActorBehavior*                           m_profileTargetBehavior;                                  // 0x0120(0x0004) (Transient)
	struct FName                                       m_nmPowerToProfile;                                       // 0x0124(0x0008) (Transient)
	class UTextureMovie*                               m_oUC2MovieTexture;                                       // 0x012C(0x0004)
	TArray<struct FBioDebugMessage>                    oDebugMsg;                                                // 0x0130(0x000C) (NeedCtorLink)
	class UBioInventoryViewConsole*                    m_paperDoll;                                              // 0x013C(0x0004)
	class UBioInventoryGuiInterface*                   m_oGuiInventoryLayer;                                     // 0x0140(0x0004)
	unsigned long                                      m_bShowPowerAiming : 1;                                   // 0x0144(0x0004) (Transient)
	unsigned long                                      m_bEnablePowerRelativeVelocity : 1;                       // 0x0144(0x0004) (Transient)
	unsigned long                                      m_bEnablePowerCooldown : 1;                               // 0x0144(0x0004) (Transient)
	unsigned long                                      m_bShowPowerImpactText : 1;                               // 0x0144(0x0004) (Transient)
	unsigned long                                      m_bShowPowerList : 1;                                     // 0x0144(0x0004) (Transient)
	unsigned long                                      m_bVFXSoundsEnabled : 1;                                  // 0x0144(0x0004) (Transient)
	TArray<class ABioVehicleBase*>                     m_aSpawnedVehicles;                                       // 0x0148(0x000C) (Transient, NeedCtorLink)
	float                                              m_fMicPos;                                                // 0x0154(0x0004) (Transient)
	TArray<struct FString>                             m_aPowerList;                                             // 0x0158(0x000C) (Transient, NeedCtorLink)
	TArray<struct FPowerAimingInfo>                    m_aPowerAimingInfo;                                       // 0x0164(0x000C) (Transient, NeedCtorLink)
	float                                              m_fCameraStickYaw;                                        // 0x0170(0x0004)
	float                                              m_fCameraStickPitch;                                      // 0x0174(0x0004)
	float                                              m_fCameraStickMagnitude;                                  // 0x0178(0x0004)
	float                                              m_fCameraStickutputPreSensitivityYaw;                     // 0x017C(0x0004)
	float                                              m_fCameraStickOutputPreSensitivityPitch;                  // 0x0180(0x0004)
	float                                              m_fCameraStickOutputYaw;                                  // 0x0184(0x0004)
	float                                              m_fCameraStickOutputPitch;                                // 0x0188(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCheatManager");
		return ptr;
	}


	void RestrictNumberOfSaves(bool bValue);
	void LogAllControllers();
	void LogAllPawns();
	void SetPlayerStabilityCurrent(float nStabilityCurrent);
	void SetPlayerStabilityRegenRate0();
	void ChangeWeapon(int nWeapon);
	void SetAutoRightUpForceAndTorque(float fUpLiftForce, float fUprightTorque);
	void SetVehicleCOMOffsetZ(float fOffsetZ);
	void Mark(const struct FString& sComment);
	void RecoverFromBleedOut();
	void ClearDebugLines();
	void SetRenegade(int Points);
	void SetParagon(int Points);
	void GameOver();
	void AddPowerAimingInfoToList(const struct FVector& vStartLocation1, const struct FVector& vEndLocation1, const struct FVector& vStartLocation2, const struct FVector& vEndLocation2);
	void ShowRecentPowers();
	void AddPowerInfoToList(const struct FString& sPowerInfo);
	void DisplayPowerList(class ABioHUD* oHud);
	void ClearPowerList();
	void TogglePowerList();
	void SetVehicleExitLog(bool bStatus);
	void coverdelay(float fTime);
	void MakeInvulnerable(const struct FString& sWhitespaceDelimitedArgs);
	void SetCurvePixelError(const struct FName& nmPanel, float fError);
	void ToggleEdgeAA(const struct FName& nmPanel);
	void DisplayPowerImpactText(class ABioHUD* oHud);
	void TogglePowerImpact();
	void HexHere(float fTime);
	void LifeSpan(float fTime);
	void EnableBleedOut(bool B);
	void ToggleShowAlignmentGains();
	void SetGrenadeAttribute(const struct FName& nmAttribute, const struct FString& sValue);
	void UpdateEndGameAchievements();
	void UnlockAchievementRange(int nLowerAchievementID, int nUpperAchievementID);
	void UnlockAchievement(int nAchievementID);
	void InitPlotManagerValueByIndex(int nIndex, const struct FString& sVariableType, float fValue);
	void DumpPlotManagerValueByIndex(int nIndex, const struct FString& sVariableType);
	void SetCombatSprintSpeed(float fSpeed);
	void SetCombatRunSpeed(float fSpeed);
	void SetCombatWalkSpeed(float fSpeed);
	void SetSprintSpeed(float fSpeed);
	void SetRunSpeed(float fSpeed);
	void SetWalkSpeed(float fSpeed);
	void ResetSpeeds();
	void InitAchievementStat(const struct FString& sAchievement, int nAmount);
	void DumpAchievementStats();
	void EnablePowerCooldown(bool bEnable);
	void ApplyGrime(float a_fCombatGrime, float a_fDirtGrime, float a_fGrimeGrime, const struct FName& nmPawn);
	void ShowSquadMembers();
	void FFScale(float F);
	void FFEnable(bool B);
	void EnterCombatStasis(const struct FName& nmPawn, float fDuration, bool bAllowDamage);
	void FireGrenade();
	void UsePower(const struct FName& nmPawn, const struct FName& nmPower);
	void SetMicPos(float fPos);
	void UpgradeVehicle(int nSlot, const struct FName& nmItemLabelName);
	void TogglePlayerMovementDump();
	void ShowMountVolumes(bool bValue);
	void EnablePowerRelativeVelocity(int nEnable);
	void listai();
	void GetPlayerLocFPS();
	void DisplayStringID(bool i_bDisplay);
	void CodexAudit();
	void JournalAudit();
	void DebugSpawnActor(const struct FString& sActorResource, float fDistanceFromPlayer, float fLifeSpan);
	void DestroySpawnedVehicles();
	void SpawnVehicle();
	void FeignDeath(const struct FName& nmPawn, bool B);
	void SetPowerAttribute(const struct FName& nmPawn, const struct FName& nmPower, const struct FName& nmAttribute, float fValue);
	void TogglePowerAiming();
	void HackAI(const struct FString& sWhitespaceDelimitedNamedParameters);
	void PlayXenonMovie(const struct FString& sMoviePath);
	void DebugPlayerSquadCombatAI(bool bVal);
	void StasisAll();
	void VINCEToAreaMapGeneric(const struct FName& genericString);
	void GiveAll();
	void GiveSuperArmor();
	void GiveSupergun();
	void GiveAllXmods();
	void GiveAllArmorHuman(const struct FName& nmManufacturer);
	void GiveAllArmorKrogan(const struct FName& nmManufacturer);
	void GiveAllArmorQuarian(const struct FName& nmManufacturer);
	void GiveAllArmorTurian(const struct FName& nmManufacturer);
	void GiveAllArmor(const struct FName& nmManufacturer);
	void GiveAllGrenades(const struct FName& nmManufacturer);
	void GiveAllWeapons(const struct FName& nmManufacturer);
	void GiveAllBioAmps(const struct FName& nmManufacturer);
	void GiveAllOmnitools(const struct FName& nmManufacturer);
	void GuiInventoryEquip(int nSlotListIndex);
	void GuiInventorySelect(TEnumAsByte<EGuiEquipSlots> eSlot);
	void GuiInventorySetTarget(const struct FString& sTarget);
	void EnableCombatStateLogging(bool B);
	void EnableVFXSound(bool B);
	void SetPlayerSquadMin1Health(bool B);
	void PImp(float fForce);
	void DumpPlayPen();
	void GrahamDebug_HideAllPanels();
	void GrahamDebug_ShowAllPanels();
	void ToggleSFHUD();
	void SetSelectionHalfAngle(float fVal);
	void PaperDoll(const struct FString& whitespaceDelimitedArguments);
	void DisableOffensive(const struct FName& nmPawn, const struct FName& subtype);
	void EnableOffensive(const struct FName& nmPawn, const struct FName& subtype);
	void DisablePower(const struct FName& nmPawn, const struct FName& subtype);
	void EnablePower(const struct FName& nmPawn, const struct FName& subtype);
	void DisableAi(const struct FName& nmPawn, const struct FName& subtype);
	void EnableAi(const struct FName& nmPawn, const struct FName& subtype);
	void SetCharmSkill(int nCharm);
	void GetCharmSkill();
	void SetIntimidateSkill(int nIntimidate);
	void GetIntimidateSkill();
	void WeaponFireTrace(bool bNotPersist);
	void DownloadContent();
	void ShowMarketplaceUI();
	void AdjustCredits(int nAmount);
	void DescribeEquipment(const struct FName& nmTarget, const struct FString& sEquipment);
	void DescribeItemInQuickSlot(const struct FName& nmTarget, int nQuickslot);
	void DescribeItem(int nSophistication, const struct FString& sLabel);
	void GiveWeaponXModded(const struct FString& whitespaceDelimitedArguments);
	void InitGrenades(int nGrenades);
	void InitMedigel(float fMedigel);
	void InitSalvage(float fSalvage);
	void InitCredits(int nCredits);
	class UBioItem* GiveItem(const struct FName& nmActor, int nSophistication, const struct FName& nmItemLabel, const struct FName& nmManufacturer);
	void MSSwarm();
	void MSSwarmInfo(int X, int Y, int Z);
	void TestGamePropertySys();
	void ValidateOwnershipSemantics(const struct FName& TargetName, bool isVerbose);
	void ResurrectTarget();
	void Stability(const struct FName& Command, const struct FString& whitespaceDelimitedArguments);
	void ReCaps();
	void testfollow();
	void testhold();
	void GiveArmor(const struct FName& nmActor, int nSophistication, const struct FName& nmArmorLabel, const struct FName& nmManufacturer);
	void FWindDir(int nVal);
	void FWindProb(float fVal);
	void FWindEnable(int nVal);
	void FWindMax(float fVal);
	void CombatWriteLog(const struct FString& sVal);
	void EnableDamage(int nVal);
	class AActor* GetUIWorldActor();
	class AActor* GetActorFromString(const struct FString& Str);
	void ToxicDmgMax(const struct FName& nmTarget, const struct FName& nmAccess, float fModifier);
	void ToxicHealRatio(const struct FName& nmTarget, const struct FName& nmAccess, float fModifier);
	void HealRate(const struct FName& nmTarget, float fHealRate, float fBonusToxicHealRate);
	void HealLatent(const struct FName& nmTarget, float fDuration);
	void HealInstant(const struct FName& nmTarget, float fHealAmount, float fBonusToxicHealAmount);
	void Damage(const struct FName& nmTarget, float fDamage);
	void CombatAssignTarget(const struct FName& sActor, const struct FName& sTarget);
	void TestRagdoll(const struct FString& sWhitespaceDelimitedArguments);
	void SightTo(const struct FName& nmTarget);
	void Profile(const struct FString& whitespaceDelimitedArguments);
	void ConvCamFrame(float fYAW, float fLatDis);
	void DebugSpawnPrefab(int nTestNum);
	void TestPrefab(int nTestNum);
	void APGotoState(const struct FName& ToState, const struct FName& optrans);
	void APShowStates();
	void SetDummyCreature();
	void BioRunTest(const struct FString& TestName);
	void BioTransition(int nTransition, int nParam);
	void BioLoadState(int nSaveStateSlot);
	void BioSaveState(int nSaveStateSlot);
	void BioDeleteGame(int nSaveGameSlot);
	void BioLoadGame(int nSaveGameSlot);
	void BioSaveGame(int nSaveGameSlot);
	void BioSetDebugSave(int nSet);
	void PawnControll(const struct FName& nmAction);
	void SRange(float fVal);
	void PickSpecialization();
	void GiveSpectreTalents();
	void ScaleTalentByIncrement(int TalentID, int rankIncrement);
	void IncreaseTalentMaxRankByIncrement(int TalentID, int MaxRankIncrement);
	void IncreaseTalentMaxRank(int TalentID, int MaxRank);
	void GiveBonusTalent(int bonusIdentifier);
	void GiveTalentPoints(int numPoints);
	void SetVolume(int i_VolumeType, int i_VolumeLevel);
	void ToggleSaveGameDisplayRawName();
	void SetSaveGameDisplayRawName(bool i_bValue);
	void SetCombatDifficulty(int i_CombatDifficulty);
	void SetPredefinedGammaCorrectionOption(int i_GammaSetting);
	void GiveXP(int nValue);
	void ShowDialogData(const struct FName& nValue);
	void SetGender(int nValue);
	void ToggleAPCollision();
	class UBioPawnBehavior* GetSquadMemberBehavior(const struct FString& sSquadMemberName);
	void BioEndSloMo(int nReqID, float fExpireTime);
	void BioSloMo(float fSpeed, float fLife, int nPriority);
	void BioSloMoTest();
	void SetAct(const struct FName& intag, const struct FName& activity);
	void SetKey(const struct FName& Key);
	void SwitchToPlayerCam();
	void Stcam(const struct FString& sCamName);
	void SetTacSelDistancel(float fVal);
	void SetTacSelMovment(float fVal);
	void togglefreetacsel();
	void QSlotPrev(const struct FString& Target);
	void QSlotNext(const struct FString& Target);
	void QSlotActivate(const struct FString& whitespaceDelimitedArguments);
	void QSlotActivateCurrent(const struct FString& whitespaceDelimitedArguments);
	int GetCurrentQuickSlotIndex();
	class ABioWeapon* GetQuickSlot(int nSlot);
	class ABioPawn* GetPawn();
	void SDS(const struct FName& State, const struct FName& Trans);
	void Movie();
	void PopUp(const struct FString& S);
	void View2DA(const struct FString& Str);
	void ClearAll();
	void TestConditionals();
	void ShowPathNodes();
	void ClearMarkers();
	void Player(const struct FName& Cmd, const struct FString& Param);
	void BioStats(const struct FName& Cmd, const struct FString& Param);
	void Party(const struct FName& Cmd, const struct FString& Param);
	void SetVehicleCamRadiusPoint(int nIndex, float fDegVal, float fScaleVal);
	void BioClearCrossLevelReferences(class ULevel* pLevel);
	void ForceEnableCCD(bool bValue);
	void SetGCDebugPackage(const struct FString& sPackageName);
	void SetLocation(const struct FString& sDestination);
	void GetLocation();
	void warpforward(float fDist);
	void Suicide();
	void KillCurrentTarget();
	void SuperSpeed();
	void SetGroundSpeed(float fSpeed);
	void ToggleAnimDebug();
	void ShowAnimationDebugInfo(class AHUD* myHUD);
	void ShowDebugMessages(class ABioHUD* myHUD);
	void DebugMessage(const struct FString& sMessage, float Length, bool Clear, class AActor* oActor, int nInt, float fFloat, const struct FName& nName);
	void RenderHUD(class ABioHUD* myHUD);
	void CamOffset(const struct FName& OFFS, float F);
	void CamHook(const struct FName& Hook, const struct FName& Dir, float F);
	void CamSetCollisionTPR(float F);
	void CamToggleHook();
	void CamToggleDebug();
	void CamLockCollision();
	void ToggleTacSelDebug();
	void ToggleWalkDebug();
	void ToggleHesitation();
	void ToggleMountFallRules();
	void ToggleDifficultyScaling();
	int DrawConeReticule(const struct FVector& vLocation, float fRadius);
	void ReticuleWeaponRng3Mod(float fVal);
	void ReticuleWeaponRng2Mod(float fVal);
	void ReticuleWeaponRng1Mod(float fVal);
	void ReticuleWeaponRng0Mod(float fVal);
	void ReticuleWeaponCARMod(float fVal);
	void ReticuleWeaponTARMod(float fVal);
	void ReticuleMobilityMod(float fVal);
	void ReticuleArmorMoveMod(float fVal);
	void ReticuleWeaponMoveMod(float fVal);
	void ReticuleSuppMod(float fVal);
	void ReticuleIsSupp(bool bVal);
	void ReticulePlrAcc(float fVal);
	void ReticulePlrLvl(float fVal);
	void ReticuleBaseAR(float fVal);
	void ReticuleCMax(float fVal);
	void ReticuleCBase(float fVal);
	void ReticuleTMax(float fVal);
	void ReticuleTBase(float fVal);
	void ReticuleDamageMod(float fVal);
	void ReticuleKickbackMod(float fVal);
	void ShowReticuleDebug();
	void version();
	void ShowReticuleDebugInfo(class AHUD* myHUD);
	void LockRet();
	void SetDebugRootLocation(const struct FVector& vLocation);
	void DebugRootPlayer();
	void DebugAction(int nAction);
	void AddTargetToParty();
	void AT(const struct FName& newArea, const struct FName& startPoint);
	class ABioCameraManager* GetCameraManager();
	class ABioPlayerController* GetController();
	class ABioWorldInfo* getWorld();
};


// Class BIOC_Base.BioPlayerInput
// 0x0074 (0x01BC - 0x0148)
class UBioPlayerInput : public UPlayerInput
{
public:
	float                                              m_fSlowMotionSpeed;                                       // 0x0148(0x0004) (Transient, Config)
	float                                              m_fDPadCooldownTime;                                      // 0x014C(0x0004) (Transient, Config)
	int                                                m_nNextSwitchSlot;                                        // 0x0150(0x0004) (Transient)
	TEnumAsByte<EButtons>                              m_nLastDPadPushed;                                        // 0x0154(0x0001) (Transient)
	TEnumAsByte<EInputModes>                           m_PrevInputModeBeforeShowIGG;                             // 0x0155(0x0001) (Native, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0156(0x0002) MISSED OFFSET
	unsigned long                                      m_bWantsToSprint : 1;                                     // 0x0158(0x0004) (Transient)
	unsigned long                                      m_bTakingScreenImage : 1;                                 // 0x0158(0x0004) (Transient)
	unsigned long                                      m_bDisableCinematicAccelerate : 1;                        // 0x0158(0x0004) (Transient, Config)
	unsigned long                                      m_bDisableCinematicSkip : 1;                              // 0x0158(0x0004) (Transient, Config)
	float                                              m_fStormCooldownTime;                                     // 0x015C(0x0004) (Transient, Config)
	float                                              m_fStormCooldown;                                         // 0x0160(0x0004) (Transient)
	TEnumAsByte<EeAttackTriggereBy>                    m_eAttackTriggeredBy;                                     // 0x0164(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0165(0x0003) MISSED OFFSET
	int                                                m_nCurConvSelection;                                      // 0x0168(0x0004) (Transient)
	float                                              m_fConversationReplyLeftRight;                            // 0x016C(0x0004) (Transient)
	float                                              m_fConversationReplyUpDown;                               // 0x0170(0x0004) (Transient)
	class UBioSpectator*                               m_oSpectator;                                             // 0x0174(0x0004) (Transient)
	float                                              m_fQuickOrderTime;                                        // 0x0178(0x0004) (Transient, Config)
	int                                                m_nLastWeapon;                                            // 0x017C(0x0004) (Transient)
	struct FName                                       m_nmLastPower;                                            // 0x0180(0x0008) (Transient)
	TArray<struct FDebugMenuEntry>                     DebugMenu;                                                // 0x0188(0x000C) (Config, NeedCtorLink)
	TArray<struct FDebugMenuEntry>                     DebugSubMenu;                                             // 0x0194(0x000C) (NeedCtorLink)
	struct FName                                       LastKeyHit;                                               // 0x01A0(0x0008)
	unsigned long                                      m_bWalking : 1;                                           // 0x01A8(0x0004)
	unsigned long                                      m_bFireOn : 1;                                            // 0x01A8(0x0004)
	float                                              m_fCinematicSkipTriggerDelay;                             // 0x01AC(0x0004) (Transient, Config)
	TArray<struct FTutorialCommandsDetails>            lstTutorialParseStrings;                                  // 0x01B0(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPlayerInput");
		return ptr;
	}


	void TakeScreenShot();
	void LoadTestLevel();
	void StartGame();
	void SprintOff();
	void SprintOn();
	void ToggleCrouch();
	void ShowEquipmentGui();
	void ShowSquadGui();
	void ShowCodexGui();
	void ShowJournalGui();
	void ShowMapGui();
	void HotKeyResume();
	void HotKeyPause();
	void LeaveWorld();
	void ExitVehicle();
	void EnterVehicle();
	void MiniGame_Back();
	void MiniGame_Start();
	void MiniGame_DPad_Right();
	void MiniGame_DPad_Left();
	void MiniGame_DPad_Down();
	void MiniGame_DPad_Up();
	void MiniGame_LeftTrigger();
	void MiniGame_RightTrigger();
	void MiniGame_LeftShoulder();
	void MiniGame_RightShoulder();
	void MiniGame_Y();
	void MiniGame_X();
	void MiniGame_B();
	void MiniGame_A();
	void MiniGameGuiButton_Y();
	void MiniGameGuiButton_X();
	void MiniGameGuiButton_B();
	void MiniGameGuiButton_A();
	void MiniGameRelease();
	void DeferredShowInGameGui();
	void GuiAxis(TEnumAsByte<EBioGuiEvents> Event, float fSpeed, float fDeadZone);
	void GuiKey(TEnumAsByte<EBioGuiEvents> Event);
	void MiniGameGuiInput(int nOutputLink);
	void MiniGameInput(int nOutputLink);
	void InGamePropertyEditorRightShoulder();
	void InGamePropertyEditorLeftShoulder();
	void InGamePropertyEditorRightTrigger();
	void InGamePropertyEditorLeftTrigger();
	void InGamePropertyEditorBack();
	void InGamePropertyEditorForward();
	void InGamePropertyEditorGoToMainMenu();
	void InGamePropertyEditorRIGHTAction();
	void InGamePropertyEditorLEFTAction();
	void InGamePropertyEditorDOWNAction();
	void InGamePropertyEditorUPAction();
	void EndInGamePropertyEditor();
	void StartIngamePropertyEditor(bool bNoReally);
	void DeactivateSpectateOption();
	void ActivateSpectateOption();
	void NextSpectateMode();
	void PrevSpectateMode();
	void NextSpectateOption();
	void PrevSpectateOption();
	void UnlockSpectator();
	void PrevSpectatorTarget();
	void NextSpectatorTarget();
	void LockSpectator();
	void MessageBoxPageDown();
	void MessageBoxPageUp();
	void GUIScrollDown();
	void GUIScrollUp();
	void ShowDebugMenu();
	void ShowSubMenu(const struct FString& MenuName);
	void GUIAction();
	void CinematicSkip();
	void CinematicNormal();
	void CinematicAccelerate();
	void MovieAction();
	void GhostMoveDown(bool bState);
	void GhostMoveUp(bool bState);
	void CameraLookUpDown(float fSpeed, float fDeadZone);
	void CameraTurnLeftRight(float fSpeed, float fDeadZone);
	void StrafeLeftRightFixed(int nDirection);
	void StrafeLeftRight(float fSpeed, float fDeadZone);
	void MoveForwardBackFixed(int nDirection);
	void MoveForwardBack(float fSpeed, float fDeadZone);
	void ActivateQuickPowerCast();
	void ActivateQuickWeaponSwitch();
	void DeactivateSquadCommand();
	void ActivateSquadCommand(TEnumAsByte<EInputModes> nMode);
	void ActivateCommandWheel();
	void ActivateWeaponWheel();
	void ActivatePowerWheel();
	void SetTacticalSpeed(float fSpeed);
	void RestoreVehicleDriveCam();
	void ExitVehicleZoomMode();
	void CleanupWeaponSounds();
	bool IsCombatEnabled();
	void DecreaseWeaponPowerCount();
	struct FName GetWeaponPower();
	struct FName GetMeleePowerName();
	bool IsMeleeAvailable(const struct FName& nmPower);
	bool ActivateEquip(TEnumAsByte<EBioItemWeaponRangedType> eWeapon);
	bool ActivatePower(const struct FName& nmPower, class AActor* oTarget, const struct FVector& vTargetLocation);
	void ActivateGrenade();
	void UpdateCooldowns(float fDeltaTime);
	void NextZoomLevel();
	void ToggleWalk();
	void UseAbility(int Index);
	void ToggleKeyMap();
	void NextZoomMagnification();
	void ToggleVehicleZoom();
	void ToggleZoom();
	void ToggleCommandMenu();
	void ToggleTacticalMenu();
	void ToggleWeaponsMenu();
	struct FString GetLocalizedKeyName(const struct FName& OrgKeyName);
	void ShowCommandMenu(bool bShow);
	void ShowTacticalMenu(bool bShow);
	void ShowWeaponsMenu(bool bShow);
	void ShowInGameGui();
	void SquadCommandTakeCover(int iSquadMember);
	void SquadCommandRally(int iSquadMember);
	void SquadCommandMoveTo(int iSquadMember);
	void SquadCommandAttackTarget(int iSquadMember);
	void HandleCancelButton();
	void HandleUseButtonOff();
	void HandleUseButtonOn();
	void VehicleThrustersOff();
	void VehicleThrustersOn();
	void UseFirstAid();
	void ThrowGrenade();
	void FireVehicleCannon(bool bFire);
	void VehicleZoomOff();
	void VehicleZoomOn();
	void ZoomOff();
	void ZoomOn();
	void FireWeaponOff();
	void FireWeaponOn();
	void FireWeapon();
	void SwitchToNextWeapon();
	void SwitchToPrevWeapon();
	void SwitchToWeapon(int WeaponIndex);
	TEnumAsByte<EInputModes> GetInputModeBeforeIGG();
	void UpdateAxis(float fSpeed, float fDeadZone, float fAbsoluteAxis, bool bInvert, float* aAxis);
	struct FString ParseStringForPCCommands(const struct FString& sMessage);
};


// Class BIOC_Base.BioPlayerSelection
// 0x0044 (0x0080 - 0x003C)
class UBioPlayerSelection : public UObject
{
public:
	TArray<struct FBioSelection>                       m_lSelectionsInRange;                                     // 0x003C(0x000C) (NeedCtorLink)
	TEnumAsByte<EGeneralSelectionMode>                 m_eCurrentSelectionMode;                                  // 0x0048(0x0001)
	TEnumAsByte<EGeneralSelectionMode>                 m_ePreviousSelectionMode;                                 // 0x0049(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	class AActor*                                      m_oCurrentSelectionTarget;                                // 0x004C(0x0004)
	class AActor*                                      m_oLastSelectionTarget;                                   // 0x0050(0x0004)
	unsigned long                                      m_bCurrentSelectionObstructed : 1;                        // 0x0054(0x0004) (Transient)
	unsigned long                                      m_bCurrentSelectionIsCombatTarget : 1;                    // 0x0054(0x0004) (Transient)
	unsigned long                                      m_bCurrentSelectionIsMagneticLocked : 1;                  // 0x0054(0x0004) (Transient)
	unsigned long                                      m_bOnPlayerSelectionFailed : 1;                           // 0x0054(0x0004) (Transient)
	float                                              m_fSelectionConeHalfAngle;                                // 0x0058(0x0004) (Edit)
	float                                              m_fTimeSinceSelectionChanged;                             // 0x005C(0x0004) (Transient)
	float                                              m_fSelectionRangeDebug;                                   // 0x0060(0x0004) (Config)
	float                                              m_fSelectionRangePlayer;                                  // 0x0064(0x0004) (Config)
	float                                              m_fSelectionRangeVehicle;                                 // 0x0068(0x0004) (Config)
	float                                              m_fSelectionHalfAngleDebug;                               // 0x006C(0x0004) (Config)
	float                                              m_fSelectionHalfAnglePlayer;                              // 0x0070(0x0004) (Config)
	float                                              m_fSelectionHalfAngleVehicle;                             // 0x0074(0x0004) (Config)
	float                                              m_fSelectionRangeCamFOVAngleThreshold;                    // 0x0078(0x0004) (Config)
	float                                              m_fCamFOVScalar;                                          // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPlayerSelection");
		return ptr;
	}


	float GetSelectionAngle(class UBioEpicPawnBehavior* pBehavior, float fRange);
	float GetSelectionRange(class UBioEpicPawnBehavior* pBehavior);
	bool IsSelectable(class AActor* oTarget, class UBioEpicPawnBehavior* sourcePawnBehavior);
	void DrawSelectionReticule(class AActor* oTarget, const struct FColor& ReticuleColor, float fOffset);
	bool IsInLineOfSightFrom(const struct FVector& vSourceLoc, class AActor* oTarget);
	void Init();
	bool SetPreviousSelectionMode(bool bForceActive);
	bool SetSelectionMode(TEnumAsByte<EGeneralSelectionMode> nSelectionMode);
	bool UpdateSelection(float fDeltaTime);
};


// Class BIOC_Base.BioSquadAPI
// 0x0000 (0x01F0 - 0x01F0)
class ABioSquadAPI : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSquadAPI");
		return ptr;
	}


	void DisplaySquadDebug();
	void ProcessPoint(TEnumAsByte<EPathNodeAction> HowPointWasReached, const struct FVector& Location_, const struct FRotator& Orientation, const struct FName& ActionOn);
	void Initalize();
};


// Class BIOC_Base.BioBaseSquad
// 0x016C (0x035C - 0x01F0)
class ABioBaseSquad : public ABioSquadAPI
{
public:
	TEnumAsByte<EeSTAT_Following>                      STAT_Following;                                           // 0x01F0(0x0001)
	TEnumAsByte<EOrientationType>                      BaseFollowOrientation;                                    // 0x01F1(0x0001) (Edit)
	TEnumAsByte<EOrientationType>                      BaseRestOrientation;                                      // 0x01F2(0x0001) (Edit)
	TEnumAsByte<EBioHoldPositionMode>                  m_HoldMode;                                               // 0x01F3(0x0001)
	TArray<struct FMemberData>                         Members;                                                  // 0x01F4(0x000C) (NeedCtorLink)
	int                                                LastNodeAdded;                                            // 0x0200(0x0004)
	struct FSLocation                                  LastNodeLocation;                                         // 0x0204(0x0010)
	TArray<struct FPathNodeData>                       PathNodes;                                                // 0x0214(0x000C) (NeedCtorLink)
	struct FPathNodeData                               LastGoodPoint;                                            // 0x0220(0x0030)
	int                                                SquadStoppedNodeAdded;                                    // 0x0250(0x0004)
	float                                              SquadStoppedTime;                                         // 0x0254(0x0004)
	int                                                MaxPathNodes;                                             // 0x0258(0x0004)
	struct FVector                                     LastLeaderPosition;                                       // 0x025C(0x000C)
	class UClass*                                      BaseFollowFormation;                                      // 0x0268(0x0004) (Edit)
	class UClass*                                      BaseRestFormations;                                       // 0x026C(0x0004) (Edit)
	unsigned long                                      NoSquadFollowing : 1;                                     // 0x0270(0x0004) (Edit)
	unsigned long                                      SquadCanHoldPosition : 1;                                 // 0x0270(0x0004) (Edit)
	unsigned long                                      m_bShouldUseRestFormation : 1;                            // 0x0270(0x0004)
	unsigned long                                      m_bAllowedToUseRestFormation : 1;                         // 0x0270(0x0004) (Edit)
	unsigned long                                      InvertFormation : 1;                                      // 0x0270(0x0004)
	unsigned long                                      m_bAllowPawns : 1;                                        // 0x0270(0x0004)
	unsigned long                                      m_bAllowVehicles : 1;                                     // 0x0270(0x0004)
	unsigned long                                      bHoldingPosition : 1;                                     // 0x0270(0x0004)
	unsigned long                                      bDBG_Log : 1;                                             // 0x0270(0x0004)
	unsigned long                                      ShowPartyFollow : 1;                                      // 0x0270(0x0004) (Edit)
	unsigned long                                      m_bCheckPlayPen : 1;                                      // 0x0270(0x0004) (Edit)
	unsigned long                                      m_bHasCover : 1;                                          // 0x0270(0x0004) (Edit)
	unsigned long                                      m_bEngagedHostileAction : 1;                              // 0x0270(0x0004)
	unsigned long                                      m_bHasSpawnedLootBag : 1;                                 // 0x0270(0x0004)
	float                                              RestThresholdTime;                                        // 0x0274(0x0004) (Edit)
	float                                              LeaderMovmentDeadZone;                                    // 0x0278(0x0004) (Edit)
	int                                                m_nPauseFollowingLeaderTracking;                          // 0x027C(0x0004) (Transient)
	float                                              ThreatLineOfSight;                                        // 0x0280(0x0004)
	float                                              ThreatExposedLineOfSight;                                 // 0x0284(0x0004)
	float                                              ThreatIsMyTarget;                                         // 0x0288(0x0004)
	float                                              ThreatTargetedBySquadMember;                              // 0x028C(0x0004)
	float                                              ThreatTargetingMe;                                        // 0x0290(0x0004)
	float                                              ThreatTargetingSquadMember;                               // 0x0294(0x0004)
	float                                              ThreatAttackedMe;                                         // 0x0298(0x0004)
	float                                              ThreatCastAtMe;                                           // 0x029C(0x0004)
	float                                              ThreatDistanceSelf;                                       // 0x02A0(0x0004)
	float                                              ThreatDistanceSquadMember;                                // 0x02A4(0x0004)
	float                                              ThreatDistanceInsideProximity;                            // 0x02A8(0x0004)
	float                                              ThreatIsVehicle;                                          // 0x02AC(0x0004)
	float                                              ThreatIsHacked;                                           // 0x02B0(0x0004)
	unsigned long                                      m_bEnteringRestFormation : 1;                             // 0x02B4(0x0004) (Transient)
	unsigned long                                      m_bLastShouldUseRestFormation : 1;                        // 0x02B4(0x0004) (Transient)
	struct FSLocation                                  FollowLocation;                                           // 0x02B8(0x0010)
	struct FSLocation                                  LastUpdatedFollowLocation;                                // 0x02C8(0x0010)
	int                                                CurrentPartyFormation;                                    // 0x02D8(0x0004)
	int                                                FollowDistance;                                           // 0x02DC(0x0004)
	class ABioDEBUGMarker*                             DBGMarker;                                                // 0x02E0(0x0004)
	class ABioDEBUGMarker*                             DebugLines;                                               // 0x02E4(0x0004) (Edit)
	class UClass*                                      SquadFaction;                                             // 0x02E8(0x0004) (Edit, Const)
	class USpriteComponent*                            m_oSprite;                                                // 0x02EC(0x0004) (ExportObject, Component, EditInline)
	class UTexture2D*                                  m_oQASquadIcon;                                           // 0x02F0(0x0004)
	TArray<class ABioBaseSquad*>                       m_aPerceivedSquads;                                       // 0x02F4(0x000C) (NeedCtorLink)
	struct FMap_Mirror                                 m_aSquadPlayPen;                                          // 0x0300(0x0014) (Const, Native)
	struct FMap_Mirror                                 m_aSquadPlayPenOld;                                       // 0x0314(0x0014) (Const, Native)
	TArray<class AActor*>                              m_aoDynamicCoverActors;                                   // 0x0328(0x000C) (Edit, NeedCtorLink)
	TArray<struct FStrategyChoice>                     StrategyArray;                                            // 0x0334(0x000C) (Edit, EditFixedSize, NeedCtorLink, EditInline)
	int                                                m_nLootMemberThreshHold;                                  // 0x0340(0x0004) (Edit)
	class UBioArtPlaceableCoverInterface*              m_oTempCoverInterface;                                    // 0x0344(0x0004) (Transient)
	class ABioBaseSquad*                               m_pHackedSquad;                                           // 0x0348(0x0004)
	TArray<struct FCapacityFilteringRecord>            m_aoCapacityFilteringRecords;                             // 0x034C(0x000C) (NeedCtorLink)
	float                                              m_fThreatModifier;                                        // 0x0358(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioBaseSquad");
		return ptr;
	}


	int GetMaxHazardLevel();
	void NotifyMemberCoverDisabled(class APawn* oWho, class AActor* Link, int SlotIdx);
	void Resurrect(float fPercentOfHealthRegained, bool bIsInstantaneous);
	class UClass* STATIC_GetSaveObjectClass();
	void OnThrowGrenade(class ABioPawn* pPawn);
	bool HasGrenades(class ABioPawn* pPawn);
	class ABioBaseSquad* MakeHackable();
	void SetHackedSquad();
	bool HasCover();
	void SquadHandleChatterEvent(unsigned char eSoundSet, int nFlags);
	void OnUntargetedByHostile(class AActor* oHostile, bool bHostileAboutToRetargetSquad);
	void OnTargetedByHostile(class AActor* oHostile);
	bool UseCapability(class ABioAiController* oMember, class UBioCapability* oCap, TEnumAsByte<EeATTACK_TYPE> eAttackType, class APawn* oTarget, bool bIgnoreWounds, bool bSprayCloseRange);
	class UBioCapability* GetBestAttack(class ABioPawn* oMemberPawn, class AActor* oTarget, bool bAllowWeaponSwitch, float fPowerUsePercent, TEnumAsByte<EeATTACK_TYPE>* eAttackType);
	class UBioCapability* GetBestDefense(class ABioPawn* oMemberPawn, bool bAlwaysAllowDefense, TEnumAsByte<EeATTACK_TYPE>* eAttackType);
	class UBioCapability* GetBestWeapon(class ABioPawn* oMemberPawn, class AActor* oTarget, bool bAllowWeaponSwitch);
	class UBioCapability* GetBestAttackPower(class ABioPawn* oMemberPawn, class AActor* oTarget);
	class UBioCapability* GetBestDisableDebuffPower(class ABioPawn* oMemberPawn, class AActor* oTarget);
	class UBioCapability* GetSuicidePower(class ABioPawn* oMemberPawn, class AActor* oTarget);
	class UBioCapability* GetBestHealingPower(class ABioPawn* oMemberPawn, class ABioPawn** oTargetSquadMember);
	class ABioPawn* GetBestTargetForHeal(class ABioPawn* oCaster, class UBioCapability* oHealPower, float* fRangeToTarget);
	bool IsPawnHealthBelowThreshold(class ABioPawn* oTestPawn, float fThreshold);
	float GetPawnShieldPct(class ABioPawn* oTestPawn);
	float GetPawnHealthPct(class ABioPawn* oTestPawn);
	class UBioCapability* GetBestDefensivePower(class ABioPawn* oMemberPawn);
	class UBioCapability* GetBestBuffPower(class ABioPawn* oMemberPawn);
	bool IsRequiredWeaponEquipped(class UBioPawnBehavior* oCasterBehavior, class UBioCapability* oCap);
	bool GetAoEAttackValue(const struct FVector& vTarget, float fRadius, int* nEnemyCount, int* nSquadCount);
	TEnumAsByte<EBioItemWeaponRangedType> GetActiveWeaponType(class ABioPawn* oMemberPawn);
	bool IsSquadCastingSpell(const struct FName& nmSpell);
	class ABioAiController* GetNearestSquadMember(const struct FVector& vTarget, TArray<class ABioAiController*> aoIgnoreMembers, float* fBestDistToTargetSq);
	class ABioAiController* GetNearestSquadMemberToObject(class AActor* oTarget, TArray<class ABioAiController*> aoIgnoreMembers, float* fBestDistToTargetSq);
	float CalculateThreat(class ABioAiController* oMember, class APawn* oEnemy, bool bAttackedMe, bool bCastAtMe, bool bLOSRequired);
	class APawn* FindBestTarget(class ABioAiController* oMember, class APawn* oIgnoreTarget, bool bLOSRequired);
	TEnumAsByte<EePawnValidType> IsBioPawnHostile(class AActor* oTestActor, bool bRequiresTargetFlag);
	TEnumAsByte<EePawnValidType> IsBioPawnValid(class AActor* oTestActor, bool bRequiresTargetFlag);
	void onMemberArrivedAtTarget(class APawn* oMember);
	void OnMemberCasting(class APawn* oMember, class APawn* oTarget, const struct FName& nmPower);
	void OnMemberAttacking(class APawn* oMember, class APawn* oTarget, const struct FName& nmWeapon);
	void OnMemberShieldsDown(class APawn* oWho);
	void HearNoise(class APawn* Who, float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType);
	void OnMemberLeftPlayPen(class ABioPawn* oWho, class ANavigationPoint* oNavPoint);
	struct FVector GetNewSpawnLocation();
	void OnDamageDone(class APawn* oTarget, class AActor* pDamageCausingActor);
	void GenerateAbilityDisabledEvent(class APawn* oMember, int nEnableType, const struct FName& nmSubType);
	void GenerateAbilityEnabledEvent(class APawn* oMember, int nEnableType, const struct FName& nmSubType);
	void GenerateCastAtEvent(class APawn* oMember, class APawn* oAttacker, const struct FName& nmPower);
	void GenerateAttackedEvent(class APawn* oMember, class APawn* oAttacker, const struct FName& nmWeapon);
	void GenerateDeathEvent(class APawn* oMember, class AController* oKiller);
	void GenerateProximityAlarmEvent(class APawn* oMember, class AActor* oTarget, int nRelationship);
	void GenerateTakeDamageEvent(class APawn* oTarget, float fPreMitigationDamage, float Damage, class AController* InstigatedBy, class UClass* DamageType);
	TEnumAsByte<EBioFactionTypes> GetFaction();
	TEnumAsByte<EBioFactionRelationship> GetRelationTo(TEnumAsByte<EBioFactionTypes> nType);
	TEnumAsByte<EBioFactionRelationship> FactionRelationship(class ABioBaseSquad* oOtherSquad);
	void MemberActionComplete_None(class ABioPawn* Who, const struct FName& Action, int nReason);
	void ReportStats(float DeltaTime);
	void SetFollowDistance(int Value);
	int GetFollowDistance();
	void DumpPathandpoints();
	void DisplaySquadDebug();
	struct FString Rotstr(const struct FRotator& R);
	struct FString LocStrSegment(const struct FSLocation& Num);
	struct FString LocStr2(const struct FSLocation& Num);
	struct FString LocStr(const struct FSLocation& Num);
	struct FSLocation NodeLoc(const struct FSLocation& Num);
	struct FSLocation DecLoc(const struct FSLocation& Num);
	struct FSLocation IncLoc(const struct FSLocation& Num);
	bool DetectLedgeToOffset(int SquadId, const struct FVector& EscapeLoc, const struct FVector& OffsetLoc);
	struct FVector GetNodePoint(const struct FSLocation& nLoc);
	struct FRotator GetNodeRotation(const struct FSLocation& nLoc);
	bool WithinRangeOfFollowMarker(float Dist);
	bool MembersAtFollowMark(int SquadId);
	bool AllMembersAtFollowMark();
	int GetPathLength();
	struct FVector OffsetPointOnPath(int nFormationPosition, const struct FSLocation& nLoc);
	bool FindLocationBackFromLocation(float fUnrealUnits, const struct FSLocation& StartLoc, int nPartyMember, struct FSLocation* TrailLoc);
	bool GetLocationFromHead(float fUnrealUnits, int nPartyMember, struct FSLocation* TrailLoc);
	bool GetLocationFromHeadForMember(int nPartyMember, struct FSLocation* TrailLoc);
	bool ComputeEscapeLocation(int idx, struct FSLocation* NewLoc);
	struct FRotator GetMemberRotation(class ABioPawn* P);
	void ResetFollowing(class ABioPawn* P);
	bool TestPathSegments(const struct FSLocation& StartLoc, const struct FSLocation& EndLoc, const struct FSLocation& NewEndLoc);
	void SetEscapeLocation(int Index, const struct FSLocation& Loc);
	struct FSLocation GetEscapeLocation(int Index);
	void EnterRestFormation();
	void EnterFollowFormation();
	void ProcessLeaderStopped(float DeltaTime);
	void InFollowFormation();
	void InRestFormation();
	void ProcessPoint_UpdatePartyMemberData(float DeltaTime);
	void UpDateFollowMarker();
	void ProcessLeadersPosition_State(TEnumAsByte<EPathNodeAction> HowPointWasReached, const struct FVector& Location_, const struct FRotator& Orientation, const struct FRotator& DirectionOfTravel, const struct FName& ActionOn);
	void TestAndInvertFormation(int Node1, int Node2);
	void AddPathNode(TEnumAsByte<EPathNodeAction> HowPointWasReached, const struct FVector& Location_, const struct FRotator& Orientation, const struct FRotator& DirectionOfTravel, const struct FName& ActionOn);
	void Tick_Follow(float DeltaTime);
	void Leader_Changed(class APawn* OldLeader, class APawn* NewLeader);
	void ClearPathHistory();
	class APawn* RotateSquad(TEnumAsByte<ESquadRotation> eRotationDirection);
	class APawn* GetNextMemberInDirection(int CurrentIndex, TEnumAsByte<ESquadRotation> eRotationDirection);
	class APawn* GetPrevMember(int CurrentIndex);
	class APawn* GetNextMember(int CurrentIndex);
	void MemberRemoved(class APawn* oPawn);
	void MemberAdded(int nIndex);
	int AddMemberInternal(class APawn* Pawn);
	int AddMember(class APawn* Pawn);
	bool GetInRestFormation();
	TEnumAsByte<EOrientationType> GetRestOrientationType();
	TEnumAsByte<EOrientationType> GetFollowOrientationType();
	TEnumAsByte<EOrientationType> GetOrientationType();
	class UClass* GetRestFormation();
	class UClass* GetFollowFormation();
	bool GetCanUseOffsetPositions();
	class UClass* GetFormation();
	void BioBeginPlay();
	void Initalize();
	void OnFactionChanged(class UClass* oOldFaction, class UClass* oNewFaction);
	int GetNumberOfLiveMembers();
	void SetFaction(class UClass* oNewFaction);
	void DebugDisplay();
	class UBioEpicPawnBehavior* GetPawnBehavior(class AActor* oActor);
	class ABioBaseSquad* GetSquad(class AActor* oActor);
	void CancelCapability(class UBioCapability* oCapability);
	float GetCapabilityPowerBuildUp(class UBioCapability* oCapability);
	float GetCapabilityImpactRadius(class UBioCapability* oCapability);
	bool GetCapabilityIsEnabled(class UBioCapability* oCapability);
	float GetCapabilityCoolDownTimeRemaining(class UBioCapability* oCapability);
	class UBioSeqData* AddCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget);
	class UBioSeqData* DoCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget);
	class UBioCapability* GetBestFor(TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps);
	bool FilterByMapped(TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByDeliveredPowerPendingActivation(TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByDeliverablePower(TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByMember(class APawn* oMember, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByRange(const struct FVector& vTarget, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByIgnorelist(TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByTechnique(TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByCapType(TEnumAsByte<EBioCapMode> nMode, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void FilterByCapability(TEnumAsByte<EBioCapabilityTypes> CapType, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps);
	void GetSquadMembersCapabilities(class APawn* oMember, TEnumAsByte<EBioCapabilityTypes> CapType, bool bFilter, TArray<class UBioCapability*>* aoOutCaps);
	void GetSquadCapabilities(TEnumAsByte<EBioCapabilityTypes> CapType, bool bFilter, TArray<class UBioCapability*>* aoOutCaps);
	void RecomputeCapabilities();
	void BySortedBestRange(class APawn* oTarget, const struct FVector& vTarget, TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap);
	void BySortedRank(TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap);
	void ByTechnique(TEnumAsByte<EBioCapabilityTypes> nCapType, TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap);
	void ByCapabilitys(TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap);
	bool IsCapabilityValid(class UBioCapability* oCap);
	int IsInRange(class UBioCapability* oCap, class APawn* oPawn, const struct FVector& vLocation);
	int CountOfMembers(TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps);
	TArray<struct FName> GetStrategyList();
	bool StopFollowerHoldPosition();
	bool StartFollowerHoldPosition(TArray<class ABioSquadHoldMarker*> aoHoldPositions, bool bLeaderHoldPosition);
	class APawn* FindSquadMemberByTag(const struct FName& nmTag);
	int FreeCoverSpots();
	void OnSpawnOrLevelLoad(bool bCalledFromSpawn);
	void OnProximityAlarm(class APawn* oMember, class AActor* oTarget, int nRelationship);
	void OnSquadSeen(class ABioBaseSquad* oSquad);
	void OnActionComplete_Movement(class APawn* oMember, const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation);
	void OnActionComplete_Combat(class APawn* oMember, const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget);
	void OnDamaged(class APawn* oMember, class AController* oInstigator, float fDamage);
	void OnCastAt(class APawn* oMember, class APawn* oAttacker, const struct FName& nmPower);
	void OnAttacked(class APawn* oMember, class APawn* oAttacker, const struct FName& nmWeapon);
	void OnAbilityDisabled(class APawn* oMember, int nEnableType, const struct FName& nmSubType);
	void OnAbilityEnabled(class APawn* oMember, int nEnableType, const struct FName& nmSubType);
	void OnNoCombatAction(class APawn* oMember);
	void OnDeath(class APawn* oMember, class AController* oKiller);
	void PushMoveWithLocking(class ABioAiController* oMember, class AActor* oTarget, float fTolerance, bool bWalking, float fMovementDelay, bool bCrouch);
	void onSquadCoverEvaluate(class APawn* oWho, class UBioCoverInterface* oCover, int nSlot);
	bool GetNearestCoverInRangeOfPoint(class APawn* pSquadPawn, const struct FVector& vPosition, float fSearchRange, struct FCoverRecord* stCoverRecord);
	struct FCoverRecord FindSquadCoverNearobject(class AActor* oObject, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank);
	struct FCoverRecord FindSquadCoverNearPoint(const struct FVector& vPoint, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank);
	struct FCoverRecord FindCoverNearobject(class AActor* oObject, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank);
	struct FCoverRecord FindCoverNearPoint(const struct FVector& vPoint, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank);
	void AllPlaypen(class UClass* NavClass, class ANavigationPoint** oNavPoint);
	void ListNavNodesNearWithLOS(class AActor* oTarget, class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, class ANavigationPoint** oNavPoint);
	void ListNavNodesNear(class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, class ANavigationPoint** oNavPoint);
	class ANavigationPoint* FindNavNodeNearWithLOS(class AActor* oTarget, class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, float fMaxRange);
	class ANavigationPoint* FindNavNodeNear(class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, float fMaxRange);
	struct FCoverRecord ReevaluateRankOfCover(class UBioCoverInterface* oCover, const struct FVector& vUserLocation, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, class AController* oCtrl, float fMaxDist, int nMinRank);
	struct FCoverRecord SelectBestCover(class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, TArray<struct FCoverRecord> aoCoverSlots, int nMinRank);
	void GetAllCoverSlots(const struct FVector& vPoint, float fMaxDist, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, TArray<class AActor*> aoCoverObjects, class AController* oClaimingCover, TArray<struct FCoverRecord>* out_aoCoverSlots);
	void GetRankOfSlot(class UBioCoverInterface* oCover, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, class AController* oCtrl, struct FCoverRecord* oRec);
	void GetRankedCover(class UBioCoverInterface* oCover, const struct FVector& vUserLocation, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, bool bSort, class AController* oCtrl, float fMaxDist, TArray<struct FCoverRecord>* out_aoCoverSlots);
	void AllActionsComplete(class APawn* Who);
	void GenerateAllActionsComplete(class APawn* oPawn);
	bool IsPositionInPlaypen(struct FVector* vPos);
	bool HasPlaypen();
	bool IsNavigationPointInPlaypen(class ANavigationPoint* oNav);
	bool IsNavReferenceInPlaypen(const struct FNavReference& oNav);
	bool IsCoverInPlaypen(class AActor* oCover);
	void ValidatePlayPen();
	void PerceivedPawnsOfRelation(TEnumAsByte<EBioFactionRelationship> nRelation, class APawn** oPawn);
	void PerceivedPawns(class APawn** oPawn);
	void SquadMembers(class ABioAiController** oController);
	void TargetingMe(class APawn* oTargetingWho, class APawn** oPawn);
	bool CanShoot(class APawn* oSource, class APawn* oTarget);
	bool CanShootExposed(class APawn* oSource, class APawn* oTarget, int* bExposed);
	void RemoveSquadFromPerception(class ABioBaseSquad* pSquad);
	bool IsPawnPerceived(class APawn* pPawn);
	bool IsSquadPerceived(class ABioBaseSquad* pSquad);
	void AddSquadToPerception(class ABioBaseSquad* pSquad, class APawn* pSource, class APawn* pTarget);
	void ClearMovementOrders(int nIndex);
	void ClearTacticalOrders(int nIndex);
	TEnumAsByte<EFollowFormation> GetSquadFollowFormation();
	void SetSquadFollowFormation(TEnumAsByte<EFollowFormation> eFormation, bool bForceFormation, int iSquadMember);
	void SetMemberAttackTarget(int nIndex, class APawn* oAttackTarget);
	class APawn* GetMemberAttackTarget(int nIndex);
	void SetMemberHoldPosition(int nIndex, const struct FVector& vPosition);
	struct FVector GetMemberHoldPosition(int nIndex);
	bool GetMemberActionOrderAssigned(int nIndex);
	TEnumAsByte<EBioItemWeaponRangedType> GetMemberDelayedSwitchWeapon(int nIndex);
	void SetMemberSwitchWeapon(int nIndex, TEnumAsByte<EBioItemWeaponRangedType> eWeapon);
	TEnumAsByte<EBioItemWeaponRangedType> GetMemberSwitchWeapon(int nIndex);
	void SetMemberMoveOrderAssigned(int nIndex, bool bOrderAssigned);
	bool GetMemberMoveOrderAssigned(int nIndex);
	void SetMemberCurrentlyMoving(int nIndex, bool bMoving);
	bool GetMemberCurrentlyMoving(int nIndex);
	void SetMemberFormation(int nIndex, TEnumAsByte<EFollowFormation> eFormation);
	TEnumAsByte<EFollowFormation> GetMemberFormation(int nIndex);
	void SetMemberTargetLocation(int nIndex, const struct FVector& vLocation);
	struct FVector GetMemberTargetLocation(int nIndex);
	void SetMemberTacticalPower(int nIndex, const struct FName& nmTacticalPower);
	struct FName GetMemberTacticalPower(int nIndex);
	void SetMemberTacticalAction(int nIndex, TEnumAsByte<EBioTacticalAction> eTacticalAction);
	TEnumAsByte<EBioTacticalAction> GetMemberTacticalAction(int nIndex);
	void SetMemberCoverAssigned(int nIndex, bool bCoverAssigned);
	bool GetMemberCoverAssigned(int nIndex);
	void SetMemberCoverRecord(int nIndex, const struct FCoverRecord& stCoverRecord);
	bool GetMemberCoverRecord(int nIndex, struct FCoverRecord* out_stCoverRecord);
	void SetMemberMoveDelayTime(int nIndex, float fMoveDelayTime);
	float GetMemberMoveDelayTime(int nIndex);
	void SetMemberMoveLocation(int nIndex, const struct FVector& vLocation);
	struct FVector GetMemberMoveLocation(int nIndex);
	void SetMemberMoveIndicator(int nIndex, class ABioTacticalMoveToIndicator* oIndicator);
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator(int nIndex);
	bool RemoveMemberByIndex(int nIndex);
	bool RemoveMember(class APawn* pPawn);
	void ClearSquad();
	int GetMemberIndex(class APawn* pPawn);
	class APawn* GetMember(int nIndex);
	class APawn* GetSquadLeader();
	bool SetSquadLeader(class APawn* pPawn);
	int GetHackedSquadSize();
	int GetSquadSize();
	bool IsInSquad(class APawn* pPawn);
	void ApplyTacticalOrders(class AActor* oMember);
	void OnSetSquadFollowFormation(TEnumAsByte<EFollowFormation> eFormation);
};


// Class BIOC_Base.BioFaction
// 0x0018 (0x0054 - 0x003C)
class UBioFaction : public UObject
{
public:
	TEnumAsByte<EBioFactionTypes>                      SquadFaction;                                             // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EBioFactionRelationship>>       SquadRelations;                                           // 0x0040(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  SquadIcon;                                                // 0x004C(0x0004) (Edit)
	unsigned long                                      m_bIsImmuneToPhysics : 1;                                 // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFaction");
		return ptr;
	}


	TEnumAsByte<EBioFactionRelationship> STATIC_GetRelationTo(TEnumAsByte<EBioFactionTypes> nType);
};


// Class BIOC_Base.BioFaction_Hacked
// 0x0000 (0x0054 - 0x0054)
class UBioFaction_Hacked : public UBioFaction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFaction_Hacked");
		return ptr;
	}

};


// Class BIOC_Base.BioFaction_Player
// 0x0000 (0x0054 - 0x0054)
class UBioFaction_Player : public UBioFaction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFaction_Player");
		return ptr;
	}

};


// Class BIOC_Base.BioFaction_Vehicle
// 0x0000 (0x0054 - 0x0054)
class UBioFaction_Vehicle : public UBioFaction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFaction_Vehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioFormations
// 0x0014 (0x0050 - 0x003C)
class UBioFormations : public UObject
{
public:
	TArray<struct FFormationPosition>                  FormationPos;                                             // 0x003C(0x000C) (NeedCtorLink)
	int                                                MaxFormationMembers;                                      // 0x0048(0x0004)
	unsigned long                                      m_bUseOffsetPositions : 1;                                // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFormations");
		return ptr;
	}


	int STATIC_GetEscapeDistance(int idx);
	struct FRotator STATIC_GetFormationFacing(int idx, bool InvertFormation);
	struct FVector STATIC_GetFormationOffset(int idx, bool InvertFormation);
};


// Class BIOC_Base.BioPlayerSquad
// 0x017C (0x04D8 - 0x035C)
class ABioPlayerSquad : public ABioBaseSquad
{
public:
	class UClass*                                      CombatRestFormations;                                     // 0x035C(0x0004) (Edit)
	TEnumAsByte<EOrientationType>                      CombatRestOrientation;                                    // 0x0360(0x0001) (Edit)
	TEnumAsByte<EBioGameOverCondition>                 m_eGameOverCondition;                                     // 0x0361(0x0001) (Config)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0362(0x0002) MISSED OFFSET
	unsigned long                                      CombatArea : 1;                                           // 0x0364(0x0004) (Edit)
	unsigned long                                      m_bSquadHasVehicle : 1;                                   // 0x0364(0x0004)
	unsigned long                                      m_bDebugPartyCombatAI : 1;                                // 0x0364(0x0004) (Config)
	unsigned long                                      bLogXPActions : 1;                                        // 0x0364(0x0004)
	unsigned long                                      m_bCombatStateLogging : 1;                                // 0x0364(0x0004)
	class AController*                                 m_pController;                                            // 0x0368(0x0004) (Transient)
	int                                                m_nSelectedSquadMember;                                   // 0x036C(0x0004)
	class ABioPawn*                                    m_playerPawn;                                             // 0x0370(0x0004) (Transient)
	class APawn*                                       m_oSquadLeader;                                           // 0x0374(0x0004) (Transient)
	float                                              m_fStartThreshold_pistol;                                 // 0x0378(0x0004) (Config)
	float                                              m_fStartThreshold_Shotgun;                                // 0x037C(0x0004) (Config)
	float                                              m_fStartThreshold_Assult;                                 // 0x0380(0x0004) (Config)
	float                                              m_fStartThreshold_Sniper;                                 // 0x0384(0x0004) (Config)
	float                                              m_fStopThreshold_pistol;                                  // 0x0388(0x0004) (Config)
	float                                              m_fStopThreshold_Shotgun;                                 // 0x038C(0x0004) (Config)
	float                                              m_fStopThreshold_Assult;                                  // 0x0390(0x0004) (Config)
	float                                              m_fStopThreshold_Sniper;                                  // 0x0394(0x0004) (Config)
	float                                              m_fDriftRadius_pistol;                                    // 0x0398(0x0004) (Config)
	float                                              m_fDriftRadius_Shotgun;                                   // 0x039C(0x0004) (Config)
	float                                              m_fDriftRadius_Assult;                                    // 0x03A0(0x0004) (Config)
	float                                              m_fDriftRadius_Sniper;                                    // 0x03A4(0x0004) (Config)
	float                                              SquadReformRange;                                         // 0x03A8(0x0004) (Config)
	float                                              m_fPerceptionTolerance;                                   // 0x03AC(0x0004) (Config)
	int                                                m_nSquadExperience;                                       // 0x03B0(0x0004)
	int                                                m_nMaxLevel;                                              // 0x03B4(0x0004)
	int                                                m_nMinLevel;                                              // 0x03B8(0x0004)
	int                                                m_nSquadLevel;                                            // 0x03BC(0x0004)
	class UBio2DA*                                     m_oXPTable;                                               // 0x03C0(0x0004)
	class UBio2DA*                                     m_oCreditsTable;                                          // 0x03C4(0x0004)
	float                                              m_fInCombatTimer;                                         // 0x03C8(0x0004)
	float                                              m_fCombatCooldownTime;                                    // 0x03CC(0x0004) (Config)
	float                                              m_fInCombatMaxRange;                                      // 0x03D0(0x0004) (Config)
	float                                              m_fRevivalRange;                                          // 0x03D4(0x0004) (Config)
	float                                              m_fVehicleInCombatMaxRange;                               // 0x03D8(0x0004) (Config)
	class ABioVisualEffect*                            m_pTacticalBubbleEffect;                                  // 0x03DC(0x0004) (Transient)
	struct FString                                     m_sTacticalBubbleEffectTemplate;                          // 0x03E0(0x000C) (NeedCtorLink)
	class UBioInventory*                               m_Inventory;                                              // 0x03EC(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      m_bCombatEnabled : 1;                                     // 0x03F0(0x0004) (Transient)
	int                                                m_nGrenadePowerIconReference;                             // 0x03F4(0x0004) (Config)
	int                                                m_nGrenadeDetonatePowerIconReference;                     // 0x03F8(0x0004) (Config)
	int                                                m_nPistolPowerIconReference;                              // 0x03FC(0x0004) (Config)
	int                                                m_nShotgunPowerIconReference;                             // 0x0400(0x0004) (Config)
	int                                                m_nAssaultPowerIconReference;                             // 0x0404(0x0004) (Config)
	int                                                m_nSniperPowerIconReference;                              // 0x0408(0x0004) (Config)
	int                                                m_nMaxInventoryItems;                                     // 0x040C(0x0004) (Config)
	int                                                m_nMaxInventoryWarningThreshold;                          // 0x0410(0x0004) (Config)
	struct FSquadTargetData                            m_aSquadTargets[0x3];                                     // 0x0414(0x0020) (Transient)
	struct FSquadTargetData                            m_aSimpleSquadTargets[0x3];                               // 0x0474(0x0020) (Transient)
	float                                              m_fPercentHealthOnResurrection;                           // 0x04D4(0x0004) (Const, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPlayerSquad");
		return ptr;
	}


	float GetPercentHealthOnResurrection();
	float GetCombatCooldownTime();
	void OnSetAttackTarget(class APawn* pPawn, class AActor* pTarget);
	void OnSetSquadFollowFormation(TEnumAsByte<EFollowFormation> eFormation);
	void UpdateCombatTimer(float fDeltaTime);
	void ResetCombatTimer(bool bTriggerEvents);
	void ClearMemberMovementCommand(class ABioPawn* pPawn);
	class APawn* GetSquadLeader();
	bool SetSquadLeader(class APawn* pPawn);
	class UBioInventory* GetInventory();
	void SquadExitCombatMode();
	void SquadEnterCombatMode(bool bEngageEnemy);
	void NotifyMemberCoverDisabled(class APawn* oWho, class AActor* Link, int SlotIdx);
	class UClass* STATIC_GetSaveObjectClass();
	void OnThrowGrenade(class ABioPawn* pPawn);
	bool HasGrenades(class ABioPawn* pPawn);
	class UBioCapability* GetReadyActivationPower(class ABioPawn* oMemberPawn);
	int GetSquadScanAbility();
	struct FVector ProxyGetContextSensitiveOffset(int nIndex, const struct FRotator& rRotation);
	void ProbeCombatStop();
	void ProbeOnCombatEnd();
	void ProbeOnCombatBegin();
	void OnCombatEnd();
	void OnCombatBegin();
	bool IsInCombat();
	void OnDeath(class APawn* pPawn, class AController* pKiller);
	int AddMemberInternal(class APawn* Pawn);
	void Tick(float DeltaTime);
	void DrawSquadHUD(class ABioHUD* oHud, float fGuiAlpha);
	void MemberRemoved(class APawn* oPawn);
	void MemberAdded(int nIndex);
	float GetInventoryResourceFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType);
	int GetInventoryResourceInt(TEnumAsByte<EInventoryResourceTypes> eInvResType);
	void XPTrack(int nXPGrant, const struct FString& sXPSourceType, int nSquadLevel);
	int MinionKillsNeededForLevelUp();
	void GrantExperience(int nXPGrant, TEnumAsByte<EExperienceSourceType> eXPSourceType);
	bool LookupCredits(int nPlayerSquadLevel, const struct FName& nmCREDClass, int* nCredits);
	bool LookupXP(int nPlayerSquadLevel, const struct FName& nmXPClass, int* nXP);
	int GetPlayerSquadExperience();
	int GetPlayerSquadLevel();
	int GetMinSquadLevel();
	int GetMaxSquadLevel();
	void OnMemberCasting(class APawn* oMember, class APawn* oTarget, const struct FName& nmPower);
	void OnMemberAttacking(class APawn* oMember, class APawn* oTarget, const struct FName& nmWeapon);
	void OnDamageDone(class APawn* oTarget, class AActor* pDamageCausingActor);
	void OnDamaged(class APawn* oMember, class AController* oInstigator, float fDamage);
	void OnCastAt(class APawn* oMember, class APawn* oAttacker, const struct FName& nmPower);
	void OnAttacked(class APawn* oMember, class APawn* oAttacker, const struct FName& nmWeapon);
	void onPlayerEnterCover();
	bool OnPlayerSwitchStance(unsigned char FromState, unsigned char ToState);
	struct FString GetActionString(TEnumAsByte<EBioTacticalAction> eAction, class ABioPawn* oPawn);
	void DrawDebugHUD(class ABioHUD* HUD, float fGuiAlpha);
	void DrawHUD(class ABioHUD* HUD, float fGuiAlpha);
	void DrawHud_SquadDebug(int I, int nPos, class ABioHUD* HUD);
	void SwapSpareController(class APawn* oPawn);
	void SetSpareController(class AController* newCtrl);
	class AController* GetSpareController();
	float GetWeaponfiringValues_RequiredRadius(class ABioPawn* oMember);
	float GetWeaponfiringValues_StoppingThreshold(class ABioPawn* oMember);
	float GetWeaponfiringValues_StartThreshold(class ABioPawn* oMember);
	TEnumAsByte<EBioItemWeaponRangedType> GetCurrentWeaponType(class ABioPawn* oMember);
	void Leader_Changed(class APawn* OldLeader, class APawn* NewLeader);
	TEnumAsByte<EOrientationType> GetOrientationType();
	class UClass* GetRestFormation();
	void InitPlayerSquadLevel(int nInitLevel);
	void InitPlayerSquadExperience(int nInitXP);
	void Initialize();
	bool IsInventoryThresholdReached();
	bool IsInventoryFull(int i_nItemsToAdd, int* o_nOverBy);
	void GetRankOfSlot(class UBioCoverInterface* oCover, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, class AController* oCtrl, struct FCoverRecord* oRec);
	void ApplyTacticalOrders(class AActor* oMember);
	void BioVINCE_MapName_PartyDeath();
};


// Class BIOC_Base.BioSquadAI
// 0x0014 (0x0370 - 0x035C)
class ABioSquadAI : public ABioBaseSquad
{
public:
	unsigned long                                      EnableSquadAILogging : 1;                                 // 0x035C(0x0004) (Edit)
	int                                                m_nPerceptionIndex;                                       // 0x0360(0x0004)
	float                                              m_fPerceptionTimer;                                       // 0x0364(0x0004)
	float                                              m_fPerceptionFrequency;                                   // 0x0368(0x0004) (Config)
	class UBioProbeCombat*                             m_ProbeCombat;                                            // 0x036C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSquadAI");
		return ptr;
	}


	void OnSquadSeen(class ABioBaseSquad* oSquad);
	void OnDeath(class APawn* oMember, class AController* oKiller);
	void OnThrowGrenade(class ABioPawn* pPawn);
	bool HasGrenades(class ABioPawn* pPawn);
	void MemberRemoved(class APawn* oPawn);
	void ProbeCombatStop(TEnumAsByte<EBioProbeCombatResult> CombatResult);
	void ProbeCombatStart();
};


// Class BIOC_Base.BioSquadHoldMarker
// 0x001C (0x02E8 - 0x02CC)
class ABioSquadHoldMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                                   // 0x02CC(0x0004)
	struct FVector                                     LiftOffset;                                               // 0x02D0(0x000C)
	struct FString                                     BaseTag;                                                  // 0x02DC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSquadHoldMarker");
		return ptr;
	}


	void BioBeginPlay();
	void SetBaseByTag();
};


// Class BIOC_Base.BioSquadLinesComponent
// 0x0018 (0x01D0 - 0x01B8)
class UBioSquadLinesComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bInited : 1;                                              // 0x01B8(0x0004) (Transient)
	struct FColor                                      vPlayPenLineColor;                                        // 0x01BC(0x0004) (Transient)
	struct FColor                                      vSquadLeaderColor;                                        // 0x01C0(0x0004) (Transient)
	struct FColor                                      vSquadMemberColor;                                        // 0x01C4(0x0004) (Transient)
	struct FColor                                      vSquadAssetColor;                                         // 0x01C8(0x0004) (Transient)
	struct FColor                                      vDynamicCoverColor;                                       // 0x01CC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSquadLinesComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioPawn
// 0x02DC (0x07A0 - 0x04C4)
class ABioPawn : public APawn
{
public:
	class UClass*                                      AIController;                                             // 0x04C4(0x0004) (Edit)
	class UBioEventDispatcher*                         m_oEventDispatcher;                                       // 0x04C8(0x0004)
	class UBioPawnBehavior*                            m_oBehavior;                                              // 0x04CC(0x0004) (Edit, EditInline)
	int                                                m_nTalkedToCount;                                         // 0x04D0(0x0004)
	unsigned long                                      m_bCustomAnimationActive : 1;                             // 0x04D4(0x0004)
	unsigned long                                      m_bRetryInitRagdoll : 1;                                  // 0x04D4(0x0004)
	unsigned long                                      m_bBioFallHeightOk : 1;                                   // 0x04D4(0x0004)
	unsigned long                                      m_bOldUpdateSkelWhenNotRendered : 1;                      // 0x04D4(0x0004)
	unsigned long                                      m_bEnableExploreDeathAnim : 1;                            // 0x04D4(0x0004)
	unsigned long                                      m_bInvertRagdollRecoverBoneAxis : 1;                      // 0x04D4(0x0004)
	unsigned long                                      m_bRecoverDirSwap : 1;                                    // 0x04D4(0x0004)
	unsigned long                                      m_bInvertRagdollRecoverDirSwapBoneAxis : 1;               // 0x04D4(0x0004)
	unsigned long                                      m_bCanCleanupCorpse : 1;                                  // 0x04D4(0x0004) (Edit)
	unsigned long                                      m_bEnableLookAtTargeting : 1;                             // 0x04D4(0x0004)
	unsigned long                                      m_bHACKIsGethArmature : 1;                                // 0x04D4(0x0004)
	unsigned long                                      m_bSuppressCrawlerRoll : 1;                               // 0x04D4(0x0004)
	unsigned long                                      m_bEnableStartRootMotion : 1;                             // 0x04D4(0x0004)
	unsigned long                                      m_bEnableStopRootMotion : 1;                              // 0x04D4(0x0004)
	unsigned long                                      m_bUseWallSlidingSpeedAdj : 1;                            // 0x04D4(0x0004)
	unsigned long                                      m_bInGestures : 1;                                        // 0x04D4(0x0004)
	unsigned long                                      m_bEnteringGestures : 1;                                  // 0x04D4(0x0004)
	unsigned long                                      m_bAutoLeaveGestures : 1;                                 // 0x04D4(0x0004)
	unsigned long                                      m_bLeavingGestures : 1;                                   // 0x04D4(0x0004)
	unsigned long                                      m_bUseBoneCameraHookOffset : 1;                           // 0x04D4(0x0004)
	unsigned long                                      m_bRagDollEnabled : 1;                                    // 0x04D4(0x0004)
	unsigned long                                      m_bInConversation : 1;                                    // 0x04D4(0x0004)
	unsigned long                                      m_bCanBeBumped : 1;                                       // 0x04D4(0x0004) (Edit)
	unsigned long                                      m_bAutoLookAtPlayer : 1;                                  // 0x04D4(0x0004) (Edit)
	unsigned long                                      m_bDisableLookAtNotice : 1;                               // 0x04D4(0x0004) (Edit)
	unsigned long                                      m_bCanLeanWeaponFire : 1;                                 // 0x04D4(0x0004) (Edit)
	unsigned long                                      bUseAutoGeneratedHitCollision : 1;                        // 0x04D4(0x0004)
	unsigned long                                      m_bAlwaysTick : 1;                                        // 0x04D4(0x0004) (Edit)
	unsigned long                                      m_bRollingSoundUsed : 1;                                  // 0x04D4(0x0004)
	unsigned long                                      m_bDroneLanded : 1;                                       // 0x04D4(0x0004)
	unsigned long                                      m_bClassificationOverriden : 1;                           // 0x04D4(0x0004) (Edit)
	unsigned long                                      m_bOverrideActorTypePhysics : 1;                          // 0x04D4(0x0004) (Edit)
	unsigned long                                      m_bAllowedToLeavePlaypen : 1;                             // 0x04D8(0x0004) (Edit)
	unsigned long                                      m_bRagdollRecoveryDisabledAIAbilities : 1;                // 0x04D8(0x0004)
	struct FName                                       m_nmCustomAnimationOneShot;                               // 0x04DC(0x0008)
	struct FName                                       m_nmCustomAnimationLooping;                               // 0x04E4(0x0008)
	TEnumAsByte<EBioGrenadeThrowAnimationState>        m_eGrenadeThrowAnimationState;                            // 0x04EC(0x0001)
	TEnumAsByte<EBioRagdollRecoverState>               m_eRagdollRecoverState;                                   // 0x04ED(0x0001)
	TEnumAsByte<EAxis>                                 m_eRagdollRecoverBoneAxis;                                // 0x04EE(0x0001)
	TEnumAsByte<EAxis>                                 m_eRagdollRecoverDirSwapBoneAxis;                         // 0x04EF(0x0001)
	TEnumAsByte<EHopPhysicsStates>                     ePhysHopState;                                            // 0x04F0(0x0001)
	TEnumAsByte<EBioPawnHoppingSurface>                eCurrentHopSurface;                                       // 0x04F1(0x0001)
	TEnumAsByte<EPhysics>                              m_eUseRollingInPhysicsMode;                               // 0x04F2(0x0001)
	TEnumAsByte<EBioGesturePriority>                   m_eGesturePriority;                                       // 0x04F3(0x0001)
	TEnumAsByte<EBioPawnClassification>                m_eClassification;                                        // 0x04F4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04F5(0x0003) MISSED OFFSET
	TArray<class USkeletalMeshComponent*>              m_aoMeshes;                                               // 0x04F8(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	class USkeletalMeshComponent*                      m_oHeadMesh;                                              // 0x0504(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      m_oHairMesh;                                              // 0x0508(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      m_oHeadGearMesh;                                          // 0x050C(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      m_oVisorMesh;                                             // 0x0510(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      m_oFacePlateMesh;                                         // 0x0514(0x0004) (Edit, ExportObject, Component, EditInline)
	TArray<class USkeletalMeshComponent*>              m_aoAccessories;                                          // 0x0518(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	float                                              m_fBioFallHeight;                                         // 0x0524(0x0004)
	unsigned long                                      m_isAnimTreeDirty : 1;                                    // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bTurnInPlaceRequested : 1;                              // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bKillGesturesNow : 1;                                   // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bKillPoseNow : 1;                                       // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bSafeTeleportQueued : 1;                                // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bLookAtNotice : 1;                                      // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bNoWrinkleMapData : 1;                                  // 0x0528(0x0004) (Transient)
	unsigned long                                      bPortArmsEnabled : 1;                                     // 0x0528(0x0004) (Transient)
	unsigned long                                      bCanUsePortArms : 1;                                      // 0x0528(0x0004) (Transient)
	unsigned long                                      bInPortArms : 1;                                          // 0x0528(0x0004) (Transient)
	unsigned long                                      bInCover : 1;                                             // 0x0528(0x0004) (Transient)
	unsigned long                                      bTestNPCCover : 1;                                        // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bCoverNormalUpdated : 1;                                // 0x0528(0x0004) (Transient)
	unsigned long                                      bTestReturnToCover : 1;                                   // 0x0528(0x0004) (Transient)
	unsigned long                                      bCrouchedCover : 1;                                       // 0x0528(0x0004) (Transient)
	unsigned long                                      bAutoCrouched : 1;                                        // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bLastGoodInitalized : 1;                                // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bBumpLastMoving : 1;                                    // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bRollingNotMoving : 1;                                  // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bDisableSoundSets : 1;                                  // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bPreviewBegun : 1;                                      // 0x0528(0x0004) (Transient)
	unsigned long                                      m_bIsChatterSuppressed : 1;                               // 0x0528(0x0004) (Transient)
	struct FVector                                     m_vAimDirection;                                          // 0x052C(0x000C)
	float                                              m_fGrimeGrimeLevel;                                       // 0x0538(0x0004)
	float                                              m_fGrimeDirtLevel;                                        // 0x053C(0x0004)
	float                                              m_fGrimeCombatLevel;                                      // 0x0540(0x0004)
	class ABioVisualEffect*                            m_LifeCrust;                                              // 0x0544(0x0004) (Transient)
	float                                              m_fLifeCrustCount;                                        // 0x0548(0x0004) (Transient)
	class ABioVisualEffect*                            m_LoopedFootstepEffect;                                   // 0x054C(0x0004) (Transient)
	class ANavigationPoint*                            m_oLastPlayPenAnchor;                                     // 0x0550(0x0004) (Const)
	struct FVector                                     m_vSpawnLocation;                                         // 0x0554(0x000C) (Transient)
	struct FString                                     m_sAudioAppearancePrefix;                                 // 0x0560(0x000C) (NeedCtorLink)
	float                                              m_fRagdollStartTime;                                      // 0x056C(0x0004)
	float                                              m_fRagdollRecoverPhysBlendTime;                           // 0x0570(0x0004)
	struct FName                                       m_nmRagdollRecoverBone;                                   // 0x0574(0x0008)
	struct FName                                       m_nmRagdollRecoverDirSwapBone;                            // 0x057C(0x0008)
	float                                              m_fCorpseCleanupFirstAttemptTime;                         // 0x0584(0x0004) (Const, Transient, Config)
	float                                              m_fCorpseCleanupAttemptRetryTime;                         // 0x0588(0x0004) (Const, Transient, Config)
	int                                                m_nMaxCorpseVisibilityCleanupAttempts;                    // 0x058C(0x0004) (Const, Transient, Config)
	float                                              m_fMaxCorpseCleanupDistanceThreshold;                     // 0x0590(0x0004) (Const, Transient, Config)
	float                                              m_fMaxCorpseCleanupScreenSizeThreshold;                   // 0x0594(0x0004) (Const, Transient, Config)
	int                                                m_nCorpseCleanupAttempts;                                 // 0x0598(0x0004) (Transient)
	float                                              m_fLookAtSpeed;                                           // 0x059C(0x0004)
	float                                              m_fLookAtMinHoldTime;                                     // 0x05A0(0x0004)
	float                                              m_fLookAtMaxHoldTime;                                     // 0x05A4(0x0004)
	float                                              m_fLookAtMaxAngle;                                        // 0x05A8(0x0004)
	float                                              m_fLookAtHoldTime;                                        // 0x05AC(0x0004)
	float                                              m_fRunAnimPlaybackPos;                                    // 0x05B0(0x0004)
	float                                              m_fRunAnimPlaybackRate;                                   // 0x05B4(0x0004)
	float                                              m_fRunAnimPlaybackLen;                                    // 0x05B8(0x0004)
	float                                              m_fWalkAnimPlaybackPos;                                   // 0x05BC(0x0004)
	float                                              m_fWalkAnimPlaybackRate;                                  // 0x05C0(0x0004)
	float                                              m_fWalkAnimPlaybackLen;                                   // 0x05C4(0x0004)
	unsigned char                                      m_AsyncDelayTurn;                                         // 0x05C8(0x0001) (Transient)
	unsigned char                                      m_AsyncDelayUpdates;                                      // 0x05C9(0x0001) (Transient)
	TEnumAsByte<EBioCoverStates>                       eCoverState;                                              // 0x05CA(0x0001) (Transient)
	unsigned char                                      eLastMovementLeanBias;                                    // 0x05CB(0x0001) (Transient)
	TEnumAsByte<EBioCoverAnimState>                    eLeanAnimationState;                                      // 0x05CC(0x0001) (Transient)
	TEnumAsByte<EBioCoverAnimState>                    eDesiredLeanAnimationState;                               // 0x05CD(0x0001) (Transient)
	TEnumAsByte<EBioSoundSetType>                      m_ePendingChatter;                                        // 0x05CE(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x1];                                       // 0x05CF(0x0001) MISSED OFFSET
	float                                              m_fWalkStopDistance;                                      // 0x05D0(0x0004) (Transient)
	float                                              m_fRunStopDistance;                                       // 0x05D4(0x0004) (Transient)
	float                                              m_fCollisionReadyHeight;                                  // 0x05D8(0x0004)
	int                                                m_nRootMotionEnabledCount;                                // 0x05DC(0x0004)
	struct FName                                       m_nmEventWeaponEquipStart;                                // 0x05E0(0x0008) (Const)
	struct FName                                       m_nmEventWeaponEquipEnd;                                  // 0x05E8(0x0008) (Const)
	class UBioGestureAnimSetMgr*                       m_pAnimSetMgr;                                            // 0x05F0(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<struct FBioGestDataKey>                     m_aNewGestureData;                                        // 0x05F4(0x000C) (NeedCtorLink)
	float                                              m_fGestureBlendTime;                                      // 0x0600(0x0004) (Transient)
	float                                              m_fGestureBlendOutTime;                                   // 0x0604(0x0004) (Transient)
	struct FVector                                     m_vSafeTeleportLocation;                                  // 0x0608(0x000C) (Transient)
	class ANavigationPoint*                            HopStartNav;                                              // 0x0614(0x0004)
	class ANavigationPoint*                            HopEndNav;                                                // 0x0618(0x0004)
	float                                              m_fBumpMultiplierMin;                                     // 0x061C(0x0004) (Config)
	float                                              m_fBumpMultiplierMax;                                     // 0x0620(0x0004) (Config)
	float                                              m_fLookMultiplier;                                        // 0x0624(0x0004) (Config)
	class UBioLookAt*                                  m_oLookAtData;                                            // 0x0628(0x0004) (Transient)
	struct FMultiMap_Mirror                            m_mAnimsetRegistration;                                   // 0x062C(0x0014) (Const, Native)
	float                                              PortArmsTimer;                                            // 0x0640(0x0004) (Transient)
	float                                              PortArmsPlayerInterval;                                   // 0x0644(0x0004) (Transient, Config)
	float                                              PortArmsNPCInterval;                                      // 0x0648(0x0004) (Transient, Config)
	float                                              PortArmsWedgeHeight;                                      // 0x064C(0x0004) (Transient, Config)
	float                                              PortArmsWedgeRadius;                                      // 0x0650(0x0004) (Transient, Config)
	float                                              CoverPlayerInterval;                                      // 0x0654(0x0004) (Transient, Config)
	float                                              CoverNPCInterval;                                         // 0x0658(0x0004) (Transient, Config)
	float                                              CoverTimer;                                               // 0x065C(0x0004) (Transient)
	float                                              CoverStickyInterval;                                      // 0x0660(0x0004) (Transient, Config)
	float                                              CoverStickyTimer;                                         // 0x0664(0x0004) (Transient)
	float                                              CoverStickyResetInterval;                                 // 0x0668(0x0004) (Transient, Config)
	float                                              CoverStickyResetTimer;                                    // 0x066C(0x0004) (Transient)
	float                                              CoverTestDistance;                                        // 0x0670(0x0004) (Transient, Config)
	float                                              CoverFireTestDistance;                                    // 0x0674(0x0004) (Transient, Config)
	float                                              CoverTestAngle;                                           // 0x0678(0x0004) (Transient, Config)
	float                                              CoverFireTestRadius;                                      // 0x067C(0x0004) (Transient, Config)
	float                                              CoverFireTestHeight;                                      // 0x0680(0x0004) (Transient, Config)
	float                                              CoverStepTestRadius;                                      // 0x0684(0x0004) (Transient, Config)
	float                                              CoverStepTestHeight;                                      // 0x0688(0x0004) (Transient, Config)
	float                                              CoverMoveDirectionAngle;                                  // 0x068C(0x0004) (Transient, Config)
	float                                              CoverTransferCameraAngle;                                 // 0x0690(0x0004) (Transient, Config)
	int                                                nCoverLeanFlags;                                          // 0x0694(0x0004) (Transient)
	struct FVector                                     m_vCoverNormal;                                           // 0x0698(0x000C) (Transient)
	struct FVector                                     vLastCoverNormal;                                         // 0x06A4(0x000C) (Transient)
	int                                                nCoverLeanRequests;                                       // 0x06B0(0x0004) (Transient)
	float                                              m_fProximityAlarm;                                        // 0x06B4(0x0004) (Edit)
	float                                              ProximityAlarmInterval;                                   // 0x06B8(0x0004) (Transient, Config)
	float                                              ProximityTimer;                                           // 0x06BC(0x0004) (Transient)
	struct FRotator                                    m_rLastGoodRotation;                                      // 0x06C0(0x000C) (Transient)
	struct FVector                                     m_vLastGoodLocation;                                      // 0x06CC(0x000C) (Transient)
	struct FVector                                     m_vLastGoodNormal;                                        // 0x06D8(0x000C) (Transient)
	struct FVector                                     m_vBumpLastPosition;                                      // 0x06E4(0x000C) (Transient)
	float                                              m_fBumpCheckTimer;                                        // 0x06F0(0x0004) (Transient)
	struct FVector                                     m_vFinalRigidBodyPosition;                                // 0x06F4(0x000C)
	float                                              m_fRBSleepEnergyThreshold;                                // 0x0700(0x0004) (Transient)
	float                                              m_fEnableCCDMultiplierThreshold;                          // 0x0704(0x0004) (Const, Transient, Config)
	class ULightEnvironmentComponent*                  m_pLightEnvComponent;                                     // 0x0708(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              m_fWalkNoiseModifier;                                     // 0x070C(0x0004) (Config)
	float                                              m_fRunNoiseModifier;                                      // 0x0710(0x0004) (Config)
	float                                              m_fCrouchNoiseModifier;                                   // 0x0714(0x0004) (Config)
	float                                              m_fDeathTimer;                                            // 0x0718(0x0004) (Transient)
	float                                              m_fDeathNoisePeriod;                                      // 0x071C(0x0004) (Config)
	float                                              m_fDeathNoiseMagnitude;                                   // 0x0720(0x0004) (Config)
	class UBioCoverCollisonCube*                       m_oCustomCollision;                                       // 0x0724(0x0004) (ExportObject, Component, EditInline)
	float                                              m_fWeaponLOSThreshold;                                    // 0x0728(0x0004) (Config)
	int                                                m_nTickCount;                                             // 0x072C(0x0004) (Transient)
	float                                              m_fMaxRelevancyDistance;                                  // 0x0730(0x0004) (Config)
	TArray<struct FPawnFootStepData>                   m_PawnFootStepData;                                       // 0x0734(0x000C) (Transient, NeedCtorLink)
	class UAudioComponent*                             m_oRollingIdle;                                           // 0x0740(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             m_oRollingStartMoving;                                    // 0x0744(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             m_pSndSetCurSound;                                        // 0x0748(0x0004) (ExportObject, Transient, Component, EditInline)
	class UBioCreatureSoundSet*                        m_pOverrideSndSetVOPkg;                                   // 0x074C(0x0004) (Edit)
	class UFaceFXAnimSet*                              m_pOverrideSndSetFaceFXPkg;                               // 0x0750(0x0004) (Edit)
	class UBioChatterSystem*                           m_pChatterSystem;                                         // 0x0754(0x0004) (Const)
	class UAudioComponent*                             m_pFacialAudioComp;                                       // 0x0758(0x0004) (ExportObject, Component, EditInline)
	class UAnimTree*                                   m_pOriginalAnimTree;                                      // 0x075C(0x0004) (Transient)
	TArray<class UAnimSet*>                            m_aOriginalAnimSets;                                      // 0x0760(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               m_afnCinematicLevels;                                     // 0x076C(0x000C) (Transient, NeedCtorLink)
	int                                                m_nWrinkleHighestLOD;                                     // 0x0778(0x0004) (Config)
	struct FString                                     m_sWrinkleMaterialIdentifier;                             // 0x077C(0x000C) (Config, NeedCtorLink)
	class UAudioComponent*                             m_pHeartbeatSound;                                        // 0x0788(0x0004) (ExportObject, Component, EditInline)
	int                                                m_nHiddenRequestCount;                                    // 0x078C(0x0004) (Transient)
	float                                              m_fChatterSuppressionDuration;                            // 0x0790(0x0004) (Const, Transient, Config)
	TArray<class UObject*>                             m_aAdditionalResourcesToCook;                             // 0x0794(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawn");
		return ptr;
	}


	void UnsuppressChatter();
	void HandleChatterEvent(TEnumAsByte<EBioSoundSetType> eSoundSet, bool bForceChatter);
	class UClass* STATIC_GetSaveObjectClass();
	bool STATIC_IsCombatActionState(TEnumAsByte<EActionStateVariable> eActionState);
	float GetSpeedRatio();
	float GetMaxSpeed();
	float GetSpeed();
	void MakeVulnerable();
	void CorpseCleanupTimer();
	void SpawnDefaultController();
	void PostBeginPlay();
	bool Resurrect(float fPercentOfHealthRegained, bool bIsInstantaneous);
	void KillAttachedVFX();
	void FadeLifeCrust();
	int GetXLASTClassContextID();
	void SetRichPresence();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void PostTeleport(class ATeleporter* OutTeleporter);
	bool PreTeleport(class ATeleporter* InTeleporter);
	void MoveWeaponToRightHand();
	void MoveWeaponToLeftHand();
	class UAudioComponent* GetFaceFXAudioComponent();
	void KillSoundSet();
	bool PlaySoundSet(unsigned char eType);
	void gibbedBy(class AActor* Other);
	void OnTeleportArrived();
	void ReleasePowersCamera();
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void OnTeleport(class USeqAct_Teleport* Action);
	void PlayFootStepSound(int FootDown);
	void setHeadFaceFX();
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction);
	void SetScale(float fScale);
	void OnEffectsMaterial(class UBioSeqAct_EffectsMaterial* Action);
	void ReleasePower();
	bool CanMount();
	TEnumAsByte<EBioFactionRelationship> FactionRelationship(class APawn* oOtherPawn);
	void GenerateTakeDamageEvent(float fPreMitigationDamage, float Damage, class AController* InstigatedBy, class UClass* DamageType);
	bool DoReachedWaypointEvent(class ABioPathPoint* oPoint);
	void FinishAnimControl();
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping);
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);
	void OnToggle(class USeqAct_Toggle* Action);
	void ClearUnregisteredAnimsets();
	void ClearRegisteredCustomAnimsets(const struct FName& nmSetGroupName);
	void RegisterCustomAnimset(const struct FName& nmSetGroupName, class UAnimSet* oAnim);
	void CustomAnimFinished(const struct FName& nmAnimName, bool bIsLooping);
	void PlayCustomAnimOneShotAnim(const struct FName& nmAnimName);
	void PlayCustomAnimLoopAnim(const struct FName& nmAnimName);
	void SetCustomAnimState(bool bState);
	void EncroachedBy(class AActor* Other);
	void RanInto(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void FireOff(bool bAuto);
	bool FireOn(bool bAuto);
	void StartCrouch(float HeightAdjust);
	void EndCrouch(float HeightAdjust);
	struct FVector GetPlayerPawnConversationCloseupCameraHook();
	struct FVector GetPlayerPawnTacSelCameraHook();
	struct FVector GetPlayerPawnSniperCameraHook();
	struct FVector GetPlayerPawnCombatCameraHookNormal();
	struct FVector GetPlayerPawnCombatCameraHook(TEnumAsByte<EBioSide> Side);
	void GetPlayerPawnCollisionCameraHook(struct FVector* V);
	struct FVector GetPlayerPawnCameraHook();
	struct FVector CalculateOffsetHook(float updown, float frontback, float leftright);
	struct FVector GetCameraHook(const struct FName& Hook);
	void HopperAnimLand();
	void HopperAnimJump();
	void HopperAnimRotateForJump();
	void StopThrowGrenade();
	void ThrowGrenade();
	void CreateGrenade();
	void StartThrowGrenade();
	void FinishDrawAnim();
	void FadeOutDrawAnim();
	void SwapDrawAnim();
	void FinishHolsterAnim();
	void FadeOutHolsterAnim();
	void SwapHolsterAnim();
	void FadeOutExitCombatAnim();
	void FadeOutEnterCombatAnim();
	void FadeOutStopAnim();
	void FadeOutSkidAnim();
	void FadeOutStartAnim();
	void UnlockAnimRotation();
	void SetCombatState(TEnumAsByte<EBioAnimCombatState> eState);
	void RagdollRecoverTimer();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void IncrmentSTAT_AbortedMoveTowards();
	void ReportFollowStats(float DeltaTime, TArray<struct FString>* Data);
	float StandardDeviation(TArray<float> Data, float M);
	void CollectFollowStats(float DeltaTime, const struct FVector& DesiredPosition);
	void UpdateDefaultSpeeds();
	void SetSpeed(float NewSpeed);
	float GetBaseSpeed();
	bool InPlayerParty();
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void ClearAllActions(const struct FString& sClearLabel);
	int FindWaypointPathLength(const struct FName& List);
	class ANavigationPoint* FindWaypointName(const struct FName& List, int Index);
	void CacheWayPointSet(const struct FName& WaypointSetTag);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	struct FVector GetAdjustedCollisionCylinderOffset();
	struct FVector GetAdjustedCollisionCylinder();
	void ShouldCrouch(bool bCrouch);
	bool IsMetaActionInProgress();
	void Destroyed();
	void BioBeginPlay();
	void Restart();
	bool GetCurrentMoveTarget(class AActor** oMoveTarget, struct FVector* vTarget);
	void BioProcessDamageIndicator(class AController* InstigatedBy);
	TEnumAsByte<EBioPawnClassification> GetClassification();
	void SetClassification(TEnumAsByte<EBioPawnClassification> a_eClassification, bool a_bAsDefault);
	void DroneStartLanding();
	void DroneFinishedTakingOff();
	void RecordBulletsFired(const struct FString& sWeaponType, bool bHitPawn, bool bHitShield, bool bHitScenery, bool bReachedEndOfRange, class ABioPawn* PawnHit, int nSophistication, float fFiringRate, float fMinDrift, float fMaxDrift, float fRange);
	void UpdateGrimeGrimeLevel(float a_fGrimeValue);
	void UpdateGrimeDirtLevel(float a_fDirtValue);
	void UpdateGrimeCombatLevel(float a_fCombatValue);
	bool IsShowingHelmet();
	bool IsShowingFacePlate();
	bool IsShowingVisor();
	void RequestHelmetVisible(bool B);
	void RequestFacePlateVisible(bool B);
	void RequestVisorVisible(bool B);
	void OverrideHeadGearVisibility(bool B);
	bool IsHeadGearVisiblePreferenceRelevant();
	bool GetHeadGearVisiblePreference();
	void SetHeadGearVisiblePreference(bool B);
	void RestoreCachedHeadGearVisibilityOverride();
	void CacheHeadGearVisibilityOverride();
	void CleanUpHopState();
	void SetPhysHopState(TEnumAsByte<EHopPhysicsStates> eNewPhysHopState);
	void SafeSetLocation(const struct FVector& vDest);
	bool PlayFaceFX(const struct FString& AnimGroup, const struct FString& AnimSeq);
	bool SetDefaultFaceFXAsset();
	void RequestHidden(bool B);
	void SetLookAtTarget(class AActor* oTarget, TEnumAsByte<ELookAtTransitionType> a_eTransition, int nRank);
	void SetAmbientLookAtTarget(class AActor* oTarget, int nRank);
	bool ExploreMode(float fDelaySeconds);
	bool ReadyMode(float fDelaySeconds);
	bool UnlockTarget();
	bool LockTarget(class AActor* oTarget);
	float GetFractionOfEffectsMaterialEnabled();
	void SetFractionOfEffectsMaterialEnabled(float FractionEnabled);
	TEnumAsByte<EEffectsMaterialType> GetEffectsMaterialType();
	void SetEffectsMaterialType(TEnumAsByte<EEffectsMaterialType> EffectsMaterialType);
	void InitializeForPlay();
	void CancelCapability(class UBioCapability* oCapability);
	float GetCapabilityPowerBuildUp(class UBioCapability* oCapability);
	float GetCapabilityImpactRadius(class UBioCapability* oCapability);
	bool GetCapabilityIsEnabled(class UBioCapability* oCapability);
	float GetCapabilityCoolDownTimeRemaining(class UBioCapability* oCapability);
	bool HasCapability(class UBioCapability* oCapability);
	class UBioSeqData* AddCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget);
	class UBioSeqData* DoCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget);
	void AppendPawnCapabilitiesToList(TEnumAsByte<EBioCapabilityTypes> nCapType, TArray<class UBioCapability*>* oOutCaps);
	void RecomputeCapabilities();
	bool IsCurrentWeaponProficient();
	bool IsWeaponProficient(TEnumAsByte<EBioItemWeaponRangedType> eWeaponType);
	bool IsDead();
	void AnimNodeBlendComplete(const struct FName& sBlendName, int nChild);
	void AnimNodePlayFinished(const struct FName& sBlendName);
	bool CanPlayAnimNode(const struct FName& sBlendName, int nFlags, float* fWeight);
	bool GetAnimLengthAndPos(const struct FName& sAnimName, float* fAnimLength, float* fAnimPos);
	bool IsAnimOnRightFoot(bool bCycle);
	bool RequestTurnInPlace(const struct FRotator& rDesDir);
	void StartAnimStartMove();
	bool CanAnimMoveStop(float fDeltaTime);
	bool CanAnimSkidTurn();
	bool CanAnimMoveStart(float fDeltaTime, bool bIgnoreSpeedAndTime);
	void TickMoveControl(float fDeltaTime);
	float CalcYawDifference(const struct FRotator& rDesDir, float* fDir);
	bool CalcYawInterpolation(float fDeltaTime, const struct FRotator& rDesDir, float fDegPerSec, float* fDeltaYaw);
	bool CalcSpeedInterpolation(float fDeltaTime, float fDesiredSpeed, float* fDeltaSpeed);
	void GetRotationRate(int* nPitch, int* nYaw, int* nRoll);
	void SetDesiredRotation(const struct FRotator& rDesiredRotation, bool bForce);
	float GetDesiredSpeed(TEnumAsByte<EGetDesiredSpeedMode> eMode);
	void SetDesiredSpeed(float fDesiredSpeed, bool bForce);
	bool CanRagdoll();
	bool TermRagdoll();
	bool InitRagdoll();
	bool IsFalling();
	void UnapplyMaterialParameters(class UBioMaterialOverride* pMaterialParameters);
	void ApplyMaterialParameters(class UBioMaterialOverride* pMaterialParameters);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void SetVectorParameterValue(const struct FName& ParameterName, struct FColor* Value);
	void ClearCoverState();
};


// Class BIOC_Base.BioPawnInfoComponent
// 0x0004 (0x01BC - 0x01B8)
class UBioPawnInfoComponent : public UPrimitiveComponent
{
public:
	int                                                m_nShowFlagCache;                                         // 0x01B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnInfoComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioPawnItemInterface
// 0x001C (0x0060 - 0x0044)
class UBioPawnItemInterface : public UBioBaseComponent
{
public:
	class UBioPawnBehavior*                            m_oFriend;                                                // 0x0044(0x0004) (Transient)
	struct FScriptDelegate                             __QuickSlotIter__Delegate;                                // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __EBioWeaponTypeOp__Delegate;                             // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnItemInterface");
		return ptr;
	}


	bool PrevQuickSlot();
	bool NextQuickSlot();
	void ChangeToQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> eSlot);
	void DeactivateCurrentQuickSlot();
	void ActivateCurrentQuickSlot();
	int ClearQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Type);
	int SetQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Type, int nInvItem);
	bool UpdatePawnAppearance(TEnumAsByte<EBioEquipmentSlot> eSlot, class ABioPawn* Pawn);
	int Unequip(TEnumAsByte<EBioEquipmentSlot> eSlot);
	int Equip(int nItemIndex);
	class UClass* CreateClassFromString(class UClass* clsBase, const struct FString& sClass);
	bool STATIC_GetStringEntryIN(class UBio2DA* tbl, int nRow, const struct FName& nmColumn, struct FString* S);
	bool STATIC_GetIntEntryIN(class UBio2DA* tbl, int nRow, const struct FName& nmColumn, int* N);
	bool STATIC_GetNameEntryIN(class UBio2DA* tbl, int nRow, const struct FName& nmColumn, struct FName* nm);
	bool IsArmored();
	bool EBioWeaponTypeOp(TEnumAsByte<EBioItemWeaponRangedType>* eSlot);
	bool QuickSlotIter();
};


// Class BIOC_Base.BioScout
// 0x0000 (0x04F0 - 0x04F0)
class ABioScout : public AScout
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioScout");
		return ptr;
	}

};


// Class BIOC_Base.BioCapability
// 0x002C (0x0068 - 0x003C)
class UBioCapability : public UObject
{
public:
	class APawn*                                       m_oMember;                                                // 0x003C(0x0004) (Edit, Const)
	TEnumAsByte<EBioCapabilityTypes>                   m_nCapType;                                               // 0x0040(0x0001) (Edit, Const)
	TEnumAsByte<EBioCapMode>                           m_nCapMode;                                               // 0x0041(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	struct FName                                       m_nmTechnique;                                            // 0x0044(0x0008) (Edit, Const)
	int                                                m_nSubTechnique;                                          // 0x004C(0x0004) (Edit, Const)
	float                                              m_fRating;                                                // 0x0050(0x0004) (Edit, Const)
	float                                              m_fMinRange;                                              // 0x0054(0x0004) (Edit, Const)
	float                                              m_fMaxRange;                                              // 0x0058(0x0004) (Edit, Const)
	float                                              m_fBestRange;                                             // 0x005C(0x0004) (Edit, Const)
	float                                              m_fTmpRange;                                              // 0x0060(0x0004) (Edit)
	unsigned long                                      m_bCanCasterMoveDuring : 1;                               // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCapability");
		return ptr;
	}

};


// Class BIOC_Base.BioCombatLog
// 0x0000 (0x003C - 0x003C)
class UBioCombatLog : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCombatLog");
		return ptr;
	}

};


// Class BIOC_Base.BioGrenade
// 0x001C (0x02EC - 0x02D0)
class ABioGrenade : public AWeapon
{
public:
	class USkeletalMeshComponent*                      m_Mesh;                                                   // 0x02D0(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      m_AttachedMesh;                                           // 0x02D4(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       m_AttachedBone;                                           // 0x02D8(0x0008)
	class UClass*                                      m_clsProjectile;                                          // 0x02E0(0x0004)
	class UBioDamageType*                              m_pDamage;                                                // 0x02E4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioItemGrenade*                             m_pItem;                                                  // 0x02E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenade");
		return ptr;
	}


	struct FVector GetLaunchPoint();
	class UBioItemGrenade* GetItem();
	void ClearItem();
	void SetItem(class UBioItemGrenade* pItem);
	class ABioGrenadeProjectile* LaunchGrenade(const struct FVector& vVelocity);
	class ABioGrenadeProjectile* LaunchGrenadeAtPoint(const struct FVector& vTarget);
	class ABioGrenadeProjectile* LaunchGrenadeAtActor(class AActor* oTarget);
	class ABioGrenadeProjectile* MakeProjectile();
	class UClass* GetProjectileClass();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	void DetachWeaponFromMesh(class USkeletalMeshComponent* MeshCpnt);
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& BoneName);
};


// Class BIOC_Base.BioWeapon
// 0x0044 (0x0234 - 0x01F0)
class ABioWeapon : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x01F0(0x0004) (ExportObject, Component, EditInline)
	class UBioItemWeapon*                              m_oItem;                                                  // 0x01F4(0x0004)
	class USkeletalMeshComponent*                      AttachedMesh;                                             // 0x01F8(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       AttachedBone;                                             // 0x01FC(0x0008)
	class APawn*                                       AttachPawn;                                               // 0x0204(0x0004)
	class UBioDamageType*                              m_pDamage;                                                // 0x0208(0x0004) (ExportObject, NeedCtorLink, EditInline)
	struct FName                                       m_nActivatedMatParamName;                                 // 0x020C(0x0008) (Config)
	struct FLinearColor                                m_vActivatedMatParamColor_Active;                         // 0x0214(0x0010) (Config)
	struct FLinearColor                                m_vActivatedMatParamColor_Inactive;                       // 0x0224(0x0010) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWeapon");
		return ptr;
	}


	class ABioPawn* Deactivate();
	class ABioPawn* Activate();
	float GetFractionOfEffectsMaterialEnabled();
	void SetFractionOfEffectsMaterialEnabled(float FractionEnabled);
	TEnumAsByte<EEffectsMaterialType> GetEffectsMaterialType();
	void SetEffectsMaterialType(TEnumAsByte<EEffectsMaterialType> EffectsMaterialType);
	void UpdateAppearance();
	class APawn* DetachFromPawn(bool bCinematicsMode);
	class UBioItemWeapon* ClearItem();
	class UBioItemWeapon* SetItem(class UBioItemWeapon* oItem);
	void OnEffectsMaterial(class UBioSeqAct_EffectsMaterial* Action);
	void ProxyPlaySound(class USoundCue* SoundCue);
	bool AttachToMesh(class USkeletalMeshComponent* MeshComponent, const struct FName& SocketName, bool bCinematicsMode);
};


// Class BIOC_Base.BioWeaponRanged
// 0x00D0 (0x0304 - 0x0234)
class ABioWeaponRanged : public ABioWeapon
{
public:
	float                                              fWeaponMeshEffectValue;                                   // 0x0234(0x0004) (Transient)
	float                                              fWeaponMeshEffectTargetValue;                             // 0x0238(0x0004) (Transient)
	struct FName                                       m_MuzzleSocketName;                                       // 0x023C(0x0008)
	struct FName                                       m_MuzzleCamSocketName;                                    // 0x0244(0x0008)
	struct FName                                       m_ImpactParameterName;                                    // 0x024C(0x0008)
	struct FName                                       m_SourceParameterName;                                    // 0x0254(0x0008)
	int                                                m_nFireSound;                                             // 0x025C(0x0004) (Transient)
	class UAudioComponent*                             oAudioComponent;                                          // 0x0260(0x0004) (Edit, ExportObject, Component, EditInline)
	class ABioVisualEffect*                            m_visualEffects[0x6];                                     // 0x0264(0x0004) (Transient)
	class UBioWeaponVFXAppearance*                     m_pCachedVFXAppearance;                                   // 0x027C(0x0004) (Transient)
	float                                              m_coolDownDuration;                                       // 0x0280(0x0004)
	float                                              m_CooldownTime;                                           // 0x0284(0x0004)
	unsigned long                                      m_isFiring : 1;                                           // 0x0288(0x0004)
	unsigned long                                      m_bOverheated : 1;                                        // 0x0288(0x0004)
	unsigned long                                      m_bShootingWhileOverheatedSoundPlayed : 1;                // 0x0288(0x0004)
	unsigned long                                      m_bIsMuzzleLocationOverridden : 1;                        // 0x0288(0x0004)
	unsigned long                                      m_bIsMuzzleFlashVFXEnabled : 1;                           // 0x0288(0x0004)
	float                                              m_fireTime;                                               // 0x028C(0x0004)
	float                                              m_fCurrentHeat;                                           // 0x0290(0x0004)
	float                                              m_fProjectilesSpreadModifier;                             // 0x0294(0x0004) (Config)
	float                                              PortArmsPistolDistance;                                   // 0x0298(0x0004) (Config)
	float                                              PortArmsShotgunDistance;                                  // 0x029C(0x0004) (Config)
	float                                              PortArmsAssaultDistance;                                  // 0x02A0(0x0004) (Config)
	float                                              PortArmsSniperDistance;                                   // 0x02A4(0x0004) (Config)
	float                                              m_fVehicleFireDistance;                                   // 0x02A8(0x0004) (Config)
	float                                              m_fWeaponFireDistance;                                    // 0x02AC(0x0004) (Config)
	float                                              m_fSniperFireDistance;                                    // 0x02B0(0x0004) (Config)
	int                                                m_nTraceFireTestType;                                     // 0x02B4(0x0004) (Config)
	float                                              m_fOverlapRecurseBreakoutDistance;                        // 0x02B8(0x0004) (Config)
	int                                                m_nTotalNumberStrips;                                     // 0x02BC(0x0004) (Config)
	int                                                m_nTotalNumberCloseStrips;                                // 0x02C0(0x0004) (Config)
	float                                              m_nCloseStripLength;                                      // 0x02C4(0x0004) (Config)
	int                                                m_nWeaponVFXLevel;                                        // 0x02C8(0x0004) (Config)
	struct FVector                                     m_vMuzzleLocationOverride;                                // 0x02CC(0x000C)
	int                                                m_nCacheFlags;                                            // 0x02D8(0x0004)
	struct FVector                                     m_vCachedMuzzleLocation;                                  // 0x02DC(0x000C)
	float                                              m_fMaxVFXIntensity;                                       // 0x02E8(0x0004) (Config)
	float                                              m_fMinVFXIntensity;                                       // 0x02EC(0x0004) (Config)
	float                                              m_fMaxVFXDecalIntensity;                                  // 0x02F0(0x0004) (Config)
	float                                              m_fMinVFXDecalIntensity;                                  // 0x02F4(0x0004) (Config)
	TArray<struct FImpactDelayInfo>                    m_aImpactDelayQueue;                                      // 0x02F8(0x000C) (Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWeaponRanged");
		return ptr;
	}


	void PlayWeaponSound(const struct FName& nmSound);
	void PlayShootingWhileOverheatedSound();
	void PlayOverheatSound();
	void OnHide(bool bHide);
	void TickHeat(float fDeltaTime);
	class UBioVISGrenade* GetVisualExplosionSet();
	class UBioVISWeapon* GetVisualImpactSet();
	void ReleaseVisualEffect(TEnumAsByte<EBioWeaponVisualEffect> Effect);
	class ABioVisualEffect* GetVisualEffect(TEnumAsByte<EBioWeaponVisualEffect> Effect, bool bCacheEffect);
	void TickFire(float TimeDelta);
	void WeaponRanges(float* MinRange, float* BestRange, float* MaxRange);
	class UBioAttributesItemWeaponRanged* GetAttributes();
	bool IsPenetratedByInstantFire(class AActor* oHitActor);
	void DoCoolDownEffect();
	void DoBulletTraceEffect(struct FVector* vHitPoint);
	void FireOff();
	void FireOn();
	void SetMuzzleFlashState(bool bState);
	class ABioPawn* Deactivate();
	bool AttachToMesh(class USkeletalMeshComponent* MeshComponent, const struct FName& SocketName, bool bCinematicsMode);
	class UBioItemWeapon* SetItem(class UBioItemWeapon* oItem);
};


// Class BIOC_Base.BioAFComponent
// 0x0008 (0x0044 - 0x003C)
class UBioAFComponent : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004)
	class AActor*                                      Instigator;                                               // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAFComponent");
		return ptr;
	}

};


// Class BIOC_Base.BioActive
// 0x0008 (0x004C - 0x0044)
class UBioActive : public UBioAFComponent
{
public:
	TEnumAsByte<EInitalizeEventType>                   m_InitalizationEventType;                                 // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	unsigned long                                      m_bBeingShutdown : 1;                                     // 0x0048(0x0004)
	unsigned long                                      m_bUpdateOnShutdown : 1;                                  // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActive");
		return ptr;
	}


	bool STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode);
	struct FName GetEventTypeName();
	void Initialize(class AActor* oOwner);
	void InitializeInternal();
};


// Class BIOC_Base.BioActiveFall
// 0x0000 (0x004C - 0x004C)
class UBioActiveFall : public UBioActive
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveFall");
		return ptr;
	}


	bool STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode);
	void InitializeInternal();
};


// Class BIOC_Base.BioActiveGrenade
// 0x0054 (0x00A0 - 0x004C)
class UBioActiveGrenade : public UBioActive
{
public:
	TEnumAsByte<EBioGrenadeActiveState>                m_state;                                                  // 0x004C(0x0001)
	TEnumAsByte<EBioGrenadeThrowAnimationState>        m_eGrenadeThrowAnimationState;                            // 0x004D(0x0001)
	TEnumAsByte<EBioGrenadeActiveAnimationPlaybackState> m_animationPlaybackState;                                 // 0x004E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	class ABioGrenadeProjectileFrisbee*                m_stuckGrenade;                                           // 0x0050(0x0004)
	struct FVector                                     m_vTarget;                                                // 0x0054(0x000C)
	struct FVector                                     m_vVelocity;                                              // 0x0060(0x000C)
	float                                              m_fSwitchToBallisticGrenadeTime;                          // 0x006C(0x0004)
	class AActor*                                      m_oBallisticGrenadeTarget;                                // 0x0070(0x0004)
	unsigned long                                      m_bCanThrowGrenade : 1;                                   // 0x0074(0x0004)
	unsigned long                                      m_bStartedThrow : 1;                                      // 0x0074(0x0004)
	unsigned long                                      m_isBallisticGrenadeEnabled : 1;                          // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      m_isLockedActionStateRequired : 1;                        // 0x0074(0x0004) (Edit, Const)
	float                                              m_fBallisticGrenadeSpeed;                                 // 0x0078(0x0004)
	float                                              m_fSwitchToBallisticGrenadeDuration;                      // 0x007C(0x0004) (Edit, Const)
	float                                              m_fStickyGrenadeTraceDistance;                            // 0x0080(0x0004) (Edit, Const)
	float                                              m_fBallisticGrenadeSpeedIncreaseRate;                     // 0x0084(0x0004) (Edit, Const)
	float                                              m_fBallisticGrenadeSpeedMaximum;                          // 0x0088(0x0004) (Edit, Const)
	float                                              m_fBallisticGrenadeSpeedMinimum;                          // 0x008C(0x0004) (Edit, Const)
	float                                              m_fBallisticArcTimeDelta;                                 // 0x0090(0x0004) (Edit, Const)
	float                                              m_fBallisticArcFloor;                                     // 0x0094(0x0004) (Edit, Const)
	float                                              m_fBallisticGrenadePitchOffset;                           // 0x0098(0x0004) (Edit, Const)
	int                                                m_nBallisticArcPointsPerTrace;                            // 0x009C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveGrenade");
		return ptr;
	}


	TEnumAsByte<EBioGrenadeActiveState> GUIState();
	struct FName GetEventTypeName();
	bool STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode);
	void InitializeInternal();
};


// Class BIOC_Base.BioActiveMount
// 0x0000 (0x004C - 0x004C)
class UBioActiveMount : public UBioActive
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveMount");
		return ptr;
	}


	bool STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode);
	void InitializeInternal();
};


// Class BIOC_Base.BioActivePower
// 0x007C (0x00C8 - 0x004C)
class UBioActivePower : public UBioActive
{
public:
	class UBioPower*                                   m_oPower;                                                 // 0x004C(0x0004) (Transient)
	TEnumAsByte<EBioPowerState>                        m_ePowerState;                                            // 0x0050(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              m_fCastingTimeRemaining;                                  // 0x0054(0x0004) (Transient)
	float                                              m_fUseTimeRemaining;                                      // 0x0058(0x0004) (Transient)
	class UBioPowerScript*                             m_oPowerScript;                                           // 0x005C(0x0004) (Transient)
	class APawn*                                       m_oCaster;                                                // 0x0060(0x0004) (Transient)
	class ABioPawn*                                    m_oCasterAsBioPawn;                                       // 0x0064(0x0004) (Transient)
	class UBioEpicPawnBehavior*                        m_oCasterBehavior;                                        // 0x0068(0x0004) (Transient)
	float                                              m_fCasterStability;                                       // 0x006C(0x0004) (Transient)
	unsigned long                                      m_bCasterIsPlayer : 1;                                    // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bCasterIsHenchman : 1;                                  // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bPlayerOrderedPowerUse : 1;                             // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bResetAnimationNode : 1;                                // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bPlayCastingAnimation : 1;                              // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bPlayReleaseAnimation : 1;                              // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bPlayUsingAnimation : 1;                                // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bCancelAnimations : 1;                                  // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bBlendInPowerAnimations : 1;                            // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bBlendOutPowerAnimations : 1;                           // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bWaitingForAnimationToStart : 1;                        // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bSkipPowerCooldown : 1;                                 // 0x0070(0x0004) (Transient, Config)
	unsigned long                                      m_bSetFocusWhenFinished : 1;                              // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bAnimationReadyForPowerRelease : 1;                     // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bCastingAnimationAvailable : 1;                         // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bReleaseAnimationAvailable : 1;                         // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bUsingAnimationAvailable : 1;                           // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bShowPowerAiming : 1;                                   // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bCancelling : 1;                                        // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bEnablePowerCooldown : 1;                               // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bShowPowerImpactText : 1;                               // 0x0070(0x0004) (Transient)
	unsigned long                                      m_bDisplayingCastingBeam : 1;                             // 0x0070(0x0004) (Transient)
	class UAnimSet*                                    m_oAnimSet;                                               // 0x0074(0x0004) (Transient)
	float                                              m_fMaxWaitTimeForAnimation;                               // 0x0078(0x0004) (Transient, Config)
	float                                              m_fCurrentWaitTimeForAnimation;                           // 0x007C(0x0004) (Transient)
	class UBioGameProperty*                            m_oDisableAIProperty;                                     // 0x0080(0x0004) (Transient)
	struct FName                                       m_nmAnimSet;                                              // 0x0084(0x0008) (Transient)
	float                                              m_fCastingStartTime;                                      // 0x008C(0x0004) (Transient)
	struct FVector                                     m_vCastingStartLocation;                                  // 0x0090(0x000C) (Transient)
	struct FVector                                     m_vCasterVelocity;                                        // 0x009C(0x000C) (Transient)
	float                                              m_fCastingBeamTime;                                       // 0x00A8(0x0004) (Transient)
	class AActor*                                      m_oTargetToAimAt;                                         // 0x00AC(0x0004) (Transient)
	struct FVector                                     m_vLocationToAimAt;                                       // 0x00B0(0x000C) (Transient)
	float                                              m_fLeanDelayTimer;                                        // 0x00BC(0x0004) (Transient)
	float                                              m_fLeanDelayTime;                                         // 0x00C0(0x0004) (Transient, Config)
	float                                              m_fLeanDelayVarianceTime;                                 // 0x00C4(0x0004) (Transient, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActivePower");
		return ptr;
	}


	void RecordDebugAimingInfo(const struct FVector& vStartLocation1, const struct FVector& vEndLocation1, const struct FVector& vStartLocation2, const struct FVector& vEndLocation2);
	void RecordDebugInfo();
	void GetImpactLocation(class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal, struct FName* nmBoneName);
	void GetConeLocationForAI(struct FVector* vLocation, struct FRotator* rRotation);
	void GetConeLocationForPlayer(struct FVector* vLocation, struct FRotator* rRotation);
	void GetConeLocation(struct FVector* vLocation, struct FRotator* rRotation);
	void GetReleaseLocationForAI(bool bUseBeamSpecialHandling, struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation);
	void GetReleaseLocationForPlayer(struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation);
	void GetReleaseLocation(bool bUseBeamSpecialHandling, struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation);
	void GetProjectileLocation(struct FVector* vLocation, struct FVector* vTargetLocation);
	bool CreatePowerScript();
	void UpdateBeamVFX(TEnumAsByte<EBioPowerResource> eResource, float fDeltaTime);
	void DisplayBeamVFX(TEnumAsByte<EBioPowerResource> eResource, const struct FVector& vStartLocation, const struct FVector& vDestination);
	void StopPowerVFX(TEnumAsByte<EBioPowerResource> eResource, bool bAllowVFXToFinish);
	void DisplayPowerVFX(TEnumAsByte<EBioPowerResource> eResource);
	void GetAnimationAvailability();
	void UnloadAnimSet();
	bool LoadAnimSet();
	bool DoImpact(class AActor* oActor, int* nImpactedCount);
	bool ReleaseDualPower();
	bool ReleaseVerticalCylinderPower(const struct FVector& vLocation, const struct FVector& vNormal);
	bool ReleaseConePower(const struct FVector& vLocation, const struct FRotator& rRotation);
	bool ReleaseImpactVolumePower();
	bool ReleaseRadiusPower(const struct FVector& vLocation, const struct FVector& vNormal, class AActor* oActorAtReleaseLocation, bool bIncludeCaster);
	bool ReleaseProjectilePower();
	bool EndUsingPhase();
	bool StartUsingPhase();
	bool EndReleasePhase();
	bool StartReleasePhase();
	bool EndCastingPhase(bool bAllowVFXToFinish);
	bool StartCastingPhase();
	void InitializeInternal();
	void SetTargetLocation(const struct FVector& vLocation);
	void SetTargetActor(class AActor* oTarget);
	bool CancelPower(bool bOnlyCancelIfCasting);
	void AnimationReadyForPowerRelease();
};


// Class BIOC_Base.BioActiveSelectWeapon
// 0x0024 (0x0070 - 0x004C)
class UBioActiveSelectWeapon : public UBioActive
{
public:
	class UBioEquipment*                               m_oEquipment;                                             // 0x004C(0x0004)
	class UBioPawnBehavior*                            m_oPawnBehavior;                                          // 0x0050(0x0004)
	class USkelControlLimb*                            m_oWeaponIKControl;                                       // 0x0054(0x0004) (Transient)
	unsigned long                                      m_bHolsterCurrentWeapon : 1;                              // 0x0058(0x0004)
	unsigned long                                      m_bDrawCurrentWeapon : 1;                                 // 0x0058(0x0004)
	unsigned long                                      m_bCycleNextWeapon : 1;                                   // 0x0058(0x0004)
	unsigned long                                      m_isWeaponHolstered : 1;                                  // 0x0058(0x0004)
	unsigned long                                      m_isWeaponDrawn : 1;                                      // 0x0058(0x0004)
	unsigned long                                      m_bHasActiveTicked : 1;                                   // 0x0058(0x0004)
	unsigned long                                      m_bHasAnimTicked : 1;                                     // 0x0058(0x0004)
	TEnumAsByte<EBioItemWeaponRangedType>              m_eWeaponToSwitchTo;                                      // 0x005C(0x0001)
	TEnumAsByte<EBioActiveSelectWeaponState>           m_state;                                                  // 0x005D(0x0001)
	TEnumAsByte<EBioActiveSelectWeaponState>           m_previousState;                                          // 0x005E(0x0001)
	TEnumAsByte<EActionStateVariable>                  m_ePendingActionState;                                    // 0x005F(0x0001)
	float                                              m_fDelay;                                                 // 0x0060(0x0004)
	struct FName                                       m_nmWeaponNode;                                           // 0x0064(0x0008)
	class UBioAnimNodeBlendWeaponEquip*                m_oSelectWeaponAnimNode;                                  // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveSelectWeapon");
		return ptr;
	}


	void FinishDrawAnim();
	void FadeOutDrawAnim();
	void SwapDrawAnim();
	void FinishHolsterAnim();
	void FadeOutHolsterAnim();
	void SwapHolsterAnim();
	bool STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode);
};


// Class BIOC_Base.BioActiveShootBase
// 0x0004 (0x0050 - 0x004C)
class UBioActiveShootBase : public UBioActive
{
public:
	class ABioWeaponRanged*                            m_weapon;                                                 // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveShootBase");
		return ptr;
	}

};


// Class BIOC_Base.BioActiveShoot
// 0x0018 (0x0068 - 0x0050)
class UBioActiveShoot : public UBioActiveShootBase
{
public:
	float                                              m_fAnimRate;                                              // 0x0050(0x0004)
	unsigned long                                      m_bStartedInCover : 1;                                    // 0x0054(0x0004)
	unsigned long                                      m_isLoopingFireAnimationRateVariable : 1;                 // 0x0054(0x0004) (Config)
	unsigned long                                      m_isFiring : 1;                                           // 0x0054(0x0004)
	unsigned long                                      m_bIsAutomatic : 1;                                       // 0x0054(0x0004)
	unsigned long                                      m_bIsBlocked : 1;                                         // 0x0054(0x0004) (Transient)
	class ABioPawn*                                    m_oOwnerPawn;                                             // 0x0058(0x0004)
	float                                              m_fLeanDelayTimer;                                        // 0x005C(0x0004) (Transient)
	float                                              m_fLeanDelayTime;                                         // 0x0060(0x0004) (Transient, Config)
	float                                              m_fLeanDelayVarianceTime;                                 // 0x0064(0x0004) (Transient, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveShoot");
		return ptr;
	}


	struct FName GetEventTypeName();
	bool STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode);
	void InitializeInternal();
};


// Class BIOC_Base.BioActiveShootVehicle
// 0x0004 (0x0054 - 0x0050)
class UBioActiveShootVehicle : public UBioActiveShootBase
{
public:
	int                                                m_nWeaponIndex;                                           // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveShootVehicle");
		return ptr;
	}


	void InitializeInternal();
};


// Class BIOC_Base.BioActiveShootVehicleCannon
// 0x0000 (0x0054 - 0x0054)
class UBioActiveShootVehicleCannon : public UBioActiveShootVehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveShootVehicleCannon");
		return ptr;
	}


	void InitializeInternal();
};


// Class BIOC_Base.BioActiveShootVehicleMachineGun
// 0x0000 (0x0054 - 0x0054)
class UBioActiveShootVehicleMachineGun : public UBioActiveShootVehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveShootVehicleMachineGun");
		return ptr;
	}


	void InitializeInternal();
};


// Class BIOC_Base.BioActiveUseArtPlaceable
// 0x000C (0x0058 - 0x004C)
class UBioActiveUseArtPlaceable : public UBioActive
{
public:
	class UBioReactiveUseArtPlaceable*                 Reactive;                                                 // 0x004C(0x0004)
	float                                              m_fDelay;                                                 // 0x0050(0x0004)
	unsigned long                                      m_bDone : 1;                                              // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActiveUseArtPlaceable");
		return ptr;
	}


	bool DisplayProgress();
	float GetProgress();
	bool STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode);
	void InitializeInternal();
};


// Class BIOC_Base.BioReactive
// 0x0004 (0x0048 - 0x0044)
class UBioReactive : public UBioAFComponent
{
public:
	unsigned long                                      m_bActivated : 1;                                         // 0x0044(0x0004)
	unsigned long                                      m_bDataInitialized : 1;                                   // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioReactive");
		return ptr;
	}


	void Initialize(class AActor* oOwner, class AActor* oInstigator);
	void InitializeInternal();
};


// Class BIOC_Base.BioReactiveUseArtPlaceable
// 0x0020 (0x0068 - 0x0048)
class UBioReactiveUseArtPlaceable : public UBioReactive
{
public:
	float                                              m_fCostToUse;                                             // 0x0048(0x0004)
	float                                              m_fFullSkillTime;                                         // 0x004C(0x0004)
	float                                              m_fSkillTimeDone;                                         // 0x0050(0x0004)
	struct FName                                       m_nmSkillToGoto;                                          // 0x0054(0x0008)
	unsigned long                                      m_bTransitionIntialized : 1;                              // 0x005C(0x0004)
	unsigned long                                      bDone : 1;                                                // 0x005C(0x0004)
	class UBioActiveUseArtPlaceable*                   Active;                                                   // 0x0060(0x0004)
	float                                              fCount;                                                   // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioReactiveUseArtPlaceable");
		return ptr;
	}


	void InitializeInternal();
};


// Class BIOC_Base.BioSuperMode
// 0x005C (0x0098 - 0x003C)
class UBioSuperMode : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004) (Native)
	TEnumAsByte<EBioSuperModes>                        m_eSuperModeType;                                         // 0x0040(0x0001)
	TEnumAsByte<EBioReticule>                          m_eReticuleStatsIndex;                                    // 0x0041(0x0001) (Const)
	TEnumAsByte<EBioRangeInfoStatus>                   m_eRangeInfoStatus;                                       // 0x0042(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0043(0x0001) MISSED OFFSET
	unsigned long                                      m_bUpdateReticule : 1;                                    // 0x0044(0x0004)
	unsigned long                                      m_bIsActivated : 1;                                       // 0x0044(0x0004)
	unsigned long                                      m_bTargetRequired : 1;                                    // 0x0044(0x0004)
	unsigned long                                      m_bIgnoreReticuleResetOnce : 1;                           // 0x0044(0x0004)
	struct FName                                       m_aSophistication2DAColumnName[0x7];                      // 0x0048(0x0008)
	float                                              m_fMovingThreshold;                                       // 0x0080(0x0004) (Edit, Const)
	float                                              m_fRotMovingThreshold;                                    // 0x0084(0x0004) (Edit, Const)
	float                                              m_fRotInterpThreshold;                                    // 0x0088(0x0004) (Edit, Const)
	int                                                m_nRangeRow;                                              // 0x008C(0x0004)
	float                                              m_fElevationThreshold;                                    // 0x0090(0x0004) (Edit, Const)
	float                                              m_fSuppressionTimeThreshold;                              // 0x0094(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSuperMode");
		return ptr;
	}


	void OnFiredWeapon(class UBioItemWeapon* oWeapon);
};


// Class BIOC_Base.BioGameProperty
// 0x005C (0x0098 - 0x003C)
class UBioGameProperty : public UObject
{
public:
	class UObject*                                     m_oOwner;                                                 // 0x003C(0x0004)
	TArray<class UBioGamePropertyConditional*>         m_aPropConditionals;                                      // 0x0040(0x000C) (NeedCtorLink)
	TArray<class UBioGameEffect*>                      m_aGameEffects;                                           // 0x004C(0x000C) (NeedCtorLink)
	TEnumAsByte<EBioGamePropertyType>                  m_ePropertyType;                                          // 0x0058(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FMap_Mirror                                 m_mapApplicationArray;                                    // 0x005C(0x0014) (Native)
	float                                              m_fDuration;                                              // 0x0070(0x0004)
	float                                              m_fCooldownTime;                                          // 0x0074(0x0004)
	unsigned long                                      m_bInCooldown : 1;                                        // 0x0078(0x0004)
	unsigned long                                      m_bTicked : 1;                                            // 0x0078(0x0004)
	unsigned long                                      m_bFireAndForget : 1;                                     // 0x0078(0x0004)
	unsigned long                                      m_bApplyOnCreation : 1;                                   // 0x0078(0x0004)
	float                                              m_fTickInterval;                                          // 0x007C(0x0004)
	int                                                m_nGamePropertyGroup;                                     // 0x0080(0x0004)
	float                                              m_fPower;                                                 // 0x0084(0x0004)
	class UBioGamePropertyEventSet*                    m_oGamePropertyEvents;                                    // 0x0088(0x0004) (ExportObject, NeedCtorLink, EditInline)
	struct FName                                       m_nmGamePropertyName;                                     // 0x008C(0x0008)
	int                                                m_level;                                                  // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameProperty");
		return ptr;
	}


	bool HasEffect(class UClass* GameEffectClass);
	void Unapply(class UObject* pTargetObject);
	void Apply(class UObject* pTargetObject);
	struct FString ToLine();
	struct FString ToString(const struct FString& sIndent);
	class UBioGameProperty* STATIC_CreateInstant();
	class UBioGameProperty* STATIC_CreateGameProperty(class UBioGamePropertyContainer* oGPContainer, class UObject* oOwner, TEnumAsByte<EBioGamePropertyType> ePropertyType, float fTimedDuration, float fCoolDownTime, bool bTicked, float fTickInterval, int nGamePropertyGroup, float fPower, bool bFireAndForget);
	void STATIC_RunTests(class ABioPawn* oPawn);
	void ScaleToLevel(int nPowerLevel);
	void RemoveEffects(class UObject* oTarget);
	void ApplyEffects(class UObject* oTarget, bool bIsInstant);
	void TickEffects(float fDeltaTime);
	bool TestConditionals(class UObject* oTarget);
	void AddConditionalToProperty(class UBioGamePropertyConditional* oConditional);
	void AddGameEffectToProperty(class UBioGameEffect* oEffect);
};


// Class BIOC_Base.BioGamePropertyConditional
// 0x0010 (0x004C - 0x003C)
class UBioGamePropertyConditional : public UObject
{
public:
	class UBioGameProperty*                            m_oOwnerGameProperty;                                     // 0x003C(0x0004)
	TArray<TEnumAsByte<EBioGamePropertyEvent>>         m_aEvent;                                                 // 0x0040(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditional");
		return ptr;
	}


	void Uninitialize();
	void Initialize();
};


// Class BIOC_Base.BioGamePropertyConditionalEquipmentChange
// 0x0001 (0x004D - 0x004C)
class UBioGamePropertyConditionalEquipmentChange : public UBioGamePropertyConditional
{
public:
	TEnumAsByte<EBioEquipmentSlot>                     m_eSlot;                                                  // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalEquipmentChange");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalEquipmentChangeVehicle
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalEquipmentChangeVehicle : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalEquipmentChangeVehicle");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalHasNotFired
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalHasNotFired : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalHasNotFired");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalImporter
// 0x0000 (0x0044 - 0x0044)
class UBioGamePropertyConditionalImporter : public UBioBaseComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalImporter");
		return ptr;
	}


	class UBioGamePropertyConditional* STATIC_LoadGamePropertyConditional(class UBio2DA* o2DA, int nConditionalId, class UBioGameProperty* oOwner);
};


// Class BIOC_Base.BioGamePropertyConditionalIsActorType
// 0x0008 (0x0054 - 0x004C)
class UBioGamePropertyConditionalIsActorType : public UBioGamePropertyConditional
{
public:
	struct FName                                       m_nmActorType;                                            // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsActorType");
		return ptr;
	}


	void SetActorType(const struct FName& nmActorType);
};


// Class BIOC_Base.BioGamePropertyConditionalIsAlive
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalIsAlive : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsAlive");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalIsArmor
// 0x0001 (0x004D - 0x004C)
class UBioGamePropertyConditionalIsArmor : public UBioGamePropertyConditional
{
public:
	TEnumAsByte<EBioArmorType>                         m_eArmorType;                                             // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsArmor");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalIsCurrentArmor
// 0x0000 (0x004D - 0x004D)
class UBioGamePropertyConditionalIsCurrentArmor : public UBioGamePropertyConditionalIsArmor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsCurrentArmor");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalIsCurrentWeapon
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalIsCurrentWeapon : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsCurrentWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalIsItem
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalIsItem : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsItem");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalIsItemEquipped
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalIsItemEquipped : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsItemEquipped");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalIsPawn
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalIsPawn : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsPawn");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalWeapon
// 0x0003 (0x004F - 0x004C)
class UBioGamePropertyConditionalWeapon : public UBioGamePropertyConditional
{
public:
	TEnumAsByte<EBioItemWeaponType>                    m_eWeaponType;                                            // 0x004C(0x0001)
	TEnumAsByte<EBioItemWeaponMeleeType>               m_eWeaponMeleeType;                                       // 0x004D(0x0001)
	TEnumAsByte<EBioItemWeaponRangedType>              m_eWeaponRangedType;                                      // 0x004E(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalWeapon");
		return ptr;
	}


	bool TestRangedWeapon(class UBioItemWeapon* pWeaponItem);
	bool TestMeleeWeapon(class UBioItemWeapon* pWeaponItem);
	bool TestWeapon(class UBioItemWeapon* pWeaponItem);
};


// Class BIOC_Base.BioGamePropertyConditionalIsWeapon
// 0x0000 (0x004F - 0x004F)
class UBioGamePropertyConditionalIsWeapon : public UBioGamePropertyConditionalWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalIsWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalOnWeaponChange
// 0x0000 (0x004F - 0x004F)
class UBioGamePropertyConditionalOnWeaponChange : public UBioGamePropertyConditionalWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalOnWeaponChange");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalWeaponPowerUsed
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalWeaponPowerUsed : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalWeaponPowerUsed");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalXModInstalled
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalXModInstalled : public UBioGamePropertyConditional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalXModInstalled");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalXModInstalledInCurrentWeapon
// 0x0000 (0x004C - 0x004C)
class UBioGamePropertyConditionalXModInstalledInCurrentWeapon : public UBioGamePropertyConditionalXModInstalled
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalXModInstalledInCurrentWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyConditionalXModInstalledInEquipment
// 0x0001 (0x004D - 0x004C)
class UBioGamePropertyConditionalXModInstalledInEquipment : public UBioGamePropertyConditionalXModInstalled
{
public:
	TEnumAsByte<EBioEquipmentSlot>                     m_eSlot;                                                  // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyConditionalXModInstalledInEquipment");
		return ptr;
	}

};


// Class BIOC_Base.BioGamePropertyContainer
// 0x0014 (0x0050 - 0x003C)
class UBioGamePropertyContainer : public UObject
{
public:
	TArray<class UBioGameProperty*>                    m_aGameProperties;                                        // 0x003C(0x000C) (NeedCtorLink)
	class UBioGamePropertyTimer*                       m_oGamePropertyCooldownTimer;                             // 0x0048(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioGamePropertyEventDispatcher*             m_oEventDispatcher;                                       // 0x004C(0x0004) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyContainer");
		return ptr;
	}


	struct FString ToString(const struct FString& sIndent);
	void OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget);
	void ScaleToLevel(int nLevel);
	void ProcessCooldown(float fDeltaTime);
	void Tick(float fDeltaTime);
	void OnGamePropCooldownEnd(class UBioGameProperty* pGameProperty, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining);
	void AddGamePropertyToCountdown(class UBioGameProperty* oGameProp, float fCountdown);
};


// Class BIOC_Base.BioGamePropertyEffectLevelIterator
// 0x000C (0x0048 - 0x003C)
class UBioGamePropertyEffectLevelIterator : public UObject
{
public:
	TArray<struct FBioEffectLevelIteratorPair>         m_aPairs;                                                 // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyEffectLevelIterator");
		return ptr;
	}


	void Initialize(class UBio2DA* o2DA, int nKeyColumn, int nKey);
};


// Class BIOC_Base.BioGamePropertyEventDispatcher
// 0x0028 (0x0064 - 0x003C)
class UBioGamePropertyEventDispatcher : public UObject
{
public:
	struct FMap_Mirror                                 m_mapQueued;                                              // 0x003C(0x0014) (Const, Native)
	struct FMap_Mirror                                 m_mapEventRegistry;                                       // 0x0050(0x0014) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyEventDispatcher");
		return ptr;
	}


	void ProcessQueue();
	void UnregisterGameProperty(class UBioGameProperty* oGameProp);
	void RegisterGameProperty(class UBioGameProperty* oGameProp);
	void OnEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget);
	void LogDebugInfo(class UBioGamePropertyEventSet* pEvents, class UObject* pTarget);
};


// Class BIOC_Base.BioGamePropertyEventSet
// 0x000C (0x0048 - 0x003C)
class UBioGamePropertyEventSet : public UObject
{
public:
	TArray<TEnumAsByte<EBioGamePropertyEvent>>         m_aEvents;                                                // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyEventSet");
		return ptr;
	}


	class UBioGamePropertyEventSet* STATIC_Create3(TEnumAsByte<EBioGamePropertyEvent> eEvent1, TEnumAsByte<EBioGamePropertyEvent> eEvent2, TEnumAsByte<EBioGamePropertyEvent> eEvent3, class UObject* oSource);
	class UBioGamePropertyEventSet* STATIC_Create2(TEnumAsByte<EBioGamePropertyEvent> eEvent1, TEnumAsByte<EBioGamePropertyEvent> eEvent2, class UObject* oSource);
	class UBioGamePropertyEventSet* STATIC_Create1(TEnumAsByte<EBioGamePropertyEvent> eEvent1, class UObject* oSource);
	bool CheckForAnyEvents(class UBioGamePropertyEventSet* oEvents);
	bool CheckForAllEvents(class UBioGamePropertyEventSet* oEvents);
	bool CheckForEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent);
	void RemoveEventSet(class UBioGamePropertyEventSet* oEvents);
	void RemoveEvents(TArray<TEnumAsByte<EBioGamePropertyEvent>> aEvents);
	void RemoveEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent);
	void AddEventSet(class UBioGamePropertyEventSet* oEvents);
	void AddEvents(TArray<TEnumAsByte<EBioGamePropertyEvent>> aEvents);
	void AddEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent);
	void Clear();
};


// Class BIOC_Base.BioGamePropertyHolderTraits
// 0x0000 (0x003C - 0x003C)
class UBioGamePropertyHolderTraits : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyHolderTraits");
		return ptr;
	}


	class UBioGamePropertyContainer* STATIC_GetGPContainer(class UObject* pObject);
	class UBioGamePropertyManager* STATIC_GetGPManager(class UObject* oTarget);
};


// Class BIOC_Base.BioGamePropertyImporter
// 0x0048 (0x008C - 0x0044)
class UBioGamePropertyImporter : public UBioBaseComponent
{
public:
	struct FName                                       m_nmGameProperty2DAPackage;                               // 0x0044(0x0008)
	struct FName                                       m_aGameProperty2DANames[0x5];                             // 0x004C(0x0008)
	class UBio2DA*                                     m_aGameProperty2DA[0x5];                                  // 0x0074(0x0004)
	unsigned long                                      m_bDefault2DAsLoaded : 1;                                 // 0x0088(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyImporter");
		return ptr;
	}


	class UBioGameProperty* STATIC_LoadGameProperty(struct FBioGPLoadData* oGPData);
};


// Class BIOC_Base.BioGamePropertyManager
// 0x0034 (0x0070 - 0x003C)
class UBioGamePropertyManager : public UObject
{
public:
	class UBioGamePropertyTimer*                       m_oRegisteredGPs;                                         // 0x003C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UBioGameProperty*>                    m_apPendingUnapply;                                       // 0x0040(0x000C) (NeedCtorLink)
	TArray<struct FBioGamePropertyManagerTimedOutTicked> m_aTimedOutTicked;                                        // 0x004C(0x000C) (NeedCtorLink)
	class UObject*                                     m_oOwner;                                                 // 0x0058(0x0004)
	unsigned char                                      UnknownData00[0x14];                                      // 0x005C(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.BioGamePropertyManager.m_mapActiveGamePropertyGroups

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyManager");
		return ptr;
	}


	struct FString ToString(const struct FString& sIndent);
	bool IsGameEffectApplied(class UClass* GameEffectClass);
	bool FindGamePropertyByEffectType(class UClass* GameEffectClass, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties);
	bool FindGamePropertyByGroup(int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties);
	bool FindGamePropertyByOwner(class AActor* oOwner, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties);
	bool FindGamePropertyByName(const struct FName& nmName, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties);
	class UObject* GetOwnerObject();
	void Tick(float fDelta);
	void TickInternal(float fDelta);
	void OnGPTimeOut(class UBioGameProperty* pGameProperty, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining);
	void UnapplyGameProperty(class UBioGameProperty* pGP, class UObject* pTarget);
	void ApplyGameProperty(class UBioGameProperty* pGP, class UObject* pTarget);
	void EvaluateGameProperty(class UBioGameProperty* pGP, class UObject* pTarget);
};


// Class BIOC_Base.BioGamePropertyScalingData
// 0x00A0 (0x00E4 - 0x0044)
class UBioGamePropertyScalingData : public UBioBaseComponent
{
public:
	struct FMap_Mirror                                 m_mapIntPropertyToValueArray;                             // 0x0044(0x0014) (Const, Native, NoExport)
	struct FMap_Mirror                                 m_mapFloatPropertyToValueArray;                           // 0x0058(0x0014) (Const, Native, NoExport)
	struct FMap_Mirror                                 m_mapBytePropertyToValueArray;                            // 0x006C(0x0014) (Const, Native, NoExport)
	struct FMap_Mirror                                 m_mapBoolPropertyToValueArray;                            // 0x0080(0x0014) (Const, Native, NoExport)
	struct FMap_Mirror                                 m_mapNamePropertyToValueArray;                            // 0x0094(0x0014) (Const, Native, NoExport)
	struct FMap_Mirror                                 m_mapStringPropertyToValueArray;                          // 0x00A8(0x0014) (Const, Native, NoExport)
	struct FMap_Mirror                                 m_mapStringRefPropertyToValueArray;                       // 0x00BC(0x0014) (Const, Native, NoExport)
	struct FMap_Mirror                                 m_mapObjectPropertyToValueArray;                          // 0x00D0(0x0014) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyScalingData");
		return ptr;
	}


	void ScaleProperties(int nLevel);
};


// Class BIOC_Base.BioGamePropertyTimer
// 0x0028 (0x0064 - 0x003C)
class UBioGamePropertyTimer : public UObject
{
public:
	TArray<struct FBioGPTimingData>                    m_aTimedGPs;                                              // 0x003C(0x000C) (NeedCtorLink)
	TArray<class UBioGameProperty*>                    m_aFrameTickGPs;                                          // 0x0048(0x000C) (NeedCtorLink)
	unsigned long                                      m_bMutex : 1;                                             // 0x0054(0x0004)
	struct FScriptDelegate                             __OnRemoveGameProperty__Delegate;                         // 0x0058(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGamePropertyTimer");
		return ptr;
	}


	struct FString ToString(const struct FString& sIndent);
	void InvokeDelegate(const struct FScriptDelegate& pDelegate, class UBioGameProperty* pGP, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining);
	void RemoveAllNonStatic(const struct FScriptDelegate& pDelegate);
	float GetTimeForGamePropertyByName(const struct FName& nmGamePropertyName, TEnumAsByte<EBioGPTimingType> eTimingType, class UBioGameProperty** oGameProperty);
	float GetTimeForGameProperty(class UBioGameProperty* oGameProp, TEnumAsByte<EBioGPTimingType> eTimingType);
	void Tick(float fDeltaTime, const struct FScriptDelegate& oOnRemoveGameProperty);
	void AppendStaticGameProperty(class UBioGameProperty* oGP);
	int FindGamePropertyIndex(class UBioGameProperty* oGP, TEnumAsByte<EBioGPTimingType> eTimingType);
	void RemoveGamePropertyAtIndex(int nIndex);
	bool RemoveGameProperty(class UBioGameProperty* oGP);
	void InsertGameProperty(class UBioGameProperty* oGP, float fTime, TEnumAsByte<EBioGPTimingType> eTimingType, bool bFrameTicked);
	void OnRemoveGameProperty(class UBioGameProperty* pGP, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining);
};


// Class BIOC_Base.BioGestChainNode
// 0x0008 (0x0044 - 0x003C)
class UBioGestChainNode : public UObject
{
public:
	class UBioEvtSysTrackGesture*                      m_pGestTrack;                                             // 0x003C(0x0004)
	int                                                m_nIndex;                                                 // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGestChainNode");
		return ptr;
	}

};


// Class BIOC_Base.BioGestChainTree
// 0x000C (0x0050 - 0x0044)
class UBioGestChainTree : public UBioGestChainNode
{
public:
	TArray<class UBioGestChainNode*>                   m_aChildren;                                              // 0x0044(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGestChainTree");
		return ptr;
	}

};


// Class BIOC_Base.BioGestureLangOverride
// 0x0028 (0x0064 - 0x003C)
class UBioGestureLangOverride : public UObject
{
public:
	struct FName                                       m_nmLanguage;                                             // 0x003C(0x0008)
	TArray<struct FBioGestLangOverride>                m_aData;                                                  // 0x0044(0x000C) (NeedCtorLink)
	struct FMultiMap_Mirror                            m_mapOverrides;                                           // 0x0050(0x0014) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGestureLangOverride");
		return ptr;
	}

};


// Class BIOC_Base.BioGestureRulesData
// 0x007C (0x00B8 - 0x003C)
class UBioGestureRulesData : public UObject
{
public:
	TArray<struct FBioGestRuleItem>                    m_aRuleItems;                                             // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FBioARPUBodyConfig>                  m_aARPUItems;                                             // 0x0048(0x000C) (NeedCtorLink)
	struct FMap_Mirror                                 m_mapPoseList;                                            // 0x0054(0x0014) (Native)
	struct FMultiMap_Mirror                            m_mapPoseRules;                                           // 0x0068(0x0014) (Native)
	struct FMultiMap_Mirror                            m_mapGestureRules;                                        // 0x007C(0x0014) (Native)
	struct FMultiMap_Mirror                            m_mapAnimsets;                                            // 0x0090(0x0014) (Native)
	struct FMultiMap_Mirror                            m_mapARPUCurves;                                          // 0x00A4(0x0014) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGestureRulesData");
		return ptr;
	}

};


// Class BIOC_Base.BioGestureRuntimeData
// 0x0028 (0x0064 - 0x003C)
class UBioGestureRuntimeData : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetOwners;                                       // 0x003C(0x0014) (Native)
	struct FMap_Mirror                                 m_mapCharTypeOverrides;                                   // 0x0050(0x0014) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGestureRuntimeData");
		return ptr;
	}

};


// Class BIOC_Base.BioInterpolator
// 0x0000 (0x003C - 0x003C)
class UBioInterpolator : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInterpolator");
		return ptr;
	}


	void STATIC_InterpolateFloat(TEnumAsByte<EBioInterpolationMethod> InterpolationMethod, float Source, float Target, float normalizedDisplacement, float* output);
	void STATIC_InterpolateVector(TEnumAsByte<EBioInterpolationMethod> InterpolationMethod, const struct FVector& Source, const struct FVector& Target, float normalizedDisplacement, struct FVector* output);
	void STATIC_InterpolateRotator(TEnumAsByte<EBioInterpolationMethod> InterpolationMethod, const struct FRotator& Source, const struct FRotator& Target, float normalizedDisplacement, struct FRotator* output);
};


// Class BIOC_Base.BioMorphFace
// 0x0048 (0x0084 - 0x003C)
class UBioMorphFace : public UObject
{
public:
	class USkeletalMesh*                               m_oBaseHead;                                              // 0x003C(0x0004) (Edit)
	class USkeletalMesh*                               m_oHairMesh;                                              // 0x0040(0x0004) (Edit)
	TArray<class USkeletalMesh*>                       m_oOtherMeshes;                                           // 0x0044(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMorphFeature>                       m_aMorphFeatures;                                         // 0x0050(0x000C) (Edit, NeedCtorLink)
	class UMorphTargetSet*                             m_oMorphTargetSet;                                        // 0x005C(0x0004) (Edit)
	class UAnimTree*                                   m_oAnimTree;                                              // 0x0060(0x0004) (Edit)
	class UBioMaterialOverride*                        m_oMaterialOverrides;                                     // 0x0064(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<struct FOffsetBonePos>                      m_aFinalSkeleton;                                         // 0x0068(0x000C) (NeedCtorLink)
	TArray<struct FPointer>                            m_aVertexBuffers;                                         // 0x0074(0x000C) (Native)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x0080(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFace");
		return ptr;
	}


	class UClass* STATIC_GetSaveObjectClass();
	void SetPosition(int buffer, int vert, const struct FVector& V);
	struct FVector GetPosition(int buffer, int vert);
	int GetNumVerts(int buffer);
	int GetNumVertexBuffers();
	void ScriptUpdateMorph();
};


// Class BIOC_Base.BioMorphFaceFESliderBase
// 0x0014 (0x0050 - 0x003C)
class UBioMorphFaceFESliderBase : public UObject
{
public:
	struct FString                                     m_nName;                                                  // 0x003C(0x000C) (NeedCtorLink)
	unsigned long                                      m_bStepped : 1;                                           // 0x0048(0x0004)
	class UBioMorphFaceFrontEnd*                       m_oMorphFaceFrontEnd;                                     // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFESliderBase");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceFESliderColour
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderColour : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                         // 0x0050(0x000C) (NeedCtorLink)
	TArray<struct FColor>                              m_acColours;                                              // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFESliderColour");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceFESliderHair
// 0x0000 (0x0050 - 0x0050)
class UBioMorphFaceFESliderHair : public UBioMorphFaceFESliderBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFESliderHair");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceFESliderMorph
// 0x0024 (0x0074 - 0x0050)
class UBioMorphFaceFESliderMorph : public UBioMorphFaceFESliderBase
{
public:
	unsigned long                                      m_bSingle : 1;                                            // 0x0050(0x0004)
	struct FString                                     m_sMorph_Positive;                                        // 0x0054(0x000C) (NeedCtorLink)
	struct FString                                     m_sMorph_Negative;                                        // 0x0060(0x000C) (NeedCtorLink)
	float                                              m_fRange;                                                 // 0x006C(0x0004)
	float                                              m_fRandomRange;                                           // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFESliderMorph");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceFESliderScalar
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderScalar : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                         // 0x0050(0x000C) (NeedCtorLink)
	TArray<float>                                      m_afValues;                                               // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFESliderScalar");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceFESliderSetMorph
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderSetMorph : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sMorphName;                                             // 0x0050(0x000C) (NeedCtorLink)
	TArray<float>                                      m_afValues;                                               // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFESliderSetMorph");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceFESliderTexture
// 0x0018 (0x0068 - 0x0050)
class UBioMorphFaceFESliderTexture : public UBioMorphFaceFESliderBase
{
public:
	struct FString                                     m_sParameterName;                                         // 0x0050(0x000C) (NeedCtorLink)
	TArray<class UTexture*>                            m_atTexture;                                              // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFESliderTexture");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphUtility
// 0x0000 (0x003C - 0x003C)
class UBioMorphUtility : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphUtility");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceFrontEnd
// 0x0190 (0x01CC - 0x003C)
class UBioMorphFaceFrontEnd : public UBioMorphUtility
{
public:
	class USkeletalMeshComponent*                      m_oHeadMeshComp;                                          // 0x003C(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      m_oHairMeshComp;                                          // 0x0040(0x0004) (ExportObject, Component, EditInline)
	class UBioMorphFace*                               m_oOriginalFace;                                          // 0x0044(0x0004)
	class UBioMorphFace*                               m_oMorphFace;                                             // 0x0048(0x0004)
	class UMaterialInstanceConstant*                   m_oOriginalMaterial;                                      // 0x004C(0x0004)
	class USkeletalMesh*                               m_oOriginalMesh;                                          // 0x0050(0x0004)
	struct FFaceData                                   m_oFaceData;                                              // 0x0054(0x0030) (NeedCtorLink)
	struct FString                                     m_s2DAPackage;                                            // 0x0084(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorph2DA;                                              // 0x0090(0x000C) (Config, NeedCtorLink)
	unsigned long                                      m_bDebugStrings : 1;                                      // 0x009C(0x0004) (Config)
	unsigned long                                      m_bPlayerIsMale : 1;                                      // 0x009C(0x0004)
	unsigned long                                      m_bMale2DAsLoaded : 1;                                    // 0x009C(0x0004)
	unsigned long                                      m_bFemale2DAsLoaded : 1;                                  // 0x009C(0x0004)
	unsigned long                                      m_b2DAPackageDone : 1;                                    // 0x009C(0x0004)
	unsigned long                                      m_bHairAsyncLoadingDone : 1;                              // 0x009C(0x0004)
	unsigned long                                      m_bMaterialAsyncLoadingDone : 1;                          // 0x009C(0x0004)
	unsigned long                                      m_bAsyncLoad2DAsInProgress : 1;                           // 0x009C(0x0004)
	struct FString                                     m_sMasterMorphPackage;                                    // 0x00A0(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphPackageMale;                                      // 0x00AC(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphPackageFemale;                                    // 0x00B8(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphBaseMale;                                         // 0x00C4(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphBaseFemale;                                       // 0x00D0(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphMaleHairPackage;                                  // 0x00DC(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphFemaleHairPackage;                                // 0x00E8(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphMaleMaterialPackage;                              // 0x00F4(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sMorphFemaleMaterialPackage;                            // 0x0100(0x000C) (Config, NeedCtorLink)
	struct FString                                     m_sPlayerName;                                            // 0x010C(0x000C) (NeedCtorLink)
	class UBioPawnBehavior*                            m_oBehavior;                                              // 0x0118(0x0004)
	class ABioPawn*                                    m_oPawn;                                                  // 0x011C(0x0004)
	struct FBaseHeads                                  m_oBaseSettings;                                          // 0x0120(0x000C) (NeedCtorLink)
	TArray<struct FBaseHeads>                          m_aBaseHeads;                                             // 0x012C(0x000C) (NeedCtorLink)
	class UPackage*                                    m_pMorph2DAPackage;                                       // 0x0138(0x0004)
	class UPackage*                                    m_pMaterialsPackage;                                      // 0x013C(0x0004)
	class UPackage*                                    m_pHairPackage;                                           // 0x0140(0x0004)
	struct FString                                     m_sHairPackage;                                           // 0x0144(0x000C) (NeedCtorLink)
	struct FString                                     m_sMaterialPackage;                                       // 0x0150(0x000C) (NeedCtorLink)
	TArray<class UObject*>                             m_aoObjectsInUse;                                         // 0x015C(0x000C) (NeedCtorLink)
	TArray<class UTexture2D*>                          m_aoTexturesToBePrimed;                                   // 0x0168(0x000C) (NeedCtorLink)
	struct FSlider                                     m_pModifierData;                                          // 0x0174(0x0054) (NeedCtorLink)
	int                                                m_iCurrentBaseHead;                                       // 0x01C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceFrontEnd");
		return ptr;
	}


	void SelectPreviousBaseHead();
	void SelectNextBaseHead();
	void SetPlayerName(const struct FString& sPlayerName);
	void CheckEverythingPreloaded();
	void Preload2DAPackage(bool bPlayerIsMale);
	void CleanUp();
	void HandleSliderChange(int categoryIndex, int sliderIndex, int SliderValue, bool bUpdate);
	bool GetSliderNotched(int categoryIndex, int sliderIndex);
	int GetSliderValue(int categoryIndex, int sliderIndex);
	int GetSliderStep(int categoryIndex, int sliderIndex);
	int GetSliderMax(int categoryIndex, int sliderIndex);
	int GetSliderMin(int categoryIndex, int sliderIndex);
	int GetSliderDesc(int categoryIndex, int sliderIndex);
	int GetSliderLabel(int categoryIndex, int sliderIndex);
	int GetNumSlidersInCategory(int categoryIndex);
	int GetCategoryDescription(int categoryIndex);
	int GetCategoryString(int categoryIndex);
	int GetNumberOfFeatureCategories();
	void ResetCategory(int nCategory, bool bUpdate);
	void ResetAll();
	void Load2DAs(bool bPlayerIsMale, const struct FString& sPlayerName);
	void RandomizeCategory(int nCategory, bool bUpdate);
	void RandomizeAll();
	void Initialize(class ABioPawn* pThePlayer, bool bPlayerIsMale, bool bReset);
};


// Class BIOC_Base.BioCameraShake
// 0x0080 (0x00BC - 0x003C)
class UBioCameraShake : public UObject
{
public:
	TEnumAsByte<EBioCameraShakeType>                   Type;                                                     // 0x003C(0x0001) (Edit, Transient)
	TEnumAsByte<EBioCameraShakeVariant>                variant;                                                  // 0x003D(0x0001) (Edit, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	float                                              m_startTime;                                              // 0x0040(0x0004) (Edit)
	float                                              m_duration;                                               // 0x0044(0x0004) (Edit)
	float                                              m_radius;                                                 // 0x0048(0x0004) (Edit)
	float                                              m_intensity;                                              // 0x004C(0x0004) (Edit)
	struct FRawDistributionFloat                       m_rawIntensityVsDistanceDistribution;                     // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	float                                              m_fadeInDuration;                                         // 0x006C(0x0004) (Edit)
	struct FRawDistributionFloat                       m_rawFadeInDistribution;                                  // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	float                                              m_fadeOutDuration;                                        // 0x008C(0x0004) (Edit)
	struct FRawDistributionFloat                       m_rawFadeOutDistribution;                                 // 0x0090(0x001C) (Edit, Component, NeedCtorLink)
	class UBio2DA*                                     m_database;                                               // 0x00AC(0x0004) (Const)
	struct FName                                       m_recordId;                                               // 0x00B0(0x0008)
	unsigned long                                      m_isRandomVariant : 1;                                    // 0x00B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraShake");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraShakeInterface
// 0x0000 (0x003C - 0x003C)
class UBioCameraShakeInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraShakeInterface");
		return ptr;
	}

};


// Class BIOC_Base.BioPawnCameraShakeInterface
// 0x002C (0x0068 - 0x003C)
class UBioPawnCameraShakeInterface : public UBioCameraShakeInterface
{
public:
	TArray<class ABioVisualEffect*>                    m_pendingRequests;                                        // 0x003C(0x000C) (NeedCtorLink)
	TArray<class ABioVisualEffect*>                    m_pendingTerminations;                                    // 0x0048(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0054(0x0014) UNKNOWN PROPERTY: MapProperty BIOC_Base.BioPawnCameraShakeInterface.m_NodeToEffectMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnCameraShakeInterface");
		return ptr;
	}

};


// Class BIOC_Base.BioDefine
// 0x0000 (0x003C - 0x003C)
class UBioDefine : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDefine");
		return ptr;
	}

};


// Class BIOC_Base.BioGrenadeInterface
// 0x0000 (0x003C - 0x003C)
class UBioGrenadeInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenadeInterface");
		return ptr;
	}

};


// Class BIOC_Base.BioGrenadeInterfaceAI
// 0x000C (0x0048 - 0x003C)
class UBioGrenadeInterfaceAI : public UBioGrenadeInterface
{
public:
	struct FVector                                     m_targetPoint;                                            // 0x003C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenadeInterfaceAI");
		return ptr;
	}

};


// Class BIOC_Base.BioGrenadeInterfacePlayer
// 0x0000 (0x003C - 0x003C)
class UBioGrenadeInterfacePlayer : public UBioGrenadeInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGrenadeInterfacePlayer");
		return ptr;
	}

};


// Class BIOC_Base.BioPhysicsActor
// 0x0008 (0x028C - 0x0284)
class ABioPhysicsActor : public AKActor
{
public:
	float                                              m_fHealth;                                                // 0x0284(0x0004) (Edit)
	float                                              m_fCurrentHealth;                                         // 0x0288(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPhysicsActor");
		return ptr;
	}


	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UDamageType* pDamage);
	void ChangeMaterialParameters();
};


// Class BIOC_Base.BioSVehicleSimTank
// 0x005C (0x0154 - 0x00F8)
class UBioSVehicleSimTank : public USVehicleSimTank
{
public:
	struct FInterpCurveFloat                           m_fLatFrictionScaleSteerCurve;                            // 0x00F8(0x0010) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           m_fLongFrictionScaleSteerCurve;                           // 0x0108(0x0010) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           m_TorqueSplitRight;                                       // 0x0118(0x0010) (NeedCtorLink)
	struct FInterpCurveFloat                           m_TorqueSplitLeft;                                        // 0x0128(0x0010) (NeedCtorLink)
	struct FInterpCurveFloat                           m_TorqueCurve;                                            // 0x0138(0x0010) (NeedCtorLink)
	float                                              m_fPrevInputYaw;                                          // 0x0148(0x0004)
	float                                              m_fCurrentInputYaw;                                       // 0x014C(0x0004)
	float                                              m_fYawDeltaRate;                                          // 0x0150(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSVehicleSimTank");
		return ptr;
	}

};


// Class BIOC_Base.BioLookAt
// 0x0024 (0x0060 - 0x003C)
class UBioLookAt : public UObject
{
public:
	class AActor*                                      m_oTarget;                                                // 0x003C(0x0004) (Edit)
	class ABioPawn*                                    m_oPawn;                                                  // 0x0040(0x0004) (Edit)
	int                                                m_nRank;                                                  // 0x0044(0x0004) (Edit)
	unsigned long                                      m_bDisabling : 1;                                         // 0x0048(0x0004)
	float                                              m_fLookAtNoticeTimer;                                     // 0x004C(0x0004)
	class UBioLookAtDefinition*                        m_Definition;                                             // 0x0050(0x0004)
	TArray<class UBioPawnLookAtController*>            m_Controllers;                                            // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLookAt");
		return ptr;
	}

};


// Class BIOC_Base.BioLookAtDefinition
// 0x0020 (0x005C - 0x003C)
class UBioLookAtDefinition : public UObject
{
public:
	TArray<struct FLookAtBoneDefinition>               BoneDefinitions;                                          // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FName                                       RootAnimBoneName;                                         // 0x0048(0x0008) (Edit)
	unsigned char                                      RootAnimBoneLookAtAxis;                                   // 0x0050(0x0001) (Edit)
	unsigned char                                      RootAnimBoneUpAxis;                                       // 0x0051(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0052(0x0002) MISSED OFFSET
	unsigned long                                      RootAnimBoneLookAtInverted : 1;                           // 0x0054(0x0004) (Edit)
	unsigned long                                      RootAnimBoneUpInverted : 1;                               // 0x0054(0x0004) (Edit)
	unsigned long                                      RootBoneYawOnly : 1;                                      // 0x0054(0x0004) (Edit)
	float                                              ValidTargetAngleRange;                                    // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLookAtDefinition");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetLookAtTarget
// 0x0018 (0x0104 - 0x00EC)
class UBioSeqAct_SetLookAtTarget : public USequenceAction
{
public:
	class AActor*                                      m_oTarget;                                                // 0x00EC(0x0004)
	TArray<class ABioPawn*>                            m_oPawn;                                                  // 0x00F0(0x000C) (NeedCtorLink)
	float                                              m_fTurnSpeed;                                             // 0x00FC(0x0004) (Edit)
	unsigned long                                      m_bEyes : 1;                                              // 0x0100(0x0004) (Edit)
	unsigned long                                      m_bHead : 1;                                              // 0x0100(0x0004) (Edit)
	unsigned long                                      m_bTorso : 1;                                             // 0x0100(0x0004) (Edit)
	unsigned long                                      m_bBody : 1;                                              // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetLookAtTarget");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_SetLookAtTargetWithBoneDefs
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetLookAtTargetWithBoneDefs : public USequenceAction
{
public:
	class AActor*                                      m_oTarget;                                                // 0x00EC(0x0004)
	class ABioPawn*                                    m_oPawn;                                                  // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetLookAtTargetWithBoneDefs");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ToggleGlobalLookAt
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ToggleGlobalLookAt : public USequenceAction
{
public:
	unsigned long                                      ForceState : 1;                                           // 0x00EC(0x0004) (Edit)
	unsigned long                                      State : 1;                                                // 0x00EC(0x0004) (Edit)
	unsigned long                                      Instant : 1;                                              // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ToggleGlobalLookAt");
		return ptr;
	}

};


// Class BIOC_Base.BioItemSelection
// 0x0008 (0x0044 - 0x003C)
class UBioItemSelection : public UObject
{
public:
	class UBioItem*                                    m_item;                                                   // 0x003C(0x0004)
	unsigned long                                      m_isVolatile : 1;                                         // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSelection");
		return ptr;
	}

};


// Class BIOC_Base.BioItemSelectionPawn
// 0x0004 (0x0048 - 0x0044)
class UBioItemSelectionPawn : public UBioItemSelection
{
public:
	class UBioPawnItemInterface*                       m_itemInterface;                                          // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSelectionPawn");
		return ptr;
	}

};


// Class BIOC_Base.BioItemSelectionEquipment
// 0x0001 (0x0049 - 0x0048)
class UBioItemSelectionEquipment : public UBioItemSelectionPawn
{
public:
	TEnumAsByte<EBioEquipmentSlot>                     m_slot;                                                   // 0x0048(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSelectionEquipment");
		return ptr;
	}

};


// Class BIOC_Base.BioItemSelectionInventory
// 0x0000 (0x0048 - 0x0048)
class UBioItemSelectionInventory : public UBioItemSelectionPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSelectionInventory");
		return ptr;
	}

};


// Class BIOC_Base.BioItemSelectionQuickslot
// 0x0008 (0x0050 - 0x0048)
class UBioItemSelectionQuickslot : public UBioItemSelectionPawn
{
public:
	TEnumAsByte<EBioItemWeaponRangedType>              m_weaponType;                                             // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	unsigned long                                      m_isActiveQuickslot : 1;                                  // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSelectionQuickslot");
		return ptr;
	}

};


// Class BIOC_Base.BioItemSelectionSimple
// 0x0000 (0x0044 - 0x0044)
class UBioItemSelectionSimple : public UBioItemSelection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSelectionSimple");
		return ptr;
	}

};


// Class BIOC_Base.BioVFXInterface
// 0x0000 (0x003C - 0x003C)
class UBioVFXInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVFXInterface");
		return ptr;
	}


	bool CreateDeathEffects(class UBioDeathVFXGameState* pGameState);
};


// Class BIOC_Base.BioSFHandler_AdditionalContent
// 0x0000 (0x005C - 0x005C)
class UBioSFHandler_AdditionalContent : public UBioSFHandler
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_AdditionalContent");
		return ptr;
	}

};


// Class BIOC_Base.BioSFHandler_AreaMap
// 0x005C (0x00B8 - 0x005C)
class UBioSFHandler_AreaMap : public UBioSFHandler
{
public:
	float                                              m_fScrollSpeed;                                           // 0x005C(0x0004) (Config)
	float                                              m_fCursorSpeed;                                           // 0x0060(0x0004) (Config)
	int                                                m_nLeftScrollDelta;                                       // 0x0064(0x0004) (Transient)
	int                                                m_nRightScrollDelta;                                      // 0x0068(0x0004) (Transient)
	struct FVector                                     m_vLeftInput;                                             // 0x006C(0x000C) (Transient)
	struct FVector                                     m_vRightInput;                                            // 0x0078(0x000C) (Transient)
	struct FString                                     m_sMapName;                                               // 0x0084(0x000C) (Transient, NeedCtorLink)
	struct FBox                                        m_levelBox;                                               // 0x0090(0x001C) (Transient)
	class UBio2DA*                                     m_pAreaMapTable;                                          // 0x00AC(0x0004) (Transient)
	float                                              m_fCurrentZoom;                                           // 0x00B0(0x0004) (Transient)
	unsigned long                                      m_bWaitingForMsgBox : 1;                                  // 0x00B4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_AreaMap");
		return ptr;
	}


	void RTNConfirm(bool bAPressed, int nContext);
};


// Class BIOC_Base.BioSFHandler_BrowserWheel
// 0x00C4 (0x0120 - 0x005C)
class UBioSFHandler_BrowserWheel : public UBioSFHandler
{
public:
	struct FVector                                     vInput;                                                   // 0x005C(0x000C)
	float                                              fLastRadius;                                              // 0x0068(0x0004)
	TEnumAsByte<EMEBrowserWheelSubPages>               nLastSubPage;                                             // 0x006C(0x0001)
	TEnumAsByte<EGuiEquipSlots>                        m_eCachedEquipSlot;                                       // 0x006D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006E(0x0002) MISSED OFFSET
	TArray<TEnumAsByte<EGuiEquipSlots>>                lstEquipSlotOrderXMods;                                   // 0x0070(0x000C) (NeedCtorLink)
	TArray<TEnumAsByte<EGuiEquipSlots>>                lstEquipSlotOrderInventory;                               // 0x007C(0x000C) (NeedCtorLink)
	struct FBWPageStruct                               lstPages[0x8];                                            // 0x0088(0x0010) (Config)
	float                                              m_fTipTextTimeout;                                        // 0x0108(0x0004) (Config)
	float                                              m_fTipTextTimeRemaining;                                  // 0x010C(0x0004)
	class UBio2DA*                                     m_TipText2DA;                                             // 0x0110(0x0004)
	struct FName                                       m_nmTipStringRef;                                         // 0x0114(0x0008)
	class UBioSFHandler_XMods*                         oXModsHandler;                                            // 0x011C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_BrowserWheel");
		return ptr;
	}


	void OnPanelRemoved();
	void OnPanelAdded();
	void InitializeBrowser();
	void DetermineJournalCodexUpdateStatus();
	void DetermineSquadUpdateStatus();
	void Update(float fDeltaT);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void UpdateCachedItemCategory(class UBioSFPanel* oLastPanel);
	void ShowSelectedPanel(int nPanel, class UBioSFManager* oManager);
};


// Class BIOC_Base.BioSFHandler_Credits
// 0x002C (0x0088 - 0x005C)
class UBioSFHandler_Credits : public UBioSFHandler
{
public:
	float                                              fFadeTime;                                                // 0x005C(0x0004) (Config)
	float                                              fHoldTime;                                                // 0x0060(0x0004) (Config)
	float                                              fScrollTime;                                              // 0x0064(0x0004) (Config)
	TArray<struct FBioCreditsDetails>                  lstFlashingCredits;                                       // 0x0068(0x000C) (Config, NeedCtorLink)
	TArray<struct FBioCreditsDetails>                  lstScrollingCredits;                                      // 0x0074(0x000C) (Config, NeedCtorLink)
	int                                                nCreditIndex;                                             // 0x0080(0x0004)
	unsigned long                                      bFromMainMenu : 1;                                        // 0x0084(0x0004)
	unsigned long                                      bFromAdditionalContent : 1;                               // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Credits");
		return ptr;
	}


	void OnPanelRemoved();
	void SetFromAdditionalContent();
	void SetFromMainMenu();
	void PopulateScrollingCredits();
	void SendFlashingCredit();
	void SetupCreditDetails();
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	bool SetDataFromIniFile(const struct FString& m_sFileName);
};


// Class BIOC_Base.BioSFHandler_DataCodex
// 0x0028 (0x0084 - 0x005C)
class UBioSFHandler_DataCodex : public UBioSFHandler
{
public:
	float                                              m_fScrollValue;                                           // 0x005C(0x0004)
	int                                                m_nVoiceOverPage;                                         // 0x0060(0x0004)
	float                                              m_fTimeUntilVoiceOver;                                    // 0x0064(0x0004)
	class UAudioComponent*                             m_oVoiceOver;                                             // 0x0068(0x0004) (ExportObject, Component, EditInline)
	float                                              fVoiceOverDelay;                                          // 0x006C(0x0004) (Config)
	float                                              fVoiceOverCancelFadeOut;                                  // 0x0070(0x0004) (Config)
	struct FString                                     sDefaultCodexImage;                                       // 0x0074(0x000C) (Config, NeedCtorLink)
	class UBio2DA*                                     m_pCodexImages2DA;                                        // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_DataCodex");
		return ptr;
	}

};


// Class BIOC_Base.BioSFHandler_DesignerUI
// 0x00A0 (0x00FC - 0x005C)
class UBioSFHandler_DesignerUI : public UBioSFHandler
{
public:
	unsigned long                                      m_bCanInvoke : 1;                                         // 0x005C(0x0004)
	unsigned long                                      bSendDisableDefaultEscMsg : 1;                            // 0x005C(0x0004)
	unsigned long                                      bSendDisableDefaultEscValue : 1;                          // 0x005C(0x0004)
	struct FBioDUITimerDetails                         stModalTimer;                                             // 0x0060(0x0014)
	struct FBioDUITimerDetails                         stPassiveTimer;                                           // 0x0074(0x0014)
	TArray<struct FBioDUIPulseDetails>                 lstPulsingElements;                                       // 0x0088(0x000C) (NeedCtorLink)
	struct FBioDUIElementStatus                        lstElementStatus[0x18];                                   // 0x0094(0x0004)
	int                                                nElementVisibleCount;                                     // 0x00F4(0x0004)
	int                                                m_nLayout;                                                // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_DesignerUI");
		return ptr;
	}


	void SetDisableDefaultEsc(bool bDisable);
	void Update(float fDeltaT);
	void OnPanelAdded();
	float GetTimerValue(bool bModalTimer);
	void SetTimerDetails(bool bModalTimer, float fStartTime, float fEndTime, float fInterval);
	void FlashLaserCenter(bool bSuccess);
	void SetLaserCircle(int nCircle);
	void SetLaserLayout(bool bShow);
	bool IsQuasarLayout();
	void SetQuasarLayout(bool bShow);
	void SetBarFillDirection(bool bModalBar, bool bLeftToRight);
	void SetBarFillPercent(bool bModalBar, int nPercent);
	void SetBarMarkerPoints(bool bModalBar, int nMarker1, int nMarker2);
	void SetCounterValue(bool bModalCounter, int nValue);
	void SetElementText(TEnumAsByte<EBioDUIElements> nElement, struct FString* sText);
	void SetTextStringRef(TEnumAsByte<EBioDUIElements> nElement);
	void ClearElementPulse(TEnumAsByte<EBioDUIElements> nElement);
	int SetupElementPulse(TEnumAsByte<EBioDUIElements> nElement, float fMinAlpha, float fCycleTime);
	void SetElementAlpha(TEnumAsByte<EBioDUIElements> nElement, float fAlpha);
	void SetElementColor(TEnumAsByte<EBioDUIElements> nElement, struct FColor* stColor);
	void SetElementVisible(TEnumAsByte<EBioDUIElements> nElement, bool bVisible, float fFadeTime);
	bool IsActive(bool bModal);
	void ClearAll(bool bModal);
};


// Class BIOC_Base.BioSFHandler_DeviceSelection
// 0x001C (0x0078 - 0x005C)
class UBioSFHandler_DeviceSelection : public UBioSFHandler
{
public:
	unsigned long                                      m_bDeviceSelectionVisible : 1;                            // 0x005C(0x0004)
	unsigned long                                      m_bIsSaveGame : 1;                                        // 0x005C(0x0004)
	struct FScriptDelegate                             __CompletionCallback__Delegate;                           // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CancelCallback__Delegate;                               // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_DeviceSelection");
		return ptr;
	}


	void SetCancelDelegateEx(const struct FName& nmFunction, class UObject* pTarget);
	void SetCancelDelegate(const struct FScriptDelegate& pDelegate);
	void SetCompletionDelegateEx(const struct FName& nmFunction, class UObject* pTarget);
	void SetCompletionDelegate(const struct FScriptDelegate& pDelegate);
	void DisplayDeviceSelection(unsigned char LocalUserNum, int SizeNeeded, bool bForceShowUI);
	void CancelCallback(int i_dwDeviceSelectionId);
	void CompletionCallback(int i_dwDeviceSelectionId);
};


// Class BIOC_Base.BioSFHandler_GalaxyMap
// 0x0014 (0x0070 - 0x005C)
class UBioSFHandler_GalaxyMap : public UBioSFHandler
{
public:
	float                                              m_fScrollValue;                                           // 0x005C(0x0004)
	float                                              m_fCursorDeltaX;                                          // 0x0060(0x0004) (Transient)
	float                                              m_fCursorDeltaY;                                          // 0x0064(0x0004) (Transient)
	unsigned long                                      m_bClosingPlanet : 1;                                     // 0x0068(0x0004) (Transient)
	unsigned long                                      m_bWaitingForMsgBox : 1;                                  // 0x0068(0x0004) (Transient)
	class UBio2DA*                                     m_pGalaxyMapImages2DA;                                    // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_GalaxyMap");
		return ptr;
	}


	void TravelConfirm(bool bAPressed, int nContext);
};


// Class BIOC_Base.BioSFHandler_GameOver
// 0x0004 (0x0060 - 0x005C)
class UBioSFHandler_GameOver : public UBioSFHandler
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_GameOver.m_srGameOverString

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_GameOver");
		return ptr;
	}


	void OnPanelRemoved();
	void OnPanelAdded();
	void GotoMainMenu();
	void SetupGameOver();
	void HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments);
};


// Class BIOC_Base.BioSFHandler_HUD
// 0x00AC (0x0108 - 0x005C)
class UBioSFHandler_HUD : public UBioSFHandler
{
public:
	int                                                m_nShieldPointsPerBar;                                    // 0x005C(0x0004) (Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0060(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_HUD.srMeters
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_HUD.srGrenadePowerTitle
	TEnumAsByte<EBioItemWeaponRangedType>              m_eLastWeapon;                                            // 0x0068(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData03[0x4];                                       // 0x0069(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_HUD.srSwitching
	unsigned char                                      UnknownData04[0x4];                                       // 0x0070(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_HUD.srIncapacitated
	unsigned long                                      m_bVehicleWidgetOn : 1;                                   // 0x0074(0x0004)
	class ABioPlayerSquad*                             m_oPlayerSquad;                                           // 0x0078(0x0004) (Transient)
	class ABioPawn*                                    m_oCommandTarget;                                         // 0x007C(0x0004) (Transient)
	class ABioCameraManager*                           m_pCameraManager;                                         // 0x0080(0x0004) (Transient)
	unsigned long                                      m_bSquadWidgetOn : 1;                                     // 0x0084(0x0004) (Transient)
	unsigned long                                      m_bDisplayingMapBounds : 1;                               // 0x0084(0x0004) (Transient)
	unsigned long                                      m_bForceRadarUpdate : 1;                                  // 0x0084(0x0004) (Transient)
	int                                                m_nShepardIndex;                                          // 0x0088(0x0004)
	int                                                m_nHench1Index;                                           // 0x008C(0x0004)
	int                                                m_nHench2Index;                                           // 0x0090(0x0004)
	int                                                m_nCommandTargetIndex;                                    // 0x0094(0x0004)
	int                                                m_nSquadPopulation;                                       // 0x0098(0x0004)
	TArray<struct FCustomMappingDisplayInfo>           m_lstMappedPowers;                                        // 0x009C(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        m_lstMappablePowersPawn0;                                 // 0x00A8(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        m_lstMappablePowersPawn1;                                 // 0x00B4(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        m_lstMappablePowersPawn2;                                 // 0x00C0(0x000C) (Transient, NeedCtorLink)
	int                                                m_nMappablePowers;                                        // 0x00CC(0x0004) (Transient)
	int                                                m_nSelectedPowerWheelIndex;                               // 0x00D0(0x0004) (Transient)
	int                                                m_nPowerWheelMode;                                        // 0x00D4(0x0004) (Transient)
	struct FVector                                     vInput;                                                   // 0x00D8(0x000C)
	float                                              fRadius;                                                  // 0x00E4(0x0004)
	float                                              fLastRadius;                                              // 0x00E8(0x0004)
	int                                                nAngle;                                                   // 0x00EC(0x0004)
	int                                                nLastAngle;                                               // 0x00F0(0x0004)
	TEnumAsByte<EHudPowerPadModes>                     m_ePowerWheelMode;                                        // 0x00F4(0x0001)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	int                                                m_ObjectNameColourR;                                      // 0x00F8(0x0004) (Config)
	int                                                m_ObjectNameColourB;                                      // 0x00FC(0x0004) (Config)
	int                                                m_ObjectNameColourG;                                      // 0x0100(0x0004) (Config)
	int                                                m_ObjectNameAlpha;                                        // 0x0104(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_HUD");
		return ptr;
	}


	void OnPanelAdded();
	void UpdateStormWidget(class UBioPlayerInput* oPlayerInput, class ABioPlayerController* oCtrl);
	void UpdateXPTotalWidget(int nDelta, int nNewTotal);
	void UpdateIconDumpWidget(class UBioEventNotifier* oEventNotifier);
	int DerivePowerBarPercentage(TEnumAsByte<EHUDPowerBehaviorTypes> eBehaviorType, class UBioPower* oPower);
	TEnumAsByte<EHUDPowerBehaviorTypes> DeriveComplexPowerBehaviorType(class UBioPower* oPower);
	void UpdateCustomMappingWidget(TEnumAsByte<EHUDDPadSlots> eMapSlot, class ABioPlayerController* oPlayerCtrl, class ABioPawn* oTarget);
	void UpdateAllCustomMappingWidgets(class UBioPlayerInput* pPlayerInput, class ABioPlayerController* oPlayerCtrl, class ABioPawn* oTarget);
	void PopulateCommandsFromPawn(class ABioPawn* oPlayer, int nPawnIndex);
	void PopulatePowersFromPawn(class ABioPawn* oPlayer, int nPawnIndex);
	void PopulatePowerFromPawn(class ABioPawn* oPlayer, int nPawnIndex, int nPowerIndex);
	void PopulateArmorEmitterPower(class ABioPawn* oPlayer, int nPawnIndex);
	void PopulateWeaponAltPower(class ABioPawn* oPlayer, int nPawnIndex);
	void PopulateHealPower(class ABioPawn* oPlayer, int nPawnIndex);
	void PopulateGrenadePower(class ABioPawn* oPlayer, int nPawnIndex);
	void SetPowerPadMode(TEnumAsByte<EHudPowerPadModes> eMode);
	void UpdateMinimapWidget();
	void SetSquadStatusWidgetInvisible();
	void SetSquadStatusWidgetVisible();
	int DeriveNameIconRef(int nSourceRef);
	void UpdateSquadFormationWidget();
	TEnumAsByte<ESquadIcons> GetHenchmanFormation(int nSquadIndex);
	void UpdateSquadFormationSwitchWidget(class UBioPawnBehavior* oBehavior, class UBioPlayerInput* oPlayerInput);
	void UpdateSquadStatusWidgets();
	void SiftPlayerSquad();
	void SetVehicleStatusWidgetVisible();
	void UpdateVehicleStatusWidget(class ABioVehicleBase* oVehicle);
	void UpdateCurrentWeaponWidget(int nWeaponSlot, class ABioWeaponRanged* oRangedWeapon, bool bUsageSituationAmenable);
	void UpdateWeaponSwitchWidget(class ABioPawn* oPawn, int nPawnIndex);
	int DeriveSlotFromWeapon(TEnumAsByte<EBioItemWeaponRangedType> eWeapon);
	void HideTargetStatusWidget();
	void UpdateTargetStatusWidget(class AActor* pTarget, class APawn* pPlayer, bool bIsTargetCombattant, bool bPlayerInVehicle);
	void UpdateHUDModes(int eInputMode, int eActionState);
	void PreReleaseHUD();
	void InitializeEverything();
	void assignKeyMaps();
	void assignHotKeys();
	int getSquadUniqueIndex(int HUDMemberIndex);
	void doHotKey(int Index);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void ToggleKeyMap();
};


// Class BIOC_Base.BioSFHandler_Journal
// 0x0028 (0x0084 - 0x005C)
class UBioSFHandler_Journal : public UBioSFHandler
{
public:
	TArray<struct FGuiQuestInfo>                       lstQuests;                                                // 0x005C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0068(0x000C) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Journal.lstSortLabels
	unsigned char                                      UnknownData01[0xC];                                       // 0x0074(0x000C) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Journal.lstSortTitles
	float                                              m_fRScrollValue;                                          // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Journal");
		return ptr;
	}


	void Update(float fDeltaT);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
};


// Class BIOC_Base.BioSFHandler_Keyboard
// 0x0028 (0x0084 - 0x005C)
class UBioSFHandler_Keyboard : public UBioSFHandler
{
public:
	struct FString                                     sTitle;                                                   // 0x005C(0x000C) (NeedCtorLink)
	struct FString                                     sDescription;                                             // 0x0068(0x000C) (NeedCtorLink)
	struct FString                                     sInputValue;                                              // 0x0074(0x000C) (NeedCtorLink)
	unsigned long                                      bKeyboardVisible : 1;                                     // 0x0080(0x0004)
	unsigned long                                      bKeyboardEntrySucceeded : 1;                              // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Keyboard");
		return ptr;
	}


	void DisplayKeyboard(int nMaxLength, const struct FString& sDefault);
};


// Class BIOC_Base.BioSFHandler_SaveLoadBase
// 0x0039 (0x0095 - 0x005C)
class UBioSFHandler_SaveLoadBase : public UBioSFHandler
{
public:
	TArray<struct FSaveGameRecord>                     lstRecords;                                               // 0x005C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0068(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveLoadBase.srDeleteMessage
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveLoadBase.srDeleteConfirm
	unsigned char                                      UnknownData02[0x4];                                       // 0x0070(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveLoadBase.srDeleteCancel
	unsigned char                                      UnknownData03[0x4];                                       // 0x0074(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveLoadBase.srDeleteCharacterMessage
	unsigned char                                      UnknownData04[0x4];                                       // 0x0078(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveLoadBase.srTimePlayed
	unsigned char                                      UnknownData05[0x4];                                       // 0x007C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveLoadBase.srLastPlayedDate
	unsigned char                                      UnknownData06[0x4];                                       // 0x0080(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveLoadBase.srLastPlayedTime
	unsigned long                                      m_bShowAllSaveGames : 1;                                  // 0x0084(0x0004)
	struct FString                                     m_ActiveCharId;                                           // 0x0088(0x000C) (NeedCtorLink)
	TEnumAsByte<ESaveLoadGuiMode>                      m_eGuiMode;                                               // 0x0094(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_SaveLoadBase");
		return ptr;
	}


	void OnPanelRemoved();
	void DeviceSelectionCancel(int i_dwDeviceSelectionId);
	void DeviceSelectionCompletion(int i_dwDeviceSelectionId);
	void DeleteGameConfirm(bool bAPressed, int nContext);
};


// Class BIOC_Base.BioSFHandler_LoadGame
// 0x0027 (0x00BC - 0x0095)
class UBioSFHandler_LoadGame : public UBioSFHandler_SaveLoadBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x4];                                       // 0x0095(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_LoadGame.srAbandonProgressMessage
	unsigned char                                      UnknownData02[0x4];                                       // 0x009C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_LoadGame.srAbandonProgressConfirm
	unsigned char                                      UnknownData03[0x4];                                       // 0x00A0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_LoadGame.srAbandonProgressCancel
	unsigned char                                      UnknownData04[0x4];                                       // 0x00A4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_LoadGame.srLoading
	unsigned long                                      bFromMainMenu : 1;                                        // 0x00A8(0x0004)
	struct FString                                     m_sDeleteCharId;                                          // 0x00AC(0x000C) (NeedCtorLink)
	class UBioSFHandler_MessageBox*                    m_oLoadGuiMessageBoxHandler;                              // 0x00B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_LoadGame");
		return ptr;
	}


	void OnPanelRemoved();
	void DeleteGameConfirm(bool bAPressed, int nContext);
	void DeleteCharacterConfirm(bool bAPressed, int nContext);
	void LoadGameConfirm(bool bAPressed, int nContext);
};


// Class BIOC_Base.BioSFHandler_Loot
// 0x003C (0x0098 - 0x005C)
class UBioSFHandler_Loot : public UBioSFHandler
{
public:
	class UBioInventoryGuiInterface*                   m_oInvInterface;                                          // 0x005C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioInventory*                               m_oLootInventory;                                         // 0x0060(0x0004)
	int                                                m_nSelectedItemIndex;                                     // 0x0064(0x0004)
	int                                                m_nShiftItemIndex;                                        // 0x0068(0x0004)
	unsigned long                                      m_bCreatedFromInventory : 1;                              // 0x006C(0x0004)
	unsigned long                                      bVerifyingSalvage : 1;                                    // 0x006C(0x0004)
	class UBioSFHandler_Inventory*                     m_oInventoryGuiHandler;                                   // 0x0070(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srEmpty
	unsigned char                                      UnknownData01[0x4];                                       // 0x0078(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srXModToInventorySalvageMsg
	unsigned char                                      UnknownData02[0x4];                                       // 0x007C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srXModToInventoryConfirm
	unsigned char                                      UnknownData03[0x4];                                       // 0x0080(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srSalvageItemMsg
	unsigned char                                      UnknownData04[0x4];                                       // 0x0084(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srSalvageItemConfirm
	unsigned char                                      UnknownData05[0x4];                                       // 0x0088(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srSalvageItemCancel
	unsigned char                                      UnknownData06[0x4];                                       // 0x008C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srInventoryFullWarning
	unsigned char                                      UnknownData07[0x4];                                       // 0x0090(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Loot.srInventoryFullMessage
	float                                              fWarnMessageDispTime;                                     // 0x0094(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Loot");
		return ptr;
	}


	void DisplayLootMaxed(int i_nNumberToSlavage, int i_nMaxItems);
	void DisplayLootLimitWarning(int i_nCurrentInventoryNum, int i_nMaxItems);
	void DetermineLootConstraints();
	void GameSessionEnded();
	void OnPanelRemoved();
	void OnPanelAdded();
	void LootSalvageItemProcessDoubleCheck(bool bConfirmedSalvageAttempt, int nContext);
	void PopulateLootItemListEntry(int nDisplayIndex);
	void PopulateLootItemList();
	void PopulateResourceList();
	void SetGlobalVars();
	void HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments);
	struct FString GetInventoryThresholdWarning(int i_nCurrentInvNum, int i_nMaxItems);
	struct FString GetInventoryMaxedMessage(int i_nNumberOver, int i_nMaxItems);
};


// Class BIOC_Base.BioSFHandler_MainMenu
// 0x000D (0x0069 - 0x005C)
class UBioSFHandler_MainMenu : public UBioSFHandler
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_MainMenu.srPRCAvailableMessage
	float                                              fPCRMessageDispTime;                                      // 0x0060(0x0004) (Config)
	unsigned long                                      bDisplayForNewContentOnly : 1;                            // 0x0064(0x0004) (Config)
	unsigned long                                      m_bSetupMainMenu : 1;                                     // 0x0064(0x0004)
	unsigned long                                      m_bAchievementsEnumerating : 1;                           // 0x0064(0x0004)
	TEnumAsByte<EMainMenuEntries>                      nSelectedEntry;                                           // 0x0068(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_MainMenu");
		return ptr;
	}


	void StartAchievementEnumeration();
	void SetupExtrasMenu();
	bool DoCharactersExist();
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void OnQueryAvailableDownloadsComplete(bool bWasSuccessful);
	void SetupMainMenu();
	void OnPanelAdded();
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void Update2(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_MessageBox
// 0x0034 (0x0090 - 0x005C)
class UBioSFHandler_MessageBox : public UBioSFHandler
{
public:
	int                                                nInputCallbackContext;                                    // 0x005C(0x0004)
	TEnumAsByte<EInputModes>                           nPreviousInputMode;                                       // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	unsigned long                                      nPreviousIgnoreInputLook : 1;                             // 0x0064(0x0004)
	unsigned long                                      bShowMouse : 1;                                           // 0x0064(0x0004)
	class UBioSFManager*                               m_oBackupSFMgr;                                           // 0x0068(0x0004)
	struct FScriptDelegate                             __InputCallback__Delegate;                                // 0x006C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateCallback__Delegate;                               // 0x0078(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateCallbackEx__Delegate;                             // 0x0084(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_MessageBox");
		return ptr;
	}


	void HideMessageBox(bool bRemove);
	void DisplayQuickMessageBoxEx(const struct FString& sMessage, struct FBioMessageBoxOptionalParams* stParams);
	void DisplayQuickMessageBox(struct FBioMessageBoxOptionalParams* stParams);
	void DisplayMessageBoxEx(const struct FString& sMessage, struct FBioMessageBoxOptionalParams* stParams);
	void DisplayMessageBox(struct FBioMessageBoxOptionalParams* stParams);
	void SetUpdateDelegate(const struct FScriptDelegate& pDelegate);
	void SetInputDelegate(const struct FScriptDelegate& pDelegate, int nContext);
	void UpdateCallbackEx(float fDeltaT, class UObject* oMsgBox);
	void UpdateCallback(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox);
	void InputCallback(bool bAPressed, int nContext);
};


// Class BIOC_Base.BioSFHandler_NewCharacter
// 0x00F0 (0x014C - 0x005C)
class UBioSFHandler_NewCharacter : public UBioSFHandler
{
public:
	float                                              fScrollValue;                                             // 0x005C(0x0004)
	float                                              fLookAtUpDownValue;                                       // 0x0060(0x0004)
	float                                              fLookAtLeftRightValue;                                    // 0x0064(0x0004)
	unsigned long                                      bLookAtLeftRightNulling : 1;                              // 0x0068(0x0004)
	unsigned long                                      bLookAtUpDownNulling : 1;                                 // 0x0068(0x0004)
	unsigned long                                      bZoomedInOnFace : 1;                                      // 0x0068(0x0004)
	unsigned long                                      bOpenedFromMainMenu : 1;                                  // 0x0068(0x0004)
	unsigned long                                      m_bMaleSelected : 1;                                      // 0x0068(0x0004)
	struct FString                                     sStartMap;                                                // 0x006C(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0078(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_NewCharacter.srCustomMaleName
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_NewCharacter.srCustomFemaleName
	unsigned char                                      UnknownData02[0x4];                                       // 0x0080(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_NewCharacter.srNewCharConfirm
	unsigned char                                      UnknownData03[0x4];                                       // 0x0084(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_NewCharacter.srNewCharCancel
	unsigned char                                      UnknownData04[0x4];                                       // 0x0088(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_NewCharacter.srNewCharQuestion
	unsigned char                                      UnknownData05[0x4];                                       // 0x008C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_NewCharacter.srFacialCategoryDescription
	struct FName                                       m_nmAllianceComputerPleaseLogin;                          // 0x0090(0x0008)
	struct FString                                     m_sMaleName;                                              // 0x0098(0x000C) (NeedCtorLink)
	struct FString                                     m_sFemaleName;                                            // 0x00A4(0x000C) (NeedCtorLink)
	int                                                m_nIconicClass;                                           // 0x00B0(0x0004)
	unsigned char                                      UnknownData06[0x4];                                       // 0x00B4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_NewCharacter.srNameTitle
	int                                                nMaxNameLength;                                           // 0x00B8(0x0004) (Config)
	struct FName                                       m_nmClassAnimSet;                                         // 0x00BC(0x0008)
	TArray<class UAnimSet*>                            lstClassAnimSetRefs;                                      // 0x00C4(0x000C) (NeedCtorLink)
	TEnumAsByte<EBioNewCharacterTemplates>             m_nCurrentTemplate;                                       // 0x00D0(0x0001)
	TEnumAsByte<EBioNewCharacterTemplates>             m_nLastInitializedTemplate;                               // 0x00D1(0x0001)
	unsigned char                                      UnknownData07[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	class ABioPawn*                                    lstTemplates[0x4];                                        // 0x00D4(0x0004)
	struct FName                                       lstTemplateNames[0x4];                                    // 0x00E4(0x0008)
	struct FName                                       lstStoredVarNames[0x4];                                   // 0x0104(0x0008)
	class UBioSFHandler_Keyboard*                      oKeyboard;                                                // 0x0124(0x0004)
	class UBioMorphFaceFrontEnd*                       m_oBioMorphFrontEnd;                                      // 0x0128(0x0004) (Transient)
	struct FName                                       lstCurrentClass[0x4];                                     // 0x012C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_NewCharacter");
		return ptr;
	}


	void SelectPreviousPregeneratedHead();
	void SelectNextPregeneratedHead();
	void ConfirmButtonPressed(bool bAPressed, int nContext);
	void ConfirmComplete();
	void ClearModels();
	void OnPanelRemoved();
	void OnPanelAdded();
	void PopulateCustomFaceList();
	void HandleSliderChange(int nCategory, int nSlider, int nValue);
	void DoCategoryReset(int nCategory);
	void SetSliderPositions();
	void SetCustomModel();
	void Update3DModel(TEnumAsByte<EBioNewCharacterTemplates> nTemplate);
	void Update3DModelState(TEnumAsByte<EBioNewCharacterTemplates> nTemplate);
	void StartNewGameEx();
	void StartNewGame();
	void UpdateBonusTalentList(const struct FString& sCharClass);
	void SetPlayerCharacter(TArray<struct FString>* PlayerSettings);
	void SetupIconicCharacter(TArray<struct FString>* lstSettings);
	void UpdateCustomClassChoice(class UBioCharacterImporter* importer, int Row);
	void UpdateCustomClassList();
	void UpdatePreviousCharacterList();
	void SetupSummary();
	void SetCustomName(const struct FString& sMaleName, const struct FString& sFemaleName);
	void Update(float fDeltaT);
	void ResetLookAt();
	void HandleLookAtLeftRight(float fValue);
	void HandleLookAtUpDown(float fValue);
	void HandleRotate(float fValue);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void ClearEffects();
	void Update3DModelByClass(const struct FName& nmClass, class ABioPawn* pTemplate, TEnumAsByte<EBioNewCharacterTemplates> nTemplate, bool bUpdate, bool bForce, bool bAttachVFXandUpdatePose);
	void Setup3DModel();
};


// Class BIOC_Base.BioSFHandler_Options
// 0x0144 (0x01A0 - 0x005C)
class UBioSFHandler_Options : public UBioSFHandler
{
public:
	struct FGameOptions                                m_oOriginalOptions;                                       // 0x005C(0x0090)
	struct FGameOptions                                m_oNewOptions;                                            // 0x00EC(0x0090)
	unsigned long                                      m_bDirty : 1;                                             // 0x017C(0x0004)
	unsigned long                                      m_bWaitingForMsgBox : 1;                                  // 0x017C(0x0004)
	TEnumAsByte<EOptionsGuiMode>                       m_nGuiMode;                                               // 0x0180(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	class UBioSFHandler*                               m_oHandlerFrom;                                           // 0x0184(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0188(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Options.srOptionsOverwriteMessage
	unsigned char                                      UnknownData02[0x4];                                       // 0x018C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Options.srOptionsOverwriteConfirm
	unsigned char                                      UnknownData03[0x4];                                       // 0x0190(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Options.srOptionsOverwriteCancel
	unsigned char                                      UnknownData04[0x4];                                       // 0x0194(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Options.srOptionsSaveOptionsFailMessage
	unsigned char                                      UnknownData05[0x4];                                       // 0x0198(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Options.srOptionsSaveOptionsFailOk
	unsigned char                                      UnknownData06[0x4];                                       // 0x019C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Options.srOptionsReturnToMainMenuWarning

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Options");
		return ptr;
	}


	void ConfirmResetTutorials(bool bAPressed, int nContext);
	void ConfirmResetToDefaults(bool bAPressed, int nContext);
	void OptionsConfirmCancel(bool bAPressed, int nContext);
	void CloseGui();
	void ConfirmGoToMainMenu(bool bAPressed, int nContext);
	void OptionsConfirmCommit(bool bAPressed, int nContext, bool bDoNotClose);
	void SetOptionsOnGUI(struct FGameOptions* i_GameOptions);
};


// Class BIOC_Base.BioSFHandler_PCAdditionalContent
// 0x0000 (0x005C - 0x005C)
class UBioSFHandler_PCAdditionalContent : public UBioSFHandler_AdditionalContent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCAdditionalContent");
		return ptr;
	}


	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PCAreaMap
// 0x0000 (0x00B8 - 0x00B8)
class UBioSFHandler_PCAreaMap : public UBioSFHandler_AreaMap
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCAreaMap");
		return ptr;
	}

};


// Class BIOC_Base.BioSFHandler_PCDataCodex
// 0x0000 (0x0084 - 0x0084)
class UBioSFHandler_PCDataCodex : public UBioSFHandler_DataCodex
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCDataCodex");
		return ptr;
	}


	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PCDesignerUI
// 0x0004 (0x0100 - 0x00FC)
class UBioSFHandler_PCDesignerUI : public UBioSFHandler_DesignerUI
{
public:
	int                                                m_PrevCameraBehavior;                                     // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCDesignerUI");
		return ptr;
	}


	void ButtonPress(int nButtonIndex);
	void HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments);
	void Update(float fDeltaT);
	void EnableCameraMovement();
	void DisableCameraMovement();
};


// Class BIOC_Base.BioSFHandler_PCJournal
// 0x0000 (0x0084 - 0x0084)
class UBioSFHandler_PCJournal : public UBioSFHandler_Journal
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCJournal");
		return ptr;
	}


	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PCLoadGame
// 0x0000 (0x00BC - 0x00BC)
class UBioSFHandler_PCLoadGame : public UBioSFHandler_LoadGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCLoadGame");
		return ptr;
	}


	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PCMessageBox
// 0x0000 (0x0090 - 0x0090)
class UBioSFHandler_PCMessageBox : public UBioSFHandler_MessageBox
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCMessageBox");
		return ptr;
	}

};


// Class BIOC_Base.BioSFHandler_PCNewCharacter
// 0x0010 (0x015C - 0x014C)
class UBioSFHandler_PCNewCharacter : public UBioSFHandler_NewCharacter
{
public:
	unsigned long                                      bRightMouseDown : 1;                                      // 0x014C(0x0004)
	float                                              fScrollValueMouse;                                        // 0x0150(0x0004)
	float                                              fLookAtUpDownValueMouse;                                  // 0x0154(0x0004)
	float                                              fLookAtLeftRightValueMouse;                               // 0x0158(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCNewCharacter");
		return ptr;
	}


	void HandleLookAtLeftRightMouse(float fValue);
	void HandleLookAtUpDownMouse(float fValue);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PCPauseMenu
// 0x0004 (0x0124 - 0x0120)
class UBioSFHandler_PCPauseMenu : public UBioSFHandler_BrowserWheel
{
public:
	unsigned long                                      bWaitForNextFrame : 1;                                    // 0x0120(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCPauseMenu");
		return ptr;
	}


	void HackGotoMainMenu();
	void Update(float fDeltaT);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void ExitConfirm(bool bAPressed, int nContext);
	void MainMenuConfirm(bool bAPressed, int nContext);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void OnPanelAdded();
};


// Class BIOC_Base.BioSFHandler_SaveGame
// 0x0023 (0x00B8 - 0x0095)
class UBioSFHandler_SaveGame : public UBioSFHandler_SaveLoadBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x4];                                       // 0x0095(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveGame.srOverwriteMessage
	unsigned char                                      UnknownData02[0x4];                                       // 0x009C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveGame.srOverwriteConfirm
	unsigned char                                      UnknownData03[0x4];                                       // 0x00A0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveGame.srOverwriteCancel
	unsigned char                                      UnknownData04[0x4];                                       // 0x00A4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveGame.srSaving
	unsigned char                                      UnknownData05[0x4];                                       // 0x00A8(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_SaveGame.srSaveComplete
	int                                                m_nMaxSaveGameNumber;                                     // 0x00AC(0x0004) (Config)
	float                                              fUpdateTimer;                                             // 0x00B0(0x0004) (Transient)
	class UBioSFHandler_MessageBox*                    m_oSaveGuiMessageBoxHandler;                              // 0x00B4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_SaveGame");
		return ptr;
	}


	void OnPanelRemoved();
	void SaveComplete(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox);
	void SaveGameConfirm(bool bAPressed, int nContext);
	void DeleteGameConfirm(bool bAPressed, int nContext);
};


// Class BIOC_Base.BioSFHandler_PCSaveGame
// 0x0000 (0x00B8 - 0x00B8)
class UBioSFHandler_PCSaveGame : public UBioSFHandler_SaveGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCSaveGame");
		return ptr;
	}


	void Update(float fDeltaT);
	void SaveComplete(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox);
};


// Class BIOC_Base.BioSFHandler_PCSettings
// 0x01D5 (0x0231 - 0x005C)
class UBioSFHandler_PCSettings : public UBioSFHandler
{
public:
	float                                              MIN_GAMMA;                                                // 0x005C(0x0004) (Edit, Const)
	float                                              MAX_GAMMA;                                                // 0x0060(0x0004) (Edit, Const)
	float                                              GAMMA_DIFF;                                               // 0x0064(0x0004) (Edit, Const)
	float                                              ENGINE_GAMMA_DEFAULT;                                     // 0x0068(0x0004) (Edit, Const)
	float                                              MinMouseSense;                                            // 0x006C(0x0004) (Config)
	float                                              MaxMouseSense;                                            // 0x0070(0x0004) (Config)
	unsigned long                                      m_bWaitingForMsgBox : 1;                                  // 0x0074(0x0004)
	unsigned long                                      bReturnToMainMenu : 1;                                    // 0x0074(0x0004)
	unsigned long                                      bHasCalledInit : 1;                                       // 0x0074(0x0004)
	unsigned long                                      bWaitForNewBindKey : 1;                                   // 0x0074(0x0004)
	unsigned long                                      bWaitAFrame : 1;                                          // 0x0074(0x0004)
	struct FGameOptions                                m_oOriginalOptions;                                       // 0x0078(0x0090)
	struct FGameOptions                                m_oNewOptions;                                            // 0x0108(0x0090)
	class UBioSFHandler*                               m_oHandlerFrom;                                           // 0x0198(0x0004)
	int                                                NewScreenResIndex;                                        // 0x019C(0x0004)
	int                                                OldScreenResIndex;                                        // 0x01A0(0x0004)
	TArray<struct FBioScreenResolution>                ResolutionList;                                           // 0x01A4(0x000C) (NeedCtorLink)
	int                                                BindingIndexToSet;                                        // 0x01B0(0x0004)
	int                                                BindingColIndexToSet;                                     // 0x01B4(0x0004)
	TArray<struct FBindingSetupDetails>                lstBindingSetup;                                          // 0x01B8(0x000C) (Config, NeedCtorLink)
	TArray<struct FsConstBinding>                      lstConstBindingSetup;                                     // 0x01C4(0x000C) (Config, NeedCtorLink)
	TArray<struct FKeyBind>                            ClearKeyList;                                             // 0x01D0(0x000C) (NeedCtorLink)
	class USoundCue*                                   SampleMusicSoundCue;                                      // 0x01DC(0x0004)
	class USoundCue*                                   SampleFXSoundCue;                                         // 0x01E0(0x0004)
	class USoundCue*                                   SampleVoiceSoundCue;                                      // 0x01E4(0x0004)
	class UAudioComponent*                             SampleMusicAudioComponent;                                // 0x01E8(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             SampleFXAudioComponent;                                   // 0x01EC(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             SampleVoiceAudioComponent;                                // 0x01F0(0x0004) (ExportObject, Component, EditInline)
	struct FString                                     SampleMusicName;                                          // 0x01F4(0x000C) (NeedCtorLink)
	struct FString                                     SampleFXName;                                             // 0x0200(0x000C) (NeedCtorLink)
	struct FString                                     SampleVoiceName;                                          // 0x020C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0218(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PCSettings.srOptionsOverwriteMessage
	unsigned char                                      UnknownData01[0x4];                                       // 0x021C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PCSettings.srOptionsOverwriteConfirm
	unsigned char                                      UnknownData02[0x4];                                       // 0x0220(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PCSettings.srOptionsOverwriteCancel
	unsigned char                                      UnknownData03[0x4];                                       // 0x0224(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PCSettings.srOptionsSaveOptionsFailMessage
	unsigned char                                      UnknownData04[0x4];                                       // 0x0228(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PCSettings.srOptionsSaveOptionsFailOk
	unsigned char                                      UnknownData05[0x4];                                       // 0x022C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PCSettings.srOptionsReturnToMainMenuWarning
	TEnumAsByte<EPCOptionsGuiMode>                     m_nGuiMode;                                               // 0x0230(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCSettings");
		return ptr;
	}


	void ApplyShadowDetail();
	void ApplyVideoChangesResolution();
	void ApplyVideoChanges();
	void SetShadowDetailLevel(bool ShadowDetailLevel);
	void SetFilterLevel(int FilterLevel);
	void SetShaderFilmLevel(int FilmDetailLevel);
	void SetShaderBlurLevel(int BlurDetailLevel);
	void SetTextureLevel(int TextureLevel);
	void SetGammaValue(int GammaValue);
	void SetScreenRes(int NewScreenRes);
	void SetWindow(bool bOn);
	void SetParticleEffectsLevel(int newLevel);
	void SetVSyncOn(bool bOn);
	void ApplyParticleEffectsLevel();
	void ApplyTextureLevelOfDetail();
	void GetTextureLevelOfDetail();
	void BuildResolutionList();
	void AddResolutionOptionToUI(const struct FBioScreenResolution& ScreenRes);
	void UpdateResolutionSelections();
	void SetAnalogSens(int Percent);
	void SetRumbleToggle(bool bOn);
	int ConvertLODBiasToParticleEffectsLevel(int LODBias);
	int ConvertParticleEffectsLevelToLODBias(int ParticleEffectsLevel);
	void GetParticleEffectsLevel();
	void GetShadowDetailLevel();
	void GetCurrentRes();
	void SetFilter();
	void GetFilter();
	void SetVsync();
	void GetVSync();
	void TestGamma(int TestGammaValue);
	void SetGamma();
	void GetCurrentGamma();
	void InitVideoValues();
	void ApplyAudioChanges();
	void ApplyAudioSettings();
	void ApplySubtitleState();
	void InitSubtitleState();
	void SetAutoSave(bool bOn);
	void SetCaptionToggle(bool bOn);
	void SetAudioVolVoice(int Value);
	void SetAudioVolFX(int Value);
	void SetAudioVolMusic(int Value);
	void PlaySampleSound(class UAudioComponent* Comp, float Volume);
	void InitAudioValues();
	void DetectEAXSupport();
	void GetHardwareSoundOn();
	class UAudioComponent* LoadSound(const struct FString& Section, class USoundCue* Cue);
	void SetBindingFor(int ActionIndex, int ColIndex);
	void GetBindingHelpText(int Index);
	void ResetBindingDefaults();
	void CheckForDupeKey(const struct FName& NewKeyName, const struct FName& OldKeyName);
	void UpdateKeyToSF(int Index);
	void CheckForNewKey();
	void UpdateTextOnButtons();
	void BuildBindingList();
	void AddClearedKey(const struct FName& KeyName);
	void ApplyKeyboardChanges();
	void InitKeyboardValues();
	void SetBindingHelpText(const struct FString& HelpText);
	void SetBindingKeyText(int Index, const struct FString& TalentText, int KeyIndex);
	void SetBindingTalentText(int Index, const struct FString& TalentText);
	void ShowBindingRow(int Index, bool bShow);
	void ApplyAutos();
	void ApplyGamePlay();
	void ResetTutorialsMSG();
	void ConfirmResetTutorials(bool bAPressed, int nContext);
	void SaveProfile();
	void InitAutos();
	void InitGamePlay();
	void ApplyInput();
	void SetMouseSense(int SliderValue);
	void SetHardwareMouseMouse(bool bOn);
	void InitInput();
	void ApplyChanges(int SubPanelIndex);
	void ExitMenu();
	void ResetAutos();
	void ResetGameplay();
	void ResetControls();
	void ResetInput();
	void ResetSound();
	void ResetGraphics();
	void ResetAllValues(int SubPanelIndex);
	void SetDefualtAutos();
	void SetDefualtGameplay();
	void SetDefualtControls();
	void SetDefualtInput();
	void SetDefualtSound();
	void SetDefualtVideo();
	void SetDefaults(int SubPanelIndex);
	void setDropdownByID(int Id, int Index);
	void SetIndexedSliderByIndex(int Index, int Value, bool bSetLastMarker);
	void SetSliderByIndex(int Index, float Value, bool bSetLastMarker);
	void SetCheckBoxByIndex(int Index, bool bOn);
	void WarnUnsaved();
	void ClosePanelWithOutSavingConfirm(bool bConfimNoSave);
	void ClosePanelWithOutSaving();
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void Init();
	void Update(float fDeltaT);
	void ScrollKeyPressed(const struct FName& Key);
	void ResetDefaultsMSG(int nContext);
	void SavingMSG();
	void ConfirmResetToDefaults(bool bAPressed, int nContext);
	void OptionsConfirmCommit(bool bAPressed, int nContext);
};


// Class BIOC_Base.BioSFHandler_ReplayCharacterSelect
// 0x0018 (0x0074 - 0x005C)
class UBioSFHandler_ReplayCharacterSelect : public UBioSFHandler
{
public:
	TArray<struct FSaveGameRecord>                     lstRecords;                                               // 0x005C(0x000C) (NeedCtorLink)
	struct FString                                     m_ActiveCharId;                                           // 0x0068(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_ReplayCharacterSelect");
		return ptr;
	}

};


// Class BIOC_Base.BioSFHandler_Reticule
// 0x0081 (0x00DD - 0x005C)
class UBioSFHandler_Reticule : public UBioSFHandler
{
public:
	struct FReticuleInfo                               m_Reticule;                                               // 0x005C(0x002C) (Transient)
	struct FSelectionIndicatorInfo                     m_SelectionIndicator;                                     // 0x0088(0x0024) (Transient)
	TArray<struct FLOSIndicatorInfo>                   m_aLOSIndicators;                                         // 0x00AC(0x000C) (Transient, NeedCtorLink)
	class ABioCameraManager*                           m_oCameraManager;                                         // 0x00B8(0x0004) (Transient)
	class ABioPlayerController*                        m_oPlayerController;                                      // 0x00BC(0x0004) (Transient)
	class UBioPlayerInput*                             m_oPlayerInput;                                           // 0x00C0(0x0004) (Transient)
	class UBioEpicPawnBehavior*                        m_oPlayerBehavior;                                        // 0x00C4(0x0004) (Transient)
	class UBioPawnBehavior*                            m_oPlayerPawnBehavior;                                    // 0x00C8(0x0004) (Transient)
	class ABioPlayerSquad*                             m_oPlayerSquad;                                           // 0x00CC(0x0004) (Transient)
	float                                              m_fTimeSinceLastUpdate;                                   // 0x00D0(0x0004) (Transient)
	float                                              m_fMinScalingRange;                                       // 0x00D4(0x0004) (Transient, Config)
	float                                              m_fMinScalingValue;                                       // 0x00D8(0x0004) (Transient, Config)
	TEnumAsByte<EReticuleMode>                         m_eLastReticuleMode;                                      // 0x00DC(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Reticule");
		return ptr;
	}


	void Reset();
	void OnPanelAdded();
};


// Class BIOC_Base.BioSFHandler_SharedIGG
// 0x0004 (0x0060 - 0x005C)
class UBioSFHandler_SharedIGG : public UBioSFHandler
{
public:
	unsigned long                                      bOpenedFromMainMenu : 1;                                  // 0x005C(0x0004)
	unsigned long                                      bOpenedFromPauseMenu : 1;                                 // 0x005C(0x0004)
	unsigned long                                      bJournalOpenedFromMap : 1;                                // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_SharedIGG");
		return ptr;
	}


	void BackToMainMenu();
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
};


// Class BIOC_Base.BioSFHandler_Shop
// 0x0098 (0x00F4 - 0x005C)
class UBioSFHandler_Shop : public UBioSFHandler
{
public:
	float                                              DEFAULT_SELL_PRICE_FACTOR;                                // 0x005C(0x0004) (Const, Config)
	float                                              MINIMUM_SELL_PRICE_FACTOR;                                // 0x0060(0x0004) (Const, Config)
	float                                              MAXIMUM_SELL_PRICE_FACTOR;                                // 0x0064(0x0004) (Const, Config)
	float                                              DEFAULT_BUY_PRICE_FACTOR;                                 // 0x0068(0x0004) (Const, Config)
	float                                              MINIMUM_BUY_PRICE_FACTOR;                                 // 0x006C(0x0004) (Const, Config)
	float                                              MAXIMUM_BUY_PRICE_FACTOR;                                 // 0x0070(0x0004) (Const, Config)
	int                                                NUMBER_OF_VISIBLE_AND_SCROLLABLE_ITEMS;                   // 0x0074(0x0004) (Const, Config)
	TArray<TEnumAsByte<EGuiEquipSlots>>                shopSlotOrderForShopInventory;                            // 0x0078(0x000C) (Config, NeedCtorLink)
	TArray<TEnumAsByte<EGuiEquipSlots>>                shopSlotOrderForPlayerInventory;                          // 0x0084(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0090(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Shop.srXModUninstallMsg
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Shop.srXModUninstallConfirm
	unsigned char                                      UnknownData02[0x4];                                       // 0x0098(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Shop.srSellXModItemMsg
	unsigned char                                      UnknownData03[0x4];                                       // 0x009C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Shop.srSellXModItemConfirm
	unsigned char                                      UnknownData04[0x4];                                       // 0x00A0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Shop.srSellXModItemCancel
	unsigned char                                      UnknownData05[0x4];                                       // 0x00A4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Shop.srInventoryFullMessage
	unsigned char                                      UnknownData06[0x4];                                       // 0x00A8(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Shop.srInventoryFullConfirmation
	struct FName                                       m_nmImageResource;                                        // 0x00AC(0x0008)
	class UBio2DA*                                     m_pShopImages2DA;                                         // 0x00B4(0x0004)
	class ABioShop*                                    m_shop;                                                   // 0x00B8(0x0004)
	class ABioWorldInfo*                               m_WorldInfo;                                              // 0x00BC(0x0004)
	unsigned long                                      m_preInitializationSucceeded : 1;                         // 0x00C0(0x0004)
	unsigned long                                      m_isPlayerBuying : 1;                                     // 0x00C0(0x0004)
	TEnumAsByte<EGuiEquipSlots>                        m_currentSlot;                                            // 0x00C4(0x0001)
	TEnumAsByte<EGuiEquipSlots>                        m_currentSlotTypeAtIndex;                                 // 0x00C5(0x0001)
	unsigned char                                      UnknownData07[0x2];                                       // 0x00C6(0x0002) MISSED OFFSET
	int                                                m_currentGUIIndex;                                        // 0x00C8(0x0004)
	int                                                m_currentMasterIndex;                                     // 0x00CC(0x0004)
	int                                                m_currentPlotItemIndex;                                   // 0x00D0(0x0004)
	int                                                m_plotItemIndexOffset;                                    // 0x00D4(0x0004)
	class ABioPlayerSquad*                             m_playerSquad;                                            // 0x00D8(0x0004)
	float                                              m_scrollValue;                                            // 0x00DC(0x0004)
	class UBioInventory*                               m_combinedShopInventory;                                  // 0x00E0(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioInventoryGuiInterface*                   m_inventoryInterface;                                     // 0x00E4(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class UBioItem*                                    m_oItemBeingSold;                                         // 0x00E8(0x0004) (Transient)
	unsigned long                                      m_bDisplayingPurchaseError : 1;                           // 0x00EC(0x0004) (Transient)
	float                                              m_fRemainingDisplayErrorTime;                             // 0x00F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Shop");
		return ptr;
	}


	void UpdatePurchaseErrorMsg(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox);
	void DisplayPurchaseErrorMsg();
	void OnPanelAdded();
	bool ReclaimOrCheckItemXMods(bool bCheckOnly, class UBioItem* oItem);
	bool GetCurrentItemCategory(int* intIsXMod, int* intIsWeapon, int* intIsPlotItem, TEnumAsByte<EBioEquipmentSlot>* equipmentSlot, TEnumAsByte<EBioItemWeaponRangedType>* weaponType);
	int CalculatePurchasePriceFromBasePrice(float basePrice);
	int CalculateSellPriceFromBasePrice(float basePrice);
	void UpdateCompareItemAtIndex(int Index, const struct FString& squadMemberName, class UBioItem* Item, int nIsXMod);
	void UpdateCompareItems();
	void UpdatePlotItem(int plotItemIndex, int indexToSendToGUI);
	void UpdateListItem(int ListIndex, int indexToSendToGUI);
	void UpdateEntireShopList();
	void UpdateCurrentIndex(int nRequestedGUIIndex);
	void UpdateShopList(int nRequestedGUIIndex);
	void UpdatePartyCash();
	int BuyCurrentItem();
	void SellItemDelegate(bool bConfirmedSell, int nContext);
	void SellCurrentItem();
	void RebuildAndUpdateShopInventory(int nSetGUIIndex);
	void SetSlotState(TEnumAsByte<EGuiEquipSlots> newSlot);
	void SetTradeState(bool isPlayerBuying);
	void ShutDown();
	void Initialize();
	void Update(float Unused);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters);
	bool PreInitialization(class ABioShop* Shop, class ABioWorldInfo* WorldInfo);
	struct FString GetInventoryFullMessage(int i_nOverItems, int i_nMaxItems);
};


// Class BIOC_Base.BioSFHandler_Tutorial
// 0x0010 (0x006C - 0x005C)
class UBioSFHandler_Tutorial : public UBioSFHandler
{
public:
	unsigned long                                      m_bGameWasPaused : 1;                                     // 0x005C(0x0004) (Transient)
	unsigned long                                      m_bInputModeCached : 1;                                   // 0x005C(0x0004) (Transient)
	struct FScriptDelegate                             __CompletionCallback__Delegate;                           // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Tutorial");
		return ptr;
	}


	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void CompletionCallback();
};


// Class BIOC_Base.BioSFHandler_XBoxMessageBox
// 0x0008 (0x0064 - 0x005C)
class UBioSFHandler_XBoxMessageBox : public UBioSFHandler
{
public:
	int                                                nSelectedButton;                                          // 0x005C(0x0004)
	unsigned long                                      bMessageBoxVisible : 1;                                   // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_XBoxMessageBox");
		return ptr;
	}


	void DisplayMessageBox(TEnumAsByte<EMessageBoxIcon> nIcon, int nDefaultButton);
};


// Class BIOC_Base.BioSkillGame_Handler
// 0x0070 (0x00CC - 0x005C)
class UBioSkillGame_Handler : public UBioSFHandler
{
public:
	unsigned char                                      m_nSkillGameType;                                         // 0x005C(0x0001)
	unsigned char                                      m_GameDifficulty;                                         // 0x005D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005E(0x0002) MISSED OFFSET
	int                                                m_nButtonInSequence;                                      // 0x0060(0x0004)
	int                                                m_nDisplayedButton;                                       // 0x0064(0x0004)
	int                                                m_nButtonsSuccessfullyPressed;                            // 0x0068(0x0004)
	int                                                m_nTotalButtonsToDisplay;                                 // 0x006C(0x0004)
	int                                                m_nDiscountSalvagePerPress;                               // 0x0070(0x0004)
	int                                                m_nMaxSalvage;                                            // 0x0074(0x0004)
	int                                                m_nButtonTimoutSequence;                                  // 0x0078(0x0004)
	float                                              m_fButtonTimeout;                                         // 0x007C(0x0004)
	float                                              m_fButtonDelayTime;                                       // 0x0080(0x0004)
	class UObject*                                     m_oDependent;                                             // 0x0084(0x0004)
	class ABioPawn*                                    m_oUsingPawn;                                             // 0x0088(0x0004)
	unsigned long                                      m_bButtonIconVisible : 1;                                 // 0x008C(0x0004)
	unsigned long                                      m_bSuccessfulEndGame : 1;                                 // 0x008C(0x0004)
	unsigned long                                      m_bDoNotUseSalvage : 1;                                   // 0x008C(0x0004)
	unsigned long                                      m_bSkillGameFailed : 1;                                   // 0x008C(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0090(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame_Handler.m_GameMessageSuccess
	unsigned char                                      UnknownData02[0x4];                                       // 0x0094(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame_Handler.m_GameMessageFailure
	unsigned char                                      UnknownData03[0x4];                                       // 0x0098(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame_Handler.m_GameMessageDuringGame
	unsigned char                                      UnknownData04[0x4];                                       // 0x009C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame_Handler.m_preGameButtonAText
	unsigned char                                      UnknownData05[0x4];                                       // 0x00A0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame_Handler.m_preGameButtonBText
	unsigned char                                      UnknownData06[0x4];                                       // 0x00A4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame_Handler.m_preGameButtonXText
	struct FScriptDelegate                             __OnSuccessCallback__Delegate;                            // 0x00A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFailureCallback__Delegate;                            // 0x00B4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCancelCallback__Delegate;                             // 0x00C0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkillGame_Handler");
		return ptr;
	}


	void OnPanelAdded();
	void SetupGame(int i_initialSalvage);
	void UpdateSalvage(int i_salvage);
	void SetButtonVisible(int i_ButtonType);
	void ClearAllButtons();
	void HandleSkillGameDisplayButton(class UObject* Params);
	void SkillGameTriggerNextButton(float fButtonDelayTime);
	void HandleSkillGameButtonTimeout(class UObject* Params);
	void HandleSkillGameButtonPress(int nButtonPressed);
	void EndSkillGame(bool bCompleted, bool bNoSalvage, bool bGameCanceled);
	void EndSkillGameEx(bool bCompleted);
	void StartSkillGameEx(class ABioPawn* oUsingPawn, class UObject* oPlaceable, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty);
	void InitializeStringReferences();
	void InitializeSkillGameData(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty);
	void OnCancelCallback(int n_SalvageUsed);
	void OnFailureCallback(int n_SalvageUsed);
	void OnSuccessCallback(int n_SalvageUsed);
};


// Class BIOC_Base.BioSkillGame_PCHandler
// 0x0004 (0x00D0 - 0x00CC)
class UBioSkillGame_PCHandler : public UBioSkillGame_Handler
{
public:
	unsigned long                                      m_bGameActive : 1;                                        // 0x00CC(0x0004)
	unsigned long                                      m_bUpdateGameClock : 1;                                   // 0x00CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkillGame_PCHandler");
		return ptr;
	}


	void HandleClockUpdate(class UObject* Params);
	void StartTimer();
	void InitializeSkillGameData(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty);
	void ResetMousePos();
	void Update(float fDeltaT);
};


// Class BIOC_Base.MassEffectGuiManager
// 0x0084 (0x0160 - 0x00DC)
class UMassEffectGuiManager : public UBioSFManager
{
public:
	class UBioSFHandler_HUD*                           m_oSFHudHandler;                                          // 0x00DC(0x0004)
	class UBioSFHandler_Reticule*                      m_oSFReticuleHandler;                                     // 0x00E0(0x0004)
	class UBioSFHandler_PCDesignerUI*                  m_oDUIHandler;                                            // 0x00E4(0x0004)
	class UBioSFHandler_BrowserWheel*                  m_oBWHandler;                                             // 0x00E8(0x0004)
	class UBioSFHandler_BrowserWheel*                  m_oPauseMenuHandler;                                      // 0x00EC(0x0004)
	class UBioSFHandler_PCCharacterRecord*             m_oCharacterRecordHandler;                                // 0x00F0(0x0004)
	class UBioSFHandler_SharedIGG*                     m_oSharedHandler;                                         // 0x00F4(0x0004)
	class UBioSFHandler_AreaMap*                       m_oAreaMapHandler;                                        // 0x00F8(0x0004)
	unsigned long                                      m_bSFHudCached : 1;                                       // 0x00FC(0x0004)
	unsigned long                                      m_bSFHudDisplayed : 1;                                    // 0x00FC(0x0004)
	unsigned long                                      m_bGameWasPaused : 1;                                     // 0x00FC(0x0004)
	TEnumAsByte<EInputModes>                           m_nInputModeUnderneathBrowserWheel;                       // 0x0100(0x0001)
	TEnumAsByte<EInputModes>                           m_PrevInputModeBeforePause;                               // 0x0101(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0102(0x0002) MISSED OFFSET
	TArray<TEnumAsByte<EGuiEquipSlots>>                lstEquipSlotOrderXMods;                                   // 0x0104(0x000C) (Config, NeedCtorLink)
	TArray<TEnumAsByte<EGuiEquipSlots>>                lstEquipSlotOrderInventory;                               // 0x0110(0x000C) (Config, NeedCtorLink)
	TArray<TEnumAsByte<EGuiEquipSlots>>                lstEquipSlotOrderLoot;                                    // 0x011C(0x000C) (Config, NeedCtorLink)
	class ABioWorldInfo*                               oBioWorldInfo;                                            // 0x0128(0x0004)
	class UBioSFPanel*                                 m_oConversationPanel;                                     // 0x012C(0x0004)
	class UBioSFPanel*                                 m_oTutorialPanel;                                         // 0x0130(0x0004)
	struct FName                                       m_nmCurrentTutorial;                                      // 0x0134(0x0008)
	class UBioSFHandler_Loot*                          oLootHandler;                                             // 0x013C(0x0004)
	class UBioSFHandler_Shop*                          oShopHandler;                                             // 0x0140(0x0004)
	class UBioSFHandler_Specialization*                oSpecializationHandler;                                   // 0x0144(0x0004)
	class UBioSFHandler_PCSettings*                    m_oPCSettingsHandler;                                     // 0x0148(0x0004)
	class UBioSFHandler_BlackScreen*                   m_oBlackScreenHandler;                                    // 0x014C(0x0004)
	class UBioSFHandler_PCXMods*                       oXModsHandler;                                            // 0x0150(0x0004)
	TArray<struct FBioMessageBoxData>                  m_aMessageBoxQueue;                                       // 0x0154(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.MassEffectGuiManager");
		return ptr;
	}


	void HideSubMenuCharacterRecord();
	void ShowSubMenuCharacterRecord();
	void ShowSubMenuInventory(class ABioPawn* oChar);
	class UBioSFPanel* ShowSubMenuGui(const struct FName& GuiName);
	void HidePCOptions(bool bReturnToMainMenu, unsigned char ReturnMode);
	void GotoMainMenu();
	class UBioSFPanel* ShowPCOptions(bool bReturnToMainMenu);
	void GameSessionEnded();
	class UBioSFHandler_MessageBox* CreateMessageBox();
	void CancelTutorial(bool bFadeOut, const struct FName& nmTutorial);
	bool ShowTutorial(struct FBioTutorialParams* stParams);
	void GetPauseMenuHandlerEx(int* nRet);
	class UBioSFHandler_BrowserWheel* GetPauseMenuHandler();
	void InitPauseMenuDefaultHandler(int nRet);
	class UBioSFHandler_BrowserWheel* GetBrowserHandler();
	class UBioSFHandler_PCDesignerUI* GetDUIHandler();
	void SetWheelState(TEnumAsByte<EMEBrowserWheelSubPages> nPage, TEnumAsByte<EBioBrowserStates> nState);
	void RemoveBlackScreen();
	void OnPlayerDeath();
	void HideDeviceSelection();
	class UBioSFHandler_DeviceSelection* ShowDeviceSelection(const struct FName& i_nmCompletionDelegateFunction, const struct FName& i_nmCancelDelegateFunction, int i_nSize, class UObject* i_Target);
	void HideSkillGame();
	class UBioSkillGame_Handler* ShowSkillGame();
	bool BlackScreenFadeFinished();
	void HideBlackScreen(bool bWithFade);
	void ShowBlackScreen(bool bWithFade);
	void HideGameOverGui();
	void ShowGameOverGui();
	void HidePartySelect();
	void PlayCredits();
	void ShowPartySelect(const struct FName& nmForcedHenchman);
	bool NestedCategory(TEnumAsByte<EGuiEquipSlots> eLeftCat, TEnumAsByte<EGuiEquipSlots> eRightCat);
	int FindCompatibleCategory(TArray<TEnumAsByte<EGuiEquipSlots>> lstSlotsOrdered, TEnumAsByte<EGuiEquipSlots> eCategory);
	bool SetSlotOrder(TEnumAsByte<EGuiHandlers> eHandlerID, class UBioInventoryGuiInterface* oInvLayer, TEnumAsByte<EGuiEquipSlots> ePreferredDefault);
	void HideSpecializationGui();
	void ShowSpecializationGui();
	void HideShopGui();
	bool ShowShopGui(class ABioShop* Shop);
	void HideLootGui();
	void HideGuiByTag(const struct FName& sTag);
	void ShowLootGui(class UBioInventory* oLootInv);
	void HideAchievementGui();
	void ShowAchievementGui();
	void HideXModsGui(class ABioPlayerController* Controller);
	void ShowXModsGui(class ABioPlayerController* oController);
	void HideBrowserWheel(class UBioSFPanel* oCurrentPanel);
	void ReturnToBrowserWheel(class UBioSFPanel* oCurrentPanel);
	void ShowBrowserWheel();
	void CancelLeaderActive();
	void RedisplayHudElements();
	void HidePauseMenu(class UBioSFPanel* oCurrentPanel);
	void ReturnToPauseMenu(class UBioSFPanel* oCurrentPanel);
	void ShowPauseMenu();
	void SetPauseGame(bool bPause);
	void HideHUD();
	void ShowHUD();
	void ReleaseHudCache();
	void RecreateHudPanel();
	bool IsInConversation();
	void HideConversationGui();
	void ShowConversationGui(bool IsAmbient);
	class UBioSFHandler_MainMenu* ShowMainMenu();
	void SetupBackground();
	void Update(float fDeltaT);
};


// Class BIOC_Base.BioStickyGrenadeInterface
// 0x0000 (0x003C - 0x003C)
class UBioStickyGrenadeInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioStickyGrenadeInterface");
		return ptr;
	}


	bool STATIC_TracePrecise(class AActor* pOwner, class AProjectile* Projectile, struct FVector* HitLocation, struct FVector* HitNormal);
	struct FVector ComputePosition(class ABioGrenadeProjectileFrisbee* Projectile);
	void STATIC_StaticDetach(class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile);
	void Detach(class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile);
	bool STATIC_StaticAttach(class AActor* pOwner, class ABioGrenadeProjectileFrisbee* Projectile, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool Attach(class ABioGrenadeProjectileFrisbee* Projectile, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void STATIC_SetRotationByUpVector(class AActor* pActor, struct FVector* vUp);
};


// Class BIOC_Base.BioDeathVFXCore
// 0x0000 (0x003C - 0x003C)
class UBioDeathVFXCore : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDeathVFXCore");
		return ptr;
	}


	bool IsValidVFXSpec(const struct FBioDeathVFXSpec& deathVFXSpec);
};


// Class BIOC_Base.BioDeathVFX
// 0x0034 (0x0070 - 0x003C)
class UBioDeathVFX : public UBioDeathVFXCore
{
public:
	struct FBioDeathVFXSpec                            m_VFX;                                                    // 0x003C(0x0028) (Edit, Const)
	TArray<struct FBioDeathVFXSpec>                    m_aConditionalVFX;                                        // 0x0064(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDeathVFX");
		return ptr;
	}

};


// Class BIOC_Base.BioDeathVFXControl
// 0x0000 (0x003C - 0x003C)
class UBioDeathVFXControl : public UBioDeathVFXCore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDeathVFXControl");
		return ptr;
	}


	bool AppendConditionalVFX(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState, const struct FName& nmConditionalVFX);
	bool AppendDamageVFX(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState);
	bool AppendAppearanceVFX(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState);
	bool IsValidDamageVFX(class UBioDeathVFXGameState* pGameState);
	bool IsValidAppearanceVFX(class UBioDeathVFXGameState* pGameState);
	void Evaluate(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState);
};


// Class BIOC_Base.BioDeathVFXGameState
// 0x0038 (0x0074 - 0x003C)
class UBioDeathVFXGameState : public UBioDeathVFXCore
{
public:
	TEnumAsByte<EBioDeathVFXGameStateEvent>            m_eEvent;                                                 // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	unsigned long                                      m_bIsDeathAnimationPlaying : 1;                           // 0x0040(0x0004)
	class AController*                                 m_pInstigatorController;                                  // 0x0044(0x0004)
	class AActor*                                      m_pActor;                                                 // 0x0048(0x0004)
	class UBioBaseAppearance*                          m_pAppearance;                                            // 0x004C(0x0004)
	float                                              m_fDamage;                                                // 0x0050(0x0004)
	float                                              m_fDeathDamage;                                           // 0x0054(0x0004)
	class UBioDamageType*                              m_pDamage;                                                // 0x0058(0x0004)
	struct FVector                                     m_vHitLocation;                                           // 0x005C(0x000C)
	struct FVector                                     m_vMomentum;                                              // 0x0068(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDeathVFXGameState");
		return ptr;
	}

};


// Class BIOC_Base.BioDeathVFXSpecArrayWrapper
// 0x000C (0x0048 - 0x003C)
class UBioDeathVFXSpecArrayWrapper : public UBioDeathVFXCore
{
public:
	TArray<struct FBioDeathVFXSpec>                    m_a;                                                      // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDeathVFXSpecArrayWrapper");
		return ptr;
	}

};


// Class BIOC_Base.BioLevelUpSystem
// 0x005C (0x00A0 - 0x0044)
class UBioLevelUpSystem : public UBioBaseComponent
{
public:
	struct FName                                       m_nmLevelUpPackageName;                                   // 0x0044(0x0008)
	struct FName                                       m_nmAutoLevelUpTemplatePrefix;                            // 0x004C(0x0008)
	struct FName                                       m_aLevelUp2DANames[0x5];                                  // 0x0054(0x0008)
	class UBio2DA*                                     m_aLevelUp2DA[0x5];                                       // 0x007C(0x0004)
	TArray<class UBio2DA*>                             m_aAutoLevelUpTemplate2DA;                                // 0x0090(0x000C) (NeedCtorLink)
	unsigned long                                      m_bDefault2DAsLoaded : 1;                                 // 0x009C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLevelUpSystem");
		return ptr;
	}


	bool STATIC_AutoLevelUp(class UBioTalentContainer* talents, int templateID);
	bool STATIC_ImmediateAutoLevelUp(class UBioPawnBehavior* Target);
	bool STATIC_LoadAutoLevelUpInformation(int templateID, int* classID);
	bool STATIC_ExperienceNeededForLevel(int Level, int* experience);
	bool STATIC_LevelUpPawn(class ABioPawn* Pawn, int newLevel);
	bool STATIC_AttemptLevelUp(class ABioPlayerSquad* playerSquad);
};


// Class BIOC_Base.BioShop
// 0x00F4 (0x02E4 - 0x01F0)
class ABioShop : public AActor
{
public:
	int                                                m_permanentTreasureID;                                    // 0x01F0(0x0004) (Edit, Deprecated)
	int                                                m_premiumTreasureID;                                      // 0x01F4(0x0004) (Edit, Deprecated)
	int                                                m_nGenerateOnceTreasureID;                                // 0x01F8(0x0004) (Edit)
	int                                                m_nGenerateAfterLevellingTreasureID;                      // 0x01FC(0x0004) (Edit)
	int                                                m_lastPlayerLevel;                                        // 0x0200(0x0004)
	float                                              m_priceAdjustmentFactor;                                  // 0x0204(0x0004)
	unsigned long                                      m_isInitialized : 1;                                      // 0x0208(0x0004)
	TEnumAsByte<EGuiEquipSlots>                        m_currentFilter;                                          // 0x020C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x020D(0x0003) MISSED OFFSET
	TArray<class UBioInventory*>                       m_inventories;                                            // 0x0210(0x000C) (Transient, NeedCtorLink)
	class UBioInventory*                               m_inventoryPermanent;                                     // 0x021C(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	class UBioInventory*                               m_inventoryPremium;                                       // 0x0220(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	class UBioInventory*                               m_inventoryLimited;                                       // 0x0224(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	struct FResourceShopInfo                           m_resourceInfoArray[0x9];                                 // 0x0228(0x0014) (Const, Config)
	float                                              BIOSHOP_MINIMUM_PRICE_ADJUSTMENT;                         // 0x02DC(0x0004) (Const, Config)
	float                                              BIOSHOP_MAXIMUM_PRICE_ADJUSTMENT;                         // 0x02E0(0x0004) (Const, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioShop");
		return ptr;
	}


	class UClass* STATIC_GetSaveObjectClass();
	int ComputeSupplyOfResource(TEnumAsByte<EInventoryResourceTypes> resourceType, TEnumAsByte<EGuiEquipSlots> slotType);
	void RemoveResource(TEnumAsByte<EInventoryResourceTypes> Type, int positiveAmount);
	void AddResource(TEnumAsByte<EInventoryResourceTypes> Type, int positiveAmount);
	void AddBuybackItem(class UBioItem* Item);
	bool ConvertMasterIndexToDoubleIndex(int masterIndex, TEnumAsByte<EBioShopInventory>* inventoryIndex, int* ElementIndex);
	bool RemovePlotItemAtMasterIndex(int masterPlotItemIndex);
	float GetItemPriceAtMasterIndex(int masterIndex);
	class UBioItem* RemoveAtMasterIndex(int masterIndex);
	void BuildFilteredInventory(TEnumAsByte<EGuiEquipSlots> Filter, class UBioInventory** filteredInventory);
	bool ReadyShopForOpening(int playerLevel, float priceAdjustment);
	float GetPriceAdjustmentFactor();
};


// Class BIOC_Base.BioProbeCombat
// 0x002C (0x0068 - 0x003C)
class UBioProbeCombat : public UObject
{
public:
	struct FString                                     m_nAreaName;                                              // 0x003C(0x000C) (Native)
	struct FString                                     m_nChunkName;                                             // 0x0048(0x000C) (Native)
	struct FName                                       m_nSquadName;                                             // 0x0054(0x0008) (Native)
	struct FName                                       m_nSquadTag;                                              // 0x005C(0x0008) (Native)
	float                                              m_fStartTime;                                             // 0x0064(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioProbeCombat");
		return ptr;
	}


	void Reset();
	void Stop(TEnumAsByte<EBioProbeCombatResult> CombatResult);
	void Start();
	bool IsRecording();
	void Initialize(const struct FName& SquadName, const struct FName& SquadTag);
};


// Class BIOC_Base.BioArtPlaceableSaveObject
// 0x0000 (0x0080 - 0x0080)
class UBioArtPlaceableSaveObject : public UBioActorSaveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableSaveObject");
		return ptr;
	}


	bool LoadPositionAndOrientation(class AActor* O);
	bool SavePositionAndOrientation(class AActor* O);
};


// Class BIOC_Base.BioLevelSaveObject
// 0x0024 (0x0070 - 0x004C)
class UBioLevelSaveObject : public UBioBaseSaveObject
{
public:
	TArray<class UBioBaseSaveObject*>                  m_LevelObjects;                                           // 0x004C(0x000C) (NeedCtorLink)
	TArray<struct FSavedLootBag>                       m_LootBags;                                               // 0x0058(0x000C) (NeedCtorLink)
	TArray<struct FString>                             m_lstDestroyedObjects;                                    // 0x0064(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioLevelSaveObject");
		return ptr;
	}


	void SaveDestroyedObjects(class UObject* O);
	void LoadLootBagArray(class UObject* O);
	void SaveLootBagArray(class UObject* O);
	void DestroyObject(class UObject* O);
	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioSaveGame
// 0x0198 (0x01D4 - 0x003C)
class UBioSaveGame : public UObject
{
public:
	struct FString                                     m_sMapName;                                               // 0x003C(0x000C) (NeedCtorLink)
	class UBioBaseSaveObject*                          m_Player;                                                 // 0x0048(0x0004)
	class UBioBaseSaveObject*                          m_PlayerController;                                       // 0x004C(0x0004)
	TArray<struct FHenchmanLookup>                     m_Henchmen;                                               // 0x0050(0x000C) (NeedCtorLink)
	class UBioBaseSaveObject*                          m_Vehicle;                                                // 0x005C(0x0004)
	unsigned long                                      m_IsDriving : 1;                                          // 0x0060(0x0004)
	unsigned long                                      m_bInvalidSaveFileCreator : 1;                            // 0x0060(0x0004)
	unsigned long                                      m_bSecondPlaythrough : 1;                                 // 0x0060(0x0004)
	class UBioBaseSaveObject*                          m_PlayerVehicle;                                          // 0x0064(0x0004)
	struct FString                                     m_sDrivenVehicle;                                         // 0x0068(0x000C) (NeedCtorLink)
	class UBioBaseSaveObject*                          m_PlayerAppearance;                                       // 0x0074(0x0004)
	TArray<TEnumAsByte<EOption>>                       m_GameSpecificOptions;                                    // 0x0078(0x000C) (Transient, Config, NeedCtorLink)
	class UPackage*                                    m_PlayerPackage;                                          // 0x0084(0x0004) (Transient)
	unsigned long                                      m_UseDesiredStartPoint : 1;                               // 0x0088(0x0004) (Transient)
	unsigned long                                      m_bUseNewSaveSystem : 1;                                  // 0x0088(0x0004) (Transient, Config)
	unsigned long                                      m_bIgnoreDLCRequirements : 1;                             // 0x0088(0x0004) (Transient, Config)
	unsigned long                                      m_bFilterCharacterSaves : 1;                              // 0x0088(0x0004) (Transient, Config)
	unsigned long                                      m_bDissableAutoSave : 1;                                  // 0x0088(0x0004) (Transient, Config)
	unsigned long                                      m_bEnableLimitedSaves : 1;                                // 0x0088(0x0004) (Transient, Config)
	unsigned long                                      m_bSavingGame : 1;                                        // 0x0088(0x0004) (Transient)
	unsigned long                                      m_bLastSaveSuccess : 1;                                   // 0x0088(0x0004) (Transient)
	unsigned long                                      m_bAutoSaveFailOnError : 1;                               // 0x0088(0x0004) (Transient)
	unsigned long                                      m_SGC_bForceSave : 1;                                     // 0x0088(0x0004) (Transient)
	unsigned long                                      m_SGC_bCharacterOnly : 1;                                 // 0x0088(0x0004) (Transient)
	unsigned long                                      m_SGC_bDeviceSelectionCanceled : 1;                       // 0x0088(0x0004) (Transient)
	unsigned long                                      m_bWasExternalUIActivePriorToTransition : 1;              // 0x0088(0x0004) (Transient)
	struct FName                                       m_DesiredStartPoint;                                      // 0x008C(0x0008) (Transient)
	struct FVector                                     m_DesiredPosition;                                        // 0x0094(0x000C) (Transient)
	class UBioWorldSaveObject*                         m_WorldSave;                                              // 0x00A0(0x0004) (Transient)
	struct FMap_Mirror                                 m_SavedMaps;                                              // 0x00A4(0x0014) (Native)
	float                                              m_fAutoSaveTime;                                          // 0x00B8(0x0004) (Transient, Config)
	float                                              m_fAutoSaveAttemptDelay;                                  // 0x00BC(0x0004) (Transient, Config)
	int                                                m_nNumSaveSlots;                                          // 0x00C0(0x0004) (Transient, Config)
	int                                                m_nSaveGameSize;                                          // 0x00C4(0x0004) (Transient, Config)
	int                                                m_nMaxSaveGames;                                          // 0x00C8(0x0004) (Transient, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSaveGame.m_srQuickSaveComplete
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSaveGame.m_srQuickSaveFail
	int                                                m_nPlaythroughID;                                         // 0x00D4(0x0004)
	int                                                m_nPlayerKills;                                           // 0x00D8(0x0004)
	int                                                m_nPlayerDeaths;                                          // 0x00DC(0x0004)
	float                                              m_fDamageTaken;                                           // 0x00E0(0x0004)
	float                                              m_fUpdateStartTime;                                       // 0x00E4(0x0004)
	float                                              m_fPlaythroughTime;                                       // 0x00E8(0x0004)
	float                                              m_fShieldDamageTaken;                                     // 0x00EC(0x0004)
	struct FString                                     m_sCharacterID;                                           // 0x00F0(0x000C) (NeedCtorLink)
	TArray<struct FString>                             m_DependentPackages;                                      // 0x00FC(0x000C) (NeedCtorLink)
	TArray<class UBioItemSaveObject*>                  m_savedBuybackItems;                                      // 0x0108(0x000C) (NeedCtorLink)
	float                                              m_fLastSaveTime;                                          // 0x0114(0x0004) (Transient)
	float                                              m_fAutoSaveCooldownTime;                                  // 0x0118(0x0004) (Transient)
	float                                              m_fAutoSaveGUITimer;                                      // 0x011C(0x0004) (Transient)
	class UBio2DA*                                     m_pSaveGameAreaInfo;                                      // 0x0120(0x0004) (Transient)
	struct FGameOptions                                m_GameOptions;                                            // 0x0124(0x0090)
	int                                                m_nLowestCombatDifficultyUsed;                            // 0x01B4(0x0004)
	struct FString                                     m_SGC_Filename;                                           // 0x01B8(0x000C) (Transient, NeedCtorLink)
	struct FName                                       m_SGC_sCallbackFunction;                                  // 0x01C4(0x0008) (Transient)
	struct FName                                       m_SGC_sCallbackFunctionCanceled;                          // 0x01CC(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSaveGame");
		return ptr;
	}


	void LoadBuybackItems(class ABioWorldInfo* WorldInfo);
	void SaveBuybackItems(class ABioWorldInfo* WorldInfo);
	bool LoadAppearance(class UBioInterface_Appearance* playerAppearance);
	void SaveAppearance(class UBioInterface_Appearance* Appearance);
	void SavePlayerParty(class ABioPlayerController* PlayerController, class UPackage* savePackage, bool bPlayerOnly);
	void SaveEquipmentIntoInventory(class UBioPawnBehaviorSaveObject* oHenchie, class UBioInventorySaveObject* oInventorySave);
	void PostLoad(class ABioPlayerController* PlayerController);
	void LoadVehicle(class ABioPlayerController* PlayerController);
	void SaveVehicle(class UBioVehicleBehaviorBase* Vehicle, bool isDriving);
	void SaveHenchman(const struct FName& pawnTag, class UBioPawnBehavior* henchBehavior, class UPackage* savePackage);
	bool LoadHenchman(const struct FName& pawnTag, class UBioPawnBehavior* henchBehavior);
	void EstablishGlobalPlotVariablesForReplayCharacter();
	bool LoadPlayer(class UBioPawnBehavior* playerBehavior);
	void GetPlayerSpawn(struct FVector* SpawnLocation, struct FRotator* SpawnRotation);
	void LoadObjectPosition(class UBioBaseSaveObject* Save, class AActor* obj);
	class UBioPawnBehaviorSaveObject* GetPlayerSaveObject();
	void SetHenchmanMappedPower(const struct FName& pawnTag, const struct FName& nmMappedPower);
	struct FName GetHenchmanMappedPower(const struct FName& pawnTag);
	void SetHenchmanSaveObject(const struct FName& pawnTag, class UBioBaseSaveObject* Save);
	class UBioBaseSaveObject* GetHenchmanSaveObject(const struct FName& pawnTag);
	void ApplyGameOptions(struct FGameOptions* io_GameOptions);
	void SetGameOptions(struct FGameOptions* i_GameOptions);
	void NativeReset();
	void ResetToDefaults();
	void GetTimePlayed(int* o_Sec, int* o_Min, int* o_Hours);
	void GetStorageDevice(bool bAPressed, int nContext);
	bool SaveCharacter(int i_nDeviceID);
	bool ClearWorldSaveObject(const struct FString& sMapName, const struct FString& sChunkName);
	void EmptySavedMaps();
	void ShowSavingMessageBox();
	bool IsAutoSaveComplete();
	void AutoSaveDelegate(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox);
	bool TryAutoSaving();
	bool AutoSave(bool bForceSave, bool bShowSavingGui);
	class UPackage* GetPlayerPackage();
	void GetCharacterInfo(TArray<struct FSaveGameRecord>* Records, int* o_ClassId, int* o_characterLevel);
	struct FString NewCharacterProfile(const struct FString& sCharacterName);
	bool LoadMostRecentSaveRecord(const struct FString& sCharacterID);
	bool GetSaveRecords(const struct FString& sCharacterID, bool i_bShowAllSaveGames, bool i_bHideAutoSave, int i_nSortById, TArray<struct FSaveGameRecord>* Records);
	void DevSelectCanceledConfirmationCallback(int i_nDeviceID);
	void LoadGameDevSelectCanceledCallback(int i_nDeviceID);
	void SaveGameDevSelectCanceledCallback(int i_nDeviceID);
	void LoadGameFromCallback(int i_nDeviceID);
	void SaveGameFromCallback(int i_nDeviceID);
};


// Class BIOC_Base.BioVehicleSaveObject
// 0x0000 (0x0080 - 0x0080)
class UBioVehicleSaveObject : public UBioActorSaveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
	bool LoadPositionAndOrientation(class AActor* O);
	bool SavePositionAndOrientation(class AActor* O);
};


// Class BIOC_Base.BioWorldInfoSaveObject
// 0x0080 (0x00CC - 0x004C)
class UBioWorldInfoSaveObject : public UBioBaseSaveObject
{
public:
	TArray<struct FWorldStreamingState>                m_WorldStreamingStates;                                   // 0x004C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             m_lstCinematicsSeen;                                      // 0x0058(0x000C) (Edit, NeedCtorLink)
	struct FString                                     m_sDestinationAreaMap;                                    // 0x0064(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     m_vDestination;                                           // 0x0070(0x000C) (Edit)
	TArray<int>                                        m_pScannedClusters;                                       // 0x007C(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        m_pScannedSystems;                                        // 0x0088(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        m_pScannedPlanets;                                        // 0x0094(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EJournalSortMethods>                   m_nJournalSortMethod;                                     // 0x00A0(0x0001) (Edit)
	unsigned char                                      m_lstBrowserAlerts[0x8];                                  // 0x00A1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	unsigned long                                      m_bJournalShowingMissions : 1;                            // 0x00AC(0x0004) (Edit)
	unsigned long                                      m_bCodexShowingPrimary : 1;                               // 0x00AC(0x0004) (Edit)
	int                                                m_nJournalLastSelectedMission;                            // 0x00B0(0x0004) (Edit)
	int                                                m_nJournalLastSelectedAssignment;                         // 0x00B4(0x0004) (Edit)
	int                                                m_nCodexLastSelectedPrimary;                              // 0x00B8(0x0004) (Edit)
	int                                                m_nCodexLastSelectedSecondary;                            // 0x00BC(0x0004) (Edit)
	int                                                m_nCurrentTipID;                                          // 0x00C0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioWorldInfoSaveObject.m_OverrideTip
	class UBioBaseSaveObject*                          m_oPendingLoot;                                           // 0x00C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWorldInfoSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioWorldSaveObject
// 0x0010 (0x005C - 0x004C)
class UBioWorldSaveObject : public UBioBaseSaveObject
{
public:
	TArray<struct FLevelLookup>                        m_Levels;                                                 // 0x004C(0x000C) (NeedCtorLink)
	class UBioBaseSaveObject*                          m_WorldInfoSave;                                          // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWorldSaveObject");
		return ptr;
	}


	class UBioLevelSaveObject* GetLevelSaveObject(bool bRemove, struct FString* LevelName);
};


// Class BIOC_Base.BioSkillGame
// 0x0050 (0x0094 - 0x0044)
class UBioSkillGame : public UBioBaseComponent
{
public:
	struct FName                                       m_nmSkillGamePackageName;                                 // 0x0044(0x0008)
	struct FName                                       m_nmSkillGame2DAName;                                     // 0x004C(0x0008)
	class UBio2DA*                                     m_SkillGame2DA;                                           // 0x0054(0x0004)
	unsigned long                                      m_bDefault2DAsLoaded : 1;                                 // 0x0058(0x0004) (Transient)
	unsigned long                                      m_bSalvageCheckParam : 1;                                 // 0x0058(0x0004) (Transient)
	class ABioPawn*                                    m_oUsingPawn;                                             // 0x005C(0x0004) (Transient)
	class UObject*                                     m_oDependent;                                             // 0x0060(0x0004) (Transient)
	TEnumAsByte<EBioSkillGame>                         m_nSkillGameType;                                         // 0x0064(0x0001) (Transient)
	unsigned char                                      m_GameDifficulty;                                         // 0x0065(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0066(0x0002) MISSED OFFSET
	int                                                m_nMinSalvage;                                            // 0x0068(0x0004) (Transient)
	int                                                m_nMaxSalvage;                                            // 0x006C(0x0004) (Transient)
	int                                                m_nTotalButtonsToDisplay;                                 // 0x0070(0x0004) (Transient)
	float                                              m_fButtonTimeout;                                         // 0x0074(0x0004) (Transient)
	float                                              m_fButtonDelayTime;                                       // 0x0078(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame.m_GameMessageSuccess
	unsigned char                                      UnknownData02[0x4];                                       // 0x0080(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame.m_GameMessageFailure
	unsigned char                                      UnknownData03[0x4];                                       // 0x0084(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame.m_GameMessageDuringGame
	unsigned char                                      UnknownData04[0x4];                                       // 0x0088(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame.m_preGameButtonAText
	unsigned char                                      UnknownData05[0x4];                                       // 0x008C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame.m_preGameButtonBText
	unsigned char                                      UnknownData06[0x4];                                       // 0x0090(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSkillGame.m_preGameButtonXText

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkillGame");
		return ptr;
	}


	void InitializeSkillGameStringReferences();
	void CallbackShowAdditonalTutorial();
	void CallbackSkillGame();
	bool InitializeSkillGameCustom(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, const struct FName& nmFunctionSuccessCallback, const struct FName& nmFunctionFailureCallback, const struct FName& nmFunctionCancelCallback, bool i_bDoNotUseSalvage, unsigned char eGameDifficulty);
	bool InitializeSkillGame(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty);
	class APawn* GetBestSkillMember(TEnumAsByte<EBioSkillGame> eSkillGameType, class ABioBaseSquad* oInputSquad, int* nBestSkillLevel);
	bool GetSalvageLimits(int nSkillRank, int eDifficulty, int* fSalvageMin, int* fSalvageMax);
};


// Class BIOC_Base.BioAudioVolume
// 0x0030 (0x025C - 0x022C)
class ABioAudioVolume : public AVolume
{
public:
	TArray<class AAmbientSound*>                       AmbientSoundArray;                                        // 0x022C(0x000C) (Edit, NeedCtorLink)
	class APawn*                                       m_oTrackPawn;                                             // 0x0238(0x0004)
	class AInfo*                                       m_oTrackTimer;                                            // 0x023C(0x0004)
	unsigned long                                      bPawnIsInsideVolume : 1;                                  // 0x0240(0x0004)
	TArray<struct FKConvexElem>                        aConvexElems;                                             // 0x0244(0x000C) (NeedCtorLink)
	TArray<struct FKBoxElem>                           aBoxElems;                                                // 0x0250(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAudioVolume");
		return ptr;
	}


	void myTimerPop();
	void TimerPop(class ABioAudioVolumeTimer* T);
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
};


// Class BIOC_Base.BioMusicVolume
// 0x0028 (0x0254 - 0x022C)
class ABioMusicVolume : public AVolume
{
public:
	struct FName                                       MusicID;                                                  // 0x022C(0x0008) (Edit)
	int                                                MusicPriority;                                            // 0x0234(0x0004) (Edit)
	unsigned long                                      InitiallyEnabled : 1;                                     // 0x0238(0x0004) (Edit)
	unsigned long                                      m_bContainsPawn : 1;                                      // 0x0238(0x0004)
	unsigned long                                      m_bMyMusicIsPlaying : 1;                                  // 0x0238(0x0004)
	unsigned long                                      m_bEnabled : 1;                                           // 0x0238(0x0004)
	class USoundCue*                                   SoundCue;                                                 // 0x023C(0x0004)
	class UAudioComponent*                             AudioComponent;                                           // 0x0240(0x0004) (ExportObject, Component, EditInline)
	class APawn*                                       m_oTrackPawn;                                             // 0x0244(0x0004)
	class AInfo*                                       m_oTrackTimer;                                            // 0x0248(0x0004)
	class UBio2DA*                                     Music2DA;                                                 // 0x024C(0x0004)
	int                                                m_nCurrentMusicState;                                     // 0x0250(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMusicVolume");
		return ptr;
	}


	void SetContainsPlayer(bool bContainsPlayer);
	bool GetIsMusicOverriddenByXBox();
	void CheckCurrentMusicState();
	void SetEnabled(bool bEnabled);
	void Initialise2DA();
	void StopMusic();
	void StartMusic();
	bool CheckPriority();
	void TimerPop(class ABioMusicVolumeTimer* T);
	void PostBeginPlay();
};


// Class BIOC_Base.BioMusicVolumeTimer
// 0x0004 (0x01F4 - 0x01F0)
class ABioMusicVolumeTimer : public AInfo
{
public:
	class ABioMusicVolume*                             m_oBioMusicVolume;                                        // 0x01F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMusicVolumeTimer");
		return ptr;
	}


	void Timer();
	void PostBeginPlay();
};


// Class BIOC_Base.BioSeqAct_ReverbPreset
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ReverbPreset : public USequenceAction
{
public:
	int                                                ReverbPresetIndex;                                        // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ReverbPreset");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ReverbVolume
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ReverbVolume : public USequenceAction
{
public:
	float                                              ReverbVolume;                                             // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ReverbVolume");
		return ptr;
	}

};


// Class BIOC_Base.BioForceFeedbackPlayer
// 0x0058 (0x0094 - 0x003C)
class UBioForceFeedbackPlayer : public UObject
{
public:
	struct FBioForceFeedbackPlayerSpec                 m_aForceFeedbackSpec[0x7];                                // 0x003C(0x0008) (Edit, Const, ExportObject, EditConst, NeedCtorLink, EditInline)
	struct FBioForceFeedbackPlayerWeaponSpec           m_aWeaponSpec[0x4];                                       // 0x0074(0x0008) (Edit, Const, ExportObject, EditConst, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioForceFeedbackPlayer");
		return ptr;
	}

};


// Class BIOC_Base.BioCoverCollisonCube
// 0x0010 (0x01C8 - 0x01B8)
class UBioCoverCollisonCube : public UPrimitiveComponent
{
public:
	struct FVector                                     m_vExtent;                                                // 0x01B8(0x000C)
	unsigned long                                      m_bEnabled : 1;                                           // 0x01C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCoverCollisonCube");
		return ptr;
	}

};


// Class BIOC_Base.BioAI_Ambient
// 0x0010 (0x0424 - 0x0414)
class ABioAI_Ambient : public ABioAiController
{
public:
	struct FVector                                     m_vRepulsor;                                              // 0x0414(0x000C)
	float                                              m_fTickTimer;                                             // 0x0420(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Ambient");
		return ptr;
	}


	void Tick(float DeltaTime);
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType);
	void Initialize();
	bool AdjustSteeringMoveSpeed(const struct FVector& vSteering);
	bool GetSteeringVector(struct FVector* vSteering);
};


// Class BIOC_Base.BioAI_Core
// 0x0024 (0x0438 - 0x0414)
class ABioAI_Core : public ABioAiController
{
public:
	float                                              m_fDelayNoAction;                                         // 0x0414(0x0004)
	float                                              m_fDelayStartAction;                                      // 0x0418(0x0004)
	unsigned long                                      m_bAllowWeaponSwitch : 1;                                 // 0x041C(0x0004)
	unsigned long                                      m_bUseCoverWithNoLOS : 1;                                 // 0x041C(0x0004) (Edit)
	unsigned long                                      m_bAlwaysReevaluateCover : 1;                             // 0x041C(0x0004) (Edit)
	unsigned long                                      m_bShouldUseSteeringMovement : 1;                         // 0x041C(0x0004) (Edit)
	unsigned long                                      m_bShouldCohere : 1;                                      // 0x041C(0x0004) (Edit)
	unsigned long                                      m_bShouldSeparate : 1;                                    // 0x041C(0x0004) (Edit)
	unsigned long                                      m_bShouldPreserveMomentum : 1;                            // 0x041C(0x0004) (Edit)
	unsigned long                                      m_bTargetOutsidePlaypen : 1;                              // 0x041C(0x0004) (Edit)
	float                                              m_fCoverSearchRadius;                                     // 0x0420(0x0004) (Edit)
	float                                              m_fMinCoverRange;                                         // 0x0424(0x0004) (Edit)
	float                                              m_fIdealDistance;                                         // 0x0428(0x0004) (Edit)
	float                                              m_fSlowRange;                                             // 0x042C(0x0004) (Edit)
	float                                              m_fDeadRange;                                             // 0x0430(0x0004) (Edit)
	float                                              m_fSeparationDistance;                                    // 0x0434(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Core");
		return ptr;
	}


	void ReturnToPlaypen();
	TEnumAsByte<EBioPawnChallengeRank> GetTargetDifficulty(class AActor* oTarget);
	bool IsAttackTargetValid(class APawn* oAttackTarget, bool bTestShooting, bool bTestExposed);
	float GetHealthPercentage(class APawn* oTestPawn);
	void GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo);
	class AActor* GetTarget();
	void SetTarget(class AActor* oTarget);
	bool IsCoverPositionValid(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank);
	void onStopFollowerHoldPosition();
	void onStartFollowerHoldPosition(class ABioSquadHoldMarker* oHoldMarker);
	void onLeftPlayPen(class ANavigationPoint* oNavPoint);
	void Initialize();
	void OnSelected(class AActor* oOther);
	void OnLastManStanding();
	void OnProximityAlarm(class AActor* oTarget, int nRelationship);
	void OnSquadSeen(class AActor* oSquad);
	void OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation);
	void OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget);
	void OnDamaged(class AController* oInstigator, float fDamage);
	void onDamagedInCover(class AController* oInstigator, float fDamage);
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType);
	void OnCastAt(class APawn* oAttacker, const struct FName& nmPower);
	void OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon);
	void OnAbilityDisabled(int nEnableType, const struct FName& nmSubType);
	void OnAbilityEnabled(int nEnableType, const struct FName& nmSubType);
	void OnNoCombatAction();
	bool ReactToAction(class APawn* oInstigator, const struct FName& nmAction);
	bool EvaluateCapabilities(class APawn* oTarget, bool bLOS);
	bool EvaluateAttackCapabilities(class APawn* oTarget);
	bool EvaluateDefensiveCapabilities();
	class APawn* PickNewTarget(bool bLOSRequired);
	bool EvaluateTargets();
	bool EvaluateCover(class APawn* oTarget, bool bLOS);
	struct FVector GetCoverLocation();
	struct FVector GetCoverBiasPoint();
	bool ShouldUseCover();
	void EvaluateSteeringMovement();
	bool EvaluateMovement(class APawn* oTarget, bool bLOS);
	void EvaluateCombatActions();
	bool AdjustSteeringMoveSpeed(const struct FVector& vSteering);
	bool GetSteeringVector(struct FVector* vSteering);
	struct FVector GetTargetPosition(class APawn* oTarget);
	bool CheckReEvaluateCover(bool bLOS);
	bool FindBestCover(const struct FVector& vLocation, struct FCoverRecord* out_CoverRecord);
};


// Class BIOC_Base.BioAI_Drone
// 0x0004 (0x043C - 0x0438)
class ABioAI_Drone : public ABioAI_Core
{
public:
	float                                              m_fIdealHeight;                                           // 0x0438(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Drone");
		return ptr;
	}


	bool GetSteeringVector(struct FVector* vSteering);
};


// Class BIOC_Base.BioAI_Henchman
// 0x0004 (0x043C - 0x0438)
class ABioAI_Henchman : public ABioAI_Core
{
public:
	float                                              m_fTickTimer;                                             // 0x0438(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Henchman");
		return ptr;
	}


	void OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget);
	void OnDamaged(class AController* oInstigator, float fDamage);
	bool HandleSteeringMovementFailed();
	void GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo);
	void OnProximityAlarm(class AActor* oTarget, int nRelationship);
	void Initialize();
	void Tick(float DeltaTime);
	class UBioGamerProfile* GetPlayerProfile();
	class ABioPlayerSquad* GetPlayerSquad();
	bool ReactToAction(class APawn* oInstigator, const struct FName& nmAction);
	int GetOutOfCombatCoverRank(const struct FVector& vPos);
	bool IsCoverPositionValid(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank);
	struct FVector GetCoverLocation();
	bool ShouldUseCover();
	bool EvaluateTargets();
	bool EvaluateAttackCapabilities(class APawn* oTarget);
	bool EvaluateDefensiveCapabilities();
	bool EvaluateCapabilities(class APawn* oTarget, bool bLOS);
	void EvaluateCombatActions();
	bool IsCoverPositionValid_Native(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank);
	bool AdjustSteeringMoveSpeed(const struct FVector& vSteering);
	bool GetSteeringVector(struct FVector* vSteering);
};


// Class BIOC_Base.BioAI_Hopper
// 0x0004 (0x043C - 0x0438)
class ABioAI_Hopper : public ABioAI_Core
{
public:
	unsigned long                                      bHopping : 1;                                             // 0x0438(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Hopper");
		return ptr;
	}


	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType);
	void OnSquadSeen(class AActor* oSquad);
	void OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation);
	void OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget);
	void OnDamaged(class AController* oInstigator, float fDamage);
	bool EvaluateMovement(class APawn* oTarget, bool bLOS);
	bool EvaluateCapabilities(class APawn* oTarget, bool bLOS);
	bool Hop(class APawn* oTarget, float fMoveDelay);
	class ABioWP_Hopper* FindHopperNode(class APawn* pSource, class APawn* pTarget);
};


// Class BIOC_Base.BioAI_SarenFlyer
// 0x0000 (0x043C - 0x043C)
class ABioAI_SarenFlyer : public ABioAI_Drone
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_SarenFlyer");
		return ptr;
	}


	void onLeftPlayPen(class ANavigationPoint* oNavPoint);
	bool GetSteeringVector(struct FVector* vSteering);
};


// Class BIOC_Base.BioAI_Sneaky
// 0x0000 (0x0424 - 0x0424)
class ABioAI_Sneaky : public ABioAI_Ambient
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Sneaky");
		return ptr;
	}


	bool GetSteeringVector(struct FVector* vSteering);
};


// Class BIOC_Base.BioDeathVFXControlBasic
// 0x0008 (0x0044 - 0x003C)
class UBioDeathVFXControlBasic : public UBioDeathVFXControl
{
public:
	TEnumAsByte<EBioDeathVFXControlVFXType>            m_ePreferredExclusiveVFXType;                             // 0x003C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	unsigned long                                      m_bAppearanceVFXWaitsForDeathAnimEnd : 1;                 // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDeathVFXControlBasic");
		return ptr;
	}


	bool ShouldDamageVFXPlay(class UBioDeathVFXGameState* pGameState);
	bool ShouldAppearanceVFXPlay(class UBioDeathVFXGameState* pGameState);
	void Evaluate(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState);
};


// Class BIOC_Base.BioInert
// 0x0000 (0x02CC - 0x02CC)
class ABioInert : public ABioArtPlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInert");
		return ptr;
	}

};


// Class BIOC_Base.BioUseable
// 0x0000 (0x02CC - 0x02CC)
class ABioUseable : public ABioArtPlaceable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioUseable");
		return ptr;
	}

};


// Class BIOC_Base.BioInventorySaveObject
// 0x0028 (0x0074 - 0x004C)
class UBioInventorySaveObject : public UBioBaseSaveObject
{
public:
	TArray<class UBioItemSaveObject*>                  m_aItem;                                                  // 0x004C(0x000C) (NeedCtorLink)
	TArray<struct FBioPlotPseudoItem>                  m_aPlotItem;                                              // 0x0058(0x000C) (NeedCtorLink)
	int                                                m_nResourceCredits;                                       // 0x0064(0x0004)
	int                                                m_nResourceGrenades;                                      // 0x0068(0x0004)
	float                                              m_fResourceMedigel;                                       // 0x006C(0x0004)
	float                                              m_fResourceSalvage;                                       // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInventorySaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioActorBehaviorSaveObject
// 0x0008 (0x0054 - 0x004C)
class UBioActorBehaviorSaveObject : public UBioBaseSaveObject
{
public:
	unsigned long                                      m_bIsDead : 1;                                            // 0x004C(0x0004)
	unsigned long                                      m_bGeneratedTreasure : 1;                                 // 0x004C(0x0004)
	unsigned long                                      m_bChallengeScaled : 1;                                   // 0x004C(0x0004)
	class UBioBaseSaveObject*                          Owner;                                                    // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioActorBehaviorSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioDEBUGDelayLog
// 0x002C (0x0068 - 0x003C)
class UBioDEBUGDelayLog : public UObject
{
public:
	unsigned long                                      Cache : 1;                                                // 0x003C(0x0004) (Edit)
	int                                                MaxLinesToCache;                                          // 0x0040(0x0004) (Edit)
	struct FName                                       CacheName;                                                // 0x0044(0x0008) (Edit)
	int                                                Count;                                                    // 0x004C(0x0004)
	TArray<struct FString>                             Messages;                                                 // 0x0050(0x000C) (NeedCtorLink)
	TArray<struct FName>                               Tags;                                                     // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDEBUGDelayLog");
		return ptr;
	}


	void StopCache();
	void StartCache();
	void dump();
	void LogEntry(const struct FString& Text, const struct FName& Tag);
};


// Class BIOC_Base.BioWp_Kismet
// 0x0000 (0x02D0 - 0x02D0)
class ABioWp_Kismet : public ABioPathPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_Kismet");
		return ptr;
	}


	bool OnCreatureReachedWayPoint(class APawn* PathFindingCreature);
};


// Class BIOC_Base.BioPlayerControllerSaveObject
// 0x00CC (0x0118 - 0x004C)
class UBioPlayerControllerSaveObject : public UBioBaseSaveObject
{
public:
	struct FBioActionMapping                           m_aActionMap[0x6];                                        // 0x004C(0x0010)
	int                                                m_nLastWeapon;                                            // 0x00AC(0x0004)
	struct FName                                       m_nmLastPower;                                            // 0x00B0(0x0008)
	int                                                m_lstHotKeyPawns[0xC];                                    // 0x00B8(0x0004)
	int                                                m_lstHotKeyEvents[0xC];                                   // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPlayerControllerSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioAI_ReturnToSpawn
// 0x0004 (0x043C - 0x0438)
class ABioAI_ReturnToSpawn : public ABioAI_Core
{
public:
	unsigned long                                      m_bWasAllowedToLeavePlaypen : 1;                          // 0x0438(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_ReturnToSpawn");
		return ptr;
	}


	void Tick(float DeltaTime);
	void onLeftPlayPen(class ANavigationPoint* oNavPoint);
	void Initialize();
};


// Class BIOC_Base.BioAI_HumanoidMinion
// 0x000C (0x0444 - 0x0438)
class ABioAI_HumanoidMinion : public ABioAI_Core
{
public:
	struct FVector                                     m_vAvoidLocation;                                         // 0x0438(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_HumanoidMinion");
		return ptr;
	}


	void OnHacked();
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType);
	void onDamagedInCover(class AController* oInstigator, float fDamage);
	bool IsCoverPositionValid(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank);
	bool ShouldUseCover();
};


// Class BIOC_Base.BioAI_Charge
// 0x0000 (0x0438 - 0x0438)
class ABioAI_Charge : public ABioAI_Core
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Charge");
		return ptr;
	}


	bool EvaluateMovement(class APawn* oTarget, bool bLOS);
};


// Class BIOC_Base.BioAI_Assault
// 0x0004 (0x0448 - 0x0444)
class ABioAI_Assault : public ABioAI_HumanoidMinion
{
public:
	unsigned long                                      m_bShouldAdvance : 1;                                     // 0x0444(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Assault");
		return ptr;
	}


	void OnDamaged(class AController* oInstigator, float fDamage);
	bool InRangeOfTarget();
	bool EvaluateMovement(class APawn* oTarget, bool bLOS);
	void GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo);
};


// Class BIOC_Base.BioAI_AssaultDrone
// 0x0000 (0x043C - 0x043C)
class ABioAI_AssaultDrone : public ABioAI_Drone
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_AssaultDrone");
		return ptr;
	}

};


// Class BIOC_Base.BioAI_Commander
// 0x0000 (0x0438 - 0x0438)
class ABioAI_Commander : public ABioAI_Core
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Commander");
		return ptr;
	}

};


// Class BIOC_Base.BioAI_Destroyer
// 0x0000 (0x0438 - 0x0438)
class ABioAI_Destroyer : public ABioAI_Charge
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Destroyer");
		return ptr;
	}

};


// Class BIOC_Base.BioAI_Gunship
// 0x0000 (0x043C - 0x043C)
class ABioAI_Gunship : public ABioAI_Drone
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Gunship");
		return ptr;
	}

};


// Class BIOC_Base.BioAI_Inactive
// 0x0000 (0x0414 - 0x0414)
class ABioAI_Inactive : public ABioAiController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Inactive");
		return ptr;
	}


	void OnProximityAlarm(class AActor* oTarget, int nRelationship);
	void OnSquadSeen(class AActor* oSquad);
	void OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation);
	void OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget);
	void OnDamaged(class AController* oInstigator, float fDamage);
	void OnCastAt(class APawn* oAttacker, const struct FName& nmPower);
	void OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon);
	void OnAbilityDisabled(int nEnableType, const struct FName& nmSubType);
	void OnAbilityEnabled(int nEnableType, const struct FName& nmSubType);
	void OnNoCombatAction();
	void OnDeath(class AController* oKiller);
};


// Class BIOC_Base.BioAI_Juggernaut
// 0x0000 (0x0438 - 0x0438)
class ABioAI_Juggernaut : public ABioAI_Core
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Juggernaut");
		return ptr;
	}

};


// Class BIOC_Base.BioAI_Krogan
// 0x0000 (0x0444 - 0x0444)
class ABioAI_Krogan : public ABioAI_HumanoidMinion
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Krogan");
		return ptr;
	}


	void OnLastManStanding();
	void OnProximityAlarm(class AActor* oTarget, int nRelationship);
	void OnDamaged(class AController* oInstigator, float fDamage);
	void Initialize();
	void Charge(class APawn* oTarget);
};


// Class BIOC_Base.BioAI_Melee
// 0x0000 (0x0438 - 0x0438)
class ABioAI_Melee : public ABioAI_Core
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Melee");
		return ptr;
	}

};


// Class BIOC_Base.BioAI_Mercenary
// 0x0004 (0x044C - 0x0448)
class ABioAI_Mercenary : public ABioAI_Assault
{
public:
	unsigned long                                      m_bAggressive : 1;                                        // 0x0448(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Mercenary");
		return ptr;
	}


	bool EvaluateMovement(class APawn* oTarget, bool bLOS);
	void Initialize();
};


// Class BIOC_Base.BioAI_Rachnii
// 0x0000 (0x0438 - 0x0438)
class ABioAI_Rachnii : public ABioAI_Core
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Rachnii");
		return ptr;
	}


	void OnLastManStanding();
	void OnDamaged(class AController* oInstigator, float fDamage);
	void Initialize();
	void Charge(class APawn* oTarget);
};


// Class BIOC_Base.BioAI_RepairDrone
// 0x0000 (0x043C - 0x043C)
class ABioAI_RepairDrone : public ABioAI_Drone
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_RepairDrone");
		return ptr;
	}


	bool EvaluateTargets();
};


// Class BIOC_Base.BioAI_Sniper
// 0x0000 (0x0444 - 0x0444)
class ABioAI_Sniper : public ABioAI_HumanoidMinion
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAI_Sniper");
		return ptr;
	}


	bool EvaluateAttackCapabilities(class APawn* oTarget);
};


// Class BIOC_Base.BioAIDesignController
// 0x0000 (0x0414 - 0x0414)
class ABioAIDesignController : public ABioAiController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAIDesignController");
		return ptr;
	}

};


// Class BIOC_Base.BioAnimNodeBlendByBiotic
// 0x0000 (0x00DC - 0x00DC)
class UBioAnimNodeBlendByBiotic : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAnimNodeBlendByBiotic");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceItemSimple
// 0x0000 (0x0074 - 0x0074)
class UBioAppearanceItemSimple : public UBioAppearanceItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItemSimple");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceItemBioAmp
// 0x0000 (0x0074 - 0x0074)
class UBioAppearanceItemBioAmp : public UBioAppearanceItemSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItemBioAmp");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceItemOmniTool
// 0x0000 (0x0084 - 0x0084)
class UBioAppearanceItemOmniTool : public UBioAppearanceItemSophisticated
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItemOmniTool");
		return ptr;
	}

};


// Class BIOC_Base.BioAppearanceItemXMod
// 0x0000 (0x0074 - 0x0074)
class UBioAppearanceItemXMod : public UBioAppearanceItemSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAppearanceItemXMod");
		return ptr;
	}

};


// Class BIOC_Base.BioAreaTransition
// 0x0010 (0x023C - 0x022C)
class ABioAreaTransition : public ATriggerVolume
{
public:
	struct FName                                       sMoveToArea;                                              // 0x022C(0x0008) (Edit)
	struct FName                                       sMoveToStartPoint;                                        // 0x0234(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAreaTransition");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class BIOC_Base.BioInterfaceAppearanceSaveObject
// 0x0008 (0x0054 - 0x004C)
class UBioInterfaceAppearanceSaveObject : public UBioBaseSaveObject
{
public:
	class UBioBaseSaveObject*                          m_oMorphFace;                                             // 0x004C(0x0004)
	class UBioMorphFace*                               m_pFaceAsset;                                             // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInterfaceAppearanceSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioStickyGrenadeInterfaceMesh
// 0x0004 (0x0040 - 0x003C)
class UBioStickyGrenadeInterfaceMesh : public UBioStickyGrenadeInterface
{
public:
	class USkeletalMeshComponent*                      m_skeletalMeshComponent;                                  // 0x003C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioStickyGrenadeInterfaceMesh");
		return ptr;
	}


	struct FVector ComputePosition(class ABioGrenadeProjectileFrisbee* Projectile);
	void Detach(class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile);
	bool Attach(class ABioGrenadeProjectileFrisbee* Projectile, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class BIOC_Base.BioSeqEvt_ArtPlaceableUsed
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_ArtPlaceableUsed : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_ArtPlaceableUsed");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_ArtPlaceablePlotFail
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_ArtPlaceablePlotFail : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_ArtPlaceablePlotFail");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_ArtPlaceableTransition
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_ArtPlaceableTransition : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_ArtPlaceableTransition");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_TakeDamage
// 0x0028 (0x013C - 0x0114)
class UBioSeqEvt_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                          // 0x0114(0x0004) (Edit)
	float                                              DamageThreshold;                                          // 0x0118(0x0004) (Edit)
	TArray<class UClass*>                              DamageTypes;                                              // 0x011C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              IgnoreDamageTypes;                                        // 0x0128(0x000C) (Edit, NeedCtorLink)
	float                                              CurrentDamage;                                            // 0x0134(0x0004)
	float                                              CurrentMitigatedDamage;                                   // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_TakeDamage");
		return ptr;
	}


	void HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, float inAmount, float inMitigatedAmount);
	bool IsValidDamageType(class UClass* inDamageType);
};


// Class BIOC_Base.BioArtPlaceableBehaviorSaveObject
// 0x002C (0x0080 - 0x0054)
class UBioArtPlaceableBehaviorSaveObject : public UBioActorBehaviorSaveObject
{
public:
	float                                              m_fHealth;                                                // 0x0054(0x0004)
	float                                              m_fCurrentHealth;                                         // 0x0058(0x0004)
	unsigned long                                      Enabled : 1;                                              // 0x005C(0x0004)
	unsigned long                                      m_bIsDestroyed : 1;                                       // 0x005C(0x0004)
	unsigned long                                      m_bUseCaseOverride : 1;                                   // 0x005C(0x0004)
	unsigned long                                      m_bPlayerOnly : 1;                                        // 0x005C(0x0004)
	unsigned long                                      m_bSkillGameFailed : 1;                                   // 0x005C(0x0004)
	unsigned long                                      m_bSkillGameXpAwarded : 1;                                // 0x005C(0x0004)
	struct FName                                       CurrentFSMStateName;                                      // 0x0060(0x0008)
	struct FName                                       m_State0;                                                 // 0x0068(0x0008)
	struct FName                                       m_State1;                                                 // 0x0070(0x0008)
	TEnumAsByte<EeBioAPLUseCase>                       m_eUseCase;                                               // 0x0078(0x0001)
	TEnumAsByte<EBioSkillGameDifficulty>               m_SkillDifficulty;                                        // 0x0079(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007A(0x0002) MISSED OFFSET
	class UBioBaseSaveObject*                          m_oInventory;                                             // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableBehaviorSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioArtPlaceableContainerType
// 0x0000 (0x00F8 - 0x00F8)
class UBioArtPlaceableContainerType : public UBioArtPlaceableType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableContainerType");
		return ptr;
	}

};


// Class BIOC_Base.BioArtPlaceableDoorType
// 0x0000 (0x00F8 - 0x00F8)
class UBioArtPlaceableDoorType : public UBioArtPlaceableType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableDoorType");
		return ptr;
	}

};


// Class BIOC_Base.BioArtPlaceableShieldType
// 0x0000 (0x00F8 - 0x00F8)
class UBioArtPlaceableShieldType : public UBioArtPlaceableType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableShieldType");
		return ptr;
	}

};


// Class BIOC_Base.BioArtPlaceableUseableType
// 0x0000 (0x00F8 - 0x00F8)
class UBioArtPlaceableUseableType : public UBioArtPlaceableType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioArtPlaceableUseableType");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributesItemVehicleBase
// 0x0001 (0x00CD - 0x00CC)
class UBioAttributesItemVehicleBase : public UBioAttributesItemXModdable
{
public:
	TEnumAsByte<EBioEquipmentVehicleSlot>              m_nEquipmentSlotID;                                       // 0x00CC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesItemVehicleBase");
		return ptr;
	}

};


// Class BIOC_Base.BioAttributesWeapon
// 0x0000 (0x0048 - 0x0048)
class UBioAttributesWeapon : public UBioAttributes
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAttributesWeapon");
		return ptr;
	}

};


// Class BIOC_Base.BioAudioRoomTrigger
// 0x001C (0x0248 - 0x022C)
class ABioAudioRoomTrigger : public AVolume
{
public:
	TArray<class AAmbientSound*>                       AmbientSoundsOutside;                                     // 0x022C(0x000C) (Edit, NeedCtorLink)
	TArray<class AAmbientSound*>                       AmbientSoundsInside;                                      // 0x0238(0x000C) (Edit, NeedCtorLink)
	class APawn*                                       m_oTrackPawn;                                             // 0x0244(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAudioRoomTrigger");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
};


// Class BIOC_Base.BioAudioVolumeTimer
// 0x0004 (0x01F4 - 0x01F0)
class ABioAudioVolumeTimer : public AInfo
{
public:
	class ABioAudioVolume*                             m_oBioAudioVolume;                                        // 0x01F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioAudioVolumeTimer");
		return ptr;
	}


	void Timer();
	void PostBeginPlay();
};


// Class BIOC_Base.BioBaseActivity
// 0x0024 (0x0060 - 0x003C)
class UBioBaseActivity : public UObject
{
public:
	struct FName                                       m_nAcitivityName;                                         // 0x003C(0x0008) (Edit)
	TArray<class UAnimSet*>                            m_aoActivityAnimSets;                                     // 0x0044(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bUseEnterExitAnims : 1;                                 // 0x0050(0x0004) (Edit)
	TArray<struct FActivityProp>                       m_aProps;                                                 // 0x0054(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioBaseActivity");
		return ptr;
	}

};


// Class BIOC_Base.BioBaseSquadSaveObject
// 0x0004 (0x0050 - 0x004C)
class UBioBaseSquadSaveObject : public UBioBaseSaveObject
{
public:
	class UBioBaseSaveObject*                          m_Inventory;                                              // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioBaseSquadSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioFaction_BaseSquad
// 0x0000 (0x0054 - 0x0054)
class UBioFaction_BaseSquad : public UBioFaction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioFaction_BaseSquad");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorCombatCover
// 0x0000 (0x026C - 0x026C)
class UBioCameraBehaviorCombatCover : public UBioCameraBehaviorFollowReadyStance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorCombatCover");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorSquadCommand
// 0x0000 (0x026C - 0x026C)
class UBioCameraBehaviorSquadCommand : public UBioCameraBehaviorFollowNormal
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorSquadCommand");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorStorm
// 0x0000 (0x0224 - 0x0224)
class UBioCameraBehaviorStorm : public UBioCameraBehaviorDolly
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorStorm");
		return ptr;
	}

};


// Class BIOC_Base.BioCameraBehaviorZoomCover
// 0x0000 (0x0270 - 0x0270)
class UBioCameraBehaviorZoomCover : public UBioCameraBehaviorZoom
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioCameraBehaviorZoomCover");
		return ptr;
	}

};


// Class BIOC_Base.BioEpicPawnBehaviorSaveObject
// 0x0024 (0x0078 - 0x0054)
class UBioEpicPawnBehaviorSaveObject : public UBioActorBehaviorSaveObject
{
public:
	float                                              m_HealthCurrent;                                          // 0x0054(0x0004)
	float                                              m_ShieldCurrent;                                          // 0x0058(0x0004)
	struct FString                                     m_FirstName;                                              // 0x005C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0068(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioEpicPawnBehaviorSaveObject.m_LastName
	float                                              m_HealthMax;                                              // 0x006C(0x0004)
	float                                              m_HealthRegenRate;                                        // 0x0070(0x0004)
	float                                              m_fRadarRange;                                            // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioEpicPawnBehaviorSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioPawnBehaviorSaveObject
// 0x00B0 (0x0128 - 0x0078)
class UBioPawnBehaviorSaveObject : public UBioEpicPawnBehaviorSaveObject
{
public:
	int                                                m_XPLevel;                                                // 0x0078(0x0004)
	float                                              m_HealthPerLevel;                                         // 0x007C(0x0004)
	float                                              m_StabilityCurrent;                                       // 0x0080(0x0004)
	TEnumAsByte<EBioAttributePawnGender>               m_Gender;                                                 // 0x0084(0x0001)
	TEnumAsByte<EBioAttributePawnRace>                 m_Race;                                                   // 0x0085(0x0001)
	TEnumAsByte<EBioItemWeaponRangedType>              m_eQuickSlotCurrent;                                      // 0x0086(0x0001)
	TEnumAsByte<EBioPartyMemberAbility>                m_AttributePrimary;                                       // 0x0087(0x0001)
	TEnumAsByte<EBioPartyMemberAbility>                m_AttributeSecondary;                                     // 0x0088(0x0001)
	TEnumAsByte<EBioPartyMemberClassBase>              m_ClassBase;                                              // 0x0089(0x0001)
	TEnumAsByte<EBioPlayerCharacterSpectreRank>        m_SpectreRank;                                            // 0x008A(0x0001)
	TEnumAsByte<EBioPlayerCharacterBackgroundOrigin>   m_BackgroundOrigin;                                       // 0x008B(0x0001)
	TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> m_BackgroundNotoriety;                                    // 0x008C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	float                                              m_ToxicCurrent;                                           // 0x0090(0x0004)
	int                                                m_Stamina;                                                // 0x0094(0x0004)
	int                                                m_Focus;                                                  // 0x0098(0x0004)
	int                                                m_Precision;                                              // 0x009C(0x0004)
	int                                                m_Coordination;                                           // 0x00A0(0x0004)
	TArray<class UBioItemSaveObject*>                  m_aEquipped;                                              // 0x00A4(0x000C) (NeedCtorLink)
	TArray<class UBioItemSaveObject*>                  m_QuickSlotArray;                                         // 0x00B0(0x000C) (NeedCtorLink)
	class UBioBaseSaveObject*                          m_Squad;                                                  // 0x00BC(0x0004)
	class UBioBaseSaveObject*                          m_Inventory;                                              // 0x00C0(0x0004)
	TArray<struct FBioActionMapping>                   m_aActionMapping;                                         // 0x00C4(0x000C) (NeedCtorLink)
	TArray<struct FBioSimpleTalentSave>                m_aSimpleTalents;                                         // 0x00D0(0x000C) (NeedCtorLink)
	TArray<struct FBioComplexTalentSave>               m_aComplexTalents;                                        // 0x00DC(0x000C) (NeedCtorLink)
	int                                                m_Experience;                                             // 0x00E8(0x0004)
	int                                                m_TalentPoints;                                           // 0x00EC(0x0004)
	int                                                m_TalentPoolPoints;                                       // 0x00F0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00F4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioPawnBehaviorSaveObject.m_LocalizedClassName
	int                                                m_AutoLevelUpTemplateID;                                  // 0x00F8(0x0004)
	int                                                m_SpecializationBonusID;                                  // 0x00FC(0x0004)
	float                                              m_SkillCharm;                                             // 0x0100(0x0004)
	float                                              m_SkillIntimidate;                                        // 0x0104(0x0004)
	float                                              m_SkillHaggle;                                            // 0x0108(0x0004)
	float                                              m_Audibility;                                             // 0x010C(0x0004)
	float                                              m_Blindness;                                              // 0x0110(0x0004)
	float                                              m_BonusToxicHealingRate;                                  // 0x0114(0x0004) (Deprecated)
	float                                              m_DamageDurationMult;                                     // 0x0118(0x0004)
	float                                              m_Deafness;                                               // 0x011C(0x0004)
	int                                                m_nUnlootableGrenadeCount;                                // 0x0120(0x0004)
	unsigned long                                      m_bHeadGearVisiblePreference : 1;                         // 0x0124(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnBehaviorSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioChatterSystem
// 0x000C (0x0048 - 0x003C)
class UBioChatterSystem : public UObject
{
public:
	TArray<float>                                      m_afFrequency;                                            // 0x003C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioChatterSystem");
		return ptr;
	}

};


// Class BIOC_Base.BioDEBUG_PawnFiringController
// 0x0020 (0x0210 - 0x01F0)
class ABioDEBUG_PawnFiringController : public AActor
{
public:
	TArray<class ABioPawn*>                            Shooters;                                                 // 0x01F0(0x000C) (Edit, NeedCtorLink)
	class ABioPawn*                                    Target;                                                   // 0x01FC(0x0004) (Edit)
	int                                                I;                                                        // 0x0200(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0204(0x0004) (Edit)
	struct FName                                       nmTypeOfShooting;                                         // 0x0208(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioDEBUG_PawnFiringController");
		return ptr;
	}


	bool ShootTarget(class ABioPawn* SHTR);
	int HowManyShooting();
};


// Class BIOC_Base.BioOp
// 0x0000 (0x003C - 0x003C)
class UBioOp : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioOp");
		return ptr;
	}


	void STATIC_EvaluateInt(TEnumAsByte<EBioOp> eOp, int nB, bool bInvertOp, int nU, int* nA);
	void STATIC_EvaluateFloat(TEnumAsByte<EBioOp> eOp, bool bInvertOp, float fU, float* fA, float* fB);
};


// Class BIOC_Base.BioComplexFloatAttribute
// 0x0000 (0x003C - 0x003C)
class UBioComplexFloatAttribute : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioComplexFloatAttribute");
		return ptr;
	}

};


// Class BIOC_Base.BioComplexIntAttribute
// 0x0000 (0x003C - 0x003C)
class UBioComplexIntAttribute : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioComplexIntAttribute");
		return ptr;
	}

};


// Class BIOC_Base.BioConditionals
// 0x0000 (0x003C - 0x003C)
class UBioConditionals : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioConditionals");
		return ptr;
	}

};


// Class BIOC_Base.BioConsequenceFunctions
// 0x0000 (0x003C - 0x003C)
class UBioConsequenceFunctions : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioConsequenceFunctions");
		return ptr;
	}


	void STATIC_GrantBonusTalents(class ABioWorldInfo* WorldInfo, int bonusIdentifier);
	void STATIC_GrantCredits(class ABioWorldInfo* WorldInfo, int Count);
	void STATIC_GrantMediGel(class ABioWorldInfo* WorldInfo, int Count);
	void STATIC_GrantSalvage(class ABioWorldInfo* WorldInfo, int Count);
	void STATIC_GrantGrenades(class ABioWorldInfo* WorldInfo, int Count);
	void STATIC_GrantScaledXP(class ABioWorldInfo* WorldInfo, int curve);
};


// Class BIOC_Base.BioForm_SingleLine
// 0x0000 (0x0050 - 0x0050)
class UBioForm_SingleLine : public UBioFormations
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioForm_SingleLine");
		return ptr;
	}

};


// Class BIOC_Base.BioForm_Square
// 0x0000 (0x0050 - 0x0050)
class UBioForm_Square : public UBioFormations
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioForm_Square");
		return ptr;
	}

};


// Class BIOC_Base.BioForm_Triangle
// 0x0000 (0x0050 - 0x0050)
class UBioForm_Triangle : public UBioFormations
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioForm_Triangle");
		return ptr;
	}

};


// Class BIOC_Base.BioForm_TriangleRest
// 0x0000 (0x0050 - 0x0050)
class UBioForm_TriangleRest : public UBioFormations
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioForm_TriangleRest");
		return ptr;
	}

};


// Class BIOC_Base.BioGameInfo
// 0x0010 (0x0320 - 0x0310)
class ABioGameInfo : public AGameInfo
{
public:
	class UClass*                                      TeamClass;                                                // 0x0310(0x0004)
	TArray<class ATeamInfo*>                           Teams;                                                    // 0x0314(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameInfo");
		return ptr;
	}


	void RestartPlayer(class AController* NewPlayer);
	void SetBioGameSpeed(float T);
	void PostLogin(class APlayerController* NewPlayer);
	void BioBeginPlay();
};


// Class BIOC_Base.BioGameReplicationInfo
// 0x0004 (0x0284 - 0x0280)
class ABioGameReplicationInfo : public AGameReplicationInfo
{
public:
	unsigned long                                      Temp : 1;                                                 // 0x0280(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioGameReplicationInfo");
		return ptr;
	}

};


// Class BIOC_Base.BioSpectatorMode
// 0x0030 (0x0074 - 0x0044)
class UBioSpectatorMode : public UBioBaseComponent
{
public:
	struct FString                                     m_desc;                                                   // 0x0044(0x000C) (Transient, NeedCtorLink)
	int                                                m_nCurrentLevel;                                          // 0x0050(0x0004) (Transient)
	int                                                m_nSelectedOption;                                        // 0x0054(0x0004) (Transient)
	TArray<struct FString>                             m_options;                                                // 0x0058(0x000C) (Transient, NeedCtorLink)
	int                                                m_nSelectedSubOption;                                     // 0x0064(0x0004) (Transient)
	TArray<struct FString>                             m_subOptions;                                             // 0x0068(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectatorMode");
		return ptr;
	}


	void NextOption();
	void PrevOption();
	struct FString GetBelowOptionText(int Level);
	struct FString GetSelectedOptionText(int Level);
	struct FString GetAboveOptionText(int Level);
	void DeactivateOption(class ABioWorldInfo* WorldInfo);
	void ActivateOption(class ABioWorldInfo* WorldInfo);
	void InitializeOptions(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioSpectator
// 0x0014 (0x0058 - 0x0044)
class UBioSpectator : public UBioBaseComponent
{
public:
	int                                                m_nSelectedMode;                                          // 0x0044(0x0004) (Transient)
	TArray<class UBioSpectatorMode*>                   m_modes;                                                  // 0x0048(0x000C) (Transient, NeedCtorLink)
	class ABioWorldInfo*                               m_WorldInfo;                                              // 0x0054(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectator");
		return ptr;
	}


	void NextMode();
	void PrevMode();
	void InitializeModes(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioInGamePropertyEditor
// 0x0098 (0x00D4 - 0x003C)
class UBioInGamePropertyEditor : public UObject
{
public:
	class UBioPropertyEditorBaseNode*                  m_oPropertyEditorNodes;                                   // 0x003C(0x0004)
	unsigned long                                      m_bIsActive : 1;                                          // 0x0040(0x0004)
	unsigned long                                      m_bDebugBones : 1;                                        // 0x0040(0x0004)
	unsigned long                                      m_bSortByType : 1;                                        // 0x0040(0x0004)
	unsigned long                                      m_bSortByName : 1;                                        // 0x0040(0x0004)
	float                                              m_fHUDRelativePropertyEditorOriginX;                      // 0x0044(0x0004)
	float                                              m_fHUDRelativePropertyEditorOriginY;                      // 0x0048(0x0004)
	float                                              m_fPropertyEditorSizeX;                                   // 0x004C(0x0004)
	float                                              m_fPropertyEditorSizeY;                                   // 0x0050(0x0004)
	float                                              m_fPropertyEditorRelativeColumnOneX;                      // 0x0054(0x0004)
	float                                              m_fPropertyEditorRelativeColumnTwoX;                      // 0x0058(0x0004)
	float                                              m_fPropertyEditorRelativeColumnThreeX;                    // 0x005C(0x0004)
	float                                              m_fPropertyEditorRelativeColumnY;                         // 0x0060(0x0004)
	float                                              m_fColumnHeight;                                          // 0x0064(0x0004)
	struct FString                                     m_sFooterText;                                            // 0x0068(0x000C) (NeedCtorLink)
	struct FString                                     m_sFileName;                                              // 0x0074(0x000C) (NeedCtorLink)
	struct FString                                     m_sEditableRootName;                                      // 0x0080(0x000C) (NeedCtorLink)
	struct FString                                     m_sCameraRootName;                                        // 0x008C(0x000C) (NeedCtorLink)
	struct FString                                     m_sAnimNodeName;                                          // 0x0098(0x000C) (NeedCtorLink)
	struct FString                                     m_sLoadSaveNodeName;                                      // 0x00A4(0x000C) (NeedCtorLink)
	struct FString                                     m_sNewLoadSaveNodeName;                                   // 0x00B0(0x000C) (NeedCtorLink)
	struct FString                                     m_sStateNodeName;                                         // 0x00BC(0x000C) (NeedCtorLink)
	struct FString                                     m_sActionMappingName;                                     // 0x00C8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInGamePropertyEditor");
		return ptr;
	}


	struct FString filterString(const struct FString& Input);
	void DrawToHUD(class ABioHUD* oHud);
	void DrawBones(class ABioHUD* oHud);
	bool PerformRightShoulderAction();
	bool PerformLeftShoulderAction();
	bool PerformRightTriggerAction();
	bool PerformLeftTriggerAction();
	bool ActivateMainMenu();
	bool PerformLeftAction();
	bool PerformRightAction();
	bool PerformDownAction();
	bool PerformUpAction();
	bool PerformDeactivateAction();
	bool PerformActivateAction();
	bool CreateNodeTestData();
	bool WriteTreeDataToHUD(class ABioHUD* oHud);
	bool UpdateSystem(float fDeltaTime);
	bool DeactivateSystem();
	bool ActivateSystem();
	bool Initialize();
};


// Class BIOC_Base.BioPropertyEditorBaseNode
// 0x004C (0x0088 - 0x003C)
class UBioPropertyEditorBaseNode : public UObject
{
public:
	struct FString                                     m_sNodeDisplayName;                                       // 0x003C(0x000C) (NeedCtorLink)
	TArray<class UBioPropertyEditorBaseNode*>          m_aChildren;                                              // 0x0048(0x000C) (NeedCtorLink)
	TArray<class UBioPropertyEditorBaseNode*>          m_aTraversedStack;                                        // 0x0054(0x000C) (NeedCtorLink)
	int                                                m_nCurrentlySelectedChild;                                // 0x0060(0x0004)
	int                                                m_nScrollBoxFirstIndex;                                   // 0x0064(0x0004)
	int                                                m_nScrollBoxSize;                                         // 0x0068(0x0004)
	class UBioInGamePropertyEditor*                    m_oTop;                                                   // 0x006C(0x0004)
	class UBioPropertyEditorBaseNode*                  m_oParent;                                                // 0x0070(0x0004)
	struct FColor                                      m_colour;                                                 // 0x0074(0x0004)
	int                                                m_nGeneration;                                            // 0x0078(0x0004)
	struct FString                                     m_sParentGenName;                                         // 0x007C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorBaseNode");
		return ptr;
	}


	class UBioInGamePropertyEditor* getTop();
	struct FString getDisplayText(bool selectable);
	struct FColor getColour();
	void setColour(const struct FColor& Col);
	void RightShoulderAction();
	void LeftShoulderAction();
	void RightTriggerAction();
	void LeftTriggerAction();
	void DecrementCurrentSelection();
	void IncrementCurrentSelection();
	class UBioPropertyEditorBaseNode* GetSelectablesParent();
	class UBioPropertyEditorBaseNode* GetSelectedChildOnStackTop();
	class UBioPropertyEditorBaseNode* GetSelectedChild();
	bool SelectionAction();
};


// Class BIOC_Base.BioInterface_Appearance_Car
// 0x0000 (0x004C - 0x004C)
class UBioInterface_Appearance_Car : public UBioInterface_Appearance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioInterface_Appearance_Car");
		return ptr;
	}

};


// Class BIOC_Base.BioMaterialOverrideSaveObject
// 0x0024 (0x0070 - 0x004C)
class UBioMaterialOverrideSaveObject : public UBioBaseSaveObject
{
public:
	TArray<struct FTextureParameter>                   m_aTextureOverrides;                                      // 0x004C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FColorParameter>                     m_aColorOverrides;                                        // 0x0058(0x000C) (Edit, NeedCtorLink)
	TArray<struct FScalarParameter>                    m_aScalarOverrides;                                       // 0x0064(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMaterialOverrideSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioItemSaveObject
// 0x0010 (0x005C - 0x004C)
class UBioItemSaveObject : public UBioBaseSaveObject
{
public:
	int                                                m_nID;                                                    // 0x004C(0x0004)
	unsigned char                                      m_eSophistication;                                        // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                m_manufacturer;                                           // 0x0054(0x0004)
	int                                                m_plotConditionalID;                                      // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemSaveObject");
		return ptr;
	}


	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioItemXModdableSaveObject
// 0x000C (0x0068 - 0x005C)
class UBioItemXModdableSaveObject : public UBioItemSaveObject
{
public:
	TArray<struct FBioItemXModdableSaveObjectSlotSpec> m_aSlotSpec;                                              // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemXModdableSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioItemXModSaveObject
// 0x0004 (0x0060 - 0x005C)
class UBioItemXModSaveObject : public UBioItemSaveObject
{
public:
	int                                                m_type;                                                   // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemXModSaveObject");
		return ptr;
	}

};


// Class BIOC_Base.BioItemOmniTool
// 0x0000 (0x00AC - 0x00AC)
class UBioItemOmniTool : public UBioItemXModdable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioItemOmniTool");
		return ptr;
	}

};


// Class BIOC_Base.BioWeaponMelee
// 0x0000 (0x0234 - 0x0234)
class ABioWeaponMelee : public ABioWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWeaponMelee");
		return ptr;
	}

};


// Class BIOC_Base.BioMorphFaceSaveObject
// 0x0068 (0x00B4 - 0x004C)
class UBioMorphFaceSaveObject : public UBioBaseSaveObject
{
public:
	class USkeletalMesh*                               m_oBaseHead;                                              // 0x004C(0x0004)
	class USkeletalMesh*                               m_oHairMesh;                                              // 0x0050(0x0004)
	TArray<class USkeletalMesh*>                       m_oOtherMeshes;                                           // 0x0054(0x000C) (NeedCtorLink)
	TArray<struct FMorphFeature>                       m_aMorphFeatures;                                         // 0x0060(0x000C) (NeedCtorLink)
	class UMorphTargetSet*                             m_oMorphTargetSet;                                        // 0x006C(0x0004)
	class UAnimTree*                                   m_oAnimTree;                                              // 0x0070(0x0004)
	class UBioBaseSaveObject*                          m_oMaterialOverrides;                                     // 0x0074(0x0004)
	TArray<struct FOffsetBonePos>                      m_aFinalSkeleton;                                         // 0x0078(0x000C) (NeedCtorLink)
	struct FVertexBuffer                               m_aVertexBuffersLOD0;                                     // 0x0084(0x000C) (NeedCtorLink)
	struct FVertexBuffer                               m_aVertexBuffersLOD1;                                     // 0x0090(0x000C) (NeedCtorLink)
	struct FVertexBuffer                               m_aVertexBuffersLOD2;                                     // 0x009C(0x000C) (NeedCtorLink)
	struct FVertexBuffer                               m_aVertexBuffersLOD3;                                     // 0x00A8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioMorphFaceSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioSeqEvt_WaypointSet_WaypointReached
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_WaypointSet_WaypointReached : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_WaypointSet_WaypointReached");
		return ptr;
	}

};


// Class BIOC_Base.BioPathPointFactory
// 0x0000 (0x0064 - 0x0064)
class UBioPathPointFactory : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPathPointFactory");
		return ptr;
	}

};


// Class BIOC_Base.BioVFXInterfacePawn
// 0x0000 (0x003C - 0x003C)
class UBioVFXInterfacePawn : public UBioVFXInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVFXInterfacePawn");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_KnockoutThorian
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_KnockoutThorian : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_KnockoutThorian");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_Pawn_WaypointReached
// 0x0004 (0x0118 - 0x0114)
class UBioSeqEvt_Pawn_WaypointReached : public USequenceEvent
{
public:
	class ABioPathPoint*                               m_oPathPointTrigger;                                      // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_Pawn_WaypointReached");
		return ptr;
	}

};


// Class BIOC_Base.BioPawnSaveObject
// 0x0010 (0x0090 - 0x0080)
class UBioPawnSaveObject : public UBioActorSaveObject
{
public:
	float                                              m_fGrimeGrimeLevel;                                       // 0x0080(0x0004)
	float                                              m_fGrimeDirtLevel;                                        // 0x0084(0x0004)
	int                                                m_nTalkedToCount;                                         // 0x0088(0x0004)
	unsigned long                                      m_bHeadGearVisiblePreference : 1;                         // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPawnSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* pObject);
	void SaveObject(class UObject* pObject);
};


// Class BIOC_Base.BioPhysMatGrenade
// 0x0000 (0x0098 - 0x0098)
class UBioPhysMatGrenade : public UPhysicalMaterial
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPhysMatGrenade");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_PlayerInput
// 0x0004 (0x0118 - 0x0114)
class UBioSeqEvt_PlayerInput : public USequenceEvent
{
public:
	int                                                m_nFilterID;                                              // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_PlayerInput");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_GuiInput
// 0x0004 (0x0118 - 0x0114)
class UBioSeqEvt_GuiInput : public USequenceEvent
{
public:
	int                                                m_nFilterID;                                              // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_GuiInput");
		return ptr;
	}

};


// Class BIOC_Base.BioPlayerReplicationInfo
// 0x0000 (0x0280 - 0x0280)
class ABioPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPlayerReplicationInfo");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnCombatBegin
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_OnCombatBegin : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnCombatBegin");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqEvt_OnCombatEnd
// 0x0000 (0x0114 - 0x0114)
class UBioSeqEvt_OnCombatEnd : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqEvt_OnCombatEnd");
		return ptr;
	}

};


// Class BIOC_Base.BioSquadSaveObject
// 0x0010 (0x0060 - 0x0050)
class UBioSquadSaveObject : public UBioBaseSquadSaveObject
{
public:
	int                                                m_nSquadExperience;                                       // 0x0050(0x0004)
	int                                                m_nMaxLevel;                                              // 0x0054(0x0004)
	int                                                m_nMinLevel;                                              // 0x0058(0x0004)
	int                                                m_nSquadLevel;                                            // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSquadSaveObject");
		return ptr;
	}

};


// Class BIOC_Base.BioPlayerVehicleSaveObject
// 0x0010 (0x005C - 0x004C)
class UBioPlayerVehicleSaveObject : public UBioBaseSaveObject
{
public:
	struct FString                                     m_ActorType;                                              // 0x004C(0x000C) (NeedCtorLink)
	unsigned long                                      m_bPowertrainEnabled : 1;                                 // 0x0058(0x0004)
	unsigned long                                      m_bVehicleFunctionEnabled : 1;                            // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPlayerVehicleSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioPropertyEditorPropertyNode
// 0x001C (0x00A4 - 0x0088)
class UBioPropertyEditorPropertyNode : public UBioPropertyEditorBaseNode
{
public:
	class UObject*                                     obj;                                                      // 0x0088(0x0004)
	struct FString                                     m_sValueString;                                           // 0x008C(0x000C) (NeedCtorLink)
	struct FString                                     m_sDeliminator;                                           // 0x0098(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorPropertyNode");
		return ptr;
	}


	void DecrementCurrentSelection();
	void IncrementCurrentSelection();
	void RightTriggerAction();
	void LeftTriggerAction();
	struct FString getDisplayText(bool selectable);
	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorArrayNode
// 0x0004 (0x00A8 - 0x00A4)
class UBioPropertyEditorArrayNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   m_Property;                                               // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorArrayNode");
		return ptr;
	}


	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorBoneNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorBoneNode : public UBioPropertyEditorBaseNode
{
public:
	class USkeletalMesh*                               m_oSkeletalMesh;                                          // 0x0088(0x0004)
	int                                                m_iLodIndex;                                              // 0x008C(0x0004)
	int                                                m_iBoneIndex;                                             // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorBoneNode");
		return ptr;
	}


	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorEditableNode
// 0x0024 (0x00C8 - 0x00A4)
class UBioPropertyEditorEditableNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                                     // 0x00A4(0x0004)
	int                                                integerVal;                                               // 0x00A8(0x0004)
	float                                              floatVal;                                                 // 0x00AC(0x0004)
	unsigned char                                      byteVal;                                                  // 0x00B0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	unsigned long                                      boolVal : 1;                                              // 0x00B4(0x0004)
	unsigned long                                      alreadyEdited : 1;                                        // 0x00B4(0x0004)
	int                                                m_iOffset;                                                // 0x00B8(0x0004)
	int                                                m_iIndex;                                                 // 0x00BC(0x0004)
	class UProperty*                                   m_arrayProperty;                                          // 0x00C0(0x0004)
	float                                              StepSize;                                                 // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorEditableNode");
		return ptr;
	}


	void AcceptNewValue();
	void DoChange(float Delta);
	void RightTriggerAction();
	void LeftTriggerAction();
	void DecrementCurrentSelection();
	void IncrementCurrentSelection();
	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorEditNode
// 0x0010 (0x00B4 - 0x00A4)
class UBioPropertyEditorEditNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                                     // 0x00A4(0x0004)
	float                                              StepSize;                                                 // 0x00A8(0x0004)
	float                                              floatVal;                                                 // 0x00AC(0x0004)
	int                                                otherVal;                                                 // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorEditNode");
		return ptr;
	}


	struct FString getDisplayText(bool selectable);
	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorLevelNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorLevelNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     m_sCommand;                                               // 0x0088(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorLevelNode");
		return ptr;
	}


	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorLoadNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorLoadNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     Filename;                                                 // 0x0088(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorLoadNode");
		return ptr;
	}


	void DecrementCurrentSelection();
	void IncrementCurrentSelection();
	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorReadOnlyNode
// 0x000C (0x00B0 - 0x00A4)
class UBioPropertyEditorReadOnlyNode : public UBioPropertyEditorPropertyNode
{
public:
	struct FString                                     sDisplay;                                                 // 0x00A4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorReadOnlyNode");
		return ptr;
	}


	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorSaveNode
// 0x000C (0x0094 - 0x0088)
class UBioPropertyEditorSaveNode : public UBioPropertyEditorBaseNode
{
public:
	struct FString                                     Filename;                                                 // 0x0088(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorSaveNode");
		return ptr;
	}


	void DecrementCurrentSelection();
	void IncrementCurrentSelection();
	bool SelectionAction();
};


// Class BIOC_Base.BioPropertyEditorVolatileNode
// 0x0000 (0x0088 - 0x0088)
class UBioPropertyEditorVolatileNode : public UBioPropertyEditorBaseNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioPropertyEditorVolatileNode");
		return ptr;
	}


	bool SelectionAction();
};


// Class BIOC_Base.BioRandomActivity
// 0x0014 (0x0074 - 0x0060)
class UBioRandomActivity : public UBioBaseActivity
{
public:
	float                                              m_fBaseTime;                                              // 0x0060(0x0004) (Edit)
	float                                              m_fVarianceTime;                                          // 0x0064(0x0004) (Edit)
	TArray<float>                                      m_afTwitchProbabilitys;                                   // 0x0068(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioRandomActivity");
		return ptr;
	}

};


// Class BIOC_Base.BioVehicleBehaviorSaveObject
// 0x000C (0x0084 - 0x0078)
class UBioVehicleBehaviorSaveObject : public UBioEpicPawnBehaviorSaveObject
{
public:
	struct FString                                     m_ActorType;                                              // 0x0078(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleBehaviorSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioSaveTriggerVolume
// 0x000C (0x0238 - 0x022C)
class ABioSaveTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      DisableSave : 1;                                          // 0x022C(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0230(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSaveTriggerVolume.DisableSaveReason
	class AActor*                                      PlayerSpawnLocation;                                      // 0x0234(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSaveTriggerVolume");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class BIOC_Base.BioSeqAct_AddSquadToPerception
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_AddSquadToPerception : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                                    // 0x00EC(0x0004) (Edit)
	class AActor*                                      oPerceivedSquad;                                          // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AddSquadToPerception");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AddToParty
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_AddToParty : public USequenceAction
{
public:
	unsigned long                                      m_bShouldFollowLeader : 1;                                // 0x00EC(0x0004) (Edit)
	unsigned long                                      m_bJoinDefaultCommoner : 1;                               // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AddToParty");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AdjustStability
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_AdjustStability : public USequenceAction
{
public:
	float                                              m_fAmount;                                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AdjustStability");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AreaTransition
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_AreaTransition : public USequenceAction
{
public:
	struct FName                                       AreaName;                                                 // 0x00EC(0x0008) (Edit)
	struct FName                                       startPoint;                                               // 0x00F4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AreaTransition");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ArmorTest
// 0x016C (0x0258 - 0x00EC)
class UBioSeqAct_ArmorTest : public USequenceAction
{
public:
	int                                                Index;                                                    // 0x00EC(0x0004)
	struct FString                                     ArmorOut;                                                 // 0x00F0(0x000C) (NeedCtorLink)
	TArray<float>                                      D;                                                        // 0x00FC(0x000C) (NeedCtorLink)
	struct FName                                       TypeLMH[0x3];                                             // 0x0108(0x0008)
	struct FString                                     Armors[0x1A];                                             // 0x0120(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ArmorTest");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AttachCrustEffect
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_AttachCrustEffect : public USequenceAction
{
public:
	class UBioVFXTemplate*                             oEffect;                                                  // 0x00EC(0x0004) (Edit)
	float                                              fLifeTime;                                                // 0x00F0(0x0004)
	class AActor*                                      Target;                                                   // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AttachCrustEffect");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AttachVFX
// 0x0028 (0x0114 - 0x00EC)
class UBioSeqAct_AttachVFX : public USequenceAction
{
public:
	TArray<class AActor*>                              m_oAttachTo;                                              // 0x00EC(0x000C) (Edit, NeedCtorLink)
	struct FName                                       m_nmSocket;                                               // 0x00F8(0x0008) (Edit)
	struct FVector                                     m_vOffset;                                                // 0x0100(0x000C) (Edit)
	class UParticleSystem*                             m_oParticles;                                             // 0x010C(0x0004) (Edit)
	unsigned long                                      m_bActivateOnAttach : 1;                                  // 0x0110(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AttachVFX");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AttachVisualEffect
// 0x0024 (0x0110 - 0x00EC)
class UBioSeqAct_AttachVisualEffect : public USequenceAction
{
public:
	TArray<class AActor*>                              m_oAttachTo;                                              // 0x00EC(0x000C) (Edit, NeedCtorLink)
	struct FName                                       m_nmSocketOrBone;                                         // 0x00F8(0x0008) (Edit)
	struct FVector                                     m_vOffset;                                                // 0x0100(0x000C) (Edit)
	class UBioVFXTemplate*                             m_oEffect;                                                // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AttachVisualEffect");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_AutoSave
// 0x0004 (0x0104 - 0x0100)
class UBioSeqAct_AutoSave : public UBioSequenceLatentAction
{
public:
	unsigned long                                      bShowSaveGui : 1;                                         // 0x0100(0x0004) (Edit)
	unsigned long                                      bAbort : 1;                                               // 0x0100(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AutoSave");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_AwardAchievement
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_AwardAchievement : public USequenceAction
{
public:
	int                                                m_nAchievementId;                                         // 0x00EC(0x0004) (Edit)
	int                                                Value;                                                    // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_AwardAchievement");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_BioToggleCinematicMode
// 0x0010 (0x0100 - 0x00F0)
class UBioSeqAct_BioToggleCinematicMode : public USeqAct_ToggleCinematicMode
{
public:
	unsigned long                                      bCinematicInputMode : 1;                                  // 0x00F0(0x0004) (Edit)
	unsigned long                                      bDisableCinematicSkip : 1;                                // 0x00F0(0x0004) (Edit)
	struct FString                                     sSkipEvent;                                               // 0x00F4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_BioToggleCinematicMode");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_BlackScreen
// 0x0001 (0x0101 - 0x0100)
class UBioSeqAct_BlackScreen : public UBioSequenceLatentAction
{
public:
	TEnumAsByte<EBlackScreenActionSet>                 m_eBlackScreenAction;                                     // 0x0100(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_BlackScreen");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_BreakFromCover
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_BreakFromCover : public USequenceAction
{
public:
	class AActor*                                      m_oPawn;                                                  // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_BreakFromCover");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_CancelTutorial
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_CancelTutorial : public USequenceAction
{
public:
	struct FName                                       Tutorial;                                                 // 0x00EC(0x0008) (Edit)
	unsigned long                                      bFadeOut : 1;                                             // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_CancelTutorial");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_CauseDamage
// 0x0014 (0x0100 - 0x00EC)
class UBioSeqAct_CauseDamage : public USequenceAction
{
public:
	class UBioDamageType*                              m_pDamage;                                                // 0x00EC(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	float                                              m_fDamageAmountAsPercentOfMaxHealth;                      // 0x00F0(0x0004) (Edit)
	float                                              m_fMomentum;                                              // 0x00F4(0x0004) (Edit)
	class AActor*                                      m_pInstigator;                                            // 0x00F8(0x0004)
	unsigned long                                      m_bForceCinematicDamage : 1;                              // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_CauseDamage");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ChangeAI
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_ChangeAI : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                                    // 0x00EC(0x0004) (Edit)
	class UClass*                                      ControllerClass;                                          // 0x00F0(0x0004) (Edit)
	unsigned long                                      SaveOldAIController : 1;                                  // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ChangeAI");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ClearAllActions
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ClearAllActions : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ClearAllActions");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ClearNewCharacterEffects
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ClearNewCharacterEffects : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ClearNewCharacterEffects");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ClearSavedMap
// 0x0018 (0x0104 - 0x00EC)
class UBioSeqAct_ClearSavedMap : public USequenceAction
{
public:
	struct FString                                     m_sMapToClear;                                            // 0x00EC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     m_sChunkToClear;                                          // 0x00F8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ClearSavedMap");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ClearSomeActions_Queue
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ClearSomeActions_Queue : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ClearSomeActions_Queue");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ClearSomeActions_State
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ClearSomeActions_State : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ClearSomeActions_State");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_Cover_AddCoverFrom
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_Cover_AddCoverFrom : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                           // 0x00EC(0x0004) (Edit)
	class AActor*                                      m_oAdd;                                                   // 0x00F0(0x0004) (Edit)
	int                                                m_nRank;                                                  // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Cover_AddCoverFrom");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_Cover_GetCoveringRank
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_Cover_GetCoveringRank : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                           // 0x00EC(0x0004) (Edit)
	class AActor*                                      m_oRankOf;                                                // 0x00F0(0x0004) (Edit)
	int                                                m_nRank;                                                  // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Cover_GetCoveringRank");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_Cover_RemoveCoverFrom
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_Cover_RemoveCoverFrom : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                           // 0x00EC(0x0004) (Edit)
	class AActor*                                      m_oRemove;                                                // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Cover_RemoveCoverFrom");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_Cover_SetCoveringRank
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_Cover_SetCoveringRank : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                           // 0x00EC(0x0004) (Edit)
	class AActor*                                      m_oCoveringFrom;                                          // 0x00F0(0x0004) (Edit)
	int                                                m_nRank;                                                  // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Cover_SetCoveringRank");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_Crouch
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_Crouch : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                                 // 0x00EC(0x0004) (Edit)
	unsigned long                                      m_bCrouch : 1;                                            // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_Crouch");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_CustomizeStageCameras
// 0x001C (0x0108 - 0x00EC)
class UBioSeqAct_CustomizeStageCameras : public USequenceAction
{
public:
	float                                              m_fCameraHeightDelta;                                     // 0x00EC(0x0004) (Edit)
	float                                              m_fCameraPitchDelta;                                      // 0x00F0(0x0004) (Edit)
	float                                              m_fCameraYawDelta;                                        // 0x00F4(0x0004) (Edit)
	float                                              m_fCameraFOVDelta;                                        // 0x00F8(0x0004) (Edit)
	float                                              m_fCameraNearPlaneDelta;                                  // 0x00FC(0x0004) (Edit)
	float                                              m_fCameraFocusInnerRadiusDelta;                           // 0x0100(0x0004) (Edit)
	float                                              m_fCameraFocusDistanceDelta;                              // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_CustomizeStageCameras");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DoActionInRadius
// 0x0020 (0x010C - 0x00EC)
class UBioSeqAct_DoActionInRadius : public USequenceAction
{
public:
	class UClass*                                      ClassFilter;                                              // 0x00EC(0x0004) (Edit)
	class AActor*                                      SourceActor;                                              // 0x00F0(0x0004) (Edit)
	float                                              Radius;                                                   // 0x00F4(0x0004) (Edit)
	TArray<class AActor*>                              m_aActorList;                                             // 0x00F8(0x000C) (Transient, NeedCtorLink)
	int                                                m_nIndex;                                                 // 0x0104(0x0004)
	class AActor*                                      CurrentObject;                                            // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DoActionInRadius");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DoActionInVolume
// 0x001C (0x0108 - 0x00EC)
class UBioSeqAct_DoActionInVolume : public USequenceAction
{
public:
	class UClass*                                      ClassFilter;                                              // 0x00EC(0x0004) (Edit)
	class AActor*                                      Volume;                                                   // 0x00F0(0x0004) (Edit)
	int                                                m_nIndex;                                                 // 0x00F4(0x0004)
	TArray<class AActor*>                              m_aActorList;                                             // 0x00F8(0x000C) (Transient, NeedCtorLink)
	class AActor*                                      CurrentObject;                                            // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DoActionInVolume");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUIClear
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DUIClear : public USequenceAction
{
public:
	unsigned long                                      bModal : 1;                                               // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUIClear");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUIFlashLaserCenter
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DUIFlashLaserCenter : public USequenceAction
{
public:
	unsigned long                                      bSuccess : 1;                                             // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUIFlashLaserCenter");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUIIsActive
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DUIIsActive : public USequenceAction
{
public:
	unsigned long                                      bModal : 1;                                               // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUIIsActive");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetBarFillDirection
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DUISetBarFillDirection : public USequenceAction
{
public:
	unsigned long                                      bModalBar : 1;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      bLeftToRight : 1;                                         // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetBarFillDirection");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetBarFillPercent
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_DUISetBarFillPercent : public USequenceAction
{
public:
	unsigned long                                      bModalBar : 1;                                            // 0x00EC(0x0004) (Edit)
	int                                                nPercent;                                                 // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetBarFillPercent");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetBarMarkers
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_DUISetBarMarkers : public USequenceAction
{
public:
	unsigned long                                      bModalBar : 1;                                            // 0x00EC(0x0004) (Edit)
	int                                                nMarker1;                                                 // 0x00F0(0x0004) (Edit)
	int                                                nMarker2;                                                 // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetBarMarkers");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetCounterValue
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_DUISetCounterValue : public USequenceAction
{
public:
	unsigned long                                      bModalCounter : 1;                                        // 0x00EC(0x0004) (Edit)
	int                                                nValue;                                                   // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetCounterValue");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetElementColor
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_DUISetElementColor : public USequenceAction
{
public:
	TEnumAsByte<EBioDUIElements>                       Element;                                                  // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	struct FColor                                      oColor;                                                   // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetElementColor");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetElementPulsing
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_DUISetElementPulsing : public USequenceAction
{
public:
	TEnumAsByte<EBioDUIElements>                       Element;                                                  // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	unsigned long                                      bPulsing : 1;                                             // 0x00F0(0x0004) (Edit)
	float                                              fMinAlpha;                                                // 0x00F4(0x0004) (Edit)
	float                                              fCycleTime;                                               // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetElementPulsing");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetElementVisible
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_DUISetElementVisible : public USequenceAction
{
public:
	TEnumAsByte<EBioDUIElements>                       Element;                                                  // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	unsigned long                                      bVisible : 1;                                             // 0x00F0(0x0004) (Edit)
	float                                              fFadeTime;                                                // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetElementVisible");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetLaserCircle
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DUISetLaserCircle : public USequenceAction
{
public:
	int                                                nCircle;                                                  // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetLaserCircle");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetLaserLayout
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DUISetLaserLayout : public USequenceAction
{
public:
	unsigned long                                      bShow : 1;                                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetLaserLayout");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetQuasarLayout
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_DUISetQuasarLayout : public USequenceAction
{
public:
	unsigned long                                      bShow : 1;                                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetQuasarLayout");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_DUISetTextStringRef
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_DUISetTextStringRef : public USequenceAction
{
public:
	TEnumAsByte<EBioDUIElements>                       Element;                                                  // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x4];                                       // 0x00ED(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_DUISetTextStringRef.srText

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_DUISetTextStringRef");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_EndGame
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_EndGame : public USequenceAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00EC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_EndGame.srEndGameMessage

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_EndGame");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_FactionRelationShip
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_FactionRelationShip : public USequenceAction
{
public:
	class UObject*                                     m_oSquadA;                                                // 0x00EC(0x0004) (Edit)
	class UObject*                                     m_oSquadB;                                                // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_FactionRelationShip");
		return ptr;
	}


	void Activated();
	class ABioBaseSquad* GetSquadFrom(class UObject* oInObj);
};


// Class BIOC_Base.BioSeqAct_FindCover
// 0x0028 (0x0114 - 0x00EC)
class UBioSeqAct_FindCover : public USequenceAction
{
public:
	class AActor*                                      m_oSeeksCover;                                            // 0x00EC(0x0004) (Edit)
	class AActor*                                      m_oNear;                                                  // 0x00F0(0x0004) (Edit)
	float                                              m_fMaxRange;                                              // 0x00F4(0x0004) (Edit)
	TArray<class AActor*>                              m_aoCoverFrom;                                            // 0x00F8(0x000C) (Edit, NeedCtorLink)
	class AActor*                                      m_oNoCoverFrom;                                           // 0x0104(0x0004) (Edit)
	class AActor*                                      m_oCover;                                                 // 0x0108(0x0004) (Edit)
	int                                                m_nSlot;                                                  // 0x010C(0x0004) (Edit)
	unsigned long                                      bSquadCoverOnly : 1;                                      // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_FindCover");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ForceResourceLoad
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_ForceResourceLoad : public USequenceAction
{
public:
	TArray<class UObject*>                             ResourceArray;                                            // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ForceResourceLoad");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetClass
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_GetClass : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                                  // 0x00EC(0x0004) (Edit)
	int                                                m_eClass;                                                 // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetClass");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetConnectedObjects
// 0x001C (0x0108 - 0x00EC)
class UBioSeqAct_GetConnectedObjects : public USequenceAction
{
public:
	class ABioArtPlaceable*                            oArtPlaceable;                                            // 0x00EC(0x0004) (Edit)
	struct FString                                     sObjectA;                                                 // 0x00F0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     sObjectB;                                                 // 0x00FC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetConnectedObjects");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetEquippedWeapon
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_GetEquippedWeapon : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                                    // 0x00EC(0x0004) (Edit)
	int                                                nWeapon;                                                  // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetEquippedWeapon");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetGamerProfileOption
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_GetGamerProfileOption : public USequenceAction
{
public:
	TEnumAsByte<EOption>                               ProfileOption;                                            // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	int                                                OptionValue;                                              // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetGamerProfileOption");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetPropertyArtPlaceable
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_GetPropertyArtPlaceable : public UBioSeqAct_GetProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetPropertyArtPlaceable");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_GetSquad
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_GetSquad : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                                    // 0x00EC(0x0004) (Edit)
	class AActor*                                      oSquad;                                                   // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetSquad");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetTalentRank
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_GetTalentRank : public USequenceAction
{
public:
	int                                                m_TalentID;                                               // 0x00EC(0x0004)
	class ABioPawn*                                    m_targetPawn;                                             // 0x00F0(0x0004)
	int                                                m_resultRank;                                             // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetTalentRank");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GetTutorialViewed
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_GetTutorialViewed : public USequenceAction
{
public:
	struct FName                                       Tutorial;                                                 // 0x00EC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GetTutorialViewed");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GrantBonusTalent
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_GrantBonusTalent : public USequenceAction
{
public:
	int                                                m_bonusID;                                                // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GrantBonusTalent");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GrantGenericXP
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_GrantGenericXP : public USequenceAction
{
public:
	int                                                GrantQuantity;                                            // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GrantGenericXP");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_GrantScaledXP
// 0x0001 (0x00ED - 0x00EC)
class UBioSeqAct_GrantScaledXP : public USequenceAction
{
public:
	TEnumAsByte<EXPCurveSet>                           EXPCurve;                                                 // 0x00EC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_GrantScaledXP");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_HUDDisplayState
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_HUDDisplayState : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_HUDDisplayState");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_IncreaseTalentMaxRank
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_IncreaseTalentMaxRank : public USequenceAction
{
public:
	int                                                m_TalentID;                                               // 0x00EC(0x0004)
	int                                                m_maxRankIncrement;                                       // 0x00F0(0x0004)
	int                                                m_rankIncrement;                                          // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_IncreaseTalentMaxRank");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_InterruptAmbientConversation
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_InterruptAmbientConversation : public USequenceAction
{
public:
	class UBioConversation*                            IgnoreConversation;                                       // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_InterruptAmbientConversation");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_IsActiveConversation
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_IsActiveConversation : public USequenceAction
{
public:
	class UBioConversation*                            Conversation;                                             // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_IsActiveConversation");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_IsVehicle
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_IsVehicle : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                                  // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_IsVehicle");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_LootHenchman
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_LootHenchman : public USequenceAction
{
public:
	struct FName                                       m_henchmanTag;                                            // 0x00EC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_LootHenchman");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_MiniGame
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_MiniGame : public USequenceAction
{
public:
	int                                                m_nMiniGameID;                                            // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EInputModes>                           m_nStoredInputMode;                                       // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned long                                      m_bDisableDefaultEsc : 1;                                 // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_MiniGame");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ModifyPropertyArtPlaceable
// 0x0000 (0x0130 - 0x0130)
class UBioSeqAct_ModifyPropertyArtPlaceable : public UBioSeqAct_ModifyProperty
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ModifyPropertyArtPlaceable");
		return ptr;
	}

};


// Class BIOC_Base.BioSeqAct_ModifyPropertyHeightfog
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_ModifyPropertyHeightfog : public USequenceAction
{
public:
	class AHeightFog*                                  oFog;                                                     // 0x00EC(0x0004) (Edit)
	float                                              fDensity;                                                 // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ModifyPropertyHeightfog");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_MovieXMV
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_MovieXMV : public USequenceAction
{
public:
	struct FString                                     m_sMovieXMV;                                              // 0x00EC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_MovieXMV");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_NearClipPlane
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_NearClipPlane : public USequenceAction
{
public:
	float                                              fValue;                                                   // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_NearClipPlane");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_PopupLootGui
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_PopupLootGui : public USequenceAction
{
public:
	int                                                m_nTreasureID;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      m_bSupressLootGui : 1;                                    // 0x00F0(0x0004) (Edit)
	int                                                m_nOverrideLevel;                                         // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_PopupLootGui");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_RestoreAI
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_RestoreAI : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                                    // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_RestoreAI");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ResumeWalking
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ResumeWalking : public USequenceAction
{
public:
	class ABioPawn*                                    m_oPawn;                                                  // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ResumeWalking");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ResurrectHenchman
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ResurrectHenchman : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ResurrectHenchman");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SarenUsePower
// 0x001C (0x0108 - 0x00EC)
class UBioSeqAct_SarenUsePower : public USequenceAction
{
public:
	class ABioPawn*                                    oAttacker;                                                // 0x00EC(0x0004) (Edit)
	class AActor*                                      oTarget;                                                  // 0x00F0(0x0004) (Edit)
	struct FVector                                     vTarget;                                                  // 0x00F4(0x000C) (Edit)
	struct FName                                       nmPower;                                                  // 0x0100(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SarenUsePower");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SaveCharacter
// 0x0000 (0x0104 - 0x0104)
class UBioSeqAct_SaveCharacter : public UBioSeqAct_AutoSave
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SaveCharacter");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetActionState
// 0x0005 (0x00F1 - 0x00EC)
class UBioSeqAct_SetActionState : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                                 // 0x00EC(0x0004) (Edit)
	TEnumAsByte<EActionStateVariable>                  m_eActionState;                                           // 0x00F0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetActionState");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetActive
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_SetActive : public USequenceAction
{
public:
	unsigned long                                      bSetActive : 1;                                           // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetActive");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetBase
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_SetBase : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetBase");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetBusyState
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_SetBusyState : public USequenceAction
{
public:
	unsigned long                                      bBusy : 1;                                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetBusyState");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetCanWalkOffLedges
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetCanWalkOffLedges : public USequenceAction
{
public:
	unsigned long                                      m_bCanWalkOffLedges : 1;                                  // 0x00EC(0x0004)
	class APawn*                                       m_oPawn;                                                  // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetCanWalkOffLedges");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetClassification
// 0x0001 (0x00ED - 0x00EC)
class UBioSeqAct_SetClassification : public USequenceAction
{
public:
	TEnumAsByte<EBioPawnClassification>                Classification;                                           // 0x00EC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetClassification");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetGamerProfileOption
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetGamerProfileOption : public USequenceAction
{
public:
	TEnumAsByte<EOption>                               ProfileOption;                                            // 0x00EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	int                                                OptionValue;                                              // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetGamerProfileOption");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetInputTrap
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_SetInputTrap : public USequenceAction
{
public:
	unsigned long                                      m_bSetTrap : 1;                                           // 0x00EC(0x0004) (Edit)
	struct FString                                     m_Key;                                                    // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetInputTrap");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetMaterialParameter
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetMaterialParameter : public USequenceAction
{
public:
	struct FName                                       m_nmMaterialParameter;                                    // 0x00EC(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetMaterialParameter");
		return ptr;
	}


	void Activated();
	void Set(class ABioPawn* pPawn, const struct FName& nmMaterialParameter);
};


// Class BIOC_Base.BioSeqAct_SetMaterialParameterColor
// 0x0004 (0x00F8 - 0x00F4)
class UBioSeqAct_SetMaterialParameterColor : public UBioSeqAct_SetMaterialParameter
{
public:
	struct FColor                                      m_clr;                                                    // 0x00F4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetMaterialParameterColor");
		return ptr;
	}


	void Set(class ABioPawn* pPawn, const struct FName& nmMaterialParameter);
};


// Class BIOC_Base.BioSeqAct_SetMaterialParameterScalar
// 0x0004 (0x00F8 - 0x00F4)
class UBioSeqAct_SetMaterialParameterScalar : public UBioSeqAct_SetMaterialParameter
{
public:
	float                                              m_fScalar;                                                // 0x00F4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetMaterialParameterScalar");
		return ptr;
	}


	void Set(class ABioPawn* pPawn, const struct FName& nmMaterialParameter);
};


// Class BIOC_Base.BioSeqAct_SetOverrideTipText
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_SetOverrideTipText : public USequenceAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00EC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_SetOverrideTipText.m_Override

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetOverrideTipText");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetPlayerControlling
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_SetPlayerControlling : public USequenceAction
{
public:
	class ABioPlayerController*                        m_oPlayer;                                                // 0x00EC(0x0004) (Edit)
	struct FName                                       m_nmNewPawnToControll;                                    // 0x00F0(0x0008) (Edit)
	class APawn*                                       m_oOldPawn;                                               // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetPlayerControlling");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetPowerCooldown
// 0x0010 (0x00FC - 0x00EC)
class UBioSeqAct_SetPowerCooldown : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                                  // 0x00EC(0x0004) (Edit)
	struct FName                                       m_nmPower;                                                // 0x00F0(0x0008) (Edit)
	float                                              m_fCooldownTimeRemaining;                                 // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetPowerCooldown");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetRadarDisplay
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetRadarDisplay : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                                 // 0x00EC(0x0004) (Edit)
	unsigned long                                      m_bDisabled : 1;                                          // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetRadarDisplay");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetSquadFaction
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetSquadFaction : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                                 // 0x00EC(0x0004) (Edit)
	class UClass*                                      NewSquadFaction;                                          // 0x00F0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetSquadFaction");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetStability
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_SetStability : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                                 // 0x00EC(0x0004) (Edit)
	float                                              m_fStab;                                                  // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetStability");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SetStreamAllTextToScaleForm
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_SetStreamAllTextToScaleForm : public USequenceAction
{
public:
	unsigned long                                      bTrue : 1;                                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetStreamAllTextToScaleForm");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioTimerList
// 0x0018 (0x0054 - 0x003C)
class UBioTimerList : public UObject
{
public:
	TArray<struct FBioTimer>                           lstTimers;                                                // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __BioTimerDelegate__Delegate;                             // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTimerList");
		return ptr;
	}


	void Tick(float fDeltaT);
	bool KillTimer(const struct FString& i_sTimerName);
	void AddTimer(const struct FScriptDelegate& TimerDelegate, class UObject* Params, float fTime, const struct FString& i_sTimerName);
	void BioTimerDelegate(class UObject* Params);
};


// Class BIOC_Base.BioSeqAct_SetTutorialViewed
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_SetTutorialViewed : public USequenceAction
{
public:
	struct FName                                       Tutorial;                                                 // 0x00EC(0x0008) (Edit)
	unsigned long                                      bMarkAsNotViewed : 1;                                     // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SetTutorialViewed");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShieldGetAttributes
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_ShieldGetAttributes : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShieldGetAttributes");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSFHandler_IntroText
// 0x0004 (0x0060 - 0x005C)
class UBioSFHandler_IntroText : public UBioSFHandler
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_IntroText.srText

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_IntroText");
		return ptr;
	}


	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
};


// Class BIOC_Base.BioSeqAct_ShowInventory
// 0x0004 (0x0104 - 0x0100)
class UBioSeqAct_ShowInventory : public UBioSequenceLatentAction
{
public:
	class ABioPawn*                                    oHenchman;                                                // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowInventory");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowLatentTutorial
// 0x000C (0x010C - 0x0100)
class UBioSeqAct_ShowLatentTutorial : public UBioSequenceLatentAction
{
public:
	struct FName                                       Tutorial;                                                 // 0x0100(0x0008) (Edit)
	unsigned long                                      bSetViewed : 1;                                           // 0x0108(0x0004) (Edit)
	unsigned long                                      bDoNotOverride : 1;                                       // 0x0108(0x0004) (Edit)
	unsigned long                                      bIgnoreDesignSuppression : 1;                             // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowLatentTutorial");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowMessage
// 0x0020 (0x0120 - 0x0100)
class UBioSeqAct_ShowMessage : public UBioSequenceLatentAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0100(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_ShowMessage.srText
	unsigned char                                      UnknownData01[0x4];                                       // 0x0104(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_ShowMessage.srAButton
	unsigned char                                      UnknownData02[0x4];                                       // 0x0108(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_ShowMessage.srBButton
	float                                              fDisplayTime;                                             // 0x010C(0x0004) (Edit)
	TEnumAsByte<EBioMessageBoxIconSets>                nIconSet;                                                 // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	int                                                nIconIndex;                                               // 0x0114(0x0004) (Edit)
	unsigned long                                      bNoFade : 1;                                              // 0x0118(0x0004) (Edit)
	unsigned long                                      m_bFinished : 1;                                          // 0x0118(0x0004)
	unsigned long                                      m_bAPressed : 1;                                          // 0x0118(0x0004)
	unsigned long                                      m_bWasPaused : 1;                                         // 0x0118(0x0004)
	float                                              m_fRemainingDisplayTime;                                  // 0x011C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowMessage");
		return ptr;
	}


	void MessageBoxUpdate(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox);
	void MessageInputPressed(bool bAPressed, int nContext);
	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_ShowMouse
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ShowMouse : public USequenceAction
{
public:
	unsigned long                                      bMouseVisible : 1;                                        // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowMouse");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSFHandler_Splash
// 0x0014 (0x0070 - 0x005C)
class UBioSFHandler_Splash : public UBioSFHandler
{
public:
	float                                              fAttractModeTimeout;                                      // 0x005C(0x0004)
	float                                              fLegalTimeout;                                            // 0x0060(0x0004)
	float                                              fAttractModeDelay;                                        // 0x0064(0x0004) (Config)
	float                                              fShowLegalTime;                                           // 0x0068(0x0004) (Config)
	unsigned long                                      bStartPressed : 1;                                        // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Splash");
		return ptr;
	}


	void OnPanelRemoved();
	void OnPanelAdded();
	void StartTimeout(bool bShowLegal);
	void Update(float fDeltaT);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void PressStart();
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
};


// Class BIOC_Base.BioSeqAct_ShowTutorial
// 0x000C (0x00F8 - 0x00EC)
class UBioSeqAct_ShowTutorial : public USequenceAction
{
public:
	struct FName                                       Tutorial;                                                 // 0x00EC(0x0008) (Edit)
	unsigned long                                      bSetViewed : 1;                                           // 0x00F4(0x0004) (Edit)
	unsigned long                                      m_bSuccess : 1;                                           // 0x00F4(0x0004)
	unsigned long                                      m_bInitiated : 1;                                         // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ShowTutorial");
		return ptr;
	}


	bool UpdateOp(float fDeltaT);
	void Activated();
};


// Class BIOC_Base.BioSeqAct_SquadStopHoldingPosition
// 0x0000 (0x00EC - 0x00EC)
class UBioSeqAct_SquadStopHoldingPosition : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SquadStopHoldingPosition");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_SwitchWeighted
// 0x0050 (0x013C - 0x00EC)
class UBioSeqAct_SwitchWeighted : public USequenceAction
{
public:
	float                                              fWeight0;                                                 // 0x00EC(0x0004) (Edit)
	float                                              fWeight1;                                                 // 0x00F0(0x0004) (Edit)
	float                                              fWeight2;                                                 // 0x00F4(0x0004) (Edit)
	float                                              fWeight3;                                                 // 0x00F8(0x0004) (Edit)
	float                                              fWeight4;                                                 // 0x00FC(0x0004) (Edit)
	float                                              fWeight5;                                                 // 0x0100(0x0004) (Edit)
	float                                              fWeight6;                                                 // 0x0104(0x0004) (Edit)
	float                                              fWeight7;                                                 // 0x0108(0x0004) (Edit)
	float                                              fWeight8;                                                 // 0x010C(0x0004) (Edit)
	float                                              fWeight9;                                                 // 0x0110(0x0004) (Edit)
	float                                              fWeight[0xA];                                             // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_SwitchWeighted");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_TempLookAt
// 0x0020 (0x010C - 0x00EC)
class UBioSeqAct_TempLookAt : public USequenceAction
{
public:
	class ABioPawn*                                    oWho;                                                     // 0x00EC(0x0004) (Edit)
	class AActor*                                      oFocus;                                                   // 0x00F0(0x0004) (Edit)
	struct FVector                                     vPoint;                                                   // 0x00F4(0x000C) (Edit)
	struct FVector                                     vRelitivePoint;                                           // 0x0100(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_TempLookAt");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ToggleCombat
// 0x0004 (0x00F0 - 0x00EC)
class UBioSeqAct_ToggleCombat : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                            // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ToggleCombat");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_ToggleSave
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_ToggleSave : public USequenceAction
{
public:
	unsigned long                                      bEnable : 1;                                              // 0x00EC(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00F0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSeqAct_ToggleSave.srReason

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_ToggleSave");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSeqAct_UpdateTacticianAchievement
// 0x0008 (0x00F4 - 0x00EC)
class UBioSeqAct_UpdateTacticianAchievement : public USequenceAction
{
public:
	float                                              m_fDamageRatioRequired;                                   // 0x00EC(0x0004) (Edit)
	int                                                m_nAchievementId;                                         // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSeqAct_UpdateTacticianAchievement");
		return ptr;
	}


	void Activated();
};


// Class BIOC_Base.BioSFHandler_Achievement
// 0x0018 (0x0074 - 0x005C)
class UBioSFHandler_Achievement : public UBioSFHandler
{
public:
	int                                                m_nSelectedItemIndex;                                     // 0x005C(0x0004)
	int                                                m_nShiftItemIndex;                                        // 0x0060(0x0004)
	TArray<struct FAchievementInfo>                    m_lstAchievements;                                        // 0x0064(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0070(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Achievement.srEmpty

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Achievement");
		return ptr;
	}


	void PopulateAchievementItemListEntry(int nDisplayIndex);
	void PopulateAchievementItemList();
	void SetGlobalVars();
	void HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments);
};


// Class BIOC_Base.BioSFHandler_BlackScreen
// 0x0008 (0x0064 - 0x005C)
class UBioSFHandler_BlackScreen : public UBioSFHandler
{
public:
	TEnumAsByte<EBlackScreenFadeModes>                 m_eFadeMode;                                              // 0x005C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	unsigned long                                      m_bFadeInProgress : 1;                                    // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_BlackScreen");
		return ptr;
	}


	void OnPanelAdded();
	void Hide(bool bWithFade);
	void Show(bool bWithFade);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
};


// Class BIOC_Base.BioSFHandler_XMods
// 0x00E4 (0x0140 - 0x005C)
class UBioSFHandler_XMods : public UBioSFHandler
{
public:
	class UBioInventoryGuiInterface*                   m_oInvInterface;                                          // 0x005C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_nLastEquippedIndex;                                     // 0x0060(0x0004) (ExportObject, EditInline)
	TEnumAsByte<EGuiEquipSlots>                        m_eCurrentItemSlot;                                       // 0x0064(0x0001) (ExportObject, EditInline)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	struct FItemInfo                                   m_stEquippedItemInfo;                                     // 0x0068(0x0090) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_nCurrentXModSlot;                                       // 0x00F8(0x0004) (ExportObject, EditInline)
	int                                                m_nShiftXModIndex;                                        // 0x00FC(0x0004) (ExportObject, EditInline)
	class UBioSFHandler_Inventory*                     m_oInvGuiHandler;                                         // 0x0100(0x0004)
	int                                                m_nBaseItemMaxSlots;                                      // 0x0104(0x0004) (ExportObject, EditInline)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0108(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_XMods.srEmpty
	unsigned char                                      UnknownData02[0x4];                                       // 0x010C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_XMods.srXModsTitle
	unsigned char                                      UnknownData03[0xC];                                       // 0x0110(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioSFHandler_XMods.lstXModSlotTypeTitles
	unsigned char                                      UnknownData04[0x4];                                       // 0x011C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_XMods.srInherent
	unsigned char                                      UnknownData05[0x4];                                       // 0x0120(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_XMods.srSalvageXModMsg
	unsigned char                                      UnknownData06[0x4];                                       // 0x0124(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_XMods.srSalvageXModConfirm
	unsigned char                                      UnknownData07[0x4];                                       // 0x0128(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_XMods.srSalvageXModCancel
	int                                                m_nEmptyAmmoSlotIcon;                                     // 0x012C(0x0004) (Config)
	int                                                m_nEmptyFieldEmitterSlotIcon;                             // 0x0130(0x0004) (Config)
	int                                                m_nEmptyFeatureSlotIcon;                                  // 0x0134(0x0004) (Config)
	int                                                m_nEmptyCompanyIcon;                                      // 0x0138(0x0004) (Config)
	int                                                m_nEmptySlotIcon;                                         // 0x013C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_XMods");
		return ptr;
	}


	void OnPanelRemoved();
	void ChangeTargetCharacter();
	void UpdateResources();
	void SalvageXModProcessDoubleCheck(bool bConfirmedSalvageAttempt, int nContext);
	void FuseItem();
	void EquipSelectedItem(int nItemIndex, int nSlotIndex);
	void PopulateItemListEntry(int nListIndex);
	void PopulateInventoryXModItem(TArray<struct FASParams> lstParams);
	void PopulateEquippedSlotAsItemListEntry(int nXModIndex, int nListIndex);
	void PopulateItemList();
	void PopulateEquippedItemXModSlotEntry(int nSlotIndex);
	void PopulateEquippedItemInherentEntry();
	void PopulateEquippedItemXModSlots();
	void PopulateEquippedItem();
	void PopulateForCharacter();
	void ChangeSlotState(TEnumAsByte<EGuiEquipSlots> eDisplaySlot);
	void SetGlobalVars();
	void HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments);
};


// Class BIOC_Base.BioSFHandler_Inventory
// 0x0094 (0x00F0 - 0x005C)
class UBioSFHandler_Inventory : public UBioSFHandler
{
public:
	class UBioInventoryGuiInterface*                   m_oInvInterface;                                          // 0x005C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	int                                                m_nLastEquippedIndex;                                     // 0x0060(0x0004)
	int                                                m_nShiftItemIndex;                                        // 0x0064(0x0004)
	TEnumAsByte<EGuiEquipSlots>                        m_eCurrentSlot;                                           // 0x0068(0x0001)
	TEnumAsByte<EGuiEquipSlots>                        m_eLastDisplaySlot;                                       // 0x0069(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	int                                                m_nCurrentSquadMember;                                    // 0x006C(0x0004)
	unsigned long                                      m_bInitialized : 1;                                       // 0x0070(0x0004)
	unsigned long                                      m_bWantToEquip : 1;                                       // 0x0070(0x0004)
	class ABioPawn*                                    m_oLastSpawnedPawn;                                       // 0x0074(0x0004)
	class ABioPawn*                                    oOverrideDisplayCharacter;                                // 0x0078(0x0004)
	float                                              m_fNextEquipTime;                                         // 0x007C(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0080(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srEmpty
	unsigned char                                      UnknownData02[0x4];                                       // 0x0084(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srInventoryTitle
	unsigned char                                      UnknownData03[0x4];                                       // 0x0088(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srEquippedItemTitle
	unsigned char                                      UnknownData04[0x4];                                       // 0x008C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srSelectedItemTitle
	unsigned char                                      UnknownData05[0xC];                                       // 0x0090(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioSFHandler_Inventory.lstXModGuiTitles
	unsigned char                                      UnknownData06[0x4];                                       // 0x009C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srXferXModsMsg
	unsigned char                                      UnknownData07[0x4];                                       // 0x00A0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srXferXModsConfirm
	unsigned char                                      UnknownData08[0x4];                                       // 0x00A4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srXferXModsCancel
	unsigned char                                      UnknownData09[0x4];                                       // 0x00A8(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srXModToInventoryXferMsg
	unsigned char                                      UnknownData10[0x4];                                       // 0x00AC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srXModToInventorySalvageMsg
	unsigned char                                      UnknownData11[0x4];                                       // 0x00B0(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srXModToInventoryConfirm
	unsigned char                                      UnknownData12[0x4];                                       // 0x00B4(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srSalvageItemMsg
	unsigned char                                      UnknownData13[0x4];                                       // 0x00B8(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srSalvageItemConfirm
	unsigned char                                      UnknownData14[0x4];                                       // 0x00BC(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Inventory.srSalvageItemCancel
	int                                                m_nEmptyAmmoSlotIcon;                                     // 0x00C0(0x0004) (Config)
	int                                                m_nEmptyFieldEmitterSlotIcon;                             // 0x00C4(0x0004) (Config)
	int                                                m_nEmptyFeatureSlotIcon;                                  // 0x00C8(0x0004) (Config)
	int                                                m_nEmptyCompanyIcon;                                      // 0x00CC(0x0004) (Config)
	int                                                m_nEmptySlotIcon;                                         // 0x00D0(0x0004) (Config)
	float                                              fTimeBetweenEquipActions;                                 // 0x00D4(0x0004) (Config)
	float                                              fTimeOnASlotBeforeEquipping;                              // 0x00D8(0x0004) (Config)
	float                                              m_fRScrollValue;                                          // 0x00DC(0x0004)
	float                                              m_fLScrollValue;                                          // 0x00E0(0x0004)
	unsigned char                                      UnknownData15[0xC];                                       // 0x00E4(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioSFHandler_Inventory.m_lstSquadNicknames

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Inventory");
		return ptr;
	}


	void GetSquadMemberNames();
	void OnPanelRemoved();
	void OnPanelAdded();
	void Update3DModel();
	void Update3DCharacter();
	void UpdateCharDetails();
	bool ChangeTargetCharacter(int nTargetMember);
	void SalvageItemProcessDoubleCheck(bool bConfirmedSalvageAttempt, int nContext);
	void EquipItemProcessDoubleCheck(bool bAcceptedXferOption, int nContext);
	void EquipSelectedItem(int nItemIndex, int nXferXMods);
	void ProcessModifierList(const struct FBioInventoryGuiInterfaceItemStats& stStatList, const struct FString& sMethod, int* nModifierCount);
	void PolulateInvItems(TArray<struct FASParams> lstParams);
	void PopulateItemListEntry(int nListIndex);
	void PopulateItemList();
	void PopulateEquippedItem();
	void PopulateForCharacter();
	void UpdateResources(int nRackupTime);
	void UpdateInvSlotIcons(bool bDeferUpdateFilterIcons);
	void ChangeSlotState(TEnumAsByte<EGuiEquipSlots> eDisplaySlot, bool bUpdate3DModel, bool bDeferUpdateFilterIcons);
	TEnumAsByte<EGuiEquipSlots> CheckSkipSlot(TEnumAsByte<EGuiEquipSlots> eSourceSlot, int nSkipDirection);
	void SetGlobalVars();
	void FloatingReinit();
	void Update(float fDeltaT);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void InitializeInventoryHelper(TArray<struct FString>* lstArguments);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
};


// Class BIOC_Base.BioSFHandler_CharacterRecord
// 0x002C (0x0088 - 0x005C)
class UBioSFHandler_CharacterRecord : public UBioSFHandler
{
public:
	class ABioWorldInfo*                               m_WorldInfo;                                              // 0x005C(0x0004)
	int                                                m_CurrentPawnIndex;                                       // 0x0060(0x0004)
	class ABioPawn*                                    m_CurrentPawn;                                            // 0x0064(0x0004)
	class UBioTalentContainer*                         m_TalentContainer;                                        // 0x0068(0x0004)
	unsigned long                                      m_bWasWearingHelmet : 1;                                  // 0x006C(0x0004)
	int                                                nMaxRenegade;                                             // 0x0070(0x0004) (Config)
	int                                                nMaxParagon;                                              // 0x0074(0x0004) (Config)
	float                                              m_fScrollValue;                                           // 0x0078(0x0004)
	unsigned char                                      UnknownData00[0xC];                                       // 0x007C(0x000C) UNKNOWN PROPERTY: ArrayProperty BIOC_Base.BioSFHandler_CharacterRecord.m_lstSquadNicknames

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_CharacterRecord");
		return ptr;
	}


	void GetSquadMemberNames();
	void RestoreHeadGear();
	void HideHeadGear();
	bool GetExperienceProgress(int* currentXP, int* targetXP);
	void UpdateTalentPoints();
	void UpdateTalentRanks(int talentIndex, struct FBioTalentDynamicData* Data);
	void UpdateTalentList();
	void CreateTalentList();
	void UpdateCharacterStats();
	void UpdateCharacter();
	void CancelTalentChanges();
	void ClearTalentChanges();
	void CommitTalentChanges();
	void PurchaseTalentRank(int talentIndex);
	void AutoLevelUp();
	bool ChangeToCharacter(class ABioPawn* NextCharacter);
	bool NextCharacter(bool bNext);
	bool InitializeCharacterRecord();
	void OnPanelAdded();
	void OnPanelRemoved();
	void Update(float fDeltaT);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters);
};


// Class BIOC_Base.BioSFHandler_Conversation
// 0x0096 (0x00F2 - 0x005C)
class UBioSFHandler_Conversation : public UBioSFHandler
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Conversation.m_srTextInvestigate
	unsigned char                                      UnknownData01[0x4];                                       // 0x0060(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Conversation.m_srTextReturn
	int                                                m_nReplyLocationMiddleLeft;                               // 0x0064(0x0004) (Config)
	int                                                m_nReplyLocationTopLeft;                                  // 0x0068(0x0004) (Config)
	int                                                m_nReplyLocationBottomLeft;                               // 0x006C(0x0004) (Config)
	int                                                m_nReplyLocationTopRight;                                 // 0x0070(0x0004) (Config)
	int                                                m_nReplyLocationBottomRight;                              // 0x0074(0x0004) (Config)
	int                                                m_nReplyLocationMiddleRight;                              // 0x0078(0x0004) (Config)
	int                                                m_nInvestigateLocationMiddleLeft;                         // 0x007C(0x0004) (Config)
	int                                                m_nInvestigateLocationTopLeft;                            // 0x0080(0x0004) (Config)
	int                                                m_nInvestigateLocationBottomLeft;                         // 0x0084(0x0004) (Config)
	int                                                m_nInvestigateLocationTopRight;                           // 0x0088(0x0004) (Config)
	int                                                m_nInvestigateLocationBottomRight;                        // 0x008C(0x0004) (Config)
	int                                                m_nInvestigateLocationMiddleRight;                        // 0x0090(0x0004) (Config)
	struct FVector                                     vInput;                                                   // 0x0094(0x000C)
	struct FVector                                     vLastInput;                                               // 0x00A0(0x000C)
	float                                              fLastInputTime;                                           // 0x00AC(0x0004)
	float                                              fDeltaInputTime;                                          // 0x00B0(0x0004) (Config)
	float                                              fLastRadius;                                              // 0x00B4(0x0004)
	unsigned long                                      m_bDisplayInvestigateSubMenu : 1;                         // 0x00B8(0x0004)
	unsigned long                                      m_bDisplayingWheel : 1;                                   // 0x00B8(0x0004)
	int                                                m_aReplyLocations[0x6];                                   // 0x00BC(0x0004)
	int                                                m_aInvestigateLocations[0x6];                             // 0x00D4(0x0004)
	unsigned char                                      m_bSlotsUsed[0x6];                                        // 0x00EC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Conversation");
		return ptr;
	}


	bool ChangeConversationMenu(class UBioConversation* oConversation, int nReplyIndex);
	int GetInvestigateReplyCount(class UBioConversation* oConversation);
	TEnumAsByte<EBioConvWheelPositions> GetReplyLocation(int nReplyCategory);
	TEnumAsByte<EBioConvWheelPositions> GetInvestigateReplyLocation(int nInvestigateSlot);
	int GetInvestigateReplyFromWheelLocation(class UBioConversation* oConversation, TEnumAsByte<EBioConvWheelPositions> nWheelLocation);
	bool SelectConversationEntry(TEnumAsByte<EBioConvWheelPositions> nWheelLocation);
	int MapGuiStyleToOptionMode(TEnumAsByte<EConvGUIStyles> eGUIStyle);
	void UpdateConversationOptions(class UBioConversation* oConversation);
	void Update(float fDeltaT);
	void OnRemovePanel();
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void OnPanelRemoved();
	void OnPanelAdded();
	int GetNumReplies(class UBioConversation* oConversation);
};


// Class BIOC_Base.BioSFHandler_InventoryIGGOverride
// 0x0000 (0x005C - 0x005C)
class UBioSFHandler_InventoryIGGOverride : public UBioSFHandler
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_InventoryIGGOverride");
		return ptr;
	}


	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
};


// Class BIOC_Base.BioSFHandler_PCXMods
// 0x0000 (0x0140 - 0x0140)
class UBioSFHandler_PCXMods : public UBioSFHandler_XMods
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCXMods");
		return ptr;
	}


	void UnistallXModForCurrentSlot();
	void PopulateForCharacter();
	void PopulateEquippedSlotAsItemListEntry(int nXModIndex, int nListIndex);
	void SetXModFilterSlot(int nNewXmodSlot);
	void HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments);
	void PopulateEquippedItemXModSlots();
	void PopulateInventoryXModItem(TArray<struct FASParams> lstParams);
};


// Class BIOC_Base.BioSFHandler_Specialization
// 0x0020 (0x007C - 0x005C)
class UBioSFHandler_Specialization : public UBioSFHandler
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_Specialization.m_specializationGuiDescription
	class UBioTalentContainer*                         m_playerTalents;                                          // 0x0060(0x0004)
	class UBioAttributesPawnPlayer*                    m_playerAttributes;                                       // 0x0064(0x0004)
	TArray<struct FBioSpecializationData>              m_specializationArray;                                    // 0x0068(0x000C) (NeedCtorLink)
	unsigned long                                      m_preInitializationSucceeded : 1;                         // 0x0074(0x0004)
	float                                              m_fRScrollValue;                                          // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_Specialization");
		return ptr;
	}


	void UpdateSpecializations();
	void ChooseSpecialization(int specIndex);
	void Update(float fDeltaT);
	void OnPanelAdded();
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters);
	bool PreInitialization(class ABioPawn* PlayerPawn);
};


// Class BIOC_Base.BioSFHandler_PCCharacterRecord
// 0x0004 (0x008C - 0x0088)
class UBioSFHandler_PCCharacterRecord : public UBioSFHandler_CharacterRecord
{
public:
	class UBioSFHandler*                               m_IGGHandler;                                             // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCCharacterRecord");
		return ptr;
	}


	void ClosePanel();
	void ApplyOrNotThenExit(bool bAPressed, int nContext);
	void ConfirmCommit();
	bool NeedsToConfirm();
	void RemoveTalentPoint(int RankIndex);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	bool InitializeCharacterRecord();
	void SetCharacter(int Index);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters);
	void Update(float fDeltaT);
	void SetIGGHandler(class UBioSFHandler* pHandler);
};


// Class BIOC_Base.BioSFHandler_PCAchievement
// 0x0000 (0x0074 - 0x0074)
class UBioSFHandler_PCAchievement : public UBioSFHandler_Achievement
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCAchievement");
		return ptr;
	}


	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PartySelection
// 0x0028 (0x0084 - 0x005C)
class UBioSFHandler_PartySelection : public UBioSFHandler
{
public:
	TArray<struct FPartySelectMemberInfo>              lstMemberInfo;                                            // 0x005C(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0068(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PartySelection.srPartyConfirm
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PartySelection.srPartyCancel
	unsigned char                                      UnknownData02[0x4];                                       // 0x0070(0x0004) UNKNOWN PROPERTY: StringRefProperty BIOC_Base.BioSFHandler_PartySelection.srPartyQuestion
	struct FName                                       nmForcedHenchman;                                         // 0x0074(0x0008)
	int                                                m_nPartyMember1;                                          // 0x007C(0x0004)
	int                                                m_nPartyMember2;                                          // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PartySelection");
		return ptr;
	}


	void GetHenchmenStats(int nIndex, int* nStat1, int* nStat2, int* nStat3);
	void GetStatsFromClass(int nClassID, int* nStat1, int* nStat2, int* nStat3);
	struct FString GetHenchmenName(int nIndex);
	void FinalizeParty(bool bAPressed, int nContext);
	void ConfirmParty();
	void DoInitialization();
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
};


// Class BIOC_Base.BioSFHandler_PCConversation
// 0x0012 (0x0104 - 0x00F2)
class UBioSFHandler_PCConversation : public UBioSFHandler_Conversation
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x00F2(0x0002) MISSED OFFSET
	struct FVector                                     vMouseInput;                                              // 0x00F4(0x000C)
	float                                              AccumulationDivisor;                                      // 0x0100(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCConversation");
		return ptr;
	}


	void Update(float fDeltaT);
	void HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue);
	void OnPanelAdded();
};


// Class BIOC_Base.BioSFHandler_PCInventory
// 0x0000 (0x00F0 - 0x00F0)
class UBioSFHandler_PCInventory : public UBioSFHandler_Inventory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCInventory");
		return ptr;
	}


	void InitializeModsSection();
	void UpdateInvSlotIcons(bool bDeferUpdateFilterIcons);
	void UpdateTeamBox();
	void InitializeInventoryHelper(TArray<struct FString>* lstArguments);
	void PolulateInvItems(TArray<struct FASParams> lstParams);
	void SetItemFilterSlot(int nFilter);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters);
	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PCMainMenu
// 0x0000 (0x0069 - 0x0069)
class UBioSFHandler_PCMainMenu : public UBioSFHandler_MainMenu
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCMainMenu");
		return ptr;
	}


	void SetupExtrasMenu();
	void ExitConfirm(bool bAPressed, int nContext);
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
	void Update2(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_PCPartySelection
// 0x0000 (0x0084 - 0x0084)
class UBioSFHandler_PCPartySelection : public UBioSFHandler_PartySelection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_PCPartySelection");
		return ptr;
	}


	void Update(float fDeltaT);
};


// Class BIOC_Base.BioSFHandler_SelectCharacter
// 0x0000 (0x005C - 0x005C)
class UBioSFHandler_SelectCharacter : public UBioSFHandler
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSFHandler_SelectCharacter");
		return ptr;
	}


	void UpdateCharacterData();
	bool DoCharactersExist();
	void HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments);
};


// Class BIOC_Base.BioShopSaveObject
// 0x0014 (0x0060 - 0x004C)
class UBioShopSaveObject : public UBioBaseSaveObject
{
public:
	int                                                m_lastPlayerLevel;                                        // 0x004C(0x0004)
	unsigned long                                      m_isInitialized : 1;                                      // 0x0050(0x0004)
	TArray<class UBioBaseSaveObject*>                  m_aInventories;                                           // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioShopSaveObject");
		return ptr;
	}


	void LoadObject(class UObject* O);
	void SaveObject(class UObject* O);
};


// Class BIOC_Base.BioSkillMap
// 0x0010 (0x004C - 0x003C)
class UBioSkillMap : public UObject
{
public:
	TArray<struct FName>                               SkillToStateMap;                                          // 0x003C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      m_bClosedIsSkillState : 1;                                // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkillMap");
		return ptr;
	}


	bool STATIC_IsSkillInMap(const struct FName& Skill);
	struct FName STATIC_GetSkill(int Num);
};


// Class BIOC_Base.BioSkillMap_Door
// 0x0000 (0x004C - 0x004C)
class UBioSkillMap_Door : public UBioSkillMap
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkillMap_Door");
		return ptr;
	}

};


// Class BIOC_Base.BioSkillMap_Test
// 0x0000 (0x004C - 0x004C)
class UBioSkillMap_Test : public UBioSkillMap
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSkillMap_Test");
		return ptr;
	}

};


// Class BIOC_Base.BioSpectatorModeState
// 0x0000 (0x0074 - 0x0074)
class UBioSpectatorModeState : public UBioSpectatorMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectatorModeState");
		return ptr;
	}


	void ActivateOption(class ABioWorldInfo* WorldInfo);
	void InitializeOptions(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioSpectatorModeAnim
// 0x0000 (0x0074 - 0x0074)
class UBioSpectatorModeAnim : public UBioSpectatorMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectatorModeAnim");
		return ptr;
	}


	void ActivateOption(class ABioWorldInfo* WorldInfo);
	void InitializeOptions(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioSpectatorModeAnimSpeed
// 0x0000 (0x0074 - 0x0074)
class UBioSpectatorModeAnimSpeed : public UBioSpectatorMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectatorModeAnimSpeed");
		return ptr;
	}


	void ActivateOption(class ABioWorldInfo* WorldInfo);
	void InitializeOptions(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioSpectatorModeAppr
// 0x0000 (0x0074 - 0x0074)
class UBioSpectatorModeAppr : public UBioSpectatorMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectatorModeAppr");
		return ptr;
	}


	void ActivateOption(class ABioWorldInfo* WorldInfo);
	void InitializeOptions(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioSpectatorModeLOD
// 0x0000 (0x0074 - 0x0074)
class UBioSpectatorModeLOD : public UBioSpectatorMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectatorModeLOD");
		return ptr;
	}


	void ActivateOption(class ABioWorldInfo* WorldInfo);
	void InitializeOptions(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioSpectatorModeCamera
// 0x003C (0x00B0 - 0x0074)
class UBioSpectatorModeCamera : public UBioSpectatorMode
{
public:
	TArray<struct FBioModelViewerCamera>               m_cameras;                                                // 0x0074(0x000C) (Config, NeedCtorLink)
	struct FBioModelViewerCamera                       m_storedCamera;                                           // 0x0080(0x0030) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioSpectatorModeCamera");
		return ptr;
	}


	void DeactivateOption(class ABioWorldInfo* WorldInfo);
	void ActivateOption(class ABioWorldInfo* WorldInfo);
	void InitializeOptions(class ABioWorldInfo* WorldInfo);
};


// Class BIOC_Base.BioStartLocation
// 0x0000 (0x01F0 - 0x01F0)
class ABioStartLocation : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioStartLocation");
		return ptr;
	}

};


// Class BIOC_Base.BioStartPoint
// 0x0000 (0x02CC - 0x02CC)
class ABioStartPoint : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioStartPoint");
		return ptr;
	}

};


// Class BIOC_Base.BioTempNavPoint
// 0x0000 (0x02CC - 0x02CC)
class ABioTempNavPoint : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTempNavPoint");
		return ptr;
	}

};


// Class BIOC_Base.BioTestSampleScript
// 0x0000 (0x003C - 0x003C)
class UBioTestSampleScript : public UBioTest
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTestSampleScript");
		return ptr;
	}


	bool RunScript();
};


// Class BIOC_Base.BioTimedActivity
// 0x000C (0x006C - 0x0060)
class UBioTimedActivity : public UBioBaseActivity
{
public:
	TArray<struct FTwitchRec>                          m_aTwitchAnims;                                           // 0x0060(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTimedActivity");
		return ptr;
	}

};


// Class BIOC_Base.BioTriggerActorFactory
// 0x0000 (0x0064 - 0x0064)
class UBioTriggerActorFactory : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTriggerActorFactory");
		return ptr;
	}

};


// Class BIOC_Base.BioTriggerVolume
// 0x0004 (0x0230 - 0x022C)
class ABioTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      Enabled : 1;                                              // 0x022C(0x0004) (Edit)
	unsigned long                                      OneShot : 1;                                              // 0x022C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioTriggerVolume");
		return ptr;
	}


	void BioBeginPlay();
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class BIOC_Base.BioVehicleWheeledType
// 0x0000 (0x00A8 - 0x00A8)
class UBioVehicleWheeledType : public UBioVehicleBaseType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioVehicleWheeledType");
		return ptr;
	}

};


// Class BIOC_Base.BioWaypointSetFactory
// 0x0000 (0x0064 - 0x0064)
class UBioWaypointSetFactory : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWaypointSetFactory");
		return ptr;
	}

};


// Class BIOC_Base.BioWorldInfoTick
// 0x0000 (0x01F0 - 0x01F0)
class ABioWorldInfoTick : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWorldInfoTick");
		return ptr;
	}


	void Tick(float fDeltaT);
};


// Class BIOC_Base.BioWorldInteraction
// 0x0024 (0x0214 - 0x01F0)
class ABioWorldInteraction : public AActor
{
public:
	TArray<class UAnimSet*>                            m_oBaseAnimSets;                                          // 0x01F0(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            m_oConversationAnimSets;                                  // 0x01FC(0x000C) (Edit, NeedCtorLink)
	TArray<class UBioBaseActivity*>                    m_aoActivities;                                           // 0x0208(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWorldInteraction");
		return ptr;
	}

};


// Class BIOC_Base.BioWP_AirAssault
// 0x0000 (0x02D0 - 0x02D0)
class ABioWP_AirAssault : public ABioWP_AirPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWP_AirAssault");
		return ptr;
	}

};


// Class BIOC_Base.BioWp_AirDefense
// 0x0000 (0x02D0 - 0x02D0)
class ABioWp_AirDefense : public ABioWP_AirPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_AirDefense");
		return ptr;
	}

};


// Class BIOC_Base.BioWp_AssaultPoint
// 0x0000 (0x02D0 - 0x02D0)
class ABioWp_AssaultPoint : public ABioPathPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_AssaultPoint");
		return ptr;
	}

};


// Class BIOC_Base.BioWp_ChangeRoute
// 0x0018 (0x02E8 - 0x02D0)
class ABioWp_ChangeRoute : public ABioPathPoint
{
public:
	struct FName                                       PathToWalk;                                               // 0x02D0(0x0008) (Edit)
	TEnumAsByte<EeWalkWaypointsTypes>                  WalkType;                                                 // 0x02D8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02D9(0x0003) MISSED OFFSET
	unsigned long                                      Walking : 1;                                              // 0x02DC(0x0004) (Edit)
	float                                              MoveTolerance;                                            // 0x02E0(0x0004) (Edit)
	int                                                StartAtWaypoint;                                          // 0x02E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_ChangeRoute");
		return ptr;
	}


	bool OnCreatureReachedWayPoint(class APawn* PathFindingCreature);
};


// Class BIOC_Base.BioWp_Cover
// 0x0004 (0x02D4 - 0x02D0)
class ABioWp_Cover : public ABioPathPoint
{
public:
	class ABioArtPlaceable*                            oCoveringobject;                                          // 0x02D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_Cover");
		return ptr;
	}

};


// Class BIOC_Base.BioWp_DefensePoint
// 0x0000 (0x02D0 - 0x02D0)
class ABioWp_DefensePoint : public ABioPathPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_DefensePoint");
		return ptr;
	}

};


// Class BIOC_Base.BioWp_Delay
// 0x0004 (0x02D4 - 0x02D0)
class ABioWp_Delay : public ABioPathPoint
{
public:
	float                                              DelayInSeconds;                                           // 0x02D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_Delay");
		return ptr;
	}


	bool OnCreatureReachedWayPoint(class APawn* PathFindingCreature);
};


// Class BIOC_Base.BioWp_GuardPost
// 0x0000 (0x02D0 - 0x02D0)
class ABioWp_GuardPost : public ABioPathPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_GuardPost");
		return ptr;
	}

};


// Class BIOC_Base.BioWp_PlayAnim
// 0x001C (0x02EC - 0x02D0)
class ABioWp_PlayAnim : public ABioPathPoint
{
public:
	TArray<struct FName>                               Animations;                                               // 0x02D0(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            AnimationSets;                                            // 0x02DC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      Looping : 1;                                              // 0x02E8(0x0004) (Edit)
	unsigned long                                      RandomAnimation : 1;                                      // 0x02E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_PlayAnim");
		return ptr;
	}


	bool OnCreatureReachedWayPoint(class APawn* PathFindingCreature);
};


// Class BIOC_Base.BioWp_SniperPoint
// 0x0000 (0x02D0 - 0x02D0)
class ABioWp_SniperPoint : public ABioPathPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class BIOC_Base.BioWp_SniperPoint");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
