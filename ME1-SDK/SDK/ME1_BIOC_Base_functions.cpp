// Mass Effect (1.2.20820.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

#include "ME1_BIOC_Base_parameters.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function BIOC_Base.BioDamageType.SetDeathVFX
// (Native, Public)
// Parameters:
// class UBioDeathVFX*            pDeathVFX                      (Parm)

void UBioDamageType::SetDeathVFX(class UBioDeathVFX* pDeathVFX)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDamageType.SetDeathVFX");

	UBioDamageType_SetDeathVFX_Params params;
	params.pDeathVFX = pDeathVFX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDamageType.GetDeathVFX
// (Native, Public)
// Parameters:
// class UBioDeathVFX*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioDeathVFX* UBioDamageType::GetDeathVFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDamageType.GetDeathVFX");

	UBioDamageType_GetDeathVFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDamageType.SetAttributes
// (Native, Public)
// Parameters:
// class UBioAttributesDamage*    pAttributes                    (Parm)

void UBioDamageType::SetAttributes(class UBioAttributesDamage* pAttributes)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDamageType.SetAttributes");

	UBioDamageType_SetAttributes_Params params;
	params.pAttributes = pAttributes;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDamageType.GetAttributes
// (Native, Public)
// Parameters:
// class UBioAttributesDamage*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioAttributesDamage* UBioDamageType::GetAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDamageType.GetAttributes");

	UBioDamageType_GetAttributes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDamageType.InitializeDamageType
// (Native, Public)
// Parameters:
// class UBioAttributesDamage*    pAttributes                    (OptionalParm, Parm)
// class UBioDeathVFX*            pDeathVFX                      (OptionalParm, Parm)

void UBioDamageType::InitializeDamageType(class UBioAttributesDamage* pAttributes, class UBioDeathVFX* pDeathVFX)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDamageType.InitializeDamageType");

	UBioDamageType_InitializeDamageType_Params params;
	params.pAttributes = pAttributes;
	params.pDeathVFX = pDeathVFX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarker.Clear
// (Defined, Event, Public)

void ABioDEBUGMarker::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarker.Clear");

	ABioDEBUGMarker_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarker.AddMarker
// (Defined, Event, Public)
// Parameters:
// struct FVector                 _Start                         (Parm)
// int                            _size                          (Parm)
// unsigned char                  _R                             (Parm)
// unsigned char                  _G                             (Parm)
// unsigned char                  _B                             (Parm)

void ABioDEBUGMarker::AddMarker(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarker.AddMarker");

	ABioDEBUGMarker_AddMarker_Params params;
	params._Start = _Start;
	params._size = _size;
	params._R = _R;
	params._G = _G;
	params._B = _B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarker.AddLine
// (Defined, Event, Public)
// Parameters:
// struct FVector                 _Start                         (Parm)
// struct FVector                 _End                           (Parm)
// unsigned char                  _R                             (Parm)
// unsigned char                  _G                             (Parm)
// unsigned char                  _B                             (Parm)

void ABioDEBUGMarker::AddLine(const struct FVector& _Start, const struct FVector& _End, unsigned char _R, unsigned char _G, unsigned char _B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarker.AddLine");

	ABioDEBUGMarker_AddLine_Params params;
	params._Start = _Start;
	params._End = _End;
	params._R = _R;
	params._G = _G;
	params._B = _B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarker.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioDEBUGMarker::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarker.Tick");

	ABioDEBUGMarker_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.ClearMarkers
// (Defined, Event, Public)

void UBioDEBUGMarkerComponent::ClearMarkers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.ClearMarkers");

	UBioDEBUGMarkerComponent_ClearMarkers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.ClearCircles
// (Defined, Event, Public)

void UBioDEBUGMarkerComponent::ClearCircles()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.ClearCircles");

	UBioDEBUGMarkerComponent_ClearCircles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.ClearDiamonds
// (Defined, Event, Public)

void UBioDEBUGMarkerComponent::ClearDiamonds()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.ClearDiamonds");

	UBioDEBUGMarkerComponent_ClearDiamonds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.ClearArrows
// (Defined, Event, Public)

void UBioDEBUGMarkerComponent::ClearArrows()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.ClearArrows");

	UBioDEBUGMarkerComponent_ClearArrows_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.ClearLines
// (Defined, Event, Public)

void UBioDEBUGMarkerComponent::ClearLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.ClearLines");

	UBioDEBUGMarkerComponent_ClearLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.Clear
// (Defined, Event, Public)

void UBioDEBUGMarkerComponent::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.Clear");

	UBioDEBUGMarkerComponent_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.AddCircles
// (Defined, Event, Public)
// Parameters:
// struct FVector                 _Start                         (Parm)
// int                            _size                          (Parm)
// unsigned char                  _R                             (Parm)
// unsigned char                  _G                             (Parm)
// unsigned char                  _B                             (Parm)

void UBioDEBUGMarkerComponent::AddCircles(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.AddCircles");

	UBioDEBUGMarkerComponent_AddCircles_Params params;
	params._Start = _Start;
	params._size = _size;
	params._R = _R;
	params._G = _G;
	params._B = _B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.AddDiamond
// (Defined, Event, Public)
// Parameters:
// struct FVector                 _Start                         (Parm)
// int                            _size                          (Parm)
// unsigned char                  _R                             (Parm)
// unsigned char                  _G                             (Parm)
// unsigned char                  _B                             (Parm)

void UBioDEBUGMarkerComponent::AddDiamond(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.AddDiamond");

	UBioDEBUGMarkerComponent_AddDiamond_Params params;
	params._Start = _Start;
	params._size = _size;
	params._R = _R;
	params._G = _G;
	params._B = _B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.AddMarker
// (Defined, Event, Public)
// Parameters:
// struct FVector                 _Start                         (Parm)
// int                            _size                          (Parm)
// unsigned char                  _R                             (Parm)
// unsigned char                  _G                             (Parm)
// unsigned char                  _B                             (Parm)

void UBioDEBUGMarkerComponent::AddMarker(const struct FVector& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.AddMarker");

	UBioDEBUGMarkerComponent_AddMarker_Params params;
	params._Start = _Start;
	params._size = _size;
	params._R = _R;
	params._G = _G;
	params._B = _B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.AddArrows
// (Defined, Event, Public)
// Parameters:
// struct FVector                 _Start                         (Parm)
// struct FVector                 _End                           (Parm)
// unsigned char                  _R                             (Parm)
// unsigned char                  _G                             (Parm)
// unsigned char                  _B                             (Parm)

void UBioDEBUGMarkerComponent::AddArrows(const struct FVector& _Start, const struct FVector& _End, unsigned char _R, unsigned char _G, unsigned char _B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.AddArrows");

	UBioDEBUGMarkerComponent_AddArrows_Params params;
	params._Start = _Start;
	params._End = _End;
	params._R = _R;
	params._G = _G;
	params._B = _B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGMarkerComponent.AddLine
// (Defined, Event, Public)
// Parameters:
// struct FVector                 _Start                         (Parm)
// struct FVector                 _End                           (Parm)
// unsigned char                  _R                             (Parm)
// unsigned char                  _G                             (Parm)
// unsigned char                  _B                             (Parm)

void UBioDEBUGMarkerComponent::AddLine(const struct FVector& _Start, const struct FVector& _End, unsigned char _R, unsigned char _G, unsigned char _B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGMarkerComponent.AddLine");

	UBioDEBUGMarkerComponent_AddLine_Params params;
	params._Start = _Start;
	params._End = _End;
	params._R = _R;
	params._G = _G;
	params._B = _B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDestinationArrow.SetArrowColor
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EeColorSelection>  clr                            (Parm)

void ABioDestinationArrow::SetArrowColor(TEnumAsByte<EeColorSelection> clr)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDestinationArrow.SetArrowColor");

	ABioDestinationArrow_SetArrowColor_Params params;
	params.clr = clr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventDispatcher.Dispatch
// (Final, Native, Public)
// Parameters:
// struct FName                   oEventName                     (Parm)

void UBioEventDispatcher::Dispatch(const struct FName& oEventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventDispatcher.Dispatch");

	UBioEventDispatcher_Dispatch_Params params;
	params.oEventName = oEventName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventDispatcher.Unsubscribe
// (Final, Native, Public)
// Parameters:
// struct FName                   oEventName                     (Parm)
// class UObject*                 oSubscriber                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEventDispatcher::Unsubscribe(const struct FName& oEventName, class UObject* oSubscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventDispatcher.Unsubscribe");

	UBioEventDispatcher_Unsubscribe_Params params;
	params.oEventName = oEventName;
	params.oSubscriber = oSubscriber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEventDispatcher.Subscribe
// (Final, Native, Public)
// Parameters:
// struct FName                   oEventName                     (Parm)
// class UObject*                 oSubscriber                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEventDispatcher::Subscribe(const struct FName& oEventName, class UObject* oSubscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventDispatcher.Subscribe");

	UBioEventDispatcher_Subscribe_Params params;
	params.oEventName = oEventName;
	params.oSubscriber = oSubscriber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetCoolDown
// (Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm)

void UBioGamerProfile::SetCoolDown(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetCoolDown");

	UBioGamerProfile_SetCoolDown_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetCoolDown
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::GetCoolDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetCoolDown");

	UBioGamerProfile_GetCoolDown_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.UpdateRichPresence
// (Native, Public)

void UBioGamerProfile::UpdateRichPresence()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateRichPresence");

	UBioGamerProfile_UpdateRichPresence_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.UpdateSoundOptions
// (Native, Public)

void UBioGamerProfile::UpdateSoundOptions()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateSoundOptions");

	UBioGamerProfile_UpdateSoundOptions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.UpdateGraphicsOptions
// (Native, Public)

void UBioGamerProfile::UpdateGraphicsOptions()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateGraphicsOptions");

	UBioGamerProfile_UpdateGraphicsOptions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.UpdateAllOptions
// (Native, Public)
// Parameters:
// bool                           bUpdateRichPresence            (OptionalParm, Parm)

void UBioGamerProfile::UpdateAllOptions(bool bUpdateRichPresence)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateAllOptions");

	UBioGamerProfile_UpdateAllOptions_Params params;
	params.bUpdateRichPresence = bUpdateRichPresence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.DuplicateGameOptions
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FGameOptions            destOptions                    (Parm, OutParm)

void UBioGamerProfile::DuplicateGameOptions(struct FGameOptions* destOptions)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.DuplicateGameOptions");

	UBioGamerProfile_DuplicateGameOptions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (destOptions != nullptr)
		*destOptions = params.destOptions;
}


// Function BIOC_Base.BioGamerProfile.OverwiteGameOptions
// (Defined, Event, Public)
// Parameters:
// struct FGameOptions            sourceOptions                  (Parm)
// bool                           bUpdateRichPresence            (OptionalParm, Parm)

void UBioGamerProfile::OverwiteGameOptions(const struct FGameOptions& sourceOptions, bool bUpdateRichPresence)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.OverwiteGameOptions");

	UBioGamerProfile_OverwiteGameOptions_Params params;
	params.sourceOptions = sourceOptions;
	params.bUpdateRichPresence = bUpdateRichPresence;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetTargetingAssistModifier
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioGamerProfile::GetTargetingAssistModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetTargetingAssistModifier");

	UBioGamerProfile_GetTargetingAssistModifier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetOptionEx
// (Native, Public, HasOutParms)
// Parameters:
// struct FGameOptions            io_oGameOptions                (Parm)
// int                            i_nOptionType                  (Parm)
// int                            i_nOptionValue                 (Parm, OutParm)

void UBioGamerProfile::GetOptionEx(const struct FGameOptions& io_oGameOptions, int i_nOptionType, int* i_nOptionValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetOptionEx");

	UBioGamerProfile_GetOptionEx_Params params;
	params.io_oGameOptions = io_oGameOptions;
	params.i_nOptionType = i_nOptionType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (i_nOptionValue != nullptr)
		*i_nOptionValue = params.i_nOptionValue;
}


// Function BIOC_Base.BioGamerProfile.GetOption
// (Native, Public, HasOutParms)
// Parameters:
// int                            i_nOptionType                  (Parm)
// int                            i_nOptionValue                 (Parm, OutParm)

void UBioGamerProfile::GetOption(int i_nOptionType, int* i_nOptionValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetOption");

	UBioGamerProfile_GetOption_Params params;
	params.i_nOptionType = i_nOptionType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (i_nOptionValue != nullptr)
		*i_nOptionValue = params.i_nOptionValue;
}


// Function BIOC_Base.BioGamerProfile.SetOptionEx
// (Native, Public, HasOutParms)
// Parameters:
// struct FGameOptions            io_oGameOptions                (Parm, OutParm)
// int                            i_nOptionType                  (Parm)
// int                            i_nOptionValue                 (Parm)
// bool                           i_bSuppressUpdate              (Parm)

void UBioGamerProfile::SetOptionEx(int i_nOptionType, int i_nOptionValue, bool i_bSuppressUpdate, struct FGameOptions* io_oGameOptions)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetOptionEx");

	UBioGamerProfile_SetOptionEx_Params params;
	params.i_nOptionType = i_nOptionType;
	params.i_nOptionValue = i_nOptionValue;
	params.i_bSuppressUpdate = i_bSuppressUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (io_oGameOptions != nullptr)
		*io_oGameOptions = params.io_oGameOptions;
}


// Function BIOC_Base.BioGamerProfile.SetOption
// (Native, Public)
// Parameters:
// int                            i_nOptionType                  (Parm)
// int                            i_nOptionValue                 (Parm)
// bool                           i_bSuppressUpdate              (Parm)

void UBioGamerProfile::SetOption(int i_nOptionType, int i_nOptionValue, bool i_bSuppressUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetOption");

	UBioGamerProfile_SetOption_Params params;
	params.i_nOptionType = i_nOptionType;
	params.i_nOptionValue = i_nOptionValue;
	params.i_bSuppressUpdate = i_bSuppressUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetCombatDifficulty
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetCombatDifficulty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetCombatDifficulty");

	UBioGamerProfile_GetCombatDifficulty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetCombatDifficulty
// (Native, Public)
// Parameters:
// int                            i_Template                     (Parm)

void UBioGamerProfile::SetCombatDifficulty(int i_Template)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetCombatDifficulty");

	UBioGamerProfile_SetCombatDifficulty_Params params;
	params.i_Template = i_Template;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.DumpAchievementStats
// (Native, Public)

void UBioGamerProfile::DumpAchievementStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.DumpAchievementStats");

	UBioGamerProfile_DumpAchievementStats_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetGammaPostProcessTemplate
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetGammaPostProcessTemplate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetGammaPostProcessTemplate");

	UBioGamerProfile_GetGammaPostProcessTemplate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetGammaPostProcessTemplate
// (Native, Public)
// Parameters:
// int                            i_Template                     (Parm)

void UBioGamerProfile::SetGammaPostProcessTemplate(int i_Template)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetGammaPostProcessTemplate");

	UBioGamerProfile_SetGammaPostProcessTemplate_Params params;
	params.i_Template = i_Template;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.SelectDefaultStorageDevice
// (Native, Public)

void UBioGamerProfile::SelectDefaultStorageDevice()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SelectDefaultStorageDevice");

	UBioGamerProfile_SelectDefaultStorageDevice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetDefaultStorageDevice
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetDefaultStorageDevice()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetDefaultStorageDevice");

	UBioGamerProfile_GetDefaultStorageDevice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetDefaultStorageDevice
// (Native, Public)
// Parameters:
// int                            i_DeviceId                     (Parm)

void UBioGamerProfile::SetDefaultStorageDevice(int i_DeviceId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetDefaultStorageDevice");

	UBioGamerProfile_SetDefaultStorageDevice_Params params;
	params.i_DeviceId = i_DeviceId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetBioProfileStorageDevice
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetBioProfileStorageDevice()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetBioProfileStorageDevice");

	UBioGamerProfile_GetBioProfileStorageDevice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetBioProfileStorageDevice
// (Native, Public)
// Parameters:
// int                            i_DeviceId                     (Parm)

void UBioGamerProfile::SetBioProfileStorageDevice(int i_DeviceId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetBioProfileStorageDevice");

	UBioGamerProfile_SetBioProfileStorageDevice_Params params;
	params.i_DeviceId = i_DeviceId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.SetYAxisInverted
// (Native, Public)
// Parameters:
// bool                           bInverted                      (Parm)

void UBioGamerProfile::SetYAxisInverted(bool bInverted)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetYAxisInverted");

	UBioGamerProfile_SetYAxisInverted_Params params;
	params.bInverted = bInverted;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetYAxisInverted
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::GetYAxisInverted()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetYAxisInverted");

	UBioGamerProfile_GetYAxisInverted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetAllUnlockedBonusTalentInfo
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FUnlockedBonusTalentInfo> aUnlockedBonusTalentInfo       (Parm, OutParm, NeedCtorLink)
// struct FName                   nmCharClass                    (Parm)

void UBioGamerProfile::GetAllUnlockedBonusTalentInfo(const struct FName& nmCharClass, TArray<struct FUnlockedBonusTalentInfo>* aUnlockedBonusTalentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetAllUnlockedBonusTalentInfo");

	UBioGamerProfile_GetAllUnlockedBonusTalentInfo_Params params;
	params.nmCharClass = nmCharClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aUnlockedBonusTalentInfo != nullptr)
		*aUnlockedBonusTalentInfo = params.aUnlockedBonusTalentInfo;
}


// Function BIOC_Base.BioGamerProfile.AwardAllPassiveBonusTalents
// (Native, Public)

void UBioGamerProfile::AwardAllPassiveBonusTalents()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.AwardAllPassiveBonusTalents");

	UBioGamerProfile_AwardAllPassiveBonusTalents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.UpdateAchievementState
// (Native, Public)
// Parameters:
// int                            nAchievementID                 (Parm)
// bool                           bEarned                        (Parm)
// bool                           bUpdatePlotState               (Parm)
// bool                           bAwardBonusTalent              (Parm)

void UBioGamerProfile::UpdateAchievementState(int nAchievementID, bool bEarned, bool bUpdatePlotState, bool bAwardBonusTalent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateAchievementState");

	UBioGamerProfile_UpdateAchievementState_Params params;
	params.nAchievementID = nAchievementID;
	params.bEarned = bEarned;
	params.bUpdatePlotState = bUpdatePlotState;
	params.bAwardBonusTalent = bAwardBonusTalent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetDefaultValues
// (Native, Public, HasOutParms)
// Parameters:
// struct FGameOptions            io_Options                     (Parm, OutParm)

void UBioGamerProfile::GetDefaultValues(struct FGameOptions* io_Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetDefaultValues");

	UBioGamerProfile_GetDefaultValues_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (io_Options != nullptr)
		*io_Options = params.io_Options;
}


// Function BIOC_Base.BioGamerProfile.ResetToDefaults
// (Native, Public)
// Parameters:
// bool                           bUpdateRichPresence            (OptionalParm, Parm)

void UBioGamerProfile::ResetToDefaults(bool bUpdateRichPresence)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.ResetToDefaults");

	UBioGamerProfile_ResetToDefaults_Params params;
	params.bUpdateRichPresence = bUpdateRichPresence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.SortAchievementInfo
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FAchievementInfo> aAchievementList               (Parm, OutParm, NeedCtorLink)

void UBioGamerProfile::SortAchievementInfo(TArray<struct FAchievementInfo>* aAchievementList)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SortAchievementInfo");

	UBioGamerProfile_SortAchievementInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aAchievementList != nullptr)
		*aAchievementList = params.aAchievementList;
}


// Function BIOC_Base.BioGamerProfile.GetAllAchievementInfo
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FAchievementInfo> aAchievementList               (Parm, OutParm, NeedCtorLink)

void UBioGamerProfile::GetAllAchievementInfo(TArray<struct FAchievementInfo>* aAchievementList)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetAllAchievementInfo");

	UBioGamerProfile_GetAllAchievementInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aAchievementList != nullptr)
		*aAchievementList = params.aAchievementList;
}


// Function BIOC_Base.BioGamerProfile.GetIsAchievementEarned
// (Native, Public)
// Parameters:
// int                            AchievementId                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::GetIsAchievementEarned(int AchievementId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetIsAchievementEarned");

	UBioGamerProfile_GetIsAchievementEarned_Params params;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.UpdateCharacterProfilePawnDataEx
// (Native, Public, HasOutParms)
// Parameters:
// struct FCharacterProfile       sCharProfile                   (Parm, OutParm, NeedCtorLink)
// class ABioPawn*                i_playerPawn                   (Parm)
// bool                           i_bUpdateFirstName             (Parm)
// int                            i_oHoursPlayed                 (Parm)
// int                            i_oMinPlayed                   (Parm)
// int                            i_oSecPlayed                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::UpdateCharacterProfilePawnDataEx(class ABioPawn* i_playerPawn, bool i_bUpdateFirstName, int i_oHoursPlayed, int i_oMinPlayed, int i_oSecPlayed, struct FCharacterProfile* sCharProfile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateCharacterProfilePawnDataEx");

	UBioGamerProfile_UpdateCharacterProfilePawnDataEx_Params params;
	params.i_playerPawn = i_playerPawn;
	params.i_bUpdateFirstName = i_bUpdateFirstName;
	params.i_oHoursPlayed = i_oHoursPlayed;
	params.i_oMinPlayed = i_oMinPlayed;
	params.i_oSecPlayed = i_oSecPlayed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sCharProfile != nullptr)
		*sCharProfile = params.sCharProfile;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.UpdateCharacterProfilePawnData
// (Native, Public)
// Parameters:
// struct FString                 sCharacterID                   (Parm, NeedCtorLink)
// class ABioPawn*                i_playerPawn                   (Parm)
// int                            i_oHoursPlayed                 (Parm)
// int                            i_oMinPlayed                   (Parm)
// int                            i_oSecPlayed                   (Parm)
// bool                           i_bUpdateFirstName             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::UpdateCharacterProfilePawnData(const struct FString& sCharacterID, class ABioPawn* i_playerPawn, int i_oHoursPlayed, int i_oMinPlayed, int i_oSecPlayed, bool i_bUpdateFirstName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateCharacterProfilePawnData");

	UBioGamerProfile_UpdateCharacterProfilePawnData_Params params;
	params.sCharacterID = sCharacterID;
	params.i_playerPawn = i_playerPawn;
	params.i_oHoursPlayed = i_oHoursPlayed;
	params.i_oMinPlayed = i_oMinPlayed;
	params.i_oSecPlayed = i_oSecPlayed;
	params.i_bUpdateFirstName = i_bUpdateFirstName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.DeleteCharacterProfile
// (Native, Public)
// Parameters:
// struct FString                 sCharacterID                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::DeleteCharacterProfile(const struct FString& sCharacterID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.DeleteCharacterProfile");

	UBioGamerProfile_DeleteCharacterProfile_Params params;
	params.sCharacterID = sCharacterID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetCharacterProfileIndex
// (Native, Public)
// Parameters:
// struct FString                 sCharacterID                   (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetCharacterProfileIndex(const struct FString& sCharacterID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetCharacterProfileIndex");

	UBioGamerProfile_GetCharacterProfileIndex_Params params;
	params.sCharacterID = sCharacterID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetCharacterProfile
// (Native, Public)
// Parameters:
// struct FString                 sCharacterID                   (Parm, NeedCtorLink)
// struct FCharacterProfile       i_CharProfile                  (Parm, NeedCtorLink)
// bool                           i_bAddProfileIfNotExist        (OptionalParm, Parm)

void UBioGamerProfile::SetCharacterProfile(const struct FString& sCharacterID, const struct FCharacterProfile& i_CharProfile, bool i_bAddProfileIfNotExist)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetCharacterProfile");

	UBioGamerProfile_SetCharacterProfile_Params params;
	params.sCharacterID = sCharacterID;
	params.i_CharProfile = i_CharProfile;
	params.i_bAddProfileIfNotExist = i_bAddProfileIfNotExist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamerProfile.GetCharacterProfile
// (Native, Public)
// Parameters:
// struct FString                 sCharacterID                   (Parm, NeedCtorLink)
// struct FCharacterProfile       ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FCharacterProfile UBioGamerProfile::GetCharacterProfile(const struct FString& sCharacterID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetCharacterProfile");

	UBioGamerProfile_GetCharacterProfile_Params params;
	params.sCharacterID = sCharacterID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetCharacterProfileLastPlayedSlot
// (Native, Public)
// Parameters:
// struct FString                 sCharacaterID                  (Parm, NeedCtorLink)
// int                            nLastPlayedSlot                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::SetCharacterProfileLastPlayedSlot(const struct FString& sCharacaterID, int nLastPlayedSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetCharacterProfileLastPlayedSlot");

	UBioGamerProfile_SetCharacterProfileLastPlayedSlot_Params params;
	params.sCharacaterID = sCharacaterID;
	params.nLastPlayedSlot = nLastPlayedSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.ConvertToValidCharacterID
// (Native, Public)
// Parameters:
// struct FString                 sCharacterName                 (Parm, NeedCtorLink)
// bool                           bConvertAccentCharacters       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGamerProfile::ConvertToValidCharacterID(const struct FString& sCharacterName, bool bConvertAccentCharacters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.ConvertToValidCharacterID");

	UBioGamerProfile_ConvertToValidCharacterID_Params params;
	params.sCharacterName = sCharacterName;
	params.bConvertAccentCharacters = bConvertAccentCharacters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.CreateNewCharacterProfile
// (Native, Public)
// Parameters:
// struct FString                 sCharacterName                 (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGamerProfile::CreateNewCharacterProfile(const struct FString& sCharacterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.CreateNewCharacterProfile");

	UBioGamerProfile_CreateNewCharacterProfile_Params params;
	params.sCharacterName = sCharacterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetFloatStatistic
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          fValue                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::SetFloatStatistic(int nIndex, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetFloatStatistic");

	UBioGamerProfile_SetFloatStatistic_Params params;
	params.nIndex = nIndex;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.InrementFloatStatistic
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          fAmount                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioGamerProfile::InrementFloatStatistic(int nIndex, float fAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.InrementFloatStatistic");

	UBioGamerProfile_InrementFloatStatistic_Params params;
	params.nIndex = nIndex;
	params.fAmount = fAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetFloatStatistic
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioGamerProfile::GetFloatStatistic(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetFloatStatistic");

	UBioGamerProfile_GetFloatStatistic_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetIntStatistic
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            nValue                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::SetIntStatistic(int nIndex, int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetIntStatistic");

	UBioGamerProfile_SetIntStatistic_Params params;
	params.nIndex = nIndex;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.IncrementIntStatistic
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            nAmount                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::IncrementIntStatistic(int nIndex, int nAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.IncrementIntStatistic");

	UBioGamerProfile_IncrementIntStatistic_Params params;
	params.nIndex = nIndex;
	params.nAmount = nAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetIntStatistic
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetIntStatistic(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetIntStatistic");

	UBioGamerProfile_GetIntStatistic_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetHighestDifficultyCompleted
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetHighestDifficultyCompleted()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetHighestDifficultyCompleted");

	UBioGamerProfile_GetHighestDifficultyCompleted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetPlaythroughCompleted
// (Native, Public)
// Parameters:
// int                            nDifficulty                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::GetPlaythroughCompleted(int nDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetPlaythroughCompleted");

	UBioGamerProfile_GetPlaythroughCompleted_Params params;
	params.nDifficulty = nDifficulty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetNumberOfPlaythroughsCompleted
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetNumberOfPlaythroughsCompleted()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetNumberOfPlaythroughsCompleted");

	UBioGamerProfile_GetNumberOfPlaythroughsCompleted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.UpdateEndGameGamerProfileStats
// (Native, Public)
// Parameters:
// bool                           bLogStats                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::UpdateEndGameGamerProfileStats(bool bLogStats)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.UpdateEndGameGamerProfileStats");

	UBioGamerProfile_UpdateEndGameGamerProfileStats_Params params;
	params.bLogStats = bLogStats;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetUnlockedTalentTrees
// (Native, Public, HasOutParms)
// Parameters:
// TArray<int>                    aUnlockedTalentTrees           (Parm, OutParm, NeedCtorLink)

void UBioGamerProfile::GetUnlockedTalentTrees(TArray<int>* aUnlockedTalentTrees)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetUnlockedTalentTrees");

	UBioGamerProfile_GetUnlockedTalentTrees_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aUnlockedTalentTrees != nullptr)
		*aUnlockedTalentTrees = params.aUnlockedTalentTrees;
}


// Function BIOC_Base.BioGamerProfile.GetRewardStatUnlockedAt
// (Native, Public)
// Parameters:
// struct FString                 sStatisticName                 (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::GetRewardStatUnlockedAt(const struct FString& sStatisticName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetRewardStatUnlockedAt");

	UBioGamerProfile_GetRewardStatUnlockedAt_Params params;
	params.sStatisticName = sStatisticName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetRewardStatName
// (Native, Public)
// Parameters:
// int                            nAchievementID                 (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGamerProfile::GetRewardStatName(int nAchievementID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetRewardStatName");

	UBioGamerProfile_GetRewardStatName_Params params;
	params.nAchievementID = nAchievementID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.GetIsRewardStatUnlocked
// (Native, Public)
// Parameters:
// struct FString                 sStatisticName                 (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::GetIsRewardStatUnlocked(const struct FString& sStatisticName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.GetIsRewardStatUnlocked");

	UBioGamerProfile_GetIsRewardStatUnlocked_Params params;
	params.sStatisticName = sStatisticName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.IncrementRewardStat
// (Native, Public)
// Parameters:
// struct FString                 sStatisticName                 (Parm, NeedCtorLink)
// int                            nAmount                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamerProfile::IncrementRewardStat(const struct FString& sStatisticName, int nAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.IncrementRewardStat");

	UBioGamerProfile_IncrementRewardStat_Params params;
	params.sStatisticName = sStatisticName;
	params.nAmount = nAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetRewardStat
// (Native, Public)
// Parameters:
// struct FString                 sStatisticName                 (Parm, NeedCtorLink)
// int                            nValue                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::SetRewardStat(const struct FString& sStatisticName, int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetRewardStat");

	UBioGamerProfile_SetRewardStat_Params params;
	params.sStatisticName = sStatisticName;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.RestoreGamerProfilePlotManagerVariables
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::RestoreGamerProfilePlotManagerVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.RestoreGamerProfilePlotManagerVariables");

	UBioGamerProfile_RestoreGamerProfilePlotManagerVariables_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamerProfile.SetGamerProfilePlotManagerVariables
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamerProfile::SetGamerProfilePlotManagerVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamerProfile.SetGamerProfilePlotManagerVariables");

	UBioGamerProfile_SetGamerProfilePlotManagerVariables_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioObject.ValidateOwnershipSemantics
// (Native, Static, Public)
// Parameters:
// class UObject*                 Target                         (Parm)
// bool                           isVerbose                      (OptionalParm, Parm)
// int                            recurrence                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioObject::STATIC_ValidateOwnershipSemantics(class UObject* Target, bool isVerbose, int recurrence)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioObject.ValidateOwnershipSemantics");

	UBioObject_ValidateOwnershipSemantics_Params params;
	params.Target = Target;
	params.isVerbose = isVerbose;
	params.recurrence = recurrence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioObject.ParseIntoArray
// (Native, Static, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         aString                        (Parm, OutParm, NeedCtorLink)
// struct FString                 sDelimitedStrings              (Parm, NeedCtorLink)
// struct FString                 sDelimiter                     (Parm, NeedCtorLink)
// bool                           bCullEmptyStrings              (Parm)

void UBioObject::STATIC_ParseIntoArray(const struct FString& sDelimitedStrings, const struct FString& sDelimiter, bool bCullEmptyStrings, TArray<struct FString>* aString)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioObject.ParseIntoArray");

	UBioObject_ParseIntoArray_Params params;
	params.sDelimitedStrings = sDelimitedStrings;
	params.sDelimiter = sDelimiter;
	params.bCullEmptyStrings = bCullEmptyStrings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aString != nullptr)
		*aString = params.aString;
}


// Function BIOC_Base.BioObject.ParseIntoArrayWS
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FString                 whitespaceDelimitedStrings     (Parm, NeedCtorLink)
// TArray<struct FString>         Strings                        (Parm, OutParm, NeedCtorLink)

void UBioObject::STATIC_ParseIntoArrayWS(const struct FString& whitespaceDelimitedStrings, TArray<struct FString>* Strings)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioObject.ParseIntoArrayWS");

	UBioObject_ParseIntoArrayWS_Params params;
	params.whitespaceDelimitedStrings = whitespaceDelimitedStrings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Strings != nullptr)
		*Strings = params.Strings;
}


// Function BIOC_Base.BioObject.GetEnumValue
// (Native, Static, Public, HasOutParms)
// Parameters:
// class UClass*                  clsEnumDefiner                 (Parm)
// struct FName                   nmEnumField                    (Parm)
// struct FName                   nmEnumValue                    (Parm)
// unsigned char                  cEnumValue                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioObject::STATIC_GetEnumValue(class UClass* clsEnumDefiner, const struct FName& nmEnumField, const struct FName& nmEnumValue, unsigned char* cEnumValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioObject.GetEnumValue");

	UBioObject_GetEnumValue_Params params;
	params.clsEnumDefiner = clsEnumDefiner;
	params.nmEnumField = nmEnumField;
	params.nmEnumValue = nmEnumValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (cEnumValue != nullptr)
		*cEnumValue = params.cEnumValue;

	return params.ReturnValue;
}


// Function BIOC_Base.BioObject.FindClass
// (Native, Static, Public)
// Parameters:
// struct FName                   nmClass                        (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioObject::STATIC_FindClass(const struct FName& nmClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioObject.FindClass");

	UBioObject_FindClass_Params params;
	params.nmClass = nmClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPhysicsSounds.RequestSound
// (Native, Public, HasOutParms)
// Parameters:
// int                            nPriority                      (Parm)
// class UPrimitiveComponent*     oComp0                         (Parm, EditInline)
// class UPrimitiveComponent*     oComp1                         (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPhysicsSounds::RequestSound(int nPriority, class UPrimitiveComponent* oComp0, class UPrimitiveComponent* oComp1, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPhysicsSounds.RequestSound");

	UBioPhysicsSounds_RequestSound_Params params;
	params.nPriority = nPriority;
	params.oComp0 = oComp0;
	params.oComp1 = oComp1;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPhysicsSounds.Initialize
// (Native, Public)

void UBioPhysicsSounds::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPhysicsSounds.Initialize");

	UBioPhysicsSounds_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPowerScript.PlayForceFeedback
// (Native, Public)
// Parameters:
// class AActor*                  oCaster                        (Parm)
// class AActor*                  oImpacted                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::PlayForceFeedback(class AActor* oCaster, class AActor* oImpacted)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.PlayForceFeedback");

	UBioPowerScript_PlayForceFeedback_Params params;
	params.oCaster = oCaster;
	params.oImpacted = oImpacted;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.PlayGuiSound
// (Native, Public)
// Parameters:
// struct FName                   nmSound                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::PlayGuiSound(const struct FName& nmSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.PlayGuiSound");

	UBioPowerScript_PlayGuiSound_Params params;
	params.nmSound = nmSound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.GetFloorLocation
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vStartLocation                 (Parm)
// struct FVector                 vFloorLocation                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::GetFloorLocation(const struct FVector& vStartLocation, struct FVector* vFloorLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.GetFloorLocation");

	UBioPowerScript_GetFloorLocation_Params params;
	params.vStartLocation = vStartLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vFloorLocation != nullptr)
		*vFloorLocation = params.vFloorLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.AdjustCooldown
// (Defined, Event, Public, HasOutParms)
// Parameters:
// float                          fCoolDownTime                  (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::AdjustCooldown(float* fCoolDownTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.AdjustCooldown");

	UBioPowerScript_AdjustCooldown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fCoolDownTime != nullptr)
		*fCoolDownTime = params.fCoolDownTime;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.OnImpact
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oCaster                        (Parm)
// float                          fCasterStability               (Parm)
// class AActor*                  oImpacted                      (Parm)
// int                            nPreviouslyImpacted            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::OnImpact(class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.OnImpact");

	UBioPowerScript_OnImpact_Params params;
	params.oCaster = oCaster;
	params.fCasterStability = fCasterStability;
	params.oImpacted = oImpacted;
	params.nPreviouslyImpacted = nPreviouslyImpacted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.EndPhase
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EBioPowerState>    ePhase                         (Parm)
// class AActor*                  oCaster                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::EndPhase(TEnumAsByte<EBioPowerState> ePhase, class AActor* oCaster)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.EndPhase");

	UBioPowerScript_EndPhase_Params params;
	params.ePhase = ePhase;
	params.oCaster = oCaster;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.StartPhase
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EBioPowerState>    ePhase                         (Parm)
// class AActor*                  oCaster                        (Parm)
// float                          fDuration                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::StartPhase(TEnumAsByte<EBioPowerState> ePhase, class AActor* oCaster, float fDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.StartPhase");

	UBioPowerScript_StartPhase_Params params;
	params.ePhase = ePhase;
	params.oCaster = oCaster;
	params.fDuration = fDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.CanStartPower
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oCaster                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerScript::CanStartPower(class AActor* oCaster)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.CanStartPower");

	UBioPowerScript_CanStartPower_Params params;
	params.oCaster = oCaster;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerScript.InitializePowerScript
// (Defined, Event, Public)
// Parameters:
// class UBioPower*               pPower                         (Parm)

void UBioPowerScript::InitializePowerScript(class UBioPower* pPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerScript.InitializePowerScript");

	UBioPowerScript_InitializePowerScript_Params params;
	params.pPower = pPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioProceduralCameraBasic.FixedCamera
// (Defined, Static, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FActorInfo              stActorInfo                    (Parm)
// struct FCameraInfo             stCameraInfo                   (Parm, OutParm)
// bool                           bInvert                        (Parm)

void UBioProceduralCameraBasic::STATIC_FixedCamera(const struct FActorInfo& stActorInfo, bool bInvert, struct FCameraInfo* stCameraInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProceduralCameraBasic.FixedCamera");

	UBioProceduralCameraBasic_FixedCamera_Params params;
	params.stActorInfo = stActorInfo;
	params.bInvert = bInvert;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stCameraInfo != nullptr)
		*stCameraInfo = params.stCameraInfo;
}


// Function BIOC_Base.BioTriggerStream.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioTriggerStream::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerStream.UnTouch");

	ABioTriggerStream_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTriggerStream.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioTriggerStream::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerStream.Touch");

	ABioTriggerStream_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTriggerStream.Retouch
// (Native, Public)

void ABioTriggerStream::Retouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerStream.Retouch");

	ABioTriggerStream_Retouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTriggerStream.DoStasis
// (Native, Public)
// Parameters:
// class AActor*                  Touched                        (Parm)
// bool                           bTouched                       (Parm)

void ABioTriggerStream::DoStasis(class AActor* Touched, bool bTouched)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerStream.DoStasis");

	ABioTriggerStream_DoStasis_Params params;
	params.Touched = Touched;
	params.bTouched = bTouched;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTriggerStream.DoUntouch
// (Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioTriggerStream::DoUntouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerStream.DoUntouch");

	ABioTriggerStream_DoUntouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTriggerStream.DoTouch
// (Native, Public)

void ABioTriggerStream::DoTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerStream.DoTouch");

	ABioTriggerStream_DoTouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAnimNodeBlendBase.SetChildAnimTime
// (Final, Native, Public)
// Parameters:
// class UAnimNode*               oChild                         (Parm)
// float                          fTime                          (Parm)

void UBioAnimNodeBlendBase::SetChildAnimTime(class UAnimNode* oChild, float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAnimNodeBlendBase.SetChildAnimTime");

	UBioAnimNodeBlendBase_SetChildAnimTime_Params params;
	params.oChild = oChild;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAnimNodeBlendAdditivePower.GetActivePower
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UBioActivePower*         oActivePower                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioAnimNodeBlendAdditivePower::GetActivePower(class UBioActivePower** oActivePower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAnimNodeBlendAdditivePower.GetActivePower");

	UBioAnimNodeBlendAdditivePower_GetActivePower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oActivePower != nullptr)
		*oActivePower = params.oActivePower;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAnimNodeBlendByPower.GetActivePower
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UBioActivePower*         oActivePower                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioAnimNodeBlendByPower::GetActivePower(class UBioActivePower** oActivePower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAnimNodeBlendByPower.GetActivePower");

	UBioAnimNodeBlendByPower_GetActivePower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oActivePower != nullptr)
		*oActivePower = params.oActivePower;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAnimNodeBlendByPower.Reset
// (Final, Native, Private)

void UBioAnimNodeBlendByPower::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAnimNodeBlendByPower.Reset");

	UBioAnimNodeBlendByPower_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAnimNodeBlendByWeaponAction.PlayCurrentChildAnimation
// (Final, Native, Private)

void UBioAnimNodeBlendByWeaponAction::PlayCurrentChildAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAnimNodeBlendByWeaponAction.PlayCurrentChildAnimation");

	UBioAnimNodeBlendByWeaponAction_PlayCurrentChildAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBlendByTransition.GotoToState
// (Defined, Public)
// Parameters:
// struct FName                   LoopAnim                       (Parm)

void UBioArtPlaceableBlendByTransition::GotoToState(const struct FName& LoopAnim)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBlendByTransition.GotoToState");

	UBioArtPlaceableBlendByTransition_GotoToState_Params params;
	params.LoopAnim = LoopAnim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBlendByTransition.TransitionToState
// (Defined, Public)
// Parameters:
// struct FName                   TransAnim                      (Parm)
// struct FName                   LoopAnim                       (Parm)

void UBioArtPlaceableBlendByTransition::TransitionToState(const struct FName& TransAnim, const struct FName& LoopAnim)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBlendByTransition.TransitionToState");

	UBioArtPlaceableBlendByTransition_TransitionToState_Params params;
	params.TransAnim = TransAnim;
	params.LoopAnim = LoopAnim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.HandleVehicleChatterEvent
// (Final, Defined, Event, Public)
// Parameters:
// TEnumAsByte<EBioSoundSetType>  eSoundSet                      (Parm)

void ABioVehicleBase::HandleVehicleChatterEvent(TEnumAsByte<EBioSoundSetType> eSoundSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.HandleVehicleChatterEvent");

	ABioVehicleBase_HandleVehicleChatterEvent_Params params;
	params.eSoundSet = eSoundSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.OnTeleport
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void ABioVehicleBase::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.OnTeleport");

	ABioVehicleBase_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioVehicleBase::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.GetSaveObjectClass");

	ABioVehicleBase_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.SetInputs
// (Defined, Simulated, Public)
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          InUp                           (Parm)

void ABioVehicleBase::SetInputs(float InForward, float InStrafe, float InUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.SetInputs");

	ABioVehicleBase_SetInputs_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.ProxyTryToDrive
// (Defined, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::ProxyTryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.ProxyTryToDrive");

	ABioVehicleBase_ProxyTryToDrive_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.RigidBodyCollision
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void ABioVehicleBase::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.RigidBodyCollision");

	ABioVehicleBase_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function BIOC_Base.BioVehicleBase.DrawHUD
// (Defined, Simulated, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void ABioVehicleBase::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.DrawHUD");

	ABioVehicleBase_DrawHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.BioProxyDetachDriver
// (Defined, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ABioVehicleBase::BioProxyDetachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.BioProxyDetachDriver");

	ABioVehicleBase_BioProxyDetachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.DetachDriver
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ABioVehicleBase::DetachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.DetachDriver");

	ABioVehicleBase_DetachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.BioProxyAttachDriver
// (Defined, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ABioVehicleBase::BioProxyAttachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.BioProxyAttachDriver");

	ABioVehicleBase_BioProxyAttachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.AttachDriver
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ABioVehicleBase::AttachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.AttachDriver");

	ABioVehicleBase_AttachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.CalcCamera
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)
// float                          out_FOV                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.CalcCamera");

	ABioVehicleBase_CalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.SetExitingSquadLocation
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 vExitCenterLocation            (Parm)
// float                          fPlacementOffset               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::SetExitingSquadLocation(const struct FVector& vExitCenterLocation, float fPlacementOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.SetExitingSquadLocation");

	ABioVehicleBase_SetExitingSquadLocation_Params params;
	params.vExitCenterLocation = vExitCenterLocation;
	params.fPlacementOffset = fPlacementOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.PlaceExitingDriver
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   ExitingDriver                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::PlaceExitingDriver(class APawn* ExitingDriver)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.PlaceExitingDriver");

	ABioVehicleBase_PlaceExitingDriver_Params params;
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.DriverEnter
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::DriverEnter(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.DriverEnter");

	ABioVehicleBase_DriverEnter_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.DriverLeave
// (Defined, Event, Public, HasDefaults)
// Parameters:
// bool                           bForceLeave                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::DriverLeave(bool bForceLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.DriverLeave");

	ABioVehicleBase_DriverLeave_Params params;
	params.bForceLeave = bForceLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.SetPartyCollisionState
// (Defined, Public)
// Parameters:
// bool                           bCollideState                  (Parm)

void ABioVehicleBase::SetPartyCollisionState(bool bCollideState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.SetPartyCollisionState");

	ABioVehicleBase_SetPartyCollisionState_Params params;
	params.bCollideState = bCollideState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.BioBeginPlay
// (Defined, Simulated, Public)

void ABioVehicleBase::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.BioBeginPlay");

	ABioVehicleBase_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.KillAllMomentum
// (Native, Public)

void ABioVehicleBase::KillAllMomentum()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.KillAllMomentum");

	ABioVehicleBase_KillAllMomentum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.IsExitLocationValid
// (Native, Public)
// Parameters:
// struct FVector                 vExitLocation                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::IsExitLocationValid(const struct FVector& vExitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.IsExitLocationValid");

	ABioVehicleBase_IsExitLocationValid_Params params;
	params.vExitLocation = vExitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.InitializeForPlay
// (Final, Native, Private)

void ABioVehicleBase::InitializeForPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.InitializeForPlay");

	ABioVehicleBase_InitializeForPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBase.PerformForceExitCleanup
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::PerformForceExitCleanup()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.PerformForceExitCleanup");

	ABioVehicleBase_PerformForceExitCleanup_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.BioCanExitVehicle
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::BioCanExitVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.BioCanExitVehicle");

	ABioVehicleBase_BioCanExitVehicle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.BioCanEnterVehicle
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVehicleBase::BioCanEnterVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.BioCanEnterVehicle");

	ABioVehicleBase_BioCanEnterVehicle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBase.GetVisualImpactSet
// (Native, Public)
// Parameters:
// class UBioVISSimple*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioVISSimple* ABioVehicleBase::GetVisualImpactSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBase.GetVisualImpactSet");

	ABioVehicleBase_GetVisualImpactSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleTrackSet.FindParticleSystem
// (Native, Public)
// Parameters:
// class UPhysicalMaterial*       a_Material                     (Parm)
// class UParticleSystem*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UParticleSystem* UBioVehicleTrackSet::FindParticleSystem(class UPhysicalMaterial* a_Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleTrackSet.FindParticleSystem");

	UBioVehicleTrackSet_FindParticleSystem_Params params;
	params.a_Material = a_Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_AbilityEnable.Activated
// (Defined, Public)

void UBioSeqAct_AbilityEnable::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AbilityEnable.Activated");

	UBioSeqAct_AbilityEnable_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSequenceLatentAction.UpdateOp
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSequenceLatentAction::UpdateOp(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSequenceLatentAction.UpdateOp");

	UBioSequenceLatentAction_UpdateOp_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_AOECauseDamage.Activated
// (Defined, Public, HasDefaults)

void UBioSeqAct_AOECauseDamage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AOECauseDamage.Activated");

	UBioSeqAct_AOECauseDamage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ApplyMetaVFX.Activated
// (Defined, Public)

void UBioSeqAct_ApplyMetaVFX::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ApplyMetaVFX.Activated");

	UBioSeqAct_ApplyMetaVFX_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DecodeCombatResult.Activated
// (Defined, Public)

void UBioSeqAct_DecodeCombatResult::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DecodeCombatResult.Activated");

	UBioSeqAct_DecodeCombatResult_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DecodeMovmentResult.Activated
// (Defined, Public)

void UBioSeqAct_DecodeMovmentResult::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DecodeMovmentResult.Activated");

	UBioSeqAct_DecodeMovmentResult_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_EnableCombat.Activated
// (Defined, Public)

void UBioSeqAct_EnableCombat::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_EnableCombat.Activated");

	UBioSeqAct_EnableCombat_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_FollowSquadLeader.Activated
// (Defined, Public)

void UBioSeqAct_FollowSquadLeader::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_FollowSquadLeader.Activated");

	UBioSeqAct_FollowSquadLeader_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetSquadInfo.Activated
// (Defined, Public)

void UBioSeqAct_GetSquadInfo::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetSquadInfo.Activated");

	UBioSeqAct_GetSquadInfo_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_InsertPostProcess.Activated
// (Defined, Public)

void UBioSeqAct_InsertPostProcess::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_InsertPostProcess.Activated");

	UBioSeqAct_InsertPostProcess_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_InsertPostProcess.AddPostProcessEffect
// (Native, Public)

void UBioSeqAct_InsertPostProcess::AddPostProcessEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_InsertPostProcess.AddPostProcessEffect");

	UBioSeqAct_InsertPostProcess_AddPostProcessEffect_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_IsAbilityEnabled.Activated
// (Defined, Public)

void UBioSeqAct_IsAbilityEnabled::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_IsAbilityEnabled.Activated");

	UBioSeqAct_IsAbilityEnabled_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_Movie.Activated
// (Defined, Public)

void UBioSeqAct_Movie::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_Movie.Activated");

	UBioSeqAct_Movie_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_NonCombatArea.Activated
// (Defined, Public)

void UBioSeqAct_NonCombatArea::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_NonCombatArea.Activated");

	UBioSeqAct_NonCombatArea_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_OverrideStagePlacement.Activated
// (Defined, Public)

void UBioSeqAct_OverrideStagePlacement::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_OverrideStagePlacement.Activated");

	UBioSeqAct_OverrideStagePlacement_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_OverrideStagePlacement.SetActor
// (Defined, Public)
// Parameters:
// class AActor*                  aInput                         (Parm)
// TEnumAsByte<EStageNodes>       Node                           (Parm)

void UBioSeqAct_OverrideStagePlacement::SetActor(class AActor* aInput, TEnumAsByte<EStageNodes> Node)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_OverrideStagePlacement.SetActor");

	UBioSeqAct_OverrideStagePlacement_SetActor_Params params;
	params.aInput = aInput;
	params.Node = Node;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_PlayFaceFXAnim.Activated
// (Native, Public)

void UBioSeqAct_PlayFaceFXAnim::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_PlayFaceFXAnim.Activated");

	UBioSeqAct_PlayFaceFXAnim_Activated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_PreloadCinematicAudio.UpdateOp
// (Native, Public)
// Parameters:
// float                          fDelta                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_PreloadCinematicAudio::UpdateOp(float fDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_PreloadCinematicAudio.UpdateOp");

	UBioSeqAct_PreloadCinematicAudio_UpdateOp_Params params;
	params.fDelta = fDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_PreloadCinematicAudio.Activated
// (Native, Public)

void UBioSeqAct_PreloadCinematicAudio::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_PreloadCinematicAudio.Activated");

	UBioSeqAct_PreloadCinematicAudio_Activated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_RandomWalk.Activated
// (Defined, Public)

void UBioSeqAct_RandomWalk::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_RandomWalk.Activated");

	UBioSeqAct_RandomWalk_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_RemovePostProcess.Activated
// (Defined, Public)

void UBioSeqAct_RemovePostProcess::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_RemovePostProcess.Activated");

	UBioSeqAct_RemovePostProcess_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_RemovePostProcess.RemovePostProcessEffect
// (Native, Public)

void UBioSeqAct_RemovePostProcess::RemovePostProcessEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_RemovePostProcess.RemovePostProcessEffect");

	UBioSeqAct_RemovePostProcess_RemovePostProcessEffect_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ResetAnimationState.IsValidUISequenceObject
// (Defined, Event, Public)
// Parameters:
// class UUIScreenObject*         TargetObject                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ResetAnimationState::IsValidUISequenceObject(class UUIScreenObject* TargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ResetAnimationState.IsValidUISequenceObject");

	UBioSeqAct_ResetAnimationState_IsValidUISequenceObject_Params params;
	params.TargetObject = TargetObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_SetStreamingState.Activated
// (Defined, Public, HasDefaults)

void UBioSeqAct_SetStreamingState::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetStreamingState.Activated");

	UBioSeqAct_SetStreamingState_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowCredits.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ShowCredits::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowCredits.UpdateOp");

	UBioSeqAct_ShowCredits_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_ShowCredits.Activated
// (Defined, Public)

void UBioSeqAct_ShowCredits::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowCredits.Activated");

	UBioSeqAct_ShowCredits_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowIntroText.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ShowIntroText::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowIntroText.UpdateOp");

	UBioSeqAct_ShowIntroText_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_ShowIntroText.Activated
// (Defined, Public)

void UBioSeqAct_ShowIntroText::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowIntroText.Activated");

	UBioSeqAct_ShowIntroText_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowMainMenu.Activated
// (Defined, Public)

void UBioSeqAct_ShowMainMenu::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowMainMenu.Activated");

	UBioSeqAct_ShowMainMenu_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowPartySelectionGUI.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ShowPartySelectionGUI::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowPartySelectionGUI.UpdateOp");

	UBioSeqAct_ShowPartySelectionGUI_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_ShowPartySelectionGUI.Activated
// (Defined, Public)

void UBioSeqAct_ShowPartySelectionGUI::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowPartySelectionGUI.Activated");

	UBioSeqAct_ShowPartySelectionGUI_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowSpecialization.Activated
// (Defined, Public)

void UBioSeqAct_ShowSpecialization::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowSpecialization.Activated");

	UBioSeqAct_ShowSpecialization_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowSplash.Activated
// (Defined, Public)

void UBioSeqAct_ShowSplash::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowSplash.Activated");

	UBioSeqAct_ShowSplash_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowSplash.FakeActivate
// (Defined, Event, Public)

void UBioSeqAct_ShowSplash::FakeActivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowSplash.FakeActivate");

	UBioSeqAct_ShowSplash_FakeActivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SkillGame.GrantCustomGameXp
// (Defined, Event, Public)
// Parameters:
// class ABioWorldInfo*           oBWorldInfo                    (Parm)

void UBioSeqAct_SkillGame::GrantCustomGameXp(class ABioWorldInfo* oBWorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SkillGame.GrantCustomGameXp");

	UBioSeqAct_SkillGame_GrantCustomGameXp_Params params;
	params.oBWorldInfo = oBWorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SkillGame.OnCancel
// (Native, Public)

void UBioSeqAct_SkillGame::OnCancel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SkillGame.OnCancel");

	UBioSeqAct_SkillGame_OnCancel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SkillGame.OnFailure
// (Native, Public)
// Parameters:
// int                            i_salvage                      (Parm)

void UBioSeqAct_SkillGame::OnFailure(int i_salvage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SkillGame.OnFailure");

	UBioSeqAct_SkillGame_OnFailure_Params params;
	params.i_salvage = i_salvage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SkillGame.OnSuccess
// (Native, Public)
// Parameters:
// int                            i_salvage                      (Parm)

void UBioSeqAct_SkillGame::OnSuccess(int i_salvage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SkillGame.OnSuccess");

	UBioSeqAct_SkillGame_OnSuccess_Params params;
	params.i_salvage = i_salvage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_StageSwitchCamera.BioGetCameraNumber
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSeqAct_StageSwitchCamera::BioGetCameraNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_StageSwitchCamera.BioGetCameraNumber");

	UBioSeqAct_StageSwitchCamera_BioGetCameraNumber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_WalkWaypointSet.Activated
// (Defined, Public)

void UBioSeqAct_WalkWaypointSet::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_WalkWaypointSet.Activated");

	UBioSeqAct_WalkWaypointSet_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData.OnDisabled
// (Event, Public)
// Parameters:
// class ABioAiController*        oController                    (Parm)
// bool                           bStarted                       (Parm)

void UBioSeqData::OnDisabled(class ABioAiController* oController, bool bStarted)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.OnDisabled");

	UBioSeqData_OnDisabled_Params params;
	params.oController = oController;
	params.bStarted = bStarted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData.CanDisable
// (Defined, Event, Public)
// Parameters:
// class ABioAiController*        oController                    (Parm)
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqData::CanDisable(class ABioAiController* oController, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.CanDisable");

	UBioSeqData_CanDisable_Params params;
	params.oController = oController;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData.GetDebugDescription
// (Defined, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSeqData::GetDebugDescription()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.GetDebugDescription");

	UBioSeqData_GetDebugDescription_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData.CancelOnLOS
// (Defined, Event, Public)
// Parameters:
// class ABioAiController*        oController                    (Parm)
// class APawn*                   oLOSTarget                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqData::CancelOnLOS(class ABioAiController* oController, class APawn* oLOSTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.CancelOnLOS");

	UBioSeqData_CancelOnLOS_Params params;
	params.oController = oController;
	params.oLOSTarget = oLOSTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData.OnCancel
// (Event, Public)
// Parameters:
// class ABioAiController*        oController                    (Parm)
// bool                           bStarted                       (Parm)

void UBioSeqData::OnCancel(class ABioAiController* oController, bool bStarted)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.OnCancel");

	UBioSeqData_OnCancel_Params params;
	params.oController = oController;
	params.bStarted = bStarted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData.OnStart
// (Event, Public)
// Parameters:
// class ABioAiController*        oController                    (Parm)

void UBioSeqData::OnStart(class ABioAiController* oController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.OnStart");

	UBioSeqData_OnStart_Params params;
	params.oController = oController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData.CanCancel
// (Defined, Event, Public)
// Parameters:
// class ABioAiController*        oController                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqData::CanCancel(class ABioAiController* oController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.CanCancel");

	UBioSeqData_CanCancel_Params params;
	params.oController = oController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData.OnTick
// (Defined, Event, Public)
// Parameters:
// class ABioAiController*        oController                    (Parm)
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqData::OnTick(class ABioAiController* oController, float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.OnTick");

	UBioSeqData_OnTick_Params params;
	params.oController = oController;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData.GetPawnBehavior
// (Native, Public)
// Parameters:
// class AActor*                  oActor                         (Parm)
// class UBioEpicPawnBehavior*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioEpicPawnBehavior* UBioSeqData::GetPawnBehavior(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.GetPawnBehavior");

	UBioSeqData_GetPawnBehavior_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData.DoCallBack
// (Native, Public)
// Parameters:
// int                            nReason                        (Parm)

void UBioSeqData::DoCallBack(int nReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData.DoCallBack");

	UBioSeqData_DoCallBack_Params params;
	params.nReason = nReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData_MoveToPoint.ResetMoveTarget
// (Native, Public)
// Parameters:
// struct FVector                 vNewLocation                   (Parm)
// float                          fMoveTolerance                 (OptionalParm, Parm)

void UBioSeqData_MoveToPoint::ResetMoveTarget(const struct FVector& vNewLocation, float fMoveTolerance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData_MoveToPoint.ResetMoveTarget");

	UBioSeqData_MoveToPoint_ResetMoveTarget_Params params;
	params.vNewLocation = vNewLocation;
	params.fMoveTolerance = fMoveTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData_UseCover.GetCrouchByCoverType
// (Defined, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqData_UseCover::GetCrouchByCoverType(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData_UseCover.GetCrouchByCoverType");

	UBioSeqData_UseCover_GetCrouchByCoverType_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData_UseCover.Empty
// (Native, Public)

void UBioSeqData_UseCover::Empty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData_UseCover.Empty");

	UBioSeqData_UseCover_Empty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData_UseCover.UnClaim
// (Native, Public)
// Parameters:
// class AController*             OldClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bUnclaimAll                    (Parm)

void UBioSeqData_UseCover::UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData_UseCover.UnClaim");

	UBioSeqData_UseCover_UnClaim_Params params;
	params.OldClaim = OldClaim;
	params.SlotIdx = SlotIdx;
	params.bUnclaimAll = bUnclaimAll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqData_UseCover.Claim
// (Native, Public)
// Parameters:
// class AController*             NewClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqData_UseCover::Claim(class AController* NewClaim, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData_UseCover.Claim");

	UBioSeqData_UseCover_Claim_Params params;
	params.NewClaim = NewClaim;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqData_UseCover.UpdateHideLocation
// (Native, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// int                            SlotIdx                        (Parm)

void UBioSeqData_UseCover::UpdateHideLocation(class ABioPawn* pPawn, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqData_UseCover.UpdateHideLocation");

	UBioSeqData_UseCover_UpdateHideLocation_Params params;
	params.pPawn = pPawn;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCurveDrivenParameter.GetValue
// (Native, Public)
// Parameters:
// float                          fTime                          (Parm)
// float                          fScale                         (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioCurveDrivenParameter::GetValue(float fTime, float fScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCurveDrivenParameter.GetValue");

	UBioCurveDrivenParameter_GetValue_Params params;
	params.fTime = fTime;
	params.fScale = fScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMetaVFX.ApplyEffect
// (Native, Static, Public)
// Parameters:
// class UBioMetaVFX*             MetaEffect                     (Parm)
// class UObject*                 Target                         (Parm)
// float                          fLifeTime                      (OptionalParm, Parm)

void UBioMetaVFX::STATIC_ApplyEffect(class UBioMetaVFX* MetaEffect, class UObject* Target, float fLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMetaVFX.ApplyEffect");

	UBioMetaVFX_ApplyEffect_Params params;
	params.MetaEffect = MetaEffect;
	params.Target = Target;
	params.fLifeTime = fLifeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMetaVFX.ApplyEffectByName
// (Native, Static, Public)
// Parameters:
// struct FString                 sEffect                        (Parm, NeedCtorLink)
// class UObject*                 Target                         (Parm)
// float                          fLifeTime                      (OptionalParm, Parm)

void UBioMetaVFX::STATIC_ApplyEffectByName(const struct FString& sEffect, class UObject* Target, float fLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMetaVFX.ApplyEffectByName");

	UBioMetaVFX_ApplyEffectByName_Params params;
	params.sEffect = sEffect;
	params.Target = Target;
	params.fLifeTime = fLifeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVFXTemplate.InitializeTemplate
// (Defined, Event, Public)

void UBioVFXTemplate::InitializeTemplate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVFXTemplate.InitializeTemplate");

	UBioVFXTemplate_InitializeTemplate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVISSimple.PreloadEffects
// (Native, Public)

void UBioVISSimple::PreloadEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISSimple.PreloadEffects");

	UBioVISSimple_PreloadEffects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVISSimple.ApplyVisualImpact
// (Native, Public)
// Parameters:
// struct FVector                 vImpactLocation                (Parm)
// struct FRotator                rImpactRotation                (Parm)
// struct FRotator                rDirectionOfImpact             (Parm)
// struct FTraceHitInfo           oHitInfo                       (Parm)
// class AActor*                  oBase                          (OptionalParm, Parm)
// bool                           bApplyMaterialEffect           (OptionalParm, Parm)
// bool                           bApplyVisualEffect             (OptionalParm, Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* UBioVISSimple::ApplyVisualImpact(const struct FVector& vImpactLocation, const struct FRotator& rImpactRotation, const struct FRotator& rDirectionOfImpact, const struct FTraceHitInfo& oHitInfo, class AActor* oBase, bool bApplyMaterialEffect, bool bApplyVisualEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISSimple.ApplyVisualImpact");

	UBioVISSimple_ApplyVisualImpact_Params params;
	params.vImpactLocation = vImpactLocation;
	params.rImpactRotation = rImpactRotation;
	params.rDirectionOfImpact = rDirectionOfImpact;
	params.oHitInfo = oHitInfo;
	params.oBase = oBase;
	params.bApplyMaterialEffect = bApplyMaterialEffect;
	params.bApplyVisualEffect = bApplyVisualEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVISFootstep.ApplyFootstepVisualImpact
// (Native, Public)
// Parameters:
// struct FVector                 vFootstepLocation              (Parm)
// struct FRotator                rFootstepRotation              (Parm)
// struct FTraceHitInfo           oHit                           (Parm)
// float                          fSpeedRatio                    (Parm)
// class AActor*                  oActor                         (Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* UBioVISFootstep::ApplyFootstepVisualImpact(const struct FVector& vFootstepLocation, const struct FRotator& rFootstepRotation, const struct FTraceHitInfo& oHit, float fSpeedRatio, class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISFootstep.ApplyFootstepVisualImpact");

	UBioVISFootstep_ApplyFootstepVisualImpact_Params params;
	params.vFootstepLocation = vFootstepLocation;
	params.rFootstepRotation = rFootstepRotation;
	params.oHit = oHit;
	params.fSpeedRatio = fSpeedRatio;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVISFootstep.GetCombatValue
// (Native, Public)
// Parameters:
// class UPhysicalMaterial*       oPhysMat                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioVISFootstep::GetCombatValue(class UPhysicalMaterial* oPhysMat)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISFootstep.GetCombatValue");

	UBioVISFootstep_GetCombatValue_Params params;
	params.oPhysMat = oPhysMat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVISFootstep.GetDirtValue
// (Native, Public)
// Parameters:
// class UPhysicalMaterial*       oPhysMat                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioVISFootstep::GetDirtValue(class UPhysicalMaterial* oPhysMat)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISFootstep.GetDirtValue");

	UBioVISFootstep_GetDirtValue_Params params;
	params.oPhysMat = oPhysMat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVISFootstep.GetGrimeValue
// (Native, Public)
// Parameters:
// class UPhysicalMaterial*       oPhysMat                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioVISFootstep::GetGrimeValue(class UPhysicalMaterial* oPhysMat)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISFootstep.GetGrimeValue");

	UBioVISFootstep_GetGrimeValue_Params params;
	params.oPhysMat = oPhysMat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVISGrenade.ApplyGrenadeVisualImpact
// (Native, Public)
// Parameters:
// struct FVector                 vPosition                      (Parm)
// struct FVector                 vHitNormal                     (Parm)
// struct FVector                 vDirection                     (Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* UBioVISGrenade::ApplyGrenadeVisualImpact(const struct FVector& vPosition, const struct FVector& vHitNormal, const struct FVector& vDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISGrenade.ApplyGrenadeVisualImpact");

	UBioVISGrenade_ApplyGrenadeVisualImpact_Params params;
	params.vPosition = vPosition;
	params.vHitNormal = vHitNormal;
	params.vDirection = vDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVISGrenade.PreloadEffects
// (Native, Public)

void UBioVISGrenade::PreloadEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISGrenade.PreloadEffects");

	UBioVISGrenade_PreloadEffects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffect.SetSound
// (Native, Public)
// Parameters:
// int                            nIndexInSoundArray             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVisualEffect::SetSound(int nIndexInSoundArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.SetSound");

	ABioVisualEffect_SetSound_Params params;
	params.nIndexInSoundArray = nIndexInSoundArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.CreateVFXOnPosition
// (Native, Static, Public)
// Parameters:
// class UBioVFXTemplate*         a_pTemplate                    (Parm)
// struct FVector                 vPosition                      (Parm)
// struct FRotator                rOrientation                   (Parm)
// float                          fLifeTime                      (OptionalParm, Parm)
// bool                           bUseVFXPool                    (OptionalParm, Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* ABioVisualEffect::STATIC_CreateVFXOnPosition(class UBioVFXTemplate* a_pTemplate, const struct FVector& vPosition, const struct FRotator& rOrientation, float fLifeTime, bool bUseVFXPool)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.CreateVFXOnPosition");

	ABioVisualEffect_CreateVFXOnPosition_Params params;
	params.a_pTemplate = a_pTemplate;
	params.vPosition = vPosition;
	params.rOrientation = rOrientation;
	params.fLifeTime = fLifeTime;
	params.bUseVFXPool = bUseVFXPool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.CreateVFXOnMesh
// (Native, Static, Public)
// Parameters:
// class UBioVFXTemplate*         a_pTemplate                    (Parm)
// class AActor*                  Target                         (Parm)
// struct FName                   sBoneName                      (Parm)
// float                          fLifeTime                      (OptionalParm, Parm)
// class USkeletalMeshComponent*  mTargetMesh                    (OptionalParm, Parm, EditInline)
// bool                           bUseVFXPool                    (OptionalParm, Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* ABioVisualEffect::STATIC_CreateVFXOnMesh(class UBioVFXTemplate* a_pTemplate, class AActor* Target, const struct FName& sBoneName, float fLifeTime, class USkeletalMeshComponent* mTargetMesh, bool bUseVFXPool)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.CreateVFXOnMesh");

	ABioVisualEffect_CreateVFXOnMesh_Params params;
	params.a_pTemplate = a_pTemplate;
	params.Target = Target;
	params.sBoneName = sBoneName;
	params.fLifeTime = fLifeTime;
	params.mTargetMesh = mTargetMesh;
	params.bUseVFXPool = bUseVFXPool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.CreateCrustEffect
// (Native, Static, Public)
// Parameters:
// class UBioVFXTemplate*         a_pTemplate                    (Parm)
// class AActor*                  Target                         (Parm)
// float                          fLifeTime                      (OptionalParm, Parm)
// bool                           bUseVFXPool                    (OptionalParm, Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* ABioVisualEffect::STATIC_CreateCrustEffect(class UBioVFXTemplate* a_pTemplate, class AActor* Target, float fLifeTime, bool bUseVFXPool)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.CreateCrustEffect");

	ABioVisualEffect_CreateCrustEffect_Params params;
	params.a_pTemplate = a_pTemplate;
	params.Target = Target;
	params.fLifeTime = fLifeTime;
	params.bUseVFXPool = bUseVFXPool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.SetLifeTime
// (Native, Public)
// Parameters:
// float                          fLife                          (Parm)

void ABioVisualEffect::SetLifeTime(float fLife)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.SetLifeTime");

	ABioVisualEffect_SetLifeTime_Params params;
	params.fLife = fLife;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffect.SetVectorParameter
// (Native, Public)
// Parameters:
// struct FName                   sParameter                     (Parm)
// struct FVector                 vValue                         (Parm)

void ABioVisualEffect::SetVectorParameter(const struct FName& sParameter, const struct FVector& vValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.SetVectorParameter");

	ABioVisualEffect_SetVectorParameter_Params params;
	params.sParameter = sParameter;
	params.vValue = vValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffect.SetScalarParameter
// (Native, Public)
// Parameters:
// struct FName                   sParameter                     (Parm)
// float                          fValue                         (Parm)

void ABioVisualEffect::SetScalarParameter(const struct FName& sParameter, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.SetScalarParameter");

	ABioVisualEffect_SetScalarParameter_Params params;
	params.sParameter = sParameter;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffect.GetStateDuration
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioVFXState>      eState                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioVisualEffect::GetStateDuration(TEnumAsByte<EBioVFXState> eState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.GetStateDuration");

	ABioVisualEffect_GetStateDuration_Params params;
	params.eState = eState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.GetEffectDuration
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioVisualEffect::GetEffectDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.GetEffectDuration");

	ABioVisualEffect_GetEffectDuration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.IsAttached
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVisualEffect::IsAttached()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.IsAttached");

	ABioVisualEffect_IsAttached_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.SetBasePrefab
// (Native, Public)
// Parameters:
// class UPrefab*                 pBase                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVisualEffect::SetBasePrefab(class UPrefab* pBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.SetBasePrefab");

	ABioVisualEffect_SetBasePrefab_Params params;
	params.pBase = pBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.SetState
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioVFXState>      eState                         (Parm)
// bool                           bForceSetState                 (OptionalParm, Parm)
// bool                           bPlayAudio                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVisualEffect::SetState(TEnumAsByte<EBioVFXState> eState, bool bForceSetState, bool bPlayAudio)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.SetState");

	ABioVisualEffect_SetState_Params params;
	params.eState = eState;
	params.bForceSetState = bForceSetState;
	params.bPlayAudio = bPlayAudio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.SetPaused
// (Native, Public)
// Parameters:
// bool                           bPause                         (Parm)
// bool                           bForceRefresh                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioVisualEffect::SetPaused(bool bPause, bool bForceRefresh)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.SetPaused");

	ABioVisualEffect_SetPaused_Params params;
	params.bPause = bPause;
	params.bForceRefresh = bForceRefresh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffect.PauseOnDeath
// (Defined, Public)
// Parameters:
// bool                           bPause                         (Parm)

void ABioVisualEffect::PauseOnDeath(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.PauseOnDeath");

	ABioVisualEffect_PauseOnDeath_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffect.LoopDuration
// (Defined, Public)
// Parameters:
// bool                           bLoop                          (Parm)

void ABioVisualEffect::LoopDuration(bool bLoop)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffect.LoopDuration");

	ABioVisualEffect_LoopDuration_Params params;
	params.bLoop = bLoop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffectPool.PrimePoolEffects
// (Native, Public)
// Parameters:
// int                            a_nNumEffects                  (OptionalParm, Parm)

void UBioVisualEffectPool::PrimePoolEffects(int a_nNumEffects)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffectPool.PrimePoolEffects");

	UBioVisualEffectPool_PrimePoolEffects_Params params;
	params.a_nNumEffects = a_nNumEffects;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffectPool.GetEffect
// (Native, Public)
// Parameters:
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* UBioVisualEffectPool::GetEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffectPool.GetEffect");

	UBioVisualEffectPool_GetEffect_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffectPool.SetPoolSize
// (Native, Public)
// Parameters:
// int                            a_nMaxSize                     (Parm)
// int                            a_nMinSize                     (Parm)

void UBioVisualEffectPool::SetPoolSize(int a_nMaxSize, int a_nMinSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffectPool.SetPoolSize");

	UBioVisualEffectPool_SetPoolSize_Params params;
	params.a_nMaxSize = a_nMaxSize;
	params.a_nMinSize = a_nMinSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVisualEffectPool.Initialize
// (Native, Public)
// Parameters:
// class UBioVFXTemplate*         a_oTemplate                    (Parm)
// int                            nMaxNumEffects                 (Parm)
// int                            nMinNumEffects                 (Parm)

void UBioVisualEffectPool::Initialize(class UBioVFXTemplate* a_oTemplate, int nMaxNumEffects, int nMinNumEffects)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffectPool.Initialize");

	UBioVisualEffectPool_Initialize_Params params;
	params.a_oTemplate = a_oTemplate;
	params.nMaxNumEffects = nMaxNumEffects;
	params.nMinNumEffects = nMinNumEffects;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVISXModSet.ApplyVisualImpact
// (Native, Public)
// Parameters:
// struct FVector                 vHitLocation                   (Parm)
// struct FRotator                rHitRotation                   (Parm)
// struct FRotator                rDirectionOfImpact             (Parm)
// class UBioVISWeapon*           oWeaponVIS                     (Parm)
// struct FTraceHitInfo           oHit                           (Parm)
// class AActor*                  oBase                          (OptionalParm, Parm)

void UBioVISXModSet::ApplyVisualImpact(const struct FVector& vHitLocation, const struct FRotator& rHitRotation, const struct FRotator& rDirectionOfImpact, class UBioVISWeapon* oWeaponVIS, const struct FTraceHitInfo& oHit, class AActor* oBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVISXModSet.ApplyVisualImpact");

	UBioVISXModSet_ApplyVisualImpact_Params params;
	params.vHitLocation = vHitLocation;
	params.rHitRotation = rHitRotation;
	params.rDirectionOfImpact = rDirectionOfImpact;
	params.oWeaponVIS = oWeaponVIS;
	params.oHit = oHit;
	params.oBase = oBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConvNodeTrack.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConvNodeTrack::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrack.KeyDataDisplayName");

	UBioConvNodeTrack_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConvNodeTrack.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConvNodeTrack::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrack.KeyDataArrayName");

	UBioConvNodeTrack_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConvNodeTrack.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConvNodeTrack::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrack.NewKeyDefaultName");

	UBioConvNodeTrack_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConvNodeTrack.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConvNodeTrack::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrack.AllowKeyNaming");

	UBioConvNodeTrack_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConvNodeTrackDebug.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConvNodeTrackDebug::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrackDebug.KeyDataDisplayName");

	UBioConvNodeTrackDebug_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConvNodeTrackDebug.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConvNodeTrackDebug::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrackDebug.KeyDataArrayName");

	UBioConvNodeTrackDebug_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConvNodeTrackDebug.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConvNodeTrackDebug::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrackDebug.NewKeyDefaultName");

	UBioConvNodeTrackDebug_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConvNodeTrackDebug.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConvNodeTrackDebug::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConvNodeTrackDebug.AllowKeyNaming");

	UBioConvNodeTrackDebug_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackDOF.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackDOF::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackDOF.KeyDataDisplayName");

	UBioEvtSysTrackDOF_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackDOF.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackDOF::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackDOF.KeyDataArrayName");

	UBioEvtSysTrackDOF_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackDOF.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackDOF::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackDOF.NewKeyDefaultName");

	UBioEvtSysTrackDOF_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackDOF.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackDOF::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackDOF.AllowKeyNaming");

	UBioEvtSysTrackDOF_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackFuncShot.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackFuncShot::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackFuncShot.KeyDataDisplayName");

	UBioEvtSysTrackFuncShot_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackFuncShot.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackFuncShot::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackFuncShot.KeyDataArrayName");

	UBioEvtSysTrackFuncShot_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackFuncShot.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackFuncShot::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackFuncShot.NewKeyDefaultName");

	UBioEvtSysTrackFuncShot_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackFuncShot.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackFuncShot::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackFuncShot.AllowKeyNaming");

	UBioEvtSysTrackFuncShot_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackGesture.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackGesture::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackGesture.KeyDataDisplayName");

	UBioEvtSysTrackGesture_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackGesture.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackGesture::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackGesture.KeyDataArrayName");

	UBioEvtSysTrackGesture_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackGesture.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackGesture::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackGesture.NewKeyDefaultName");

	UBioEvtSysTrackGesture_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackGesture.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackGesture::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackGesture.AllowKeyNaming");

	UBioEvtSysTrackGesture_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackGestureInst.FindActorByTagForScript
// (Final, Native, Static, Public)
// Parameters:
// struct FName                   nmTagToFind                    (Parm)
// class UInterpTrackInst*        pTrackInst                     (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioEvtSysTrackGestureInst::STATIC_FindActorByTagForScript(const struct FName& nmTagToFind, class UInterpTrackInst* pTrackInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackGestureInst.FindActorByTagForScript");

	UBioEvtSysTrackGestureInst_FindActorByTagForScript_Params params;
	params.nmTagToFind = nmTagToFind;
	params.pTrackInst = pTrackInst;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackLookAt.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackLookAt::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackLookAt.KeyDataDisplayName");

	UBioEvtSysTrackLookAt_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackLookAt.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackLookAt::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackLookAt.KeyDataArrayName");

	UBioEvtSysTrackLookAt_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackLookAt.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackLookAt::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackLookAt.NewKeyDefaultName");

	UBioEvtSysTrackLookAt_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackLookAt.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackLookAt::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackLookAt.AllowKeyNaming");

	UBioEvtSysTrackLookAt_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSetFacing.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSetFacing::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSetFacing.KeyDataDisplayName");

	UBioEvtSysTrackSetFacing_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSetFacing.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSetFacing::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSetFacing.KeyDataArrayName");

	UBioEvtSysTrackSetFacing_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSetFacing.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSetFacing::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSetFacing.NewKeyDefaultName");

	UBioEvtSysTrackSetFacing_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSetFacing.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackSetFacing::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSetFacing.AllowKeyNaming");

	UBioEvtSysTrackSetFacing_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSubtitles.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSubtitles::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSubtitles.KeyDataDisplayName");

	UBioEvtSysTrackSubtitles_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSubtitles.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSubtitles::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSubtitles.KeyDataArrayName");

	UBioEvtSysTrackSubtitles_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSubtitles.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSubtitles::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSubtitles.NewKeyDefaultName");

	UBioEvtSysTrackSubtitles_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSubtitles.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackSubtitles::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSubtitles.AllowKeyNaming");

	UBioEvtSysTrackSubtitles_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSwitchCamera.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSwitchCamera::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSwitchCamera.KeyDataDisplayName");

	UBioEvtSysTrackSwitchCamera_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSwitchCamera.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSwitchCamera::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSwitchCamera.KeyDataArrayName");

	UBioEvtSysTrackSwitchCamera_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSwitchCamera.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackSwitchCamera::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSwitchCamera.NewKeyDefaultName");

	UBioEvtSysTrackSwitchCamera_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackSwitchCamera.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackSwitchCamera::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackSwitchCamera.AllowKeyNaming");

	UBioEvtSysTrackSwitchCamera_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackVOElements.KeyDataDisplayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackVOElements::STATIC_KeyDataDisplayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackVOElements.KeyDataDisplayName");

	UBioEvtSysTrackVOElements_KeyDataDisplayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackVOElements.KeyDataArrayName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackVOElements::STATIC_KeyDataArrayName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackVOElements.KeyDataArrayName");

	UBioEvtSysTrackVOElements_KeyDataArrayName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackVOElements.NewKeyDefaultName
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioEvtSysTrackVOElements::STATIC_NewKeyDefaultName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackVOElements.NewKeyDefaultName");

	UBioEvtSysTrackVOElements_NewKeyDefaultName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEvtSysTrackVOElements.AllowKeyNaming
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEvtSysTrackVOElements::STATIC_AllowKeyNaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEvtSysTrackVOElements.AllowKeyNaming");

	UBioEvtSysTrackVOElements_AllowKeyNaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVisualEffectTrackInst.Create
// (Native, Public)
// Parameters:
// class ABioVisualEffect*        Base                           (Parm)

void UBioVisualEffectTrackInst::Create(class ABioVisualEffect* Base)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVisualEffectTrackInst.Create");

	UBioVisualEffectTrackInst_Create_Params params;
	params.Base = Base;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.LeaderChanged
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                OldLeader                      (Parm)
// class ABioPawn*                NewLeader                      (Parm)

void UUnVince::STATIC_LeaderChanged(class ABioPawn* OldLeader, class ABioPawn* NewLeader)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.LeaderChanged");

	UUnVince_LeaderChanged_Params params;
	params.OldLeader = OldLeader;
	params.NewLeader = NewLeader;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.PartyProfiling
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)
// bool                           bJoining                       (Parm)

void UUnVince::STATIC_PartyProfiling(class ABioPawn* oPawn, bool bJoining)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.PartyProfiling");

	UUnVince_PartyProfiling_Params params;
	params.oPawn = oPawn;
	params.bJoining = bJoining;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.XPGainedPawnKilledHelper
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                Player                         (Parm)
// class ABioPawn*                deadPawn                       (Parm)
// int                            xpGained                       (Parm)

void UUnVince::STATIC_XPGainedPawnKilledHelper(class ABioPawn* Player, class ABioPawn* deadPawn, int xpGained)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.XPGainedPawnKilledHelper");

	UUnVince_XPGainedPawnKilledHelper_Params params;
	params.Player = Player;
	params.deadPawn = deadPawn;
	params.xpGained = xpGained;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.CharacterCreationFinished
// (Native, Static, Public)
// Parameters:
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// struct FString                 playerClass                    (Parm, NeedCtorLink)
// unsigned char                  Background                     (Parm)
// unsigned char                  priAttribute                   (Parm)
// unsigned char                  secAttribute                   (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)

void UUnVince::STATIC_CharacterCreationFinished(const struct FString& PlayerName, const struct FString& playerClass, unsigned char Background, unsigned char priAttribute, unsigned char secAttribute, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.CharacterCreationFinished");

	UUnVince_CharacterCreationFinished_Params params;
	params.PlayerName = PlayerName;
	params.playerClass = playerClass;
	params.Background = Background;
	params.priAttribute = priAttribute;
	params.secAttribute = secAttribute;
	params.Message = Message;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.CharacterCreationStarted
// (Native, Static, Public)

void UUnVince::STATIC_CharacterCreationStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.CharacterCreationStarted");

	UUnVince_CharacterCreationStarted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.VinceLogTalentInfoPlayerAndSquad
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// bool                           bIsTalentChange                (Parm)

void UUnVince::STATIC_VinceLogTalentInfoPlayerAndSquad(class ABioPawn* pPawn, bool bIsTalentChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.VinceLogTalentInfoPlayerAndSquad");

	UUnVince_VinceLogTalentInfoPlayerAndSquad_Params params;
	params.pPawn = pPawn;
	params.bIsTalentChange = bIsTalentChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.RecordVehicleDeath
// (Native, Static, Public)
// Parameters:
// class ASVehicle*               pTarget                        (Parm)
// class AController*             pInstigator                    (Parm)
// struct FVector                 vHitLocation                   (Parm)
// class UClass*                  clsDamageType                  (Parm)
// class UBioDamageType*          pDamage                        (Parm)

void UUnVince::STATIC_RecordVehicleDeath(class ASVehicle* pTarget, class AController* pInstigator, const struct FVector& vHitLocation, class UClass* clsDamageType, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.RecordVehicleDeath");

	UUnVince_RecordVehicleDeath_Params params;
	params.pTarget = pTarget;
	params.pInstigator = pInstigator;
	params.vHitLocation = vHitLocation;
	params.clsDamageType = clsDamageType;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.RecordDeath
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                pTarget                        (Parm)
// class AController*             pInstigator                    (Parm)
// struct FVector                 vHitLocation                   (Parm)
// class UClass*                  clsDamageType                  (Parm)

void UUnVince::STATIC_RecordDeath(class ABioPawn* pTarget, class AController* pInstigator, const struct FVector& vHitLocation, class UClass* clsDamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.RecordDeath");

	UUnVince_RecordDeath_Params params;
	params.pTarget = pTarget;
	params.pInstigator = pInstigator;
	params.vHitLocation = vHitLocation;
	params.clsDamageType = clsDamageType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.RecordWeaponFired
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                Instigator                     (Parm)

void UUnVince::STATIC_RecordWeaponFired(class ABioPawn* Instigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.RecordWeaponFired");

	UUnVince_RecordWeaponFired_Params params;
	params.Instigator = Instigator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.LogTestResult
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 TestName                       (Parm, NeedCtorLink)
// struct FString                 TestDescription                (Parm, NeedCtorLink)
// TEnumAsByte<EBioTestSeverity>  TestResult                     (Parm)

void UUnVince::STATIC_LogTestResult(const struct FString& TestName, const struct FString& TestDescription, TEnumAsByte<EBioTestSeverity> TestResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.LogTestResult");

	UUnVince_LogTestResult_Params params;
	params.TestName = TestName;
	params.TestDescription = TestDescription;
	params.TestResult = TestResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.CreateSurvey
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 question                       (Parm, NeedCtorLink)
// struct FString                 Context                        (Parm, NeedCtorLink)

void UUnVince::STATIC_CreateSurvey(const struct FString& question, const struct FString& Context)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.CreateSurvey");

	UUnVince_CreateSurvey_Params params;
	params.question = question;
	params.Context = Context;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.Terminate
// (Final, Native, Static, Public)

void UUnVince::STATIC_Terminate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.Terminate");

	UUnVince_Terminate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.CycleLog
// (Final, Native, Static, Public)

void UUnVince::STATIC_CycleLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.CycleLog");

	UUnVince_CycleLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.CloseLog
// (Final, Native, Static, Public)

void UUnVince::STATIC_CloseLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.CloseLog");

	UUnVince_CloseLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.UnVince.OpenLog
// (Final, Native, Static, Public)

void UUnVince::STATIC_OpenLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.UnVince.OpenLog");

	UUnVince_OpenLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDiscoveredCodexMap.Clear
// (Native, Public)

void UBioDiscoveredCodexMap::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDiscoveredCodexMap.Clear");

	UBioDiscoveredCodexMap_Clear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.ClearAllVariables
// (Defined, Event, Public)

void UBioGlobalVariableTable::ClearAllVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.ClearAllVariables");

	UBioGlobalVariableTable_ClearAllVariables_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.SetFloatByName
// (Native, Public)
// Parameters:
// struct FName                   nmLabel                        (Parm)
// float                          fValue                         (Parm)

void UBioGlobalVariableTable::SetFloatByName(const struct FName& nmLabel, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.SetFloatByName");

	UBioGlobalVariableTable_SetFloatByName_Params params;
	params.nmLabel = nmLabel;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.GetFloatByName
// (Native, Public)
// Parameters:
// struct FName                   nmLabel                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioGlobalVariableTable::GetFloatByName(const struct FName& nmLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.GetFloatByName");

	UBioGlobalVariableTable_GetFloatByName_Params params;
	params.nmLabel = nmLabel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGlobalVariableTable.SetIntByName
// (Native, Public)
// Parameters:
// struct FName                   nmLabel                        (Parm)
// int                            nValue                         (Parm)

void UBioGlobalVariableTable::SetIntByName(const struct FName& nmLabel, int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.SetIntByName");

	UBioGlobalVariableTable_SetIntByName_Params params;
	params.nmLabel = nmLabel;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.GetIntByName
// (Native, Public)
// Parameters:
// struct FName                   nmLabel                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGlobalVariableTable::GetIntByName(const struct FName& nmLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.GetIntByName");

	UBioGlobalVariableTable_GetIntByName_Params params;
	params.nmLabel = nmLabel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGlobalVariableTable.SetBoolByName
// (Native, Public)
// Parameters:
// struct FName                   nmLabel                        (Parm)
// bool                           bValue                         (Parm)

void UBioGlobalVariableTable::SetBoolByName(const struct FName& nmLabel, bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.SetBoolByName");

	UBioGlobalVariableTable_SetBoolByName_Params params;
	params.nmLabel = nmLabel;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.GetBoolByName
// (Native, Public)
// Parameters:
// struct FName                   nmLabel                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGlobalVariableTable::GetBoolByName(const struct FName& nmLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.GetBoolByName");

	UBioGlobalVariableTable_GetBoolByName_Params params;
	params.nmLabel = nmLabel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGlobalVariableTable.SetFloat
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          fValue                         (Parm)

void UBioGlobalVariableTable::SetFloat(int nIndex, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.SetFloat");

	UBioGlobalVariableTable_SetFloat_Params params;
	params.nIndex = nIndex;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.GetFloat
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioGlobalVariableTable::GetFloat(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.GetFloat");

	UBioGlobalVariableTable_GetFloat_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGlobalVariableTable.SetInt
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            nValue                         (Parm)

void UBioGlobalVariableTable::SetInt(int nIndex, int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.SetInt");

	UBioGlobalVariableTable_SetInt_Params params;
	params.nIndex = nIndex;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.GetInt
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGlobalVariableTable::GetInt(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.GetInt");

	UBioGlobalVariableTable_GetInt_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGlobalVariableTable.SetBool
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           bValue                         (Parm)
// bool                           bEvaluateAchievement           (OptionalParm, Parm)

void UBioGlobalVariableTable::SetBool(int nIndex, bool bValue, bool bEvaluateAchievement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.SetBool");

	UBioGlobalVariableTable_SetBool_Params params;
	params.nIndex = nIndex;
	params.bValue = bValue;
	params.bEvaluateAchievement = bEvaluateAchievement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGlobalVariableTable.GetBool
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGlobalVariableTable::GetBool(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGlobalVariableTable.GetBool");

	UBioGlobalVariableTable_GetBool_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioQuestProgressionMap.Clear
// (Native, Public)

void UBioQuestProgressionMap::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioQuestProgressionMap.Clear");

	UBioQuestProgressionMap_Clear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseAppearance.GetModelByName
// (Native, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMesh* UBioBaseAppearance::GetModelByName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseAppearance.GetModelByName");

	UBioBaseAppearance_GetModelByName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseAppearance.GetTargetZoneName
// (Native, Public, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// struct FName                   nmZoneName                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioBaseAppearance::GetTargetZoneName(int nIndex, struct FName* nmZoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseAppearance.GetTargetZoneName");

	UBioBaseAppearance_GetTargetZoneName_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nmZoneName != nullptr)
		*nmZoneName = params.nmZoneName;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseAppearance.GetTargetZoneLocation
// (Native, Public, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// class USkeletalMeshComponent*  oMeshComponent                 (Parm, EditInline)
// struct FVector                 vLocation                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioBaseAppearance::GetTargetZoneLocation(int nIndex, class USkeletalMeshComponent* oMeshComponent, struct FVector* vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseAppearance.GetTargetZoneLocation");

	UBioBaseAppearance_GetTargetZoneLocation_Params params;
	params.nIndex = nIndex;
	params.oMeshComponent = oMeshComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.Bio_Appr_Character_Body.GetMaterial
// (Native, Public, HasOutParms)
// Parameters:
// int                            ArmorType                      (Parm)
// int                            ModelVar                       (Parm)
// int                            MaterialVar                    (Parm)
// TArray<class UMaterialInterface*> Materials                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBio_Appr_Character_Body::GetMaterial(int ArmorType, int ModelVar, int MaterialVar, TArray<class UMaterialInterface*>* Materials)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.Bio_Appr_Character_Body.GetMaterial");

	UBio_Appr_Character_Body_GetMaterial_Params params;
	params.ArmorType = ArmorType;
	params.ModelVar = ModelVar;
	params.MaterialVar = MaterialVar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Materials != nullptr)
		*Materials = params.Materials;

	return params.ReturnValue;
}


// Function BIOC_Base.Bio_Appr_Character_Body.IsValidVariation
// (Native, Public)
// Parameters:
// int                            ArmorType                      (Parm)
// int                            ModelVar                       (Parm)
// int                            MaterialVar                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBio_Appr_Character_Body::IsValidVariation(int ArmorType, int ModelVar, int MaterialVar)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.Bio_Appr_Character_Body.IsValidVariation");

	UBio_Appr_Character_Body_IsValidVariation_Params params;
	params.ArmorType = ArmorType;
	params.ModelVar = ModelVar;
	params.MaterialVar = MaterialVar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.Bio_Appr_Character_Body.GetPhysics
// (Native, Public)
// Parameters:
// int                            ArmorType                      (Parm)
// int                            ModelVar                       (Parm)
// class UPhysicsAsset*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicsAsset* UBio_Appr_Character_Body::GetPhysics(int ArmorType, int ModelVar)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.Bio_Appr_Character_Body.GetPhysics");

	UBio_Appr_Character_Body_GetPhysics_Params params;
	params.ArmorType = ArmorType;
	params.ModelVar = ModelVar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.Bio_Appr_Character_Body.GetPhysics_Name
// (Native, Public)
// Parameters:
// int                            ArmorType                      (Parm)
// int                            ModelVar                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBio_Appr_Character_Body::GetPhysics_Name(int ArmorType, int ModelVar)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.Bio_Appr_Character_Body.GetPhysics_Name");

	UBio_Appr_Character_Body_GetPhysics_Name_Params params;
	params.ArmorType = ArmorType;
	params.ModelVar = ModelVar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.Bio_Appr_Character_Body.GetModel
// (Native, Public)
// Parameters:
// int                            ArmorType                      (Parm)
// int                            ModelVar                       (Parm)
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMesh* UBio_Appr_Character_Body::GetModel(int ArmorType, int ModelVar)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.Bio_Appr_Character_Body.GetModel");

	UBio_Appr_Character_Body_GetModel_Params params;
	params.ArmorType = ArmorType;
	params.ModelVar = ModelVar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.Bio_Appr_Character_Hair.GetModel
// (Native, Public)
// Parameters:
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMesh* UBio_Appr_Character_Hair::GetModel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.Bio_Appr_Character_Hair.GetModel");

	UBio_Appr_Character_Hair_GetModel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.Bio_Appr_Character_Head.GetModel
// (Native, Public)
// Parameters:
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMesh* UBio_Appr_Character_Head::GetModel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.Bio_Appr_Character_Head.GetModel");

	UBio_Appr_Character_Head_GetModel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAppearanceItemSophisticated.GetPhysicsAsset
// (Native, Public)
// Parameters:
// int                            variant                        (Parm)
// class UPhysicsAsset*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicsAsset* UBioAppearanceItemSophisticated::GetPhysicsAsset(int variant)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAppearanceItemSophisticated.GetPhysicsAsset");

	UBioAppearanceItemSophisticated_GetPhysicsAsset_Params params;
	params.variant = variant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAppearanceItemSophisticated.GetAnimationTree
// (Native, Public)
// Parameters:
// int                            variant                        (Parm)
// class UAnimTree*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimTree* UBioAppearanceItemSophisticated::GetAnimationTree(int variant)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAppearanceItemSophisticated.GetAnimationTree");

	UBioAppearanceItemSophisticated_GetAnimationTree_Params params;
	params.variant = variant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAppearanceItemSophisticated.GetAnimationSet
// (Native, Public)
// Parameters:
// int                            variant                        (Parm)
// class UAnimSet*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimSet* UBioAppearanceItemSophisticated::GetAnimationSet(int variant)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAppearanceItemSophisticated.GetAnimationSet");

	UBioAppearanceItemSophisticated_GetAnimationSet_Params params;
	params.variant = variant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAppearanceItemSophisticated.ApplyMaterials
// (Native, Public)
// Parameters:
// int                            variant                        (Parm)
// class USkeletalMeshComponent*  SkeletalMeshComponent          (Parm, EditInline)

void UBioAppearanceItemSophisticated::ApplyMaterials(int variant, class USkeletalMeshComponent* SkeletalMeshComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAppearanceItemSophisticated.ApplyMaterials");

	UBioAppearanceItemSophisticated_ApplyMaterials_Params params;
	params.variant = variant;
	params.SkeletalMeshComponent = SkeletalMeshComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAppearanceItemSophisticated.GetSkeletalMesh
// (Native, Public)
// Parameters:
// int                            variant                        (Parm)
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMesh* UBioAppearanceItemSophisticated::GetSkeletalMesh(int variant)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAppearanceItemSophisticated.GetSkeletalMesh");

	UBioAppearanceItemSophisticated_GetSkeletalMesh_Params params;
	params.variant = variant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioInterface_Appearance::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance.GetSaveObjectClass");

	UBioInterface_Appearance_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance.ResetToDefaults
// (Native, Public)

void UBioInterface_Appearance::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance.ResetToDefaults");

	UBioInterface_Appearance_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInterface_Appearance.UpdateAppearance
// (Native, Public)
// Parameters:
// bool                           bForceUpdate                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInterface_Appearance::UpdateAppearance(bool bForceUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance.UpdateAppearance");

	UBioInterface_Appearance_UpdateAppearance_Params params;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance_ArtPlaceable.UpdateAppearance
// (Native, Public)
// Parameters:
// bool                           bForceUpdate                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInterface_Appearance_ArtPlaceable::UpdateAppearance(bool bForceUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_ArtPlaceable.UpdateAppearance");

	UBioInterface_Appearance_ArtPlaceable_UpdateAppearance_Params params;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionReadyHeight
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInterface_Appearance_Pawn::GetDefaultCollisionReadyHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionReadyHeight");

	UBioInterface_Appearance_Pawn_GetDefaultCollisionReadyHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionCrouchHeight
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInterface_Appearance_Pawn::GetDefaultCollisionCrouchHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionCrouchHeight");

	UBioInterface_Appearance_Pawn_GetDefaultCollisionCrouchHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionRadius
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInterface_Appearance_Pawn::GetDefaultCollisionRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionRadius");

	UBioInterface_Appearance_Pawn_GetDefaultCollisionRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionHeight
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInterface_Appearance_Pawn::GetDefaultCollisionHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.GetDefaultCollisionHeight");

	UBioInterface_Appearance_Pawn_GetDefaultCollisionHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.SetCreatureSpeed
// (Native, Public)
// Parameters:
// struct FName                   NewSpeedOverride               (Parm)

void UBioInterface_Appearance_Pawn::SetCreatureSpeed(const struct FName& NewSpeedOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.SetCreatureSpeed");

	UBioInterface_Appearance_Pawn_SetCreatureSpeed_Params params;
	params.NewSpeedOverride = NewSpeedOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.GetCreatureSpeeds
// (Native, Public, HasOutParms)
// Parameters:
// struct FCreatureSpeeds         SpeedsRecord                   (Parm, OutParm)

void UBioInterface_Appearance_Pawn::GetCreatureSpeeds(struct FCreatureSpeeds* SpeedsRecord)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.GetCreatureSpeeds");

	UBioInterface_Appearance_Pawn_GetCreatureSpeeds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpeedsRecord != nullptr)
		*SpeedsRecord = params.SpeedsRecord;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.UpdateAppearance
// (Native, Public)
// Parameters:
// bool                           bForceUpdate                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInterface_Appearance_Pawn::UpdateAppearance(bool bForceUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.UpdateAppearance");

	UBioInterface_Appearance_Pawn_UpdateAppearance_Params params;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInterface_Appearance_Pawn.ExtractResources
// (Native, Public)
// Parameters:
// class ABioPawn*                Pawn                           (Parm)
// class UBio_Appr_Character*     Appearance                     (Parm)

void UBioInterface_Appearance_Pawn::ExtractResources(class ABioPawn* Pawn, class UBio_Appr_Character* Appearance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterface_Appearance_Pawn.ExtractResources");

	UBioInterface_Appearance_Pawn_ExtractResources_Params params;
	params.Pawn = Pawn;
	params.Appearance = Appearance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInterfaceAppearanceVehicle.ResetToDefaults
// (Native, Public)

void UBioInterfaceAppearanceVehicle::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterfaceAppearanceVehicle.ResetToDefaults");

	UBioInterfaceAppearanceVehicle_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInterfaceAppearanceVehicle.UpdateAppearance
// (Native, Public)
// Parameters:
// bool                           bForceUpdate                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInterfaceAppearanceVehicle::UpdateAppearance(bool bForceUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterfaceAppearanceVehicle.UpdateAppearance");

	UBioInterfaceAppearanceVehicle_UpdateAppearance_Params params;
	params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioItem::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.GetSaveObjectClass");

	UBioItem_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.ComputeCategoryDisplayInfo
// (Native, Public, HasOutParms)
// Parameters:
// int                            categoryGuiIcon                (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioItem::ComputeCategoryDisplayInfo(int* categoryGuiIcon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.ComputeCategoryDisplayInfo");

	UBioItem_ComputeCategoryDisplayInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (categoryGuiIcon != nullptr)
		*categoryGuiIcon = params.categoryGuiIcon;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.GenerateName
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sName                          (Parm, OutParm, NeedCtorLink)

void UBioItem::GenerateName(struct FString* sName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.GenerateName");

	UBioItem_GenerateName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sName != nullptr)
		*sName = params.sName;
}


// Function BIOC_Base.BioItem.GetItemPropertyInfo
// (Defined, Public, HasOutParms)
// Parameters:
// int                            nItemPropertyIndex             (Parm)
// struct FBioItemPropertyInfo    stPropInfo                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioItem::GetItemPropertyInfo(int nItemPropertyIndex, struct FBioItemPropertyInfo* stPropInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.GetItemPropertyInfo");

	UBioItem_GetItemPropertyInfo_Params params;
	params.nItemPropertyIndex = nItemPropertyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stPropInfo != nullptr)
		*stPropInfo = params.stPropInfo;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.GetNumItemProperties
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItem::GetNumItemProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.GetNumItemProperties");

	UBioItem_GetNumItemProperties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.GetMaxItemPropertyCount
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItem::GetMaxItemPropertyCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.GetMaxItemPropertyCount");

	UBioItem_GetMaxItemPropertyCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.GetItemGuiClassIcon
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItem::GetItemGuiClassIcon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.GetItemGuiClassIcon");

	UBioItem_GetItemGuiClassIcon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.RemoveItemProperty
// (Defined, Event, Public)
// Parameters:
// int                            nItemPropertyID                (Parm)

void UBioItem::RemoveItemProperty(int nItemPropertyID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.RemoveItemProperty");

	UBioItem_RemoveItemProperty_Params params;
	params.nItemPropertyID = nItemPropertyID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItem.AddItemProperty
// (Defined, Event, Public)
// Parameters:
// int                            nItemPropertyID                (Parm)

void UBioItem::AddItemProperty(int nItemPropertyID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.AddItemProperty");

	UBioItem_AddItemProperty_Params params;
	params.nItemPropertyID = nItemPropertyID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItem.Initialize
// (Native, Public)

void UBioItem::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.Initialize");

	UBioItem_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItem.GetItemTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioItem::GetItemTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.GetItemTypeName");

	UBioItem_GetItemTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.CalculateSalvageValue
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioItem::CalculateSalvageValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.CalculateSalvageValue");

	UBioItem_CalculateSalvageValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.CalculatePrice
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioItem::CalculatePrice()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.CalculatePrice");

	UBioItem_CalculatePrice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.CalculateBasePrice
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioItem::CalculateBasePrice()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.CalculateBasePrice");

	UBioItem_CalculateBasePrice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.ValidateItem
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioItem::ValidateItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.ValidateItem");

	UBioItem_ValidateItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItem.DescribeItem
// (Defined, Event, Public)

void UBioItem::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItem.DescribeItem");

	UBioItem_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemSophisticated.GetMaterialParameters
// (Final, Native, Public)
// Parameters:
// class UBioMaterialOverride*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioMaterialOverride* UBioItemSophisticated::GetMaterialParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.GetMaterialParameters");

	UBioItemSophisticated_GetMaterialParameters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemSophisticated.GenerateName
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sName                          (Parm, OutParm, NeedCtorLink)

void UBioItemSophisticated::GenerateName(struct FString* sName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.GenerateName");

	UBioItemSophisticated_GenerateName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sName != nullptr)
		*sName = params.sName;
}


// Function BIOC_Base.BioItemSophisticated.GetManufacturerInfo
// (Native, Public, HasOutParms)
// Parameters:
// struct FBioManufacturerDetails stManufacturerDetails          (Parm, OutParm)

void UBioItemSophisticated::GetManufacturerInfo(struct FBioManufacturerDetails* stManufacturerDetails)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.GetManufacturerInfo");

	UBioItemSophisticated_GetManufacturerInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stManufacturerDetails != nullptr)
		*stManufacturerDetails = params.stManufacturerDetails;
}


// Function BIOC_Base.BioItemSophisticated.Initialize
// (Native, Public)

void UBioItemSophisticated::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.Initialize");

	UBioItemSophisticated_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemSophisticated.DescribeItem
// (Defined, Event, Public)

void UBioItemSophisticated::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.DescribeItem");

	UBioItemSophisticated_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemSophisticated.TickItem
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioItemSophisticated::TickItem(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.TickItem");

	UBioItemSophisticated_TickItem_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemSophisticated.GetPhysicsAsset
// (Native, Public)
// Parameters:
// class UPhysicsAsset*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicsAsset* UBioItemSophisticated::GetPhysicsAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.GetPhysicsAsset");

	UBioItemSophisticated_GetPhysicsAsset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemSophisticated.GetAnimationTree
// (Native, Public)
// Parameters:
// class UAnimTree*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimTree* UBioItemSophisticated::GetAnimationTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.GetAnimationTree");

	UBioItemSophisticated_GetAnimationTree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemSophisticated.GetAnimationSet
// (Native, Public)
// Parameters:
// class UAnimSet*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UAnimSet* UBioItemSophisticated::GetAnimationSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.GetAnimationSet");

	UBioItemSophisticated_GetAnimationSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemSophisticated.ApplyMaterials
// (Native, Public)
// Parameters:
// class USkeletalMeshComponent*  oSkelMesh                      (Parm, EditInline)

void UBioItemSophisticated::ApplyMaterials(class USkeletalMeshComponent* oSkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.ApplyMaterials");

	UBioItemSophisticated_ApplyMaterials_Params params;
	params.oSkelMesh = oSkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemSophisticated.GetSkeletalMesh
// (Native, Public)
// Parameters:
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMesh* UBioItemSophisticated::GetSkeletalMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.GetSkeletalMesh");

	UBioItemSophisticated_GetSkeletalMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemSophisticated.ComputeSophistication
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemSophisticated::ComputeSophistication(class UBioPawnBehavior* oBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.ComputeSophistication");

	UBioItemSophisticated_ComputeSophistication_Params params;
	params.oBehavior = oBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemSophisticated.SetSophistication
// (Native, Public)
// Parameters:
// unsigned char                  sophistication                 (Parm)

void UBioItemSophisticated::SetSophistication(unsigned char sophistication)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.SetSophistication");

	UBioItemSophisticated_SetSophistication_Params params;
	params.sophistication = sophistication;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemSophisticated.ComputeNonWeaponSophistication
// (Native, Protected)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (Parm)
// TEnumAsByte<EBioEquipmentSlot> eEquipmentSlot                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemSophisticated::ComputeNonWeaponSophistication(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioEquipmentSlot> eEquipmentSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSophisticated.ComputeNonWeaponSophistication");

	UBioItemSophisticated_ComputeNonWeaponSophistication_Params params;
	params.oBehavior = oBehavior;
	params.eEquipmentSlot = eEquipmentSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemEquippable.OnGPEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioItemEquippable::OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemEquippable.OnGPEvent");

	UBioItemEquippable_OnGPEvent_Params params;
	params.eEvent = eEvent;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemEquippable.DescribeItem
// (Defined, Event, Public)

void UBioItemEquippable::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemEquippable.DescribeItem");

	UBioItemEquippable_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemEquippable.OnUnequipInternal
// (Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemEquippable::OnUnequipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemEquippable.OnUnequipInternal");

	UBioItemEquippable_OnUnequipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemEquippable.OnUnequip
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemEquippable::OnUnequip(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemEquippable.OnUnequip");

	UBioItemEquippable_OnUnequip_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemEquippable.OnEquipInternal
// (Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemEquippable::OnEquipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemEquippable.OnEquipInternal");

	UBioItemEquippable_OnEquipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemEquippable.OnEquip
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemEquippable::OnEquip(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemEquippable.OnEquip");

	UBioItemEquippable_OnEquip_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdable.OnGPEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioItemXModdable::OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.OnGPEvent");

	UBioItemXModdable_OnGPEvent_Params params;
	params.eEvent = eEvent;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdable.Load
// (Final, Defined, Public)
// Parameters:
// class UBioItemXModdableSaveObject* pData                          (Parm)

void UBioItemXModdable::Load(class UBioItemXModdableSaveObject* pData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.Load");

	UBioItemXModdable_Load_Params params;
	params.pData = pData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdable.Save
// (Final, Defined, Public)
// Parameters:
// class UBioItemXModdableSaveObject* pData                          (Parm)

void UBioItemXModdable::Save(class UBioItemXModdableSaveObject* pData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.Save");

	UBioItemXModdable_Save_Params params;
	params.pData = pData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdable.GetXMod
// (Final, Native, Public)
// Parameters:
// int                            nType                          (Parm)
// int                            nIndex                         (Parm)
// class UBioItemXMod*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemXMod* UBioItemXModdable::GetXMod(int nType, int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.GetXMod");

	UBioItemXModdable_GetXMod_Params params;
	params.nType = nType;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXModdable.FindXMod
// (Final, Native, Public)
// Parameters:
// class UBioItemXMod*            pXMod                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemXModdable::FindXMod(class UBioItemXMod* pXMod)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.FindXMod");

	UBioItemXModdable_FindXMod_Params params;
	params.pXMod = pXMod;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXModdable.UninstallXMod
// (Native, Public)
// Parameters:
// int                            Type                           (Parm)
// int                            Index                          (Parm)
// class UBioItemXMod*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemXMod* UBioItemXModdable::UninstallXMod(int Type, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.UninstallXMod");

	UBioItemXModdable_UninstallXMod_Params params;
	params.Type = Type;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXModdable.InstallXMod
// (Native, Public)
// Parameters:
// class UBioItemXMod*            xMod                           (Parm)
// int                            Index                          (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemXModdable::InstallXMod(class UBioItemXMod* xMod, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.InstallXMod");

	UBioItemXModdable_InstallXMod_Params params;
	params.xMod = xMod;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXModdable.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioItemXModdable::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.GetSaveObjectClass");

	UBioItemXModdable_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXModdable.RetrieveXModAtVirtualSlot
// (Defined, Public, HasOutParms)
// Parameters:
// int                            nSlot                          (Parm)
// struct FBioItemXModVirtualSlot strVSlot                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioItemXModdable::RetrieveXModAtVirtualSlot(int nSlot, struct FBioItemXModVirtualSlot* strVSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.RetrieveXModAtVirtualSlot");

	UBioItemXModdable_RetrieveXModAtVirtualSlot_Params params;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (strVSlot != nullptr)
		*strVSlot = params.strVSlot;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXModdable.TotalVirtualXModSlots
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemXModdable::TotalVirtualXModSlots()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.TotalVirtualXModSlots");

	UBioItemXModdable_TotalVirtualXModSlots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXModdable.TickItem
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioItemXModdable::TickItem(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.TickItem");

	UBioItemXModdable_TickItem_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdable.DescribeItem
// (Defined, Event, Public)

void UBioItemXModdable::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.DescribeItem");

	UBioItemXModdable_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdable.AddPriceOfAllXMods
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioItemXModdable::AddPriceOfAllXMods()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdable.AddPriceOfAllXMods");

	UBioItemXModdable_AddPriceOfAllXMods_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemArmor.OnUnequipInternal
// (Defined, Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemArmor::OnUnequipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmor.OnUnequipInternal");

	UBioItemArmor_OnUnequipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemArmor.OnEquipInternal
// (Defined, Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemArmor::OnEquipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmor.OnEquipInternal");

	UBioItemArmor_OnEquipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemArmor.DescribeItem
// (Defined, Event, Public)

void UBioItemArmor::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmor.DescribeItem");

	UBioItemArmor_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemArmor.ComputeSophistication
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemArmor::ComputeSophistication(class UBioPawnBehavior* oBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmor.ComputeSophistication");

	UBioItemArmor_ComputeSophistication_Params params;
	params.oBehavior = oBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemArmor.GetItemTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioItemArmor::GetItemTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmor.GetItemTypeName");

	UBioItemArmor_GetItemTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemArmorShielded.Initialize
// (Native, Public)

void UBioItemArmorShielded::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmorShielded.Initialize");

	UBioItemArmorShielded_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemArmorShielded.DescribeItem
// (Defined, Event, Public)

void UBioItemArmorShielded::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmorShielded.DescribeItem");

	UBioItemArmorShielded_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemArmorShielded.GetItemTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioItemArmorShielded::GetItemTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmorShielded.GetItemTypeName");

	UBioItemArmorShielded_GetItemTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemArmorShielded.OnUnequipInternal
// (Defined, Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemArmorShielded::OnUnequipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmorShielded.OnUnequipInternal");

	UBioItemArmorShielded_OnUnequipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemArmorShielded.OnEquipInternal
// (Defined, Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemArmorShielded::OnEquipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmorShielded.OnEquipInternal");

	UBioItemArmorShielded_OnEquipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemArmorShielded.InitializeShields
// (Defined, Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemArmorShielded::InitializeShields(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemArmorShielded.InitializeShields");

	UBioItemArmorShielded_InitializeShields_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemBioAmp.DescribeItem
// (Defined, Event, Public)

void UBioItemBioAmp::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemBioAmp.DescribeItem");

	UBioItemBioAmp_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemBioAmp.ComputeSophistication
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemBioAmp::ComputeSophistication(class UBioPawnBehavior* oBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemBioAmp.ComputeSophistication");

	UBioItemBioAmp_ComputeSophistication_Params params;
	params.oBehavior = oBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemGrenade.GenerateName
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sName                          (Parm, OutParm, NeedCtorLink)

void UBioItemGrenade::GenerateName(struct FString* sName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.GenerateName");

	UBioItemGrenade_GenerateName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sName != nullptr)
		*sName = params.sName;
}


// Function BIOC_Base.BioItemGrenade.SetDeathVFX
// (Native, Public)
// Parameters:
// class UBioDeathVFX*            oDeathVFX                      (Parm)

void UBioItemGrenade::SetDeathVFX(class UBioDeathVFX* oDeathVFX)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.SetDeathVFX");

	UBioItemGrenade_SetDeathVFX_Params params;
	params.oDeathVFX = oDeathVFX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemGrenade.GetDeathVFX
// (Native, Public)
// Parameters:
// class UBioDeathVFX*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioDeathVFX* UBioItemGrenade::GetDeathVFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.GetDeathVFX");

	UBioItemGrenade_GetDeathVFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemGrenade.SetPhysicsAsset
// (Native, Public)
// Parameters:
// class UPhysicsAsset*           oPhysicsAsset                  (Parm)

void UBioItemGrenade::SetPhysicsAsset(class UPhysicsAsset* oPhysicsAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.SetPhysicsAsset");

	UBioItemGrenade_SetPhysicsAsset_Params params;
	params.oPhysicsAsset = oPhysicsAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemGrenade.GetPhysicsAsset
// (Native, Public)
// Parameters:
// class UPhysicsAsset*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UPhysicsAsset* UBioItemGrenade::GetPhysicsAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.GetPhysicsAsset");

	UBioItemGrenade_GetPhysicsAsset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemGrenade.SetMesh
// (Final, Native, Public)
// Parameters:
// class USkeletalMesh*           oMesh                          (Parm)

void UBioItemGrenade::SetMesh(class USkeletalMesh* oMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.SetMesh");

	UBioItemGrenade_SetMesh_Params params;
	params.oMesh = oMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemGrenade.GetMesh
// (Final, Native, Public)
// Parameters:
// class USkeletalMesh*           ReturnValue                    (Parm, OutParm, ReturnParm)

class USkeletalMesh* UBioItemGrenade::GetMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.GetMesh");

	UBioItemGrenade_GetMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemGrenade.SetVisualImpactSet
// (Final, Native, Public)
// Parameters:
// class UBioVISGrenade*          oVisualImpactSet               (Parm)

void UBioItemGrenade::SetVisualImpactSet(class UBioVISGrenade* oVisualImpactSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.SetVisualImpactSet");

	UBioItemGrenade_SetVisualImpactSet_Params params;
	params.oVisualImpactSet = oVisualImpactSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemGrenade.GetVisualImpactSet
// (Final, Native, Public)
// Parameters:
// class UBioVISGrenade*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioVISGrenade* UBioItemGrenade::GetVisualImpactSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.GetVisualImpactSet");

	UBioItemGrenade_GetVisualImpactSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemGrenade.CalculatePrice
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioItemGrenade::CalculatePrice()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.CalculatePrice");

	UBioItemGrenade_CalculatePrice_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemGrenade.Initialize
// (Native, Public)

void UBioItemGrenade::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.Initialize");

	UBioItemGrenade_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemGrenade.OnUnequipInternal
// (Defined, Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemGrenade::OnUnequipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.OnUnequipInternal");

	UBioItemGrenade_OnUnequipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemGrenade.OnEquipInternal
// (Defined, Protected)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioItemGrenade::OnEquipInternal(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.OnEquipInternal");

	UBioItemGrenade_OnEquipInternal_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemGrenade.GetItemTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioItemGrenade::GetItemTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemGrenade.GetItemTypeName");

	UBioItemGrenade_GetItemTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemImporter.LoadGameItemByLabel
// (Native, Static, Public)
// Parameters:
// struct FString                 sLabel                         (Parm, NeedCtorLink)
// unsigned char                  sophistication                 (Parm)
// struct FName                   nmPackage                      (Parm)
// class UObject*                 InOuter                        (Parm)
// int                            manuID                         (OptionalParm, Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioItemImporter::STATIC_LoadGameItemByLabel(const struct FString& sLabel, unsigned char sophistication, const struct FName& nmPackage, class UObject* InOuter, int manuID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemImporter.LoadGameItemByLabel");

	UBioItemImporter_LoadGameItemByLabel_Params params;
	params.sLabel = sLabel;
	params.sophistication = sophistication;
	params.nmPackage = nmPackage;
	params.InOuter = InOuter;
	params.manuID = manuID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemImporter.LoadGameItem
// (Native, Static, Public)
// Parameters:
// int                            nId                            (Parm)
// unsigned char                  sophistication                 (Parm)
// struct FName                   nmPackage                      (Parm)
// class UObject*                 InOuter                        (Parm)
// int                            manuID                         (OptionalParm, Parm)
// class UObject*                 InExistingObject               (OptionalParm, Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioItemImporter::STATIC_LoadGameItem(int nId, unsigned char sophistication, const struct FName& nmPackage, class UObject* InOuter, int manuID, class UObject* InExistingObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemImporter.LoadGameItem");

	UBioItemImporter_LoadGameItem_Params params;
	params.nId = nId;
	params.sophistication = sophistication;
	params.nmPackage = nmPackage;
	params.InOuter = InOuter;
	params.manuID = manuID;
	params.InExistingObject = InExistingObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemVehicleBase.DescribeItem
// (Defined, Event, Public)

void UBioItemVehicleBase::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemVehicleBase.DescribeItem");

	UBioItemVehicleBase_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemWeapon.DescribeItem
// (Defined, Event, Public)

void UBioItemWeapon::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeapon.DescribeItem");

	UBioItemWeapon_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemWeapon.GetItemTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioItemWeapon::GetItemTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeapon.GetItemTypeName");

	UBioItemWeapon_GetItemTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemWeapon.Initialize
// (Native, Public)

void UBioItemWeapon::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeapon.Initialize");

	UBioItemWeapon_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemWeaponMelee.DescribeItem
// (Defined, Event, Public)

void UBioItemWeaponMelee::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeaponMelee.DescribeItem");

	UBioItemWeaponMelee_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemWeaponMelee.GetItemTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioItemWeaponMelee::GetItemTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeaponMelee.GetItemTypeName");

	UBioItemWeaponMelee_GetItemTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemWeaponRanged.DescribeItem
// (Defined, Event, Public)

void UBioItemWeaponRanged::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeaponRanged.DescribeItem");

	UBioItemWeaponRanged_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemWeaponRanged.Initialize
// (Native, Public)

void UBioItemWeaponRanged::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeaponRanged.Initialize");

	UBioItemWeaponRanged_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemWeaponRanged.WeaponRanges
// (Native, Public, HasOutParms)
// Parameters:
// float                          MinRange                       (Parm, OutParm)
// float                          BestRange                      (Parm, OutParm)
// float                          MaxRange                       (Parm, OutParm)

void UBioItemWeaponRanged::WeaponRanges(float* MinRange, float* BestRange, float* MaxRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeaponRanged.WeaponRanges");

	UBioItemWeaponRanged_WeaponRanges_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinRange != nullptr)
		*MinRange = params.MinRange;
	if (BestRange != nullptr)
		*BestRange = params.BestRange;
	if (MaxRange != nullptr)
		*MaxRange = params.MaxRange;
}


// Function BIOC_Base.BioItemWeaponRanged.ComputeSophistication
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioItemWeaponRanged::ComputeSophistication(class UBioPawnBehavior* oBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeaponRanged.ComputeSophistication");

	UBioItemWeaponRanged_ComputeSophistication_Params params;
	params.oBehavior = oBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemWeaponRanged.GetItemTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioItemWeaponRanged::GetItemTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemWeaponRanged.GetItemTypeName");

	UBioItemWeaponRanged_GetItemTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXMod.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioItemXMod::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXMod.GetSaveObjectClass");

	UBioItemXMod_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioItemXMod.OnGPEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioItemXMod::OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXMod.OnGPEvent");

	UBioItemXMod_OnGPEvent_Params params;
	params.eEvent = eEvent;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXMod.DescribeItem
// (Defined, Event, Public)

void UBioItemXMod::DescribeItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXMod.DescribeItem");

	UBioItemXMod_DescribeItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.Regenerate
// (Native, Public)
// Parameters:
// float                          fAmount                        (Parm)
// class AActor*                  oShieldOwner                   (Parm)

void UBioShield::Regenerate(float fAmount, class AActor* oShieldOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.Regenerate");

	UBioShield_Regenerate_Params params;
	params.fAmount = fAmount;
	params.oShieldOwner = oShieldOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.IsOnline
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioShield::IsOnline()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.IsOnline");

	UBioShield_IsOnline_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShield.SetState
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioShieldState>   eState                         (Parm)

void UBioShield::SetState(TEnumAsByte<EBioShieldState> eState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.SetState");

	UBioShield_SetState_Params params;
	params.eState = eState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.Tick
// (Native, Public)
// Parameters:
// float                          fTimeDelta                     (Parm)
// class AActor*                  oShieldOwner                   (Parm)

void UBioShield::Tick(float fTimeDelta, class AActor* oShieldOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.Tick");

	UBioShield_Tick_Params params;
	params.fTimeDelta = fTimeDelta;
	params.oShieldOwner = oShieldOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.Reset
// (Native, Public)

void UBioShield::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.Reset");

	UBioShield_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.OnDamage
// (Native, Public, HasOutParms)
// Parameters:
// float                          fDamage                        (Parm, OutParm)
// class AActor*                  oShieldOwner                   (Parm)
// struct FVector                 vHitLocation                   (Parm)
// class UClass*                  clsDamageType                  (Parm)
// class UBioDamageType*          pDamage                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioShield::OnDamage(class AActor* oShieldOwner, const struct FVector& vHitLocation, class UClass* clsDamageType, class UBioDamageType* pDamage, float* fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.OnDamage");

	UBioShield_OnDamage_Params params;
	params.oShieldOwner = oShieldOwner;
	params.vHitLocation = vHitLocation;
	params.clsDamageType = clsDamageType;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fDamage != nullptr)
		*fDamage = params.fDamage;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShield.OnAttributesModified
// (Native, Public)
// Parameters:
// class AActor*                  oShieldOwner                   (Parm)

void UBioShield::OnAttributesModified(class AActor* oShieldOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.OnAttributesModified");

	UBioShield_OnAttributesModified_Params params;
	params.oShieldOwner = oShieldOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.ShutDown
// (Native, Public)

void UBioShield::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.ShutDown");

	UBioShield_ShutDown_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.Deactivate
// (Native, Public)

void UBioShield::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.Deactivate");

	UBioShield_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.Initialize
// (Native, Public)
// Parameters:
// class UBioAttributesShield*    pAttributes                    (Parm)
// class UBioShieldView*          oShieldView                    (Parm)
// class UMeshComponent*          oMesh                          (Parm, EditInline)

void UBioShield::Initialize(class UBioAttributesShield* pAttributes, class UBioShieldView* oShieldView, class UMeshComponent* oMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.Initialize");

	UBioShield_Initialize_Params params;
	params.pAttributes = pAttributes;
	params.oShieldView = oShieldView;
	params.oMesh = oMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.OnEvent
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioShieldEvent>   eEvent                         (Parm)
// class AActor*                  oShieldOwner                   (Parm)
// struct FVector                 vHitLocation                   (OptionalParm, Parm)

void UBioShield::OnEvent(TEnumAsByte<EBioShieldEvent> eEvent, class AActor* oShieldOwner, const struct FVector& vHitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.OnEvent");

	UBioShield_OnEvent_Params params;
	params.eEvent = eEvent;
	params.oShieldOwner = oShieldOwner;
	params.vHitLocation = vHitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShield.OnStateTransition
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioShieldState>   eFromState                     (Parm)
// TEnumAsByte<EBioShieldState>   eToState                       (Parm)

void UBioShield::OnStateTransition(TEnumAsByte<EBioShieldState> eFromState, TEnumAsByte<EBioShieldState> eToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShield.OnStateTransition");

	UBioShield_OnStateTransition_Params params;
	params.eFromState = eFromState;
	params.eToState = eToState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShieldView.OnEvent
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioShieldEvent>   eEvent                         (Parm)
// class AActor*                  oShieldOwner                   (Parm)
// class UBioShield*              oShield                        (Parm)
// struct FVector                 vHitLocation                   (OptionalParm, Parm)
// struct FRotator                rHitNormal                     (OptionalParm, Parm)

void UBioShieldView::OnEvent(TEnumAsByte<EBioShieldEvent> eEvent, class AActor* oShieldOwner, class UBioShield* oShield, const struct FVector& vHitLocation, const struct FRotator& rHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShieldView.OnEvent");

	UBioShieldView_OnEvent_Params params;
	params.eEvent = eEvent;
	params.oShieldOwner = oShieldOwner;
	params.oShield = oShield;
	params.vHitLocation = vHitLocation;
	params.rHitNormal = rHitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorType.IsDisintegrationSuppressed
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorType::IsDisintegrationSuppressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorType.IsDisintegrationSuppressed");

	UBioActorType_IsDisintegrationSuppressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorType.IsPlotProtected
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorType::IsPlotProtected()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorType.IsPlotProtected");

	UBioActorType_IsPlotProtected_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorType.GetSquadName
// (Final, Native, Public)

void UBioActorType::GetSquadName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorType.GetSquadName");

	UBioActorType_GetSquadName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorType.GetSquadIcon
// (Final, Native, Public)
// Parameters:
// bool                           bIsDead                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioActorType::GetSquadIcon(bool bIsDead)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorType.GetSquadIcon");

	UBioActorType_GetSquadIcon_Params params;
	params.bIsDead = bIsDead;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableType.ApplyRoleToBehavior
// (Native, Public)
// Parameters:
// class UBioArtPlaceableBehavior* oBehave                        (Parm)

void UBioArtPlaceableType::ApplyRoleToBehavior(class UBioArtPlaceableBehavior* oBehave)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableType.ApplyRoleToBehavior");

	UBioArtPlaceableType_ApplyRoleToBehavior_Params params;
	params.oBehave = oBehave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableType.AllowRoleCustomization
// (Native, Public)
// Parameters:
// bool                           bYes                           (Parm)

void UBioArtPlaceableType::AllowRoleCustomization(bool bYes)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableType.AllowRoleCustomization");

	UBioArtPlaceableType_AllowRoleCustomization_Params params;
	params.bYes = bYes;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableType.ApplyRole
// (Native, Public)
// Parameters:
// int                            nNewRole                       (Parm)
// class UBioArtPlaceableBehavior* oBehave                        (OptionalParm, Parm)

void UBioArtPlaceableType::ApplyRole(int nNewRole, class UBioArtPlaceableBehavior* oBehave)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableType.ApplyRole");

	UBioArtPlaceableType_ApplyRole_Params params;
	params.nNewRole = nNewRole;
	params.oBehave = oBehave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnChallengeScaledType.GetBioPawnChallengeRank
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPawnChallengeRank> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioPawnChallengeRank> UBioPawnChallengeScaledType::GetBioPawnChallengeRank()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnChallengeScaledType.GetBioPawnChallengeRank");

	UBioPawnChallengeScaledType_GetBioPawnChallengeRank_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnChallengeScaledType.ComputeRankedChallengeLevel
// (Native, Public)
// Parameters:
// int                            effectiveChallengeLevel        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnChallengeScaledType::ComputeRankedChallengeLevel(int effectiveChallengeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnChallengeScaledType.ComputeRankedChallengeLevel");

	UBioPawnChallengeScaledType_ComputeRankedChallengeLevel_Params params;
	params.effectiveChallengeLevel = effectiveChallengeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GrenadeDetached
// (Native, Public)
// Parameters:
// class AActor*                  oGrenade                       (Parm)

void UBioActorBehavior::GrenadeDetached(class AActor* oGrenade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GrenadeDetached");

	UBioActorBehavior_GrenadeDetached_Params params;
	params.oGrenade = oGrenade;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.GrenadeAttached
// (Native, Public)
// Parameters:
// class AActor*                  oGrenade                       (Parm)

void UBioActorBehavior::GrenadeAttached(class AActor* oGrenade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GrenadeAttached");

	UBioActorBehavior_GrenadeAttached_Params params;
	params.oGrenade = oGrenade;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.GetPowerText
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sPowerText                     (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetPowerText(struct FString* sPowerText)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetPowerText");

	UBioActorBehavior_GetPowerText_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sPowerText != nullptr)
		*sPowerText = params.sPowerText;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsDisintegrationSuppressed
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsDisintegrationSuppressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsDisintegrationSuppressed");

	UBioActorBehavior_IsDisintegrationSuppressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsPlotProtected
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsPlotProtected()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsPlotProtected");

	UBioActorBehavior_IsPlotProtected_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsInvulnerable
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsInvulnerable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsInvulnerable");

	UBioActorBehavior_IsInvulnerable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.MakeInvulnerable
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioActorBehavior::MakeInvulnerable(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.MakeInvulnerable");

	UBioActorBehavior_MakeInvulnerable_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.DelayTacticalOrders
// (Defined, Event, Public)

void UBioActorBehavior::DelayTacticalOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.DelayTacticalOrders");

	UBioActorBehavior_DelayTacticalOrders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.ApplyTacticalOrders
// (Defined, Public)

void UBioActorBehavior::ApplyTacticalOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ApplyTacticalOrders");

	UBioActorBehavior_ApplyTacticalOrders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioActorBehavior::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetSaveObjectClass");

	UBioActorBehavior_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.ExitCombatStasis
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::ExitCombatStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ExitCombatStasis");

	UBioActorBehavior_ExitCombatStasis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.EnterCombatStasis
// (Native, Public)
// Parameters:
// float                          fDuration                      (Parm)
// bool                           bAllowDamage                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::EnterCombatStasis(float fDuration, bool bAllowDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.EnterCombatStasis");

	UBioActorBehavior_EnterCombatStasis_Params params;
	params.fDuration = fDuration;
	params.bAllowDamage = bAllowDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.MoveActorToFloor
// (Native, Public)
// Parameters:
// class AActor*                  oActor                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::MoveActorToFloor(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.MoveActorToFloor");

	UBioActorBehavior_MoveActorToFloor_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.SpawnActorFromType
// (Native, Static, Public)
// Parameters:
// struct FString                 sActorResource                 (Parm, NeedCtorLink)
// struct FVector                 vLocation                      (Parm)
// struct FRotator                rRotation                      (Parm)
// float                          fLifeSpan                      (OptionalParm, Parm)
// class AActor*                  oOwner                         (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioActorBehavior::STATIC_SpawnActorFromType(const struct FString& sActorResource, const struct FVector& vLocation, const struct FRotator& rRotation, float fLifeSpan, class AActor* oOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SpawnActorFromType");

	UBioActorBehavior_SpawnActorFromType_Params params;
	params.sActorResource = sActorResource;
	params.vLocation = vLocation;
	params.rRotation = rRotation;
	params.fLifeSpan = fLifeSpan;
	params.oOwner = oOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetMaxHealth
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioActorBehavior::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetMaxHealth");

	UBioActorBehavior_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetAppearanceTemplate
// (Native, Public)
// Parameters:
// class UBioBaseAppearance*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioBaseAppearance* UBioActorBehavior::GetAppearanceTemplate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetAppearanceTemplate");

	UBioActorBehavior_GetAppearanceTemplate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.TermRagdoll
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.TermRagdoll");

	UBioActorBehavior_TermRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.InitRagdoll
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.InitRagdoll");

	UBioActorBehavior_InitRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsRadialImpulseObstructed
// (Native, Public)
// Parameters:
// struct FVector                 vStart                         (Parm)
// struct FVector                 vEnd                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsRadialImpulseObstructed(const struct FVector& vStart, const struct FVector& vEnd)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsRadialImpulseObstructed");

	UBioActorBehavior_IsRadialImpulseObstructed_Params params;
	params.vStart = vStart;
	params.vEnd = vEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.ApplyRadialImpulse
// (Native, Public)
// Parameters:
// struct FVector                 vLineOfSightOrigin             (Parm)
// struct FVector                 vImpulseOrigin                 (Parm)
// float                          fImpulseMagnitude              (Parm)
// struct FName                   nmPhysicsBoneName              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::ApplyRadialImpulse(const struct FVector& vLineOfSightOrigin, const struct FVector& vImpulseOrigin, float fImpulseMagnitude, const struct FName& nmPhysicsBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ApplyRadialImpulse");

	UBioActorBehavior_ApplyRadialImpulse_Params params;
	params.vLineOfSightOrigin = vLineOfSightOrigin;
	params.vImpulseOrigin = vImpulseOrigin;
	params.fImpulseMagnitude = fImpulseMagnitude;
	params.nmPhysicsBoneName = nmPhysicsBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.ExplosionHurtRadius
// (Native, Public)
// Parameters:
// float                          fBaseDamage                    (Parm)
// float                          fExplosionRadius               (Parm)
// class UClass*                  clsDamageType                  (Parm)
// class UBioDamageType*          pDamage                        (Parm)
// float                          fMomentum                      (Parm)
// struct FVector                 vDamageImpactOrigin            (Parm)
// struct FVector                 vImpactOriginOffset            (Parm)
// int                            nMaxTargetZones                (Parm)
// class AActor*                  oIgnoredActor                  (OptionalParm, Parm)
// class AController*             oInstigatedByController        (OptionalParm, Parm)
// bool                           bDoFullDamage                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::ExplosionHurtRadius(float fBaseDamage, float fExplosionRadius, class UClass* clsDamageType, class UBioDamageType* pDamage, float fMomentum, const struct FVector& vDamageImpactOrigin, const struct FVector& vImpactOriginOffset, int nMaxTargetZones, class AActor* oIgnoredActor, class AController* oInstigatedByController, bool bDoFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ExplosionHurtRadius");

	UBioActorBehavior_ExplosionHurtRadius_Params params;
	params.fBaseDamage = fBaseDamage;
	params.fExplosionRadius = fExplosionRadius;
	params.clsDamageType = clsDamageType;
	params.pDamage = pDamage;
	params.fMomentum = fMomentum;
	params.vDamageImpactOrigin = vDamageImpactOrigin;
	params.vImpactOriginOffset = vImpactOriginOffset;
	params.nMaxTargetZones = nMaxTargetZones;
	params.oIgnoredActor = oIgnoredActor;
	params.oInstigatedByController = oInstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsObstructed
// (Final, Native, Private)
// Parameters:
// struct FVector                 vStart                         (Parm)
// struct FVector                 vEnd                           (Parm)
// class AActor*                  oCandidate                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsObstructed(const struct FVector& vStart, const struct FVector& vEnd, class AActor* oCandidate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsObstructed");

	UBioActorBehavior_IsObstructed_Params params;
	params.vStart = vStart;
	params.vEnd = vEnd;
	params.oCandidate = oCandidate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetInventory
// (Native, Public)
// Parameters:
// class UBioInventory*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioInventory* UBioActorBehavior::GetInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetInventory");

	UBioActorBehavior_GetInventory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.DetachMesh
// (Defined, Static, Public)
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, EditInline)
// class USkeletalMeshComponent*  subMesh                        (Parm, EditInline)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::STATIC_DetachMesh(class USkeletalMeshComponent* Mesh, class USkeletalMeshComponent* subMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.DetachMesh");

	UBioActorBehavior_DetachMesh_Params params;
	params.Mesh = Mesh;
	params.subMesh = subMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.AttachMeshToClosestBone
// (Defined, Static, Public, HasDefaults)
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, EditInline)
// float                          fMeshDrawScale                 (Parm)
// class USkeletalMeshComponent*  subMesh                        (Parm, EditInline)
// struct FVector                 subMeshPosition                (Parm)
// struct FRotator                subMeshRotation                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::STATIC_AttachMeshToClosestBone(class USkeletalMeshComponent* Mesh, float fMeshDrawScale, class USkeletalMeshComponent* subMesh, const struct FVector& subMeshPosition, const struct FRotator& subMeshRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.AttachMeshToClosestBone");

	UBioActorBehavior_AttachMeshToClosestBone_Params params;
	params.Mesh = Mesh;
	params.fMeshDrawScale = fMeshDrawScale;
	params.subMesh = subMesh;
	params.subMeshPosition = subMeshPosition;
	params.subMeshRotation = subMeshRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.PlayVOElements
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sText                          (Parm, NeedCtorLink)
// class USoundCue*               oVOSound                       (Parm)
// class UFaceFXAnimSet*          oVOLipSet                      (Parm)
// struct FString                 sVOLipAnim                     (Parm, NeedCtorLink)
// struct FBioVOSettings          cSettings                      (Const, Parm, OutParm)
// bool                           bLetFaceFXPlayAudio            (OptionalParm, Parm)
// bool                           bAutoDestroy                   (OptionalParm, Parm)
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* UBioActorBehavior::PlayVOElements(const struct FString& sText, class USoundCue* oVOSound, class UFaceFXAnimSet* oVOLipSet, const struct FString& sVOLipAnim, bool bLetFaceFXPlayAudio, bool bAutoDestroy, struct FBioVOSettings* cSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.PlayVOElements");

	UBioActorBehavior_PlayVOElements_Params params;
	params.sText = sText;
	params.oVOSound = oVOSound;
	params.oVOLipSet = oVOLipSet;
	params.sVOLipAnim = sVOLipAnim;
	params.bLetFaceFXPlayAudio = bLetFaceFXPlayAudio;
	params.bAutoDestroy = bAutoDestroy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (cSettings != nullptr)
		*cSettings = params.cSettings;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.RanOverByVehicle
// (Native, Public)
// Parameters:
// class ABioVehicleBase*         oVehicle                       (Parm)

void UBioActorBehavior::RanOverByVehicle(class ABioVehicleBase* oVehicle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.RanOverByVehicle");

	UBioActorBehavior_RanOverByVehicle_Params params;
	params.oVehicle = oVehicle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.OnGPEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioActorBehavior::OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.OnGPEvent");

	UBioActorBehavior_OnGPEvent_Params params;
	params.eEvent = eEvent;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.GetBusyState
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetBusyState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetBusyState");

	UBioActorBehavior_GetBusyState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.SetBusyState
// (Native, Public)
// Parameters:
// bool                           bSetBusy                       (Parm)

void UBioActorBehavior::SetBusyState(bool bSetBusy)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SetBusyState");

	UBioActorBehavior_SetBusyState_Params params;
	params.bSetBusy = bSetBusy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.SetActive
// (Native, Public)
// Parameters:
// bool                           bSetActive                     (Parm)

void UBioActorBehavior::SetActive(bool bSetActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SetActive");

	UBioActorBehavior_SetActive_Params params;
	params.bSetActive = bSetActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.IsCurrentTarget
// (Native, Public)
// Parameters:
// class AActor*                  oCandidateTarget               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsCurrentTarget(class AActor* oCandidateTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsCurrentTarget");

	UBioActorBehavior_IsCurrentTarget_Params params;
	params.oCandidateTarget = oCandidateTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsPenetratedByInstantWeaponFire
// (Native, Public)
// Parameters:
// class UClass*                  clsDamageType                  (Parm)
// class UBioDamageType*          pDamage                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsPenetratedByInstantWeaponFire(class UClass* clsDamageType, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsPenetratedByInstantWeaponFire");

	UBioActorBehavior_IsPenetratedByInstantWeaponFire_Params params;
	params.clsDamageType = clsDamageType;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.OnAnimEnd
// (Event, Public)
// Parameters:
// class UAnimNodeSequence*       oAnimation                     (Parm)
// float                          PlayedTime                     (Parm)
// float                          ExcessTime                     (Parm)

void UBioActorBehavior::OnAnimEnd(class UAnimNodeSequence* oAnimation, float PlayedTime, float ExcessTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.OnAnimEnd");

	UBioActorBehavior_OnAnimEnd_Params params;
	params.oAnimation = oAnimation;
	params.PlayedTime = PlayedTime;
	params.ExcessTime = ExcessTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.ReactToDeath
// (Defined, Public)
// Parameters:
// float                          Damage                         (Parm)
// float                          fDeathDamage                   (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  clsDamageType                  (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioActorBehavior::ReactToDeath(float Damage, float fDeathDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ReactToDeath");

	UBioActorBehavior_ReactToDeath_Params params;
	params.Damage = Damage;
	params.fDeathDamage = fDeathDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.clsDamageType = clsDamageType;
	params.HitInfo = HitInfo;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.CacheDeathVFXGameState
// (Defined, Public)
// Parameters:
// float                          fDamage                        (Parm)
// float                          fDeathDamage                   (Parm)
// class AController*             pInstigatorController          (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vMomentum                      (Parm)
// class UBioDamageType*          pDamage                        (Parm)

void UBioActorBehavior::CacheDeathVFXGameState(float fDamage, float fDeathDamage, class AController* pInstigatorController, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.CacheDeathVFXGameState");

	UBioActorBehavior_CacheDeathVFXGameState_Params params;
	params.fDamage = fDamage;
	params.fDeathDamage = fDeathDamage;
	params.pInstigatorController = pInstigatorController;
	params.vHitLocation = vHitLocation;
	params.vMomentum = vMomentum;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.AmplifyDamage
// (Public, HasOutParms)
// Parameters:
// float                          Damage                         (Parm, OutParm)

void UBioActorBehavior::AmplifyDamage(float* Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.AmplifyDamage");

	UBioActorBehavior_AmplifyDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
}


// Function BIOC_Base.BioActorBehavior.HurtRadius
// (Defined, Event, Public)
// Parameters:
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// class AActor*                  oDirectlyHitActor              (OptionalParm, Parm)
// class UDamageType*             pDamage                        (OptionalParm, Parm)

void UBioActorBehavior::HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* oDirectlyHitActor, class UDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.HurtRadius");

	UBioActorBehavior_HurtRadius_Params params;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.oDirectlyHitActor = oDirectlyHitActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.TakeRadiusDamage
// (Defined, Public, HasDefaults)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// float                          BaseDamage                     (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HurtOrigin                     (Parm)
// bool                           bFullDamage                    (Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UDamageType*             pDamage                        (OptionalParm, Parm)

void UBioActorBehavior::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* pDamageCausingActor, class UDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.TakeRadiusDamage");

	UBioActorBehavior_TakeRadiusDamage_Params params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.IsFriendlyFire
// (Defined, Event, Public)
// Parameters:
// class AController*             pInstigatorController          (Parm)
// class UBioDamageType*          pDamage                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsFriendlyFire(class AController* pInstigatorController, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsFriendlyFire");

	UBioActorBehavior_IsFriendlyFire_Params params;
	params.pInstigatorController = pInstigatorController;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.ProxyTakeDamage
// (Defined, Public, HasOutParms)
// Parameters:
// float                          OriginalDamage                 (Parm)
// float                          CurrentDamage                  (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// struct FBioDamageReporter      tDamageReporter                (Parm, OutParm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioActorBehavior::ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ProxyTakeDamage");

	UBioActorBehavior_ProxyTakeDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentDamage != nullptr)
		*CurrentDamage = params.CurrentDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
	if (tDamageReporter != nullptr)
		*tDamageReporter = params.tDamageReporter;
}


// Function BIOC_Base.BioActorBehavior.TakeDamage
// (Defined, Public, HasDefaults)
// Parameters:
// float                          Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UDamageType*             pDamage                        (OptionalParm, Parm)

void UBioActorBehavior::TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.TakeDamage");

	UBioActorBehavior_TakeDamage_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.SetActorGameName
// (Defined, Public)
// Parameters:
// struct FString                 newActorGameName               (Parm, NeedCtorLink)

void UBioActorBehavior::SetActorGameName(const struct FString& newActorGameName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SetActorGameName");

	UBioActorBehavior_SetActorGameName_Params params;
	params.newActorGameName = newActorGameName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.GetActorGameName
// (Defined, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioActorBehavior::GetActorGameName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetActorGameName");

	UBioActorBehavior_GetActorGameName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsMin1Health
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsMin1Health()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsMin1Health");

	UBioActorBehavior_IsMin1Health_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.InitializeRunTimeOnlyTransients
// (Defined, Event, Public)

void UBioActorBehavior::InitializeRunTimeOnlyTransients()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.InitializeRunTimeOnlyTransients");

	UBioActorBehavior_InitializeRunTimeOnlyTransients_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.BioRelateActors
// (Defined, Event, Public)

void UBioActorBehavior::BioRelateActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.BioRelateActors");

	UBioActorBehavior_BioRelateActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.ShouldChallengeScale
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::ShouldChallengeScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ShouldChallengeScale");

	UBioActorBehavior_ShouldChallengeScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetActionFrameworkErrorCode
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioActionFrameworkErrorCodes> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioActionFrameworkErrorCodes> UBioActorBehavior::GetActionFrameworkErrorCode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetActionFrameworkErrorCode");

	UBioActorBehavior_GetActionFrameworkErrorCode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.SetActionFrameworkErrorCode
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioActionFrameworkErrorCodes> eError                         (Parm)

void UBioActorBehavior::SetActionFrameworkErrorCode(TEnumAsByte<EBioActionFrameworkErrorCodes> eError)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SetActionFrameworkErrorCode");

	UBioActorBehavior_SetActionFrameworkErrorCode_Params params;
	params.eError = eError;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.HasCapability
// (Native, Public)
// Parameters:
// class UBioCapability*          oCap                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::HasCapability(class UBioCapability* oCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.HasCapability");

	UBioActorBehavior_HasCapability_Params params;
	params.oCap = oCap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsAbilityEnabled
// (Native, Public)
// Parameters:
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsAbilityEnabled(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsAbilityEnabled");

	UBioActorBehavior_IsAbilityEnabled_Params params;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.AbilityEnable
// (Native, Public)
// Parameters:
// bool                           bEnable                        (Parm)
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioActorBehavior::AbilityEnable(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.AbilityEnable");

	UBioActorBehavior_AbilityEnable_Params params;
	params.bEnable = bEnable;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.ComputeStepOutLocations
// (Native, Public, HasOutParms)
// Parameters:
// class AController*             oCoverUser                     (Parm)
// int                            nStepFlags                     (Parm)
// struct FVector                 vSlotLoc                       (Parm)
// struct FRotator                rSlotRot                       (Parm)
// float                          fLeftDist                      (Parm)
// float                          fRightDist                     (Parm)
// struct FVector                 vExtents                       (Parm)
// struct FVector                 vHidePos                       (Parm, OutParm)
// struct FVector                 vStepLeftPost                  (Parm, OutParm)
// struct FVector                 vStepRightPost                 (Parm, OutParm)
// struct FVector                 vLeanLeftLocation              (Parm, OutParm)
// struct FVector                 vLeanRightLocation             (Parm, OutParm)

void UBioActorBehavior::ComputeStepOutLocations(class AController* oCoverUser, int nStepFlags, const struct FVector& vSlotLoc, const struct FRotator& rSlotRot, float fLeftDist, float fRightDist, const struct FVector& vExtents, struct FVector* vHidePos, struct FVector* vStepLeftPost, struct FVector* vStepRightPost, struct FVector* vLeanLeftLocation, struct FVector* vLeanRightLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ComputeStepOutLocations");

	UBioActorBehavior_ComputeStepOutLocations_Params params;
	params.oCoverUser = oCoverUser;
	params.nStepFlags = nStepFlags;
	params.vSlotLoc = vSlotLoc;
	params.rSlotRot = rSlotRot;
	params.fLeftDist = fLeftDist;
	params.fRightDist = fRightDist;
	params.vExtents = vExtents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vHidePos != nullptr)
		*vHidePos = params.vHidePos;
	if (vStepLeftPost != nullptr)
		*vStepLeftPost = params.vStepLeftPost;
	if (vStepRightPost != nullptr)
		*vStepRightPost = params.vStepRightPost;
	if (vLeanLeftLocation != nullptr)
		*vLeanLeftLocation = params.vLeanLeftLocation;
	if (vLeanRightLocation != nullptr)
		*vLeanRightLocation = params.vLeanRightLocation;
}


// Function BIOC_Base.BioActorBehavior.WeaponLineOfSightThreshold
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// bool                           bCrouched                      (OptionalParm, Parm)
// float                          fThreshold                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::WeaponLineOfSightThreshold(class AActor* oTarget, bool bCrouched, float fThreshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.WeaponLineOfSightThreshold");

	UBioActorBehavior_WeaponLineOfSightThreshold_Params params;
	params.oTarget = oTarget;
	params.bCrouched = bCrouched;
	params.fThreshold = fThreshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.WeaponLineOfSightFromLocation
// (Native, Public)
// Parameters:
// struct FVector                 vLoc                           (Parm)
// class AActor*                  oTarget                        (Parm)
// bool                           bCrouched                      (OptionalParm, Parm)
// unsigned char                  LeanDirection                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::WeaponLineOfSightFromLocation(const struct FVector& vLoc, class AActor* oTarget, bool bCrouched, unsigned char LeanDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.WeaponLineOfSightFromLocation");

	UBioActorBehavior_WeaponLineOfSightFromLocation_Params params;
	params.vLoc = vLoc;
	params.oTarget = oTarget;
	params.bCrouched = bCrouched;
	params.LeanDirection = LeanDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetCurrentMoveTarget
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oMoveTarget                    (Parm, OutParm)
// struct FVector                 vTarget                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetCurrentMoveTarget(class AActor** oMoveTarget, struct FVector* vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetCurrentMoveTarget");

	UBioActorBehavior_GetCurrentMoveTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oMoveTarget != nullptr)
		*oMoveTarget = params.oMoveTarget;
	if (vTarget != nullptr)
		*vTarget = params.vTarget;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.RemoveAllLatentSequenceData
// (Native, Public)

void UBioActorBehavior::RemoveAllLatentSequenceData()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.RemoveAllLatentSequenceData");

	UBioActorBehavior_RemoveAllLatentSequenceData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.RemoveLatentSequenceData
// (Native, Public)
// Parameters:
// class UClass*                  ClsType                        (Parm)

void UBioActorBehavior::RemoveLatentSequenceData(class UClass* ClsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.RemoveLatentSequenceData");

	UBioActorBehavior_RemoveLatentSequenceData_Params params;
	params.ClsType = ClsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.MakeLatentSequenceData
// (Native, Public)
// Parameters:
// class UClass*                  ClsType                        (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* UBioActorBehavior::MakeLatentSequenceData(class UClass* ClsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.MakeLatentSequenceData");

	UBioActorBehavior_MakeLatentSequenceData_Params params;
	params.ClsType = ClsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetLatentSequenceData
// (Native, Public)
// Parameters:
// class UClass*                  ClsType                        (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* UBioActorBehavior::GetLatentSequenceData(class UClass* ClsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetLatentSequenceData");

	UBioActorBehavior_GetLatentSequenceData_Params params;
	params.ClsType = ClsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.DumpLatentSequenceData
// (Native, Public)

void UBioActorBehavior::DumpLatentSequenceData()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.DumpLatentSequenceData");

	UBioActorBehavior_DumpLatentSequenceData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.GetSquad
// (Native, Public)
// Parameters:
// class ABioBaseSquad*           ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioBaseSquad* UBioActorBehavior::GetSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetSquad");

	UBioActorBehavior_GetSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.InitializeForPlay
// (Final, Native, Private)

void UBioActorBehavior::InitializeForPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.InitializeForPlay");

	UBioActorBehavior_InitializeForPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.SoftResetMovementAndAnimationState
// (Native, Public)

void UBioActorBehavior::SoftResetMovementAndAnimationState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SoftResetMovementAndAnimationState");

	UBioActorBehavior_SoftResetMovementAndAnimationState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.HardResetActionAndAnimationState
// (Native, Public)

void UBioActorBehavior::HardResetActionAndAnimationState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.HardResetActionAndAnimationState");

	UBioActorBehavior_HardResetActionAndAnimationState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.ReleasePendingReactive
// (Native, Public)
// Parameters:
// class UBioReactive*            oReactive                      (Parm)

void UBioActorBehavior::ReleasePendingReactive(class UBioReactive* oReactive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ReleasePendingReactive");

	UBioActorBehavior_ReleasePendingReactive_Params params;
	params.oReactive = oReactive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.ReleaseActiveByClass
// (Native, Public)
// Parameters:
// class UClass*                  oActiveToRelease               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::ReleaseActiveByClass(class UClass* oActiveToRelease)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ReleaseActiveByClass");

	UBioActorBehavior_ReleaseActiveByClass_Params params;
	params.oActiveToRelease = oActiveToRelease;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.ReleaseActive
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::ReleaseActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ReleaseActive");

	UBioActorBehavior_ReleaseActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.AcquireReactive
// (Native, Public)
// Parameters:
// class UClass*                  clsReactive                    (Parm)
// class AActor*                  oInstigator                    (Parm)
// class UBioReactive*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioReactive* UBioActorBehavior::AcquireReactive(class UClass* clsReactive, class AActor* oInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.AcquireReactive");

	UBioActorBehavior_AcquireReactive_Params params;
	params.clsReactive = clsReactive;
	params.oInstigator = oInstigator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.SearchForActive
// (Native, Public)
// Parameters:
// class UClass*                  clsActive                      (Parm)
// class UBioActive*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioActive* UBioActorBehavior::SearchForActive(class UClass* clsActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SearchForActive");

	UBioActorBehavior_SearchForActive_Params params;
	params.clsActive = clsActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.AcquireActive
// (Native, Public)
// Parameters:
// class UClass*                  clsActive                      (Parm)
// bool                           bAutoStartActive               (OptionalParm, Parm)
// class UBioActive*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioActive* UBioActorBehavior::AcquireActive(class UClass* clsActive, bool bAutoStartActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.AcquireActive");

	UBioActorBehavior_AcquireActive_Params params;
	params.clsActive = clsActive;
	params.bAutoStartActive = bAutoStartActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.RegisterReactive
// (Native, Public)
// Parameters:
// class UClass*                  clsReactive                    (Parm)
// class UBioReactive*            oReactive                      (Parm)

void UBioActorBehavior::RegisterReactive(class UClass* clsReactive, class UBioReactive* oReactive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.RegisterReactive");

	UBioActorBehavior_RegisterReactive_Params params;
	params.clsReactive = clsReactive;
	params.oReactive = oReactive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.RegisterActive
// (Native, Public)
// Parameters:
// class UClass*                  clsActive                      (Parm)
// class UBioActive*              oActive                        (Parm)

void UBioActorBehavior::RegisterActive(class UClass* clsActive, class UBioActive* oActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.RegisterActive");

	UBioActorBehavior_RegisterActive_Params params;
	params.clsActive = clsActive;
	params.oActive = oActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.EnableCollision
// (Native, Public)
// Parameters:
// bool                           bState                         (Parm)

void UBioActorBehavior::EnableCollision(bool bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.EnableCollision");

	UBioActorBehavior_EnableCollision_Params params;
	params.bState = bState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.OnPhysicsImpulse
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 Impulse                        (Parm, OutParm)
// struct FVector                 Position                       (Parm, OutParm)
// struct FName                   BoneName                       (Parm, OutParm)
// class UMeshComponent*          oMesh                          (Parm, EditInline)
// bool                           bIsForce                       (Parm)

void UBioActorBehavior::OnPhysicsImpulse(class UMeshComponent* oMesh, bool bIsForce, struct FVector* Impulse, struct FVector* Position, struct FName* BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.OnPhysicsImpulse");

	UBioActorBehavior_OnPhysicsImpulse_Params params;
	params.oMesh = oMesh;
	params.bIsForce = bIsForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Impulse != nullptr)
		*Impulse = params.Impulse;
	if (Position != nullptr)
		*Position = params.Position;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
}


// Function BIOC_Base.BioActorBehavior.IsAbleToInstigate
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsAbleToInstigate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsAbleToInstigate");

	UBioActorBehavior_IsAbleToInstigate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsDefaultActionPossible
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsDefaultActionPossible()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsDefaultActionPossible");

	UBioActorBehavior_IsDefaultActionPossible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsWithinUseRange
// (Native, Public)
// Parameters:
// struct FVector                 vRefLocation                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsWithinUseRange(const struct FVector& vRefLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsWithinUseRange");

	UBioActorBehavior_IsWithinUseRange_Params params;
	params.vRefLocation = vRefLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetUseRange
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioActorBehavior::GetUseRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetUseRange");

	UBioActorBehavior_GetUseRange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetScanable
// (Native, Public)
// Parameters:
// int                            nInstigatorScanLevel           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetScanable(int nInstigatorScanLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetScanable");

	UBioActorBehavior_GetScanable_Params params;
	params.nInstigatorScanLevel = nInstigatorScanLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetCombatTargetable
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetCombatTargetable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetCombatTargetable");

	UBioActorBehavior_GetCombatTargetable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetTargetable
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetTargetable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetTargetable");

	UBioActorBehavior_GetTargetable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsCombatSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsCombatSelectable(class ABioPlayerController* pPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsCombatSelectable");

	UBioActorBehavior_IsCombatSelectable_Params params;
	params.pPlayerController = pPlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsExploreSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsExploreSelectable(class ABioPlayerController* pPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsExploreSelectable");

	UBioActorBehavior_IsExploreSelectable_Params params;
	params.pPlayerController = pPlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetPlayerSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// unsigned char                  ePlayerState                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetPlayerSelectable");

	UBioActorBehavior_GetPlayerSelectable_Params params;
	params.pPlayerController = pPlayerController;
	params.ePlayerState = ePlayerState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetTargetZoneLocationN
// (Native, Public, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 vLocation                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::GetTargetZoneLocationN(int nIndex, struct FVector* vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetTargetZoneLocationN");

	UBioActorBehavior_GetTargetZoneLocationN_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetTargetZoneLocation
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioActorBehavior::GetTargetZoneLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetTargetZoneLocation");

	UBioActorBehavior_GetTargetZoneLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.RecordGeneralDamage
// (Native, Public, HasOutParms)
// Parameters:
// struct FBioDamageReporter      tDamageReporter                (Const, Parm, OutParm)
// class APawn*                   oInstigator                    (Parm)

void UBioActorBehavior::RecordGeneralDamage(class APawn* oInstigator, struct FBioDamageReporter* tDamageReporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.RecordGeneralDamage");

	UBioActorBehavior_RecordGeneralDamage_Params params;
	params.oInstigator = oInstigator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (tDamageReporter != nullptr)
		*tDamageReporter = params.tDamageReporter;
}


// Function BIOC_Base.BioActorBehavior.ClearDamageReporter
// (Native, Public, HasOutParms)
// Parameters:
// struct FBioDamageReporter      tDamageReporter                (Parm, OutParm)

void UBioActorBehavior::ClearDamageReporter(struct FBioDamageReporter* tDamageReporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.ClearDamageReporter");

	UBioActorBehavior_ClearDamageReporter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (tDamageReporter != nullptr)
		*tDamageReporter = params.tDamageReporter;
}


// Function BIOC_Base.BioActorBehavior.OnCastAt
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oWho                           (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   Power                          (Parm, OutParm)

void UBioActorBehavior::OnCastAt(class AActor* oWho, class APawn* oAttacker, struct FName* Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.OnCastAt");

	UBioActorBehavior_OnCastAt_Params params;
	params.oWho = oWho;
	params.oAttacker = oAttacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Power != nullptr)
		*Power = params.Power;
}


// Function BIOC_Base.BioActorBehavior.OnAttacked
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oWho                           (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   Weapon                         (Parm, OutParm)

void UBioActorBehavior::OnAttacked(class AActor* oWho, class APawn* oAttacker, struct FName* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.OnAttacked");

	UBioActorBehavior_OnAttacked_Params params;
	params.oWho = oWho;
	params.oAttacker = oAttacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Weapon != nullptr)
		*Weapon = params.Weapon;
}


// Function BIOC_Base.BioActorBehavior.GenerateOnCastAt
// (Native, Public, HasOutParms)
// Parameters:
// class UBioActorBehavior*       oAttacker                      (Parm)
// struct FName                   nPower                         (Parm, OutParm)

void UBioActorBehavior::GenerateOnCastAt(class UBioActorBehavior* oAttacker, struct FName* nPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GenerateOnCastAt");

	UBioActorBehavior_GenerateOnCastAt_Params params;
	params.oAttacker = oAttacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nPower != nullptr)
		*nPower = params.nPower;
}


// Function BIOC_Base.BioActorBehavior.GenerateOnAttacked
// (Native, Public, HasOutParms)
// Parameters:
// class UBioActorBehavior*       oAttacker                      (Parm)
// struct FName                   nWeapon                        (Parm, OutParm)

void UBioActorBehavior::GenerateOnAttacked(class UBioActorBehavior* oAttacker, struct FName* nWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GenerateOnAttacked");

	UBioActorBehavior_GenerateOnAttacked_Params params;
	params.oAttacker = oAttacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nWeapon != nullptr)
		*nWeapon = params.nWeapon;
}


// Function BIOC_Base.BioActorBehavior.CanBeMounted
// (Native, Public)
// Parameters:
// class APawn*                   oMounter                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::CanBeMounted(class APawn* oMounter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.CanBeMounted");

	UBioActorBehavior_CanBeMounted_Params params;
	params.oMounter = oMounter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.CanBeShot
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       pOther                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::CanBeShot(class UBioActorBehavior* pOther)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.CanBeShot");

	UBioActorBehavior_CanBeShot_Params params;
	params.pOther = pOther;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.IsSuperModeCurrentAndActive
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eSuperMode                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::IsSuperModeCurrentAndActive(TEnumAsByte<EBioSuperModes> eSuperMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.IsSuperModeCurrentAndActive");

	UBioActorBehavior_IsSuperModeCurrentAndActive_Params params;
	params.eSuperMode = eSuperMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.SetAnimationStateTrackingFor
// (Native, Public)
// Parameters:
// struct FName                   nmNodeName                     (Parm)
// struct FName                   nmValue                        (Parm)

void UBioActorBehavior::SetAnimationStateTrackingFor(const struct FName& nmNodeName, const struct FName& nmValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SetAnimationStateTrackingFor");

	UBioActorBehavior_SetAnimationStateTrackingFor_Params params;
	params.nmNodeName = nmNodeName;
	params.nmValue = nmValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehavior.GetAnimationStateTrackingFor
// (Native, Public)
// Parameters:
// struct FName                   nmNodeName                     (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioActorBehavior::GetAnimationStateTrackingFor(const struct FName& nmNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetAnimationStateTrackingFor");

	UBioActorBehavior_GetAnimationStateTrackingFor_Params params;
	params.nmNodeName = nmNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetTargetTipText
// (Native, Public, HasOutParms)
// Parameters:
// class UBioEpicPawnBehavior*    oSourcePawnBehav               (Parm)
// struct FString                 strTip                         (Parm, OutParm, NeedCtorLink)

void UBioActorBehavior::GetTargetTipText(class UBioEpicPawnBehavior* oSourcePawnBehav, struct FString* strTip)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetTargetTipText");

	UBioActorBehavior_GetTargetTipText_Params params;
	params.oSourcePawnBehav = oSourcePawnBehav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (strTip != nullptr)
		*strTip = params.strTip;
}


// Function BIOC_Base.BioActorBehavior.GetTarget
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioActorBehavior::GetTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetTarget");

	UBioActorBehavior_GetTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.SetTarget
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// bool                           bLockOnTarget                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::SetTarget(class AActor* oTarget, bool bLockOnTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SetTarget");

	UBioActorBehavior_SetTarget_Params params;
	params.oTarget = oTarget;
	params.bLockOnTarget = bLockOnTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.FindSuperMode
// (Native, Public)
// Parameters:
// class UClass*                  clsSuperMode                   (Parm)
// class UBioSuperMode*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSuperMode* UBioActorBehavior::FindSuperMode(class UClass* clsSuperMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.FindSuperMode");

	UBioActorBehavior_FindSuperMode_Params params;
	params.clsSuperMode = clsSuperMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.SetSuperMode
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    nSuperMode                     (Parm)
// bool                           bActivate                      (Parm)
// bool                           bReturnToSuperMode             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActorBehavior::SetSuperMode(TEnumAsByte<EBioSuperModes> nSuperMode, bool bActivate, bool bReturnToSuperMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.SetSuperMode");

	UBioActorBehavior_SetSuperMode_Params params;
	params.nSuperMode = nSuperMode;
	params.bActivate = bActivate;
	params.bReturnToSuperMode = bReturnToSuperMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.GetPreviousSuperMode
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioSuperModes> UBioActorBehavior::GetPreviousSuperMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.GetPreviousSuperMode");

	UBioActorBehavior_GetPreviousSuperMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActorBehavior.TickBehavior
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UBioActorBehavior::TickBehavior(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehavior.TickBehavior");

	UBioActorBehavior_TickBehavior_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.DetonateAttachedGrenades
// (Native, Public)

void UBioArtPlaceableBehavior::DetonateAttachedGrenades()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.DetonateAttachedGrenades");

	UBioArtPlaceableBehavior_DetonateAttachedGrenades_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GrenadeDetached
// (Native, Public)
// Parameters:
// class AActor*                  oGrenade                       (Parm)

void UBioArtPlaceableBehavior::GrenadeDetached(class AActor* oGrenade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GrenadeDetached");

	UBioArtPlaceableBehavior_GrenadeDetached_Params params;
	params.oGrenade = oGrenade;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GrenadeAttached
// (Native, Public)
// Parameters:
// class AActor*                  oGrenade                       (Parm)

void UBioArtPlaceableBehavior::GrenadeAttached(class AActor* oGrenade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GrenadeAttached");

	UBioArtPlaceableBehavior_GrenadeAttached_Params params;
	params.oGrenade = oGrenade;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.WriteSaveObject
// (Defined, Event, Public)
// Parameters:
// class UObject*                 InOuter                        (Parm)
// class UBioBaseSaveObject*      Save                           (OptionalParm, Parm)
// class UBioBaseSaveObject*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioBaseSaveObject* UBioArtPlaceableBehavior::WriteSaveObject(class UObject* InOuter, class UBioBaseSaveObject* Save)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.WriteSaveObject");

	UBioArtPlaceableBehavior_WriteSaveObject_Params params;
	params.InOuter = InOuter;
	params.Save = Save;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ReadSaveObject
// (Defined, Event, Public)
// Parameters:
// class UBioBaseSaveObject*      Save                           (Parm)

void UBioArtPlaceableBehavior::ReadSaveObject(class UBioBaseSaveObject* Save)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ReadSaveObject");

	UBioArtPlaceableBehavior_ReadSaveObject_Params params;
	params.Save = Save;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioArtPlaceableBehavior::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetSaveObjectClass");

	UBioArtPlaceableBehavior_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   oPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::ProceedWithMove(class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ProceedWithMove");

	UBioArtPlaceableBehavior_ProceedWithMove_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.SetWaitingForMove
// (Defined, Public)
// Parameters:
// bool                           bVal                           (Parm)

void UBioArtPlaceableBehavior::SetWaitingForMove(bool bVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.SetWaitingForMove");

	UBioArtPlaceableBehavior_SetWaitingForMove_Params params;
	params.bVal = bVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetMaxHealth
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioArtPlaceableBehavior::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetMaxHealth");

	UBioArtPlaceableBehavior_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.TermRagdoll
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.TermRagdoll");

	UBioArtPlaceableBehavior_TermRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.InitRagdoll
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.InitRagdoll");

	UBioArtPlaceableBehavior_InitRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.CanBeShot
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       pOther                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::CanBeShot(class UBioActorBehavior* pOther)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.CanBeShot");

	UBioArtPlaceableBehavior_CanBeShot_Params params;
	params.pOther = pOther;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.RanOverByVehicle
// (Native, Public)
// Parameters:
// class ABioVehicleBase*         oVehicle                       (Parm)

void UBioArtPlaceableBehavior::RanOverByVehicle(class ABioVehicleBase* oVehicle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.RanOverByVehicle");

	UBioArtPlaceableBehavior_RanOverByVehicle_Params params;
	params.oVehicle = oVehicle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.IsPhysicsAffectable
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::IsPhysicsAffectable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.IsPhysicsAffectable");

	UBioArtPlaceableBehavior_IsPhysicsAffectable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetStateFailure
// (Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioArtPlaceableBehavior::GetStateFailure()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetStateFailure");

	UBioArtPlaceableBehavior_GetStateFailure_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetStateSuccess
// (Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioArtPlaceableBehavior::GetStateSuccess()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetStateSuccess");

	UBioArtPlaceableBehavior_GetStateSuccess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.IsTransitioning
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::IsTransitioning()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.IsTransitioning");

	UBioArtPlaceableBehavior_IsTransitioning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.OnTransitionCPP
// (Native, Public)
// Parameters:
// struct FName                   FromState                      (Parm)
// struct FName                   ToState                        (Parm)

void UBioArtPlaceableBehavior::OnTransitionCPP(const struct FName& FromState, const struct FName& ToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.OnTransitionCPP");

	UBioArtPlaceableBehavior_OnTransitionCPP_Params params;
	params.FromState = FromState;
	params.ToState = ToState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ChangeStateMesh
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   nmState                        (Parm, OutParm)

void UBioArtPlaceableBehavior::ChangeStateMesh(struct FName* nmState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ChangeStateMesh");

	UBioArtPlaceableBehavior_ChangeStateMesh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nmState != nullptr)
		*nmState = params.nmState;
}


// Function BIOC_Base.BioArtPlaceableBehavior.SetActive
// (Native, Public)
// Parameters:
// bool                           bSetActive                     (Parm)

void UBioArtPlaceableBehavior::SetActive(bool bSetActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.SetActive");

	UBioArtPlaceableBehavior_SetActive_Params params;
	params.bSetActive = bSetActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.SetCollision
// (Defined, Public)
// Parameters:
// bool                           bCollide                       (Parm)

void UBioArtPlaceableBehavior::SetCollision(bool bCollide)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.SetCollision");

	UBioArtPlaceableBehavior_SetCollision_Params params;
	params.bCollide = bCollide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetCurrentState
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioArtPlaceableBehavior::GetCurrentState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetCurrentState");

	UBioArtPlaceableBehavior_GetCurrentState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ReactToDeath
// (Defined, Public)
// Parameters:
// float                          Damage                         (Parm)
// float                          fDeathDamage                   (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  clsDamageType                  (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioArtPlaceableBehavior::ReactToDeath(float Damage, float fDeathDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ReactToDeath");

	UBioArtPlaceableBehavior_ReactToDeath_Params params;
	params.Damage = Damage;
	params.fDeathDamage = fDeathDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.clsDamageType = clsDamageType;
	params.HitInfo = HitInfo;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ReactToImpulse
// (Defined, Event, Public)
// Parameters:
// struct FVector                 vMomentum                      (Parm)
// struct FVector                 vHitLocation                   (Parm)

void UBioArtPlaceableBehavior::ReactToImpulse(const struct FVector& vMomentum, const struct FVector& vHitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ReactToImpulse");

	UBioArtPlaceableBehavior_ReactToImpulse_Params params;
	params.vMomentum = vMomentum;
	params.vHitLocation = vHitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ProxyTakeDamage
// (Defined, Public, HasOutParms)
// Parameters:
// float                          OriginalDamage                 (Parm)
// float                          CurrentDamage                  (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// struct FBioDamageReporter      tDamageReporter                (Parm, OutParm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioArtPlaceableBehavior::ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ProxyTakeDamage");

	UBioArtPlaceableBehavior_ProxyTakeDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentDamage != nullptr)
		*CurrentDamage = params.CurrentDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
	if (tDamageReporter != nullptr)
		*tDamageReporter = params.tDamageReporter;
}


// Function BIOC_Base.BioArtPlaceableBehavior.TakeDamageCPP
// (Defined, Event, Public, HasOutParms)
// Parameters:
// float                          OriginalDamage                 (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioArtPlaceableBehavior::TakeDamageCPP(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.TakeDamageCPP");

	UBioArtPlaceableBehavior_TakeDamageCPP_Params params;
	params.OriginalDamage = OriginalDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function BIOC_Base.BioArtPlaceableBehavior.UsedKey
// (Public)
// Parameters:
// struct FName                   KeyName                        (Parm)

void UBioArtPlaceableBehavior::UsedKey(const struct FName& KeyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.UsedKey");

	UBioArtPlaceableBehavior_UsedKey_Params params;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.HasKey
// (Defined, Event, Public)
// Parameters:
// struct FName                   KeyName                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::HasKey(const struct FName& KeyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.HasKey");

	UBioArtPlaceableBehavior_HasKey_Params params;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.OnAppearanceSet
// (Event, Public)
// Parameters:
// class UBioBaseAppearancePlaceable* oAppearance                    (Parm)

void UBioArtPlaceableBehavior::OnAppearanceSet(class UBioBaseAppearancePlaceable* oAppearance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.OnAppearanceSet");

	UBioArtPlaceableBehavior_OnAppearanceSet_Params params;
	params.oAppearance = oAppearance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.OnTransition
// (Defined, Event, Public)
// Parameters:
// struct FName                   FromState                      (Parm)
// struct FName                   ToState                        (Parm)
// bool                           bCallCPP                       (OptionalParm, Parm)

void UBioArtPlaceableBehavior::OnTransition(const struct FName& FromState, const struct FName& ToState, bool bCallCPP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.OnTransition");

	UBioArtPlaceableBehavior_OnTransition_Params params;
	params.FromState = FromState;
	params.ToState = ToState;
	params.bCallCPP = bCallCPP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.OnArtPlaceablePlotFail
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oUsingActor                    (Parm)
// struct FName                   nmToState                      (Parm)

void UBioArtPlaceableBehavior::OnArtPlaceablePlotFail(class AActor* oUsingActor, const struct FName& nmToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.OnArtPlaceablePlotFail");

	UBioArtPlaceableBehavior_OnArtPlaceablePlotFail_Params params;
	params.oUsingActor = oUsingActor;
	params.nmToState = nmToState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.OnArtPlaceableUsed
// (Defined, Event, Public)
// Parameters:
// class AActor*                  User                           (Parm)
// struct FName                   ToState                        (Parm)

void UBioArtPlaceableBehavior::OnArtPlaceableUsed(class AActor* User, const struct FName& ToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.OnArtPlaceableUsed");

	UBioArtPlaceableBehavior_OnArtPlaceableUsed_Params params;
	params.User = User;
	params.ToState = ToState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.IsInteractive
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::IsInteractive()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.IsInteractive");

	UBioArtPlaceableBehavior_IsInteractive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetState
// (Defined, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioArtPlaceableBehavior::GetState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetState");

	UBioArtPlaceableBehavior_GetState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetHealth
// (Defined, Event, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioArtPlaceableBehavior::GetHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetHealth");

	UBioArtPlaceableBehavior_GetHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.BioRelateActors
// (Defined, Event, Public)

void UBioArtPlaceableBehavior::BioRelateActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.BioRelateActors");

	UBioArtPlaceableBehavior_BioRelateActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.InitializeRunTimeOnlyTransients
// (Defined, Event, Public)

void UBioArtPlaceableBehavior::InitializeRunTimeOnlyTransients()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.InitializeRunTimeOnlyTransients");

	UBioArtPlaceableBehavior_InitializeRunTimeOnlyTransients_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.BeginPlay
// (Defined, Event, Public)

void UBioArtPlaceableBehavior::BeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.BeginPlay");

	UBioArtPlaceableBehavior_BeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetStartingState
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioArtPlaceableBehavior::GetStartingState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetStartingState");

	UBioArtPlaceableBehavior_GetStartingState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.CanForceOpen
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::CanForceOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.CanForceOpen");

	UBioArtPlaceableBehavior_CanForceOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetTreasureID
// (Defined, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioArtPlaceableBehavior::GetTreasureID()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetTreasureID");

	UBioArtPlaceableBehavior_GetTreasureID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ContainsTreasure
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::ContainsTreasure()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ContainsTreasure");

	UBioArtPlaceableBehavior_ContainsTreasure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.DoDoorFinished
// (Native, Public)
// Parameters:
// struct FName                   ToState                        (Parm)

void UBioArtPlaceableBehavior::DoDoorFinished(const struct FName& ToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.DoDoorFinished");

	UBioArtPlaceableBehavior_DoDoorFinished_Params params;
	params.ToState = ToState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.HasTransition
// (Native, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// struct FName                   Transition                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::HasTransition(const struct FName& ToState, const struct FName& Transition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.HasTransition");

	UBioArtPlaceableBehavior_HasTransition_Params params;
	params.ToState = ToState;
	params.Transition = Transition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.SetState
// (Native, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// struct FName                   NamedTransition                (OptionalParm, Parm)
// bool                           IgnoreTransition               (OptionalParm, Parm)
// bool                           bRightNow                      (OptionalParm, Parm)
// bool                           bApplyVFX                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::SetState(const struct FName& ToState, const struct FName& NamedTransition, bool IgnoreTransition, bool bRightNow, bool bApplyVFX)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.SetState");

	UBioArtPlaceableBehavior_SetState_Params params;
	params.ToState = ToState;
	params.NamedTransition = NamedTransition;
	params.IgnoreTransition = IgnoreTransition;
	params.bRightNow = bRightNow;
	params.bApplyVFX = bApplyVFX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.VerifyNotEditor
// (Native, Public)

void UBioArtPlaceableBehavior::VerifyNotEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.VerifyNotEditor");

	UBioArtPlaceableBehavior_VerifyNotEditor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.ApplyVFXForState
// (Native, Public)
// Parameters:
// struct FName                   NewState                       (Parm)
// bool                           bForce                         (OptionalParm, Parm)

void UBioArtPlaceableBehavior::ApplyVFXForState(const struct FName& NewState, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.ApplyVFXForState");

	UBioArtPlaceableBehavior_ApplyVFXForState_Params params;
	params.NewState = NewState;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.PreloadVFX
// (Native, Public)

void UBioArtPlaceableBehavior::PreloadVFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.PreloadVFX");

	UBioArtPlaceableBehavior_PreloadVFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.CanBeMounted
// (Native, Public)
// Parameters:
// class APawn*                   oMounter                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::CanBeMounted(class APawn* oMounter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.CanBeMounted");

	UBioArtPlaceableBehavior_CanBeMounted_Params params;
	params.oMounter = oMounter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.PlaySoundForState
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   oState                         (Parm, OutParm)

void UBioArtPlaceableBehavior::PlaySoundForState(struct FName* oState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.PlaySoundForState");

	UBioArtPlaceableBehavior_PlaySoundForState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oState != nullptr)
		*oState = params.oState;
}


// Function BIOC_Base.BioArtPlaceableBehavior.IsMeshPhysicsCapable
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::IsMeshPhysicsCapable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.IsMeshPhysicsCapable");

	UBioArtPlaceableBehavior_IsMeshPhysicsCapable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.UpdatePlaceableDamage
// (Native, Public)

void UBioArtPlaceableBehavior::UpdatePlaceableDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.UpdatePlaceableDamage");

	UBioArtPlaceableBehavior_UpdatePlaceableDamage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.HandleDamageablePlaceable
// (Native, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)

void UBioArtPlaceableBehavior::HandleDamageablePlaceable(class AController* InstigatedBy, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.HandleDamageablePlaceable");

	UBioArtPlaceableBehavior_HandleDamageablePlaceable_Params params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.InitializeActionFramework
// (Final, Native, Private)

void UBioArtPlaceableBehavior::InitializeActionFramework()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.InitializeActionFramework");

	UBioArtPlaceableBehavior_InitializeActionFramework_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehavior.OnPhysicsImpulse
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 Impulse                        (Parm, OutParm)
// struct FVector                 Position                       (Parm, OutParm)
// struct FName                   BoneName                       (Parm, OutParm)
// class UMeshComponent*          oMesh                          (Parm, EditInline)
// bool                           bIsForce                       (Parm)

void UBioArtPlaceableBehavior::OnPhysicsImpulse(class UMeshComponent* oMesh, bool bIsForce, struct FVector* Impulse, struct FVector* Position, struct FName* BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.OnPhysicsImpulse");

	UBioArtPlaceableBehavior_OnPhysicsImpulse_Params params;
	params.oMesh = oMesh;
	params.bIsForce = bIsForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Impulse != nullptr)
		*Impulse = params.Impulse;
	if (Position != nullptr)
		*Position = params.Position;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetTargetZoneLocationN
// (Native, Public, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 vLocation                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::GetTargetZoneLocationN(int nIndex, struct FVector* vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetTargetZoneLocationN");

	UBioArtPlaceableBehavior_GetTargetZoneLocationN_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetTargetZoneLocation
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioArtPlaceableBehavior::GetTargetZoneLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetTargetZoneLocation");

	UBioArtPlaceableBehavior_GetTargetZoneLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehavior.GetPlayerSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// unsigned char                  ePlayerState                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableBehavior::GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehavior.GetPlayerSelectable");

	UBioArtPlaceableBehavior_GetPlayerSelectable_Params params;
	params.pPlayerController = pPlayerController;
	params.ePlayerState = ePlayerState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableShieldBehavior.ProxyTakeDamage
// (Defined, Public, HasOutParms)
// Parameters:
// float                          OriginalDamage                 (Parm)
// float                          CurrentDamage                  (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// struct FBioDamageReporter      tDamageReporter                (Parm, OutParm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioArtPlaceableShieldBehavior::ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableShieldBehavior.ProxyTakeDamage");

	UBioArtPlaceableShieldBehavior_ProxyTakeDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentDamage != nullptr)
		*CurrentDamage = params.CurrentDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
	if (tDamageReporter != nullptr)
		*tDamageReporter = params.tDamageReporter;
}


// Function BIOC_Base.BioArtPlaceableShieldBehavior.Tick
// (Native, Public)
// Parameters:
// float                          fTimeDelta                     (Parm)

void UBioArtPlaceableShieldBehavior::Tick(float fTimeDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableShieldBehavior.Tick");

	UBioArtPlaceableShieldBehavior_Tick_Params params;
	params.fTimeDelta = fTimeDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.SetMatriarchZen
// (Defined, Event, Public)
// Parameters:
// bool                           bEnabled                       (Parm)

void UBioEpicPawnBehavior::SetMatriarchZen(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.SetMatriarchZen");

	UBioEpicPawnBehavior_SetMatriarchZen_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.DisplayEpicPawnVisualEffect
// (Native, Public)
// Parameters:
// struct FName                   nmLabel                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::DisplayEpicPawnVisualEffect(const struct FName& nmLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.DisplayEpicPawnVisualEffect");

	UBioEpicPawnBehavior_DisplayEpicPawnVisualEffect_Params params;
	params.nmLabel = nmLabel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.OnShieldsDown
// (Event, Public)

void UBioEpicPawnBehavior::OnShieldsDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.OnShieldsDown");

	UBioEpicPawnBehavior_OnShieldsDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.AdjustSalvage
// (Defined, Event, Public)
// Parameters:
// float                          fAmt                           (Parm)

void UBioEpicPawnBehavior::AdjustSalvage(float fAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.AdjustSalvage");

	UBioEpicPawnBehavior_AdjustSalvage_Params params;
	params.fAmt = fAmt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetSalvage
// (Defined, Event, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioEpicPawnBehavior::GetSalvage()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetSalvage");

	UBioEpicPawnBehavior_GetSalvage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsHealing
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsHealing()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsHealing");

	UBioEpicPawnBehavior_IsHealing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.Heal
// (Native, Public)
// Parameters:
// float                          fHealthPoints                  (Parm)
// float                          fToxicDamageHealed             (OptionalParm, Parm)
// float                          fResourcesRequired             (OptionalParm, Parm)

void UBioEpicPawnBehavior::Heal(float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.Heal");

	UBioEpicPawnBehavior_Heal_Params params;
	params.fHealthPoints = fHealthPoints;
	params.fToxicDamageHealed = fToxicDamageHealed;
	params.fResourcesRequired = fResourcesRequired;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetPercentHealth
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioEpicPawnBehavior::GetPercentHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetPercentHealth");

	UBioEpicPawnBehavior_GetPercentHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetCurrentHealth
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioEpicPawnBehavior::GetCurrentHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetCurrentHealth");

	UBioEpicPawnBehavior_GetCurrentHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.InitializeRunTimeOnlyTransients
// (Defined, Event, Public)

void UBioEpicPawnBehavior::InitializeRunTimeOnlyTransients()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.InitializeRunTimeOnlyTransients");

	UBioEpicPawnBehavior_InitializeRunTimeOnlyTransients_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.SetCurrentHealth
// (Defined, Public)
// Parameters:
// float                          currentHealth                  (Parm)

void UBioEpicPawnBehavior::SetCurrentHealth(float currentHealth)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.SetCurrentHealth");

	UBioEpicPawnBehavior_SetCurrentHealth_Params params;
	params.currentHealth = currentHealth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetMaxHealth
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioEpicPawnBehavior::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetMaxHealth");

	UBioEpicPawnBehavior_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.UpdatePowersOnDeath
// (Native, Public)

void UBioEpicPawnBehavior::UpdatePowersOnDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.UpdatePowersOnDeath");

	UBioEpicPawnBehavior_UpdatePowersOnDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.FindPowerIndex
// (Native, Public)
// Parameters:
// struct FName                   nmPowerName                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioEpicPawnBehavior::FindPowerIndex(const struct FName& nmPowerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.FindPowerIndex");

	UBioEpicPawnBehavior_FindPowerIndex_Params params;
	params.nmPowerName = nmPowerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.FindPower
// (Native, Public)
// Parameters:
// struct FName                   nmPowerName                    (Parm)
// class UBioPower*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioPower* UBioEpicPawnBehavior::FindPower(const struct FName& nmPowerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.FindPower");

	UBioEpicPawnBehavior_FindPower_Params params;
	params.nmPowerName = nmPowerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.ApplyRadialImpulse
// (Native, Public)
// Parameters:
// struct FVector                 vLineOfSightOrigin             (Parm)
// struct FVector                 vImpulseOrigin                 (Parm)
// float                          fImpulseMagnitude              (Parm)
// struct FName                   nmPhysicsBoneName              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::ApplyRadialImpulse(const struct FVector& vLineOfSightOrigin, const struct FVector& vImpulseOrigin, float fImpulseMagnitude, const struct FName& nmPhysicsBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ApplyRadialImpulse");

	UBioEpicPawnBehavior_ApplyRadialImpulse_Params params;
	params.vLineOfSightOrigin = vLineOfSightOrigin;
	params.vImpulseOrigin = vImpulseOrigin;
	params.fImpulseMagnitude = fImpulseMagnitude;
	params.nmPhysicsBoneName = nmPhysicsBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.SetTarget
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// bool                           bLockOnTarget                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::SetTarget(class AActor* oTarget, bool bLockOnTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.SetTarget");

	UBioEpicPawnBehavior_SetTarget_Params params;
	params.oTarget = oTarget;
	params.bLockOnTarget = bLockOnTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsLockedOnTarget
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsLockedOnTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsLockedOnTarget");

	UBioEpicPawnBehavior_IsLockedOnTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.LockOnTarget
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioEpicPawnBehavior::LockOnTarget(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.LockOnTarget");

	UBioEpicPawnBehavior_LockOnTarget_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioEpicPawnBehavior::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetSaveObjectClass");

	UBioEpicPawnBehavior_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.WriteSaveObject
// (Defined, Event, Public)
// Parameters:
// class UObject*                 InOuter                        (Parm)
// class UBioBaseSaveObject*      Save                           (OptionalParm, Parm)
// class UBioBaseSaveObject*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioBaseSaveObject* UBioEpicPawnBehavior::WriteSaveObject(class UObject* InOuter, class UBioBaseSaveObject* Save)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.WriteSaveObject");

	UBioEpicPawnBehavior_WriteSaveObject_Params params;
	params.InOuter = InOuter;
	params.Save = Save;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsFriendlyFire
// (Defined, Event, Public)
// Parameters:
// class AController*             pInstigatorController          (Parm)
// class UBioDamageType*          pDamage                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsFriendlyFire(class AController* pInstigatorController, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsFriendlyFire");

	UBioEpicPawnBehavior_IsFriendlyFire_Params params;
	params.pInstigatorController = pInstigatorController;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.ReactToDeath
// (Defined, Public)
// Parameters:
// float                          fDamage                        (Parm)
// float                          fDeathDamage                   (Parm)
// class AController*             pInstigatedBy                  (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vMomentum                      (Parm)
// class UClass*                  clsDamageType                  (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioEpicPawnBehavior::ReactToDeath(float fDamage, float fDeathDamage, class AController* pInstigatedBy, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ReactToDeath");

	UBioEpicPawnBehavior_ReactToDeath_Params params;
	params.fDamage = fDamage;
	params.fDeathDamage = fDeathDamage;
	params.pInstigatedBy = pInstigatedBy;
	params.vHitLocation = vHitLocation;
	params.vMomentum = vMomentum;
	params.clsDamageType = clsDamageType;
	params.HitInfo = HitInfo;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsHostile
// (Native, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsHostile(class AController* InstigatedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsHostile");

	UBioEpicPawnBehavior_IsHostile_Params params;
	params.InstigatedBy = InstigatedBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsNeutral
// (Native, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsNeutral(class AController* InstigatedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsNeutral");

	UBioEpicPawnBehavior_IsNeutral_Params params;
	params.InstigatedBy = InstigatedBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsFriendly
// (Native, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsFriendly(class AController* InstigatedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsFriendly");

	UBioEpicPawnBehavior_IsFriendly_Params params;
	params.InstigatedBy = InstigatedBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetHealthAndShieldsCapacities
// (Native, Public, HasOutParms)
// Parameters:
// int                            fHealth                        (Parm, OutParm)
// int                            fShields                       (Parm, OutParm)

void UBioEpicPawnBehavior::GetHealthAndShieldsCapacities(int* fHealth, int* fShields)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetHealthAndShieldsCapacities");

	UBioEpicPawnBehavior_GetHealthAndShieldsCapacities_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fHealth != nullptr)
		*fHealth = params.fHealth;
	if (fShields != nullptr)
		*fShields = params.fShields;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetHealthAndShieldsScaledToInt
// (Native, Public, HasOutParms)
// Parameters:
// int                            fHealth                        (Parm, OutParm)
// int                            fShields                       (Parm, OutParm)

void UBioEpicPawnBehavior::GetHealthAndShieldsScaledToInt(int* fHealth, int* fShields)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetHealthAndShieldsScaledToInt");

	UBioEpicPawnBehavior_GetHealthAndShieldsScaledToInt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fHealth != nullptr)
		*fHealth = params.fHealth;
	if (fShields != nullptr)
		*fShields = params.fShields;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetHealthAndShieldsScaled
// (Defined, Public, HasOutParms)
// Parameters:
// float                          fHealth                        (Parm, OutParm)
// float                          fShields                       (Parm, OutParm)

void UBioEpicPawnBehavior::GetHealthAndShieldsScaled(float* fHealth, float* fShields)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetHealthAndShieldsScaled");

	UBioEpicPawnBehavior_GetHealthAndShieldsScaled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fHealth != nullptr)
		*fHealth = params.fHealth;
	if (fShields != nullptr)
		*fShields = params.fShields;
}


// Function BIOC_Base.BioEpicPawnBehavior.ClearAllActionsOnPawn
// (Defined, Event, Public)
// Parameters:
// struct FString                 sClearLabel                    (OptionalParm, Parm, NeedCtorLink)

void UBioEpicPawnBehavior::ClearAllActionsOnPawn(const struct FString& sClearLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ClearAllActionsOnPawn");

	UBioEpicPawnBehavior_ClearAllActionsOnPawn_Params params;
	params.sClearLabel = sClearLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetDoorProximityRefCount
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioEpicPawnBehavior::GetDoorProximityRefCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetDoorProximityRefCount");

	UBioEpicPawnBehavior_GetDoorProximityRefCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.ModifyDoorProximityRefCount
// (Native, Public)
// Parameters:
// bool                           bIncrement                     (Parm)

void UBioEpicPawnBehavior::ModifyDoorProximityRefCount(bool bIncrement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ModifyDoorProximityRefCount");

	UBioEpicPawnBehavior_ModifyDoorProximityRefCount_Params params;
	params.bIncrement = bIncrement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsCombatSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsCombatSelectable(class ABioPlayerController* pPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsCombatSelectable");

	UBioEpicPawnBehavior_IsCombatSelectable_Params params;
	params.pPlayerController = pPlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsExploreSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsExploreSelectable(class ABioPlayerController* pPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsExploreSelectable");

	UBioEpicPawnBehavior_IsExploreSelectable_Params params;
	params.pPlayerController = pPlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.ProxyCacheGetWeaponMuzzleLocation
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 muzzleLocation                 (Parm, OutParm)
// class ABioWeaponRanged*        Weapon                         (Parm)

void UBioEpicPawnBehavior::ProxyCacheGetWeaponMuzzleLocation(class ABioWeaponRanged* Weapon, struct FVector* muzzleLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ProxyCacheGetWeaponMuzzleLocation");

	UBioEpicPawnBehavior_ProxyCacheGetWeaponMuzzleLocation_Params params;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (muzzleLocation != nullptr)
		*muzzleLocation = params.muzzleLocation;
}


// Function BIOC_Base.BioEpicPawnBehavior.ProxyCacheGetMuzzleToTargetDirection
// (Native, Public, HasOutParms)
// Parameters:
// struct FRotator                Direction                      (Parm, OutParm)
// class ABioWeaponRanged*        Weapon                         (Parm)

void UBioEpicPawnBehavior::ProxyCacheGetMuzzleToTargetDirection(class ABioWeaponRanged* Weapon, struct FRotator* Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ProxyCacheGetMuzzleToTargetDirection");

	UBioEpicPawnBehavior_ProxyCacheGetMuzzleToTargetDirection_Params params;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Direction != nullptr)
		*Direction = params.Direction;
}


// Function BIOC_Base.BioEpicPawnBehavior.ProxyCacheGetWeaponTargetPoint
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 TargetPoint                    (Parm, OutParm)
// class ABioWeaponRanged*        Weapon                         (Parm)

void UBioEpicPawnBehavior::ProxyCacheGetWeaponTargetPoint(class ABioWeaponRanged* Weapon, struct FVector* TargetPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ProxyCacheGetWeaponTargetPoint");

	UBioEpicPawnBehavior_ProxyCacheGetWeaponTargetPoint_Params params;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TargetPoint != nullptr)
		*TargetPoint = params.TargetPoint;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetSelectionObstructionSource
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioEpicPawnBehavior::GetSelectionObstructionSource()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetSelectionObstructionSource");

	UBioEpicPawnBehavior_GetSelectionObstructionSource_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetPlayerSelectionRange
// (Native, Public)
// Parameters:
// class UBioPlayerSelection*     pSelection                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioEpicPawnBehavior::GetPlayerSelectionRange(class UBioPlayerSelection* pSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetPlayerSelectionRange");

	UBioEpicPawnBehavior_GetPlayerSelectionRange_Params params;
	params.pSelection = pSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetPlayerSelectionAngleAtRange
// (Native, Public)
// Parameters:
// class UBioPlayerSelection*     pSelection                     (Parm)
// float                          fRange                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioEpicPawnBehavior::GetPlayerSelectionAngleAtRange(class UBioPlayerSelection* pSelection, float fRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetPlayerSelectionAngleAtRange");

	UBioEpicPawnBehavior_GetPlayerSelectionAngleAtRange_Params params;
	params.pSelection = pSelection;
	params.fRange = fRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.OnTargetInvalidated
// (Native, Public)
// Parameters:
// class AActor*                  CurrentSelection               (Parm)

void UBioEpicPawnBehavior::OnTargetInvalidated(class AActor* CurrentSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.OnTargetInvalidated");

	UBioEpicPawnBehavior_OnTargetInvalidated_Params params;
	params.CurrentSelection = CurrentSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.OnNewPlayerPawnSelection
// (Native, Public)
// Parameters:
// class AActor*                  Selection                      (Parm)
// class UBioPlayerSelection*     pPlayerSelection               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::OnNewPlayerPawnSelection(class AActor* Selection, class UBioPlayerSelection* pPlayerSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.OnNewPlayerPawnSelection");

	UBioEpicPawnBehavior_OnNewPlayerPawnSelection_Params params;
	params.Selection = Selection;
	params.pPlayerSelection = pPlayerSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.SetPreviousActionState
// (Native, Public)
// Parameters:
// TEnumAsByte<EActionStateVariable> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EActionStateVariable> UBioEpicPawnBehavior::SetPreviousActionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.SetPreviousActionState");

	UBioEpicPawnBehavior_SetPreviousActionState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.SetActionState
// (Native, Public)
// Parameters:
// TEnumAsByte<EActionStateVariable> eState                         (Parm)
// float                          fDelay                         (OptionalParm, Parm)
// TEnumAsByte<EActionStateVariable> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EActionStateVariable> UBioEpicPawnBehavior::SetActionState(TEnumAsByte<EActionStateVariable> eState, float fDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.SetActionState");

	UBioEpicPawnBehavior_SetActionState_Params params;
	params.eState = eState;
	params.fDelay = fDelay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.TickPowers
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UBioEpicPawnBehavior::TickPowers(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.TickPowers");

	UBioEpicPawnBehavior_TickPowers_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.ClearCurrentPower
// (Native, Public)

void UBioEpicPawnBehavior::ClearCurrentPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.ClearCurrentPower");

	UBioEpicPawnBehavior_ClearCurrentPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.SetCurrentPower
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   nmPower                        (Parm)
// float                          fCooldownRemaining             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::SetCurrentPower(const struct FName& nmPower, float* fCooldownRemaining)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.SetCurrentPower");

	UBioEpicPawnBehavior_SetCurrentPower_Params params;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fCooldownRemaining != nullptr)
		*fCooldownRemaining = params.fCooldownRemaining;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.AppendPawnCapabilitiesToList
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapabilityTypes> nCapType                       (Parm)
// TArray<class UBioCapability*>  oOutCaps                       (Parm, OutParm, NeedCtorLink)

void UBioEpicPawnBehavior::AppendPawnCapabilitiesToList(TEnumAsByte<EBioCapabilityTypes> nCapType, TArray<class UBioCapability*>* oOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.AppendPawnCapabilitiesToList");

	UBioEpicPawnBehavior_AppendPawnCapabilitiesToList_Params params;
	params.nCapType = nCapType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oOutCaps != nullptr)
		*oOutCaps = params.oOutCaps;
}


// Function BIOC_Base.BioEpicPawnBehavior.RecomputeCapabilities
// (Native, Public)

void UBioEpicPawnBehavior::RecomputeCapabilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.RecomputeCapabilities");

	UBioEpicPawnBehavior_RecomputeCapabilities_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledCombatTransition
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabledCombatTransition()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledCombatTransition");

	UBioEpicPawnBehavior_IsAbilityEnabledCombatTransition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledPowers
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabledPowers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledPowers");

	UBioEpicPawnBehavior_IsAbilityEnabledPowers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledGrenades
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabledGrenades()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledGrenades");

	UBioEpicPawnBehavior_IsAbilityEnabledGrenades_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledWeapons
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabledWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledWeapons");

	UBioEpicPawnBehavior_IsAbilityEnabledWeapons_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledStack
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabledStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledStack");

	UBioEpicPawnBehavior_IsAbilityEnabledStack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledQueue
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabledQueue()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledQueue");

	UBioEpicPawnBehavior_IsAbilityEnabledQueue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledAll
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabledAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabledAll");

	UBioEpicPawnBehavior_IsAbilityEnabledAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.DoDisabledEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void UBioEpicPawnBehavior::DoDisabledEvent(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.DoDisabledEvent");

	UBioEpicPawnBehavior_DoDisabledEvent_Params params;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.DoEnabledEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void UBioEpicPawnBehavior::DoEnabledEvent(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.DoEnabledEvent");

	UBioEpicPawnBehavior_DoEnabledEvent_Params params;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabled_Power
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabled_Power(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabled_Power");

	UBioEpicPawnBehavior_IsAbilityEnabled_Power_Params params;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.AbilityEnable_Power
// (Final, Native, Private)
// Parameters:
// bool                           bEnable                        (Parm)
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioEpicPawnBehavior::AbilityEnable_Power(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.AbilityEnable_Power");

	UBioEpicPawnBehavior_AbilityEnable_Power_Params params;
	params.bEnable = bEnable;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabled_Offense
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabled_Offense(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabled_Offense");

	UBioEpicPawnBehavior_IsAbilityEnabled_Offense_Params params;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.AbilityEnable_Offense
// (Final, Native, Private)
// Parameters:
// bool                           bEnable                        (Parm)
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioEpicPawnBehavior::AbilityEnable_Offense(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.AbilityEnable_Offense");

	UBioEpicPawnBehavior_AbilityEnable_Offense_Params params;
	params.bEnable = bEnable;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabled_AI
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsAbilityEnabled_AI(TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsAbilityEnabled_AI");

	UBioEpicPawnBehavior_IsAbilityEnabled_AI_Params params;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.AbilityEnable_AI
// (Final, Native, Private)
// Parameters:
// bool                           bEnable                        (Parm)
// TEnumAsByte<EDisableType>      eEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioEpicPawnBehavior::AbilityEnable_AI(bool bEnable, TEnumAsByte<EDisableType> eEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.AbilityEnable_AI");

	UBioEpicPawnBehavior_AbilityEnable_AI_Params params;
	params.bEnable = bEnable;
	params.eEnableType = eEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.OnWeaponInstantFire
// (Native, Public)
// Parameters:
// class ABioWeaponRanged*        oFiredWeapon                   (OptionalParm, Parm)

void UBioEpicPawnBehavior::OnWeaponInstantFire(class ABioWeaponRanged* oFiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.OnWeaponInstantFire");

	UBioEpicPawnBehavior_OnWeaponInstantFire_Params params;
	params.oFiredWeapon = oFiredWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.InitializeActionFramework
// (Final, Native, Private)

void UBioEpicPawnBehavior::InitializeActionFramework()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.InitializeActionFramework");

	UBioEpicPawnBehavior_InitializeActionFramework_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetSelectionSourceLocation
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioEpicPawnBehavior::GetSelectionSourceLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetSelectionSourceLocation");

	UBioEpicPawnBehavior_GetSelectionSourceLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.TickBehavior
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UBioEpicPawnBehavior::TickBehavior(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.TickBehavior");

	UBioEpicPawnBehavior_TickBehavior_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneCount
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioEpicPawnBehavior::GetTargetZoneCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneCount");

	UBioEpicPawnBehavior_GetTargetZoneCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneNameN
// (Native, Public, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// struct FName                   nmTargetZone                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::GetTargetZoneNameN(int nIndex, struct FName* nmTargetZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneNameN");

	UBioEpicPawnBehavior_GetTargetZoneNameN_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nmTargetZone != nullptr)
		*nmTargetZone = params.nmTargetZone;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneLocationN
// (Native, Public, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 vLocation                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::GetTargetZoneLocationN(int nIndex, struct FVector* vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneLocationN");

	UBioEpicPawnBehavior_GetTargetZoneLocationN_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.IsTargetZoneEnabled
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEpicPawnBehavior::IsTargetZoneEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.IsTargetZoneEnabled");

	UBioEpicPawnBehavior_IsTargetZoneEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneLocation
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioEpicPawnBehavior::GetTargetZoneLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.GetTargetZoneLocation");

	UBioEpicPawnBehavior_GetTargetZoneLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEpicPawnBehavior.CanSeeTarget
// (Final, Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 vSourceLocation                (Parm)
// class AActor*                  oTarget                        (OptionalParm, Parm)
// bool                           bTraverseList                  (OptionalParm, Parm)
// int                            nOptLevel                      (OptionalParm, Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioEpicPawnBehavior::CanSeeTarget(float fDeltaTime, const struct FVector& vSourceLocation, class AActor* oTarget, bool bTraverseList, int nOptLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehavior.CanSeeTarget");

	UBioEpicPawnBehavior_CanSeeTarget_Params params;
	params.fDeltaTime = fDeltaTime;
	params.vSourceLocation = vSourceLocation;
	params.oTarget = oTarget;
	params.bTraverseList = bTraverseList;
	params.nOptLevel = nOptLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.UpdateBleedOut
// (Native, Public)

void UBioPawnBehavior::UpdateBleedOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.UpdateBleedOut");

	UBioPawnBehavior_UpdateBleedOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.HasPowersOfType
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioCapMode>       eDiscipline                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::HasPowersOfType(TEnumAsByte<EBioCapMode> eDiscipline)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.HasPowersOfType");

	UBioPawnBehavior_HasPowersOfType_Params params;
	params.eDiscipline = eDiscipline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.IsOfPowerRace
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBio_Appr_CharacterTalentRaceType> eRace                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::IsOfPowerRace(TEnumAsByte<EBio_Appr_CharacterTalentRaceType> eRace)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.IsOfPowerRace");

	UBioPawnBehavior_IsOfPowerRace_Params params;
	params.eRace = eRace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetPowerUsePercent
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetPowerUsePercent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetPowerUsePercent");

	UBioPawnBehavior_GetPowerUsePercent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetBleedOutThreshold
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetBleedOutThreshold()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetBleedOutThreshold");

	UBioPawnBehavior_GetBleedOutThreshold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.IsAbleToInstigate
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::IsAbleToInstigate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.IsAbleToInstigate");

	UBioPawnBehavior_IsAbleToInstigate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetCanBePhysicsImpacted
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::GetCanBePhysicsImpacted()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetCanBePhysicsImpacted");

	UBioPawnBehavior_GetCanBePhysicsImpacted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetHealthRegenRate
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetHealthRegenRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetHealthRegenRate");

	UBioPawnBehavior_GetHealthRegenRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetDamageResistance
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetDamageResistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetDamageResistance");

	UBioPawnBehavior_GetDamageResistance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.RecoverFromBleedOut
// (Final, Native, Public)

void UBioPawnBehavior::RecoverFromBleedOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.RecoverFromBleedOut");

	UBioPawnBehavior_RecoverFromBleedOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.EnableBleedOut
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioPawnBehavior::EnableBleedOut(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.EnableBleedOut");

	UBioPawnBehavior_EnableBleedOut_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.ForceAppearanceUpdate
// (Native, Public)

void UBioPawnBehavior::ForceAppearanceUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ForceAppearanceUpdate");

	UBioPawnBehavior_ForceAppearanceUpdate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.SetActionState
// (Native, Public)
// Parameters:
// TEnumAsByte<EActionStateVariable> eState                         (Parm)
// float                          fDelay                         (OptionalParm, Parm)
// TEnumAsByte<EActionStateVariable> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EActionStateVariable> UBioPawnBehavior::SetActionState(TEnumAsByte<EActionStateVariable> eState, float fDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetActionState");

	UBioPawnBehavior_SetActionState_Params params;
	params.eState = eState;
	params.fDelay = fDelay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.SetTwistThreshold
// (Final, Native, Public)
// Parameters:
// float                          F                              (Parm)

void UBioPawnBehavior::SetTwistThreshold(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetTwistThreshold");

	UBioPawnBehavior_SetTwistThreshold_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetTwistThreshold
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetTwistThreshold()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetTwistThreshold");

	UBioPawnBehavior_GetTwistThreshold_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetCurrentWeaponItem
// (Final, Native, Public)
// Parameters:
// class UBioItemWeaponRanged*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemWeaponRanged* UBioPawnBehavior::GetCurrentWeaponItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetCurrentWeaponItem");

	UBioPawnBehavior_GetCurrentWeaponItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetUnlootableGrenadeCountSaveGames
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetUnlootableGrenadeCountSaveGames()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetUnlootableGrenadeCountSaveGames");

	UBioPawnBehavior_GetUnlootableGrenadeCountSaveGames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.SetUnlootableGrenadeCountSaveGames
// (Defined, Public)
// Parameters:
// int                            N                              (Parm)

void UBioPawnBehavior::SetUnlootableGrenadeCountSaveGames(int N)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetUnlootableGrenadeCountSaveGames");

	UBioPawnBehavior_SetUnlootableGrenadeCountSaveGames_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetUnlootableGrenadeCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetUnlootableGrenadeCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetUnlootableGrenadeCount");

	UBioPawnBehavior_GetUnlootableGrenadeCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.ModifyUnlootableGrenadeCount
// (Final, Native, Public)
// Parameters:
// int                            N                              (Parm)

void UBioPawnBehavior::ModifyUnlootableGrenadeCount(int N)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ModifyUnlootableGrenadeCount");

	UBioPawnBehavior_ModifyUnlootableGrenadeCount_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.ExitCombatStasis
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::ExitCombatStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ExitCombatStasis");

	UBioPawnBehavior_ExitCombatStasis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.EnterCombatStasis
// (Native, Public)
// Parameters:
// float                          fDuration                      (Parm)
// bool                           bAllowDamage                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::EnterCombatStasis(float fDuration, bool bAllowDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.EnterCombatStasis");

	UBioPawnBehavior_EnterCombatStasis_Params params;
	params.fDuration = fDuration;
	params.bAllowDamage = bAllowDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.UseDeathCapability
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::UseDeathCapability()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.UseDeathCapability");

	UBioPawnBehavior_UseDeathCapability_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.FeignDeathKismet
// (Defined, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioPawnBehavior::FeignDeathKismet(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.FeignDeathKismet");

	UBioPawnBehavior_FeignDeathKismet_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.FeignDeath
// (Defined, Event, Public)
// Parameters:
// bool                           B                              (Parm)
// bool                           bForceState                    (OptionalParm, Parm)

void UBioPawnBehavior::FeignDeath(bool B, bool bForceState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.FeignDeath");

	UBioPawnBehavior_FeignDeath_Params params;
	params.B = B;
	params.bForceState = bForceState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.MoveWeaponToSocket
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmSocket                       (Parm)

void UBioPawnBehavior::MoveWeaponToSocket(const struct FName& nmSocket)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.MoveWeaponToSocket");

	UBioPawnBehavior_MoveWeaponToSocket_Params params;
	params.nmSocket = nmSocket;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.OnShieldsDown
// (Defined, Event, Public)

void UBioPawnBehavior::OnShieldsDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnShieldsDown");

	UBioPawnBehavior_OnShieldsDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.TermRagdoll
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.TermRagdoll");

	UBioPawnBehavior_TermRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.InitRagdoll
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.InitRagdoll");

	UBioPawnBehavior_InitRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioPawnBehavior::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetSaveObjectClass");

	UBioPawnBehavior_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.CacheGetWeaponDriftAngle
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::CacheGetWeaponDriftAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.CacheGetWeaponDriftAngle");

	UBioPawnBehavior_CacheGetWeaponDriftAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.CacheGetWeaponDriftZoneRadius
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::CacheGetWeaponDriftZoneRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.CacheGetWeaponDriftZoneRadius");

	UBioPawnBehavior_CacheGetWeaponDriftZoneRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetInventory
// (Native, Public)
// Parameters:
// class UBioInventory*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioInventory* UBioPawnBehavior::GetInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetInventory");

	UBioPawnBehavior_GetInventory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetCharmSkill
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetCharmSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetCharmSkill");

	UBioPawnBehavior_GetCharmSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetIntimidateSkill
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetIntimidateSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetIntimidateSkill");

	UBioPawnBehavior_GetIntimidateSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.CanBeShot
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       pOther                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::CanBeShot(class UBioActorBehavior* pOther)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.CanBeShot");

	UBioPawnBehavior_CanBeShot_Params params;
	params.pOther = pOther;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.CreateAndEquipEquipment
// (Native, Public)
// Parameters:
// int                            nEquipmentId                   (Parm)
// int                            nSophistication                (Parm)
// int                            nManufacturerID                (OptionalParm, Parm)
// class UObject*                 InExistingObject               (OptionalParm, Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioPawnBehavior::CreateAndEquipEquipment(int nEquipmentId, int nSophistication, int nManufacturerID, class UObject* InExistingObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.CreateAndEquipEquipment");

	UBioPawnBehavior_CreateAndEquipEquipment_Params params;
	params.nEquipmentId = nEquipmentId;
	params.nSophistication = nSophistication;
	params.nManufacturerID = nManufacturerID;
	params.InExistingObject = InExistingObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.TickTalents
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioPawnBehavior::TickTalents(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.TickTalents");

	UBioPawnBehavior_TickTalents_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.ActivateNextWeapon
// (Defined, Event, Public)

void UBioPawnBehavior::ActivateNextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ActivateNextWeapon");

	UBioPawnBehavior_ActivateNextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.ProcessMeshAdj
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioPawnBehavior::ProcessMeshAdj(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ProcessMeshAdj");

	UBioPawnBehavior_ProcessMeshAdj_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.InPlayerParty
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::InPlayerParty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.InPlayerParty");

	UBioPawnBehavior_InPlayerParty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetBioticAmpEquipped
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::GetBioticAmpEquipped()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetBioticAmpEquipped");

	UBioPawnBehavior_GetBioticAmpEquipped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.SetClass
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPartyMemberClassBase> nValue                         (Parm)

void UBioPawnBehavior::SetClass(TEnumAsByte<EBioPartyMemberClassBase> nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetClass");

	UBioPawnBehavior_SetClass_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetClass
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPartyMemberClassBase> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioPartyMemberClassBase> UBioPawnBehavior::GetClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetClass");

	UBioPawnBehavior_GetClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.AdjustGrenades
// (Defined, Public)
// Parameters:
// int                            nAmt                           (Parm)

void UBioPawnBehavior::AdjustGrenades(int nAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AdjustGrenades");

	UBioPawnBehavior_AdjustGrenades_Params params;
	params.nAmt = nAmt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetGrenades
// (Defined, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetGrenades()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetGrenades");

	UBioPawnBehavior_GetGrenades_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.AdjustMediGel
// (Defined, Event, Public)
// Parameters:
// float                          fAmt                           (Parm)

void UBioPawnBehavior::AdjustMediGel(float fAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AdjustMediGel");

	UBioPawnBehavior_AdjustMediGel_Params params;
	params.fAmt = fAmt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetMediGel
// (Defined, Event, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetMediGel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetMediGel");

	UBioPawnBehavior_GetMediGel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.AdjustCredits
// (Defined, Public)
// Parameters:
// int                            nAmt                           (Parm)

void UBioPawnBehavior::AdjustCredits(int nAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AdjustCredits");

	UBioPawnBehavior_AdjustCredits_Params params;
	params.nAmt = nAmt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetCredits
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetCredits()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetCredits");

	UBioPawnBehavior_GetCredits_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetXPLevel
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetXPLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetXPLevel");

	UBioPawnBehavior_GetXPLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GiveXP
// (Defined, Public)
// Parameters:
// int                            nAmt                           (Parm)

void UBioPawnBehavior::GiveXP(int nAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GiveXP");

	UBioPawnBehavior_GiveXP_Params params;
	params.nAmt = nAmt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetXP
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetXP()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetXP");

	UBioPawnBehavior_GetXP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.SetGender
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioAttributePawnGender> nValue                         (Parm)

void UBioPawnBehavior::SetGender(TEnumAsByte<EBioAttributePawnGender> nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetGender");

	UBioPawnBehavior_SetGender_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetGender
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioAttributePawnGender> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioAttributePawnGender> UBioPawnBehavior::GetGender()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetGender");

	UBioPawnBehavior_GetGender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.AdvanceTalkToCount
// (Defined, Public)
// Parameters:
// int                            nAmt                           (Parm)

void UBioPawnBehavior::AdvanceTalkToCount(int nAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AdvanceTalkToCount");

	UBioPawnBehavior_AdvanceTalkToCount_Params params;
	params.nAmt = nAmt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.SetTalkToCount
// (Defined, Public)
// Parameters:
// int                            nValue                         (Parm)

void UBioPawnBehavior::SetTalkToCount(int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetTalkToCount");

	UBioPawnBehavior_SetTalkToCount_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetTalkToCount
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetTalkToCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetTalkToCount");

	UBioPawnBehavior_GetTalkToCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetMarshalRank
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPlayerCharacterSpectreRank> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioPlayerCharacterSpectreRank> UBioPawnBehavior::GetMarshalRank()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetMarshalRank");

	UBioPawnBehavior_GetMarshalRank_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.SetBackground_Notoritey
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> nValue                         (Parm)

void UBioPawnBehavior::SetBackground_Notoritey(TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetBackground_Notoritey");

	UBioPawnBehavior_SetBackground_Notoritey_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetBackground_Notoritey
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> UBioPawnBehavior::GetBackground_Notoritey()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetBackground_Notoritey");

	UBioPawnBehavior_GetBackground_Notoritey_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.SetBackground_Childhood
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> nValue                         (Parm)

void UBioPawnBehavior::SetBackground_Childhood(TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SetBackground_Childhood");

	UBioPawnBehavior_SetBackground_Childhood_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetBackground_Childhood
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> UBioPawnBehavior::GetBackground_Childhood()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetBackground_Childhood");

	UBioPawnBehavior_GetBackground_Childhood_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.OnBioticExitMode
// (Defined, Event, Public)

void UBioPawnBehavior::OnBioticExitMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnBioticExitMode");

	UBioPawnBehavior_OnBioticExitMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.OnBioticSwitchTarget
// (Defined, Event, Public)

void UBioPawnBehavior::OnBioticSwitchTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnBioticSwitchTarget");

	UBioPawnBehavior_OnBioticSwitchTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.OnBioticRelease
// (Defined, Event, Public)

void UBioPawnBehavior::OnBioticRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnBioticRelease");

	UBioPawnBehavior_OnBioticRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.OnBioticLock
// (Defined, Event, Public)

void UBioPawnBehavior::OnBioticLock()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnBioticLock");

	UBioPawnBehavior_OnBioticLock_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.OnBioticEnterMode
// (Defined, Event, Public)

void UBioPawnBehavior::OnBioticEnterMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnBioticEnterMode");

	UBioPawnBehavior_OnBioticEnterMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.EndSlowMotion
// (Final, Defined, Private)

void UBioPawnBehavior::EndSlowMotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.EndSlowMotion");

	UBioPawnBehavior_EndSlowMotion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.HasKey
// (Defined, Event, Public)
// Parameters:
// struct FName                   Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::HasKey(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.HasKey");

	UBioPawnBehavior_HasKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.OnDeathAnimationFinished
// (Defined, Event, Public)

void UBioPawnBehavior::OnDeathAnimationFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnDeathAnimationFinished");

	UBioPawnBehavior_OnDeathAnimationFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GrantSimpleDeathXP
// (Defined, Public)

void UBioPawnBehavior::GrantSimpleDeathXP()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GrantSimpleDeathXP");

	UBioPawnBehavior_GrantSimpleDeathXP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.CanPlayDeathAnimation
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::CanPlayDeathAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.CanPlayDeathAnimation");

	UBioPawnBehavior_CanPlayDeathAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.LootCorpse
// (Final, Defined, Private)
// Parameters:
// class ABioWorldInfo*           BioWorldInfo                   (Parm)

void UBioPawnBehavior::LootCorpse(class ABioWorldInfo* BioWorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.LootCorpse");

	UBioPawnBehavior_LootCorpse_Params params;
	params.BioWorldInfo = BioWorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.ReactToDeath
// (Defined, Public)
// Parameters:
// float                          Damage                         (Parm)
// float                          fDeathDamage                   (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioPawnBehavior::ReactToDeath(float Damage, float fDeathDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ReactToDeath");

	UBioPawnBehavior_ReactToDeath_Params params;
	params.Damage = Damage;
	params.fDeathDamage = fDeathDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.CacheDeathVFXGameState
// (Defined, Public)
// Parameters:
// float                          fDamage                        (Parm)
// float                          fDeathDamage                   (Parm)
// class AController*             pInstigatorController          (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vMomentum                      (Parm)
// class UBioDamageType*          pDamage                        (Parm)

void UBioPawnBehavior::CacheDeathVFXGameState(float fDamage, float fDeathDamage, class AController* pInstigatorController, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.CacheDeathVFXGameState");

	UBioPawnBehavior_CacheDeathVFXGameState_Params params;
	params.fDamage = fDamage;
	params.fDeathDamage = fDeathDamage;
	params.pInstigatorController = pInstigatorController;
	params.vHitLocation = vHitLocation;
	params.vMomentum = vMomentum;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.PlayDamageSound
// (Defined, Public)
// Parameters:
// float                          fDamage                        (Parm)

void UBioPawnBehavior::PlayDamageSound(float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.PlayDamageSound");

	UBioPawnBehavior_PlayDamageSound_Params params;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.PlayDamageAnim
// (Defined, Public, HasOutParms)
// Parameters:
// float                          fDamage                        (Parm)
// struct FVector                 vMomentum                      (Const, Parm, OutParm)

void UBioPawnBehavior::PlayDamageAnim(float fDamage, struct FVector* vMomentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.PlayDamageAnim");

	UBioPawnBehavior_PlayDamageAnim_Params params;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vMomentum != nullptr)
		*vMomentum = params.vMomentum;
}


// Function BIOC_Base.BioPawnBehavior.AddImpulse
// (Defined, Public, HasOutParms)
// Parameters:
// struct FVector                 vMomentum                      (Const, Parm, OutParm)
// struct FVector                 vHitLocation                   (Const, Parm, OutParm)

void UBioPawnBehavior::AddImpulse(struct FVector* vMomentum, struct FVector* vHitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AddImpulse");

	UBioPawnBehavior_AddImpulse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vMomentum != nullptr)
		*vMomentum = params.vMomentum;
	if (vHitLocation != nullptr)
		*vHitLocation = params.vHitLocation;
}


// Function BIOC_Base.BioPawnBehavior.AmplifyDamage
// (Defined, Public, HasOutParms)
// Parameters:
// float                          Damage                         (Parm, OutParm)

void UBioPawnBehavior::AmplifyDamage(float* Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AmplifyDamage");

	UBioPawnBehavior_AmplifyDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
}


// Function BIOC_Base.BioPawnBehavior.ProxyTakeDamage
// (Defined, Public, HasOutParms)
// Parameters:
// float                          OriginalDamage                 (Parm)
// float                          CurrentDamage                  (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// struct FBioDamageReporter      tDamageReporter                (Parm, OutParm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioPawnBehavior::ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ProxyTakeDamage");

	UBioPawnBehavior_ProxyTakeDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentDamage != nullptr)
		*CurrentDamage = params.CurrentDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
	if (tDamageReporter != nullptr)
		*tDamageReporter = params.tDamageReporter;
}


// Function BIOC_Base.BioPawnBehavior.ComputeLevel
// (Defined, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::ComputeLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ComputeLevel");

	UBioPawnBehavior_ComputeLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.AddToInitialSquad
// (Defined, Public)

void UBioPawnBehavior::AddToInitialSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AddToInitialSquad");

	UBioPawnBehavior_AddToInitialSquad_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.InitializeRunTimeOnlyTransients
// (Defined, Event, Public)

void UBioPawnBehavior::InitializeRunTimeOnlyTransients()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.InitializeRunTimeOnlyTransients");

	UBioPawnBehavior_InitializeRunTimeOnlyTransients_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.AddWeapon
// (Defined, Public)
// Parameters:
// struct FString                 sItemLabel                     (Parm, NeedCtorLink)
// unsigned char                  sophistication                 (Parm)

void UBioPawnBehavior::AddWeapon(const struct FString& sItemLabel, unsigned char sophistication)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AddWeapon");

	UBioPawnBehavior_AddWeapon_Params params;
	params.sItemLabel = sItemLabel;
	params.sophistication = sophistication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.StopParticleSystem
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem            (Parm)

void UBioPawnBehavior::StopParticleSystem(TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.StopParticleSystem");

	UBioPawnBehavior_StopParticleSystem_Params params;
	params.ePawnParticleSystem = ePawnParticleSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.StartParticleSystem
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem            (Parm)

void UBioPawnBehavior::StartParticleSystem(TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.StartParticleSystem");

	UBioPawnBehavior_StartParticleSystem_Params params;
	params.ePawnParticleSystem = ePawnParticleSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.InitializeParticleSystem
// (Defined, Event, Public, HasDefaults)
// Parameters:
// TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem            (Parm)
// class ABioPawn*                oInstigator                    (OptionalParm, Parm)

void UBioPawnBehavior::InitializeParticleSystem(TEnumAsByte<EBioPawnParticleSystem> ePawnParticleSystem, class ABioPawn* oInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.InitializeParticleSystem");

	UBioPawnBehavior_InitializeParticleSystem_Params params;
	params.ePawnParticleSystem = ePawnParticleSystem;
	params.oInstigator = oInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.BeginPlay
// (Defined, Event, Public)

void UBioPawnBehavior::BeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.BeginPlay");

	UBioPawnBehavior_BeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.ForceArmorOverride
// (Native, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioPawnBehavior::ForceArmorOverride(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ForceArmorOverride");

	UBioPawnBehavior_ForceArmorOverride_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.IsArmorOverridden
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::IsArmorOverridden()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.IsArmorOverridden");

	UBioPawnBehavior_IsArmorOverridden_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.PostBeginPlay
// (Defined, Public)

void UBioPawnBehavior::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.PostBeginPlay");

	UBioPawnBehavior_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.InitializePawnBehaviorForPlay
// (Final, Native, Private)

void UBioPawnBehavior::InitializePawnBehaviorForPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.InitializePawnBehaviorForPlay");

	UBioPawnBehavior_InitializePawnBehaviorForPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.BioRelateActors
// (Defined, Event, Public)

void UBioPawnBehavior::BioRelateActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.BioRelateActors");

	UBioPawnBehavior_BioRelateActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.SoftResetMovementAndAnimationState
// (Native, Public)

void UBioPawnBehavior::SoftResetMovementAndAnimationState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.SoftResetMovementAndAnimationState");

	UBioPawnBehavior_SoftResetMovementAndAnimationState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.HardResetActionAndAnimationState
// (Native, Public)

void UBioPawnBehavior::HardResetActionAndAnimationState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.HardResetActionAndAnimationState");

	UBioPawnBehavior_HardResetActionAndAnimationState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.ScaleSecondaryAttributes
// (Native, Public)
// Parameters:
// int                            rankedChallengeLevel           (Parm)

void UBioPawnBehavior::ScaleSecondaryAttributes(int rankedChallengeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ScaleSecondaryAttributes");

	UBioPawnBehavior_ScaleSecondaryAttributes_Params params;
	params.rankedChallengeLevel = rankedChallengeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.OnPhysicsImpulse
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 Impulse                        (Parm, OutParm)
// struct FVector                 Position                       (Parm, OutParm)
// struct FName                   BoneName                       (Parm, OutParm)
// class UMeshComponent*          oMesh                          (Parm, EditInline)
// bool                           bIsForce                       (Parm)

void UBioPawnBehavior::OnPhysicsImpulse(class UMeshComponent* oMesh, bool bIsForce, struct FVector* Impulse, struct FVector* Position, struct FName* BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnPhysicsImpulse");

	UBioPawnBehavior_OnPhysicsImpulse_Params params;
	params.oMesh = oMesh;
	params.bIsForce = bIsForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Impulse != nullptr)
		*Impulse = params.Impulse;
	if (Position != nullptr)
		*Position = params.Position;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;
}


// Function BIOC_Base.BioPawnBehavior.RanOverByVehicle
// (Native, Public)
// Parameters:
// class ABioVehicleBase*         oVehicle                       (Parm)

void UBioPawnBehavior::RanOverByVehicle(class ABioVehicleBase* oVehicle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.RanOverByVehicle");

	UBioPawnBehavior_RanOverByVehicle_Params params;
	params.oVehicle = oVehicle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.Heal
// (Native, Public)
// Parameters:
// float                          fHealthPoints                  (Parm)
// float                          fToxicDamageHealed             (OptionalParm, Parm)
// float                          fResourcesRequired             (OptionalParm, Parm)

void UBioPawnBehavior::Heal(float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.Heal");

	UBioPawnBehavior_Heal_Params params;
	params.fHealthPoints = fHealthPoints;
	params.fToxicDamageHealed = fToxicDamageHealed;
	params.fResourcesRequired = fResourcesRequired;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetPawnSurface
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnBehavior::GetPawnSurface()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetPawnSurface");

	UBioPawnBehavior_GetPawnSurface_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.ShouldGrantExperienceOnKill
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::ShouldGrantExperienceOnKill()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.ShouldGrantExperienceOnKill");

	UBioPawnBehavior_ShouldGrantExperienceOnKill_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.IsInCover
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::IsInCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.IsInCover");

	UBioPawnBehavior_IsInCover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.DoesCoverStateAllowFire
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::DoesCoverStateAllowFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.DoesCoverStateAllowFire");

	UBioPawnBehavior_DoesCoverStateAllowFire_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetSelectionObstructionSource
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioPawnBehavior::GetSelectionObstructionSource()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetSelectionObstructionSource");

	UBioPawnBehavior_GetSelectionObstructionSource_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetPlayerSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// unsigned char                  ePlayerState                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetPlayerSelectable");

	UBioPawnBehavior_GetPlayerSelectable_Params params;
	params.pPlayerController = pPlayerController;
	params.ePlayerState = ePlayerState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetPlayerSelectionRange
// (Native, Public)
// Parameters:
// class UBioPlayerSelection*     pSelection                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetPlayerSelectionRange(class UBioPlayerSelection* pSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetPlayerSelectionRange");

	UBioPawnBehavior_GetPlayerSelectionRange_Params params;
	params.pSelection = pSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetPlayerSelectionAngleAtRange
// (Native, Public)
// Parameters:
// class UBioPlayerSelection*     pSelection                     (Parm)
// float                          fRange                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPawnBehavior::GetPlayerSelectionAngleAtRange(class UBioPlayerSelection* pSelection, float fRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetPlayerSelectionAngleAtRange");

	UBioPawnBehavior_GetPlayerSelectionAngleAtRange_Params params;
	params.pSelection = pSelection;
	params.fRange = fRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.GetSelectionSourceLocation
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioPawnBehavior::GetSelectionSourceLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetSelectionSourceLocation");

	UBioPawnBehavior_GetSelectionSourceLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.OnTargetInvalidated
// (Native, Public)
// Parameters:
// class AActor*                  CurrentSelection               (Parm)

void UBioPawnBehavior::OnTargetInvalidated(class AActor* CurrentSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnTargetInvalidated");

	UBioPawnBehavior_OnTargetInvalidated_Params params;
	params.CurrentSelection = CurrentSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.OnNewPlayerPawnSelection
// (Native, Public)
// Parameters:
// class AActor*                  Selection                      (Parm)
// class UBioPlayerSelection*     pPlayerSelection               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::OnNewPlayerPawnSelection(class AActor* Selection, class UBioPlayerSelection* pPlayerSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.OnNewPlayerPawnSelection");

	UBioPawnBehavior_OnNewPlayerPawnSelection_Params params;
	params.Selection = Selection;
	params.pPlayerSelection = pPlayerSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.AttemptDynamicChallengeScale
// (Native, Public)

void UBioPawnBehavior::AttemptDynamicChallengeScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AttemptDynamicChallengeScale");

	UBioPawnBehavior_AttemptDynamicChallengeScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.TickBehavior
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UBioPawnBehavior::TickBehavior(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.TickBehavior");

	UBioPawnBehavior_TickBehavior_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.AppendPawnCapabilitiesToList
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapabilityTypes> nCapType                       (Parm)
// TArray<class UBioCapability*>  oOutCaps                       (Parm, OutParm, NeedCtorLink)

void UBioPawnBehavior::AppendPawnCapabilitiesToList(TEnumAsByte<EBioCapabilityTypes> nCapType, TArray<class UBioCapability*>* oOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AppendPawnCapabilitiesToList");

	UBioPawnBehavior_AppendPawnCapabilitiesToList_Params params;
	params.nCapType = nCapType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oOutCaps != nullptr)
		*oOutCaps = params.oOutCaps;
}


// Function BIOC_Base.BioPawnBehavior.RecomputeCapabilities
// (Native, Public)

void UBioPawnBehavior::RecomputeCapabilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.RecomputeCapabilities");

	UBioPawnBehavior_RecomputeCapabilities_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GenerateOnCastAt
// (Native, Public, HasOutParms)
// Parameters:
// class UBioActorBehavior*       oAttacker                      (Parm)
// struct FName                   nPower                         (Parm, OutParm)

void UBioPawnBehavior::GenerateOnCastAt(class UBioActorBehavior* oAttacker, struct FName* nPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GenerateOnCastAt");

	UBioPawnBehavior_GenerateOnCastAt_Params params;
	params.oAttacker = oAttacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nPower != nullptr)
		*nPower = params.nPower;
}


// Function BIOC_Base.BioPawnBehavior.GenerateOnAttacked
// (Native, Public, HasOutParms)
// Parameters:
// class UBioActorBehavior*       oAttacker                      (Parm)
// struct FName                   nWeapon                        (Parm, OutParm)

void UBioPawnBehavior::GenerateOnAttacked(class UBioActorBehavior* oAttacker, struct FName* nWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GenerateOnAttacked");

	UBioPawnBehavior_GenerateOnAttacked_Params params;
	params.oAttacker = oAttacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nWeapon != nullptr)
		*nWeapon = params.nWeapon;
}


// Function BIOC_Base.BioPawnBehavior.AdjustStability
// (Native, Public)
// Parameters:
// float                          fStability                     (Parm)

void UBioPawnBehavior::AdjustStability(float fStability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AdjustStability");

	UBioPawnBehavior_AdjustStability_Params params;
	params.fStability = fStability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.GetWeaponAttributes
// (Native, Public)
// Parameters:
// class USkeletalMeshComponent*  meshOfWeapon                   (Parm, EditInline)
// class UBioAttributesItem*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioAttributesItem* UBioPawnBehavior::GetWeaponAttributes(class USkeletalMeshComponent* meshOfWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.GetWeaponAttributes");

	UBioPawnBehavior_GetWeaponAttributes_Params params;
	params.meshOfWeapon = meshOfWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.FindFirstValidSecondaryAttribute
// (Final, Native, Private)
// Parameters:
// class UBio2DA*                 table                          (Parm)
// int                            nRankedLevel                   (Parm)
// struct FName                   ColumnName                     (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// class UBioGameProperty*        oGameProperty                  (Parm)

void UBioPawnBehavior::FindFirstValidSecondaryAttribute(class UBio2DA* table, int nRankedLevel, const struct FName& ColumnName, TEnumAsByte<EBioAttrModType> modType, class UBioGameProperty* oGameProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.FindFirstValidSecondaryAttribute");

	UBioPawnBehavior_FindFirstValidSecondaryAttribute_Params params;
	params.table = table;
	params.nRankedLevel = nRankedLevel;
	params.ColumnName = ColumnName;
	params.modType = modType;
	params.oGameProperty = oGameProperty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.FindFirstValidPrimaryAttribute
// (Final, Native, Private, HasOutParms)
// Parameters:
// class UBio2DA*                 table                          (Parm)
// int                            nRankedLevel                   (Parm)
// struct FName                   ColumnName                     (Parm)
// int                            nValue                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::FindFirstValidPrimaryAttribute(class UBio2DA* table, int nRankedLevel, const struct FName& ColumnName, int* nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.FindFirstValidPrimaryAttribute");

	UBioPawnBehavior_FindFirstValidPrimaryAttribute_Params params;
	params.table = table;
	params.nRankedLevel = nRankedLevel;
	params.ColumnName = ColumnName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nValue != nullptr)
		*nValue = params.nValue;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.CanBeMounted
// (Native, Public)
// Parameters:
// class APawn*                   oMounter                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnBehavior::CanBeMounted(class APawn* oMounter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.CanBeMounted");

	UBioPawnBehavior_CanBeMounted_Params params;
	params.oMounter = oMounter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.AcquireActive
// (Native, Public)
// Parameters:
// class UClass*                  clsActive                      (Parm)
// bool                           bAutoStartActive               (OptionalParm, Parm)
// class UBioActive*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioActive* UBioPawnBehavior::AcquireActive(class UClass* clsActive, bool bAutoStartActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.AcquireActive");

	UBioPawnBehavior_AcquireActive_Params params;
	params.clsActive = clsActive;
	params.bAutoStartActive = bAutoStartActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnBehavior.InitializeActionFramework
// (Final, Native, Private)

void UBioPawnBehavior::InitializeActionFramework()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.InitializeActionFramework");

	UBioPawnBehavior_InitializeActionFramework_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehavior.PlaySound
// (Final, Defined, Private)
// Parameters:
// TEnumAsByte<EBioPawnSound>     ePawnSound                     (Parm)
// TEnumAsByte<EBioPlaySoundMode> eMode                          (Parm)

void UBioPawnBehavior::PlaySound(TEnumAsByte<EBioPawnSound> ePawnSound, TEnumAsByte<EBioPlaySoundMode> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehavior.PlaySound");

	UBioPawnBehavior_PlaySound_Params params;
	params.ePawnSound = ePawnSound;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSquadInterface.FindSquadMemberByTag
// (Defined, Public)
// Parameters:
// struct FName                   nmTag                          (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* UBioPawnSquadInterface::FindSquadMemberByTag(const struct FName& nmTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.FindSquadMemberByTag");

	UBioPawnSquadInterface_FindSquadMemberByTag_Params params;
	params.nmTag = nmTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnSquadInterface.FindSquadIndex
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnSquadInterface::FindSquadIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.FindSquadIndex");

	UBioPawnSquadInterface_FindSquadIndex_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnSquadInterface.ChangeSquads
// (Defined, Event, Public)
// Parameters:
// class ABioBaseSquad*           NewSquad                       (Parm)

void UBioPawnSquadInterface::ChangeSquads(class ABioBaseSquad* NewSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.ChangeSquads");

	UBioPawnSquadInterface_ChangeSquads_Params params;
	params.NewSquad = NewSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSquadInterface.ChangeToPlayerSquad
// (Native, Public)
// Parameters:
// struct FString                 sClass                         (Parm, NeedCtorLink)
// struct FName                   SquadName                      (Parm)

void UBioPawnSquadInterface::ChangeToPlayerSquad(const struct FString& sClass, const struct FName& SquadName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.ChangeToPlayerSquad");

	UBioPawnSquadInterface_ChangeToPlayerSquad_Params params;
	params.sClass = sClass;
	params.SquadName = SquadName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSquadInterface.ChangeToDefaultSquad
// (Native, Public)

void UBioPawnSquadInterface::ChangeToDefaultSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.ChangeToDefaultSquad");

	UBioPawnSquadInterface_ChangeToDefaultSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSquadInterface.PawnDestroyed
// (Defined, Public)

void UBioPawnSquadInterface::PawnDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.PawnDestroyed");

	UBioPawnSquadInterface_PawnDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSquadInterface.LeaveSquad
// (Native, Public)

void UBioPawnSquadInterface::LeaveSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.LeaveSquad");

	UBioPawnSquadInterface_LeaveSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSquadInterface.JoinSquad
// (Final, Defined, Event, Private)
// Parameters:
// class ABioBaseSquad*           NewSquad                       (Parm)

void UBioPawnSquadInterface::JoinSquad(class ABioBaseSquad* NewSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSquadInterface.JoinSquad");

	UBioPawnSquadInterface_JoinSquad_Params params;
	params.NewSquad = NewSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioVehicleBehaviorBase::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetSaveObjectClass");

	UBioVehicleBehaviorBase_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.ReactToDeath
// (Defined, Public)
// Parameters:
// float                          fDamage                        (Parm)
// float                          fDeathDamage                   (Parm)
// class AController*             pInstigatedBy                  (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vMomentum                      (Parm)
// class UClass*                  clsDamageType                  (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioVehicleBehaviorBase::ReactToDeath(float fDamage, float fDeathDamage, class AController* pInstigatedBy, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UClass* clsDamageType, const struct FTraceHitInfo& HitInfo, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.ReactToDeath");

	UBioVehicleBehaviorBase_ReactToDeath_Params params;
	params.fDamage = fDamage;
	params.fDeathDamage = fDeathDamage;
	params.pInstigatedBy = pInstigatedBy;
	params.vHitLocation = vHitLocation;
	params.vMomentum = vMomentum;
	params.clsDamageType = clsDamageType;
	params.HitInfo = HitInfo;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.StartUprighting
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::StartUprighting()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.StartUprighting");

	UBioVehicleBehaviorBase_StartUprighting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.OnShieldsDown
// (Defined, Event, Public)

void UBioVehicleBehaviorBase::OnShieldsDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.OnShieldsDown");

	UBioVehicleBehaviorBase_OnShieldsDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.PlayDamageSound
// (Defined, Public)
// Parameters:
// float                          fDamage                        (Parm)

void UBioVehicleBehaviorBase::PlayDamageSound(float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.PlayDamageSound");

	UBioVehicleBehaviorBase_PlayDamageSound_Params params;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.ProxyTakeDamage
// (Defined, Public, HasOutParms)
// Parameters:
// float                          OriginalDamage                 (Parm)
// float                          CurrentDamage                  (Parm, OutParm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// struct FBioDamageReporter      tDamageReporter                (Parm, OutParm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  pDamageCausingActor            (OptionalParm, Parm)
// class UBioDamageType*          pDamage                        (OptionalParm, Parm)

void UBioVehicleBehaviorBase::ProxyTakeDamage(float OriginalDamage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum, struct FBioDamageReporter* tDamageReporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.ProxyTakeDamage");

	UBioVehicleBehaviorBase_ProxyTakeDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.pDamageCausingActor = pDamageCausingActor;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentDamage != nullptr)
		*CurrentDamage = params.CurrentDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
	if (tDamageReporter != nullptr)
		*tDamageReporter = params.tDamageReporter;
}


// Function BIOC_Base.BioVehicleBehaviorBase.BeginPlay
// (Defined, Event, Public)

void UBioVehicleBehaviorBase::BeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.BeginPlay");

	UBioVehicleBehaviorBase_BeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializeRunTimeOnlyTransients
// (Defined, Event, Public)

void UBioVehicleBehaviorBase::InitializeRunTimeOnlyTransients()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializeRunTimeOnlyTransients");

	UBioVehicleBehaviorBase_InitializeRunTimeOnlyTransients_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.StopLowShieldAlert
// (Native, Public)

void UBioVehicleBehaviorBase::StopLowShieldAlert()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.StopLowShieldAlert");

	UBioVehicleBehaviorBase_StopLowShieldAlert_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SetMaterialParameterState
// (Native, Public)
// Parameters:
// bool                           bState                         (Parm)

void UBioVehicleBehaviorBase::SetMaterialParameterState(bool bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SetMaterialParameterState");

	UBioVehicleBehaviorBase_SetMaterialParameterState_Params params;
	params.bState = bState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.OnVehiclePause
// (Native, Public)
// Parameters:
// bool                           bPaused                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::OnVehiclePause(bool bPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.OnVehiclePause");

	UBioVehicleBehaviorBase_OnVehiclePause_Params params;
	params.bPaused = bPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.UnEquipShields
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::UnEquipShields()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.UnEquipShields");

	UBioVehicleBehaviorBase_UnEquipShields_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.EquipShields
// (Native, Public)
// Parameters:
// class UBioItem*                oNewItem                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::EquipShields(class UBioItem* oNewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.EquipShields");

	UBioVehicleBehaviorBase_EquipShields_Params params;
	params.oNewItem = oNewItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.ScaleVehicleEquipment
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::ScaleVehicleEquipment()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.ScaleVehicleEquipment");

	UBioVehicleBehaviorBase_ScaleVehicleEquipment_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetRequiredEquipmentSophisticationLevel
// (Native, Public)
// Parameters:
// int                            nCurrentPlayerLevel            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioVehicleBehaviorBase::GetRequiredEquipmentSophisticationLevel(int nCurrentPlayerLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetRequiredEquipmentSophisticationLevel");

	UBioVehicleBehaviorBase_GetRequiredEquipmentSophisticationLevel_Params params;
	params.nCurrentPlayerLevel = nCurrentPlayerLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.EquipDefaults
// (Native, Public)
// Parameters:
// class UBioEquipmentVehicle*    oEquipment                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::EquipDefaults(class UBioEquipmentVehicle* oEquipment)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.EquipDefaults");

	UBioVehicleBehaviorBase_EquipDefaults_Params params;
	params.oEquipment = oEquipment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetCameraHookName
// (Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioVehicleBehaviorBase::GetCameraHookName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetCameraHookName");

	UBioVehicleBehaviorBase_GetCameraHookName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetCameraFollowDistance
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioVehicleBehaviorBase::GetCameraFollowDistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetCameraFollowDistance");

	UBioVehicleBehaviorBase_GetCameraFollowDistance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetCameraFollowHeight
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioVehicleBehaviorBase::GetCameraFollowHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetCameraFollowHeight");

	UBioVehicleBehaviorBase_GetCameraFollowHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.Heal
// (Native, Public)
// Parameters:
// float                          fHealthPoints                  (Parm)
// float                          fToxicDamageHealed             (OptionalParm, Parm)
// float                          fResourcesRequired             (OptionalParm, Parm)

void UBioVehicleBehaviorBase::Heal(float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.Heal");

	UBioVehicleBehaviorBase_Heal_Params params;
	params.fHealthPoints = fHealthPoints;
	params.fToxicDamageHealed = fToxicDamageHealed;
	params.fResourcesRequired = fResourcesRequired;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.UpdateDamageModel
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::UpdateDamageModel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.UpdateDamageModel");

	UBioVehicleBehaviorBase_UpdateDamageModel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetPlayerSelectable
// (Native, Public)
// Parameters:
// class ABioPlayerController*    pPlayerController              (Parm)
// unsigned char                  ePlayerState                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::GetPlayerSelectable(class ABioPlayerController* pPlayerController, unsigned char ePlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetPlayerSelectable");

	UBioVehicleBehaviorBase_GetPlayerSelectable_Params params;
	params.pPlayerController = pPlayerController;
	params.ePlayerState = ePlayerState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetSelectionSourceLocation
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioVehicleBehaviorBase::GetSelectionSourceLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetSelectionSourceLocation");

	UBioVehicleBehaviorBase_GetSelectionSourceLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.OnTargetInvalidated
// (Native, Public)
// Parameters:
// class AActor*                  CurrentSelection               (Parm)

void UBioVehicleBehaviorBase::OnTargetInvalidated(class AActor* CurrentSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.OnTargetInvalidated");

	UBioVehicleBehaviorBase_OnTargetInvalidated_Params params;
	params.CurrentSelection = CurrentSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.OnNewPlayerPawnSelection
// (Native, Public)
// Parameters:
// class AActor*                  Selection                      (Parm)
// class UBioPlayerSelection*     pPlayerSelection               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::OnNewPlayerPawnSelection(class AActor* Selection, class UBioPlayerSelection* pPlayerSelection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.OnNewPlayerPawnSelection");

	UBioVehicleBehaviorBase_OnNewPlayerPawnSelection_Params params;
	params.Selection = Selection;
	params.pPlayerSelection = pPlayerSelection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializeSounds
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::InitializeSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializeSounds");

	UBioVehicleBehaviorBase_InitializeSounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.UpdateThrusterScalars
// (Native, Public)
// Parameters:
// float                          fXaxis                         (Parm)
// float                          fYaxis                         (Parm)

void UBioVehicleBehaviorBase::UpdateThrusterScalars(float fXaxis, float fYaxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.UpdateThrusterScalars");

	UBioVehicleBehaviorBase_UpdateThrusterScalars_Params params;
	params.fXaxis = fXaxis;
	params.fYaxis = fYaxis;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.DeactivateThruster
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)

void UBioVehicleBehaviorBase::DeactivateThruster(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.DeactivateThruster");

	UBioVehicleBehaviorBase_DeactivateThruster_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.ActivateThruster
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 vMaxForce                      (Parm)
// float                          fScale                         (Parm)

void UBioVehicleBehaviorBase::ActivateThruster(int nIndex, const struct FVector& vMaxForce, float fScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.ActivateThruster");

	UBioVehicleBehaviorBase_ActivateThruster_Params params;
	params.nIndex = nIndex;
	params.vMaxForce = vMaxForce;
	params.fScale = fScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.UpdateThrusters
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioVehicleBehaviorBase::UpdateThrusters(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.UpdateThrusters");

	UBioVehicleBehaviorBase_UpdateThrusters_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializeThrusters
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::InitializeThrusters()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializeThrusters");

	UBioVehicleBehaviorBase_InitializeThrusters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializeVehicleSquad
// (Native, Public)

void UBioVehicleBehaviorBase::InitializeVehicleSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializeVehicleSquad");

	UBioVehicleBehaviorBase_InitializeVehicleSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SquadExit
// (Native, Public)

void UBioVehicleBehaviorBase::SquadExit()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SquadExit");

	UBioVehicleBehaviorBase_SquadExit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SquadEnter
// (Native, Public)
// Parameters:
// class ABioBaseSquad*           oEnterSquad                    (Parm)

void UBioVehicleBehaviorBase::SquadEnter(class ABioBaseSquad* oEnterSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SquadEnter");

	UBioVehicleBehaviorBase_SquadEnter_Params params;
	params.oEnterSquad = oEnterSquad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.OnDriverPartyDeath
// (Native, Public)

void UBioVehicleBehaviorBase::OnDriverPartyDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.OnDriverPartyDeath");

	UBioVehicleBehaviorBase_OnDriverPartyDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.UpdateCurrentZoomTurret
// (Native, Public)
// Parameters:
// float                          fDeltaYaw                      (Parm)
// float                          fDeltaPitch                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::UpdateCurrentZoomTurret(float fDeltaYaw, float fDeltaPitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.UpdateCurrentZoomTurret");

	UBioVehicleBehaviorBase_UpdateCurrentZoomTurret_Params params;
	params.fDeltaYaw = fDeltaYaw;
	params.fDeltaPitch = fDeltaPitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.ExitZoomMode
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::ExitZoomMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.ExitZoomMode");

	UBioVehicleBehaviorBase_ExitZoomMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.EnterZoomMode
// (Native, Public)
// Parameters:
// int                            nZoomTurretIndex               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::EnterZoomMode(int nZoomTurretIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.EnterZoomMode");

	UBioVehicleBehaviorBase_EnterZoomMode_Params params;
	params.nZoomTurretIndex = nZoomTurretIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.IsWorldLocationWithinTurretCone
// (Native, Public)
// Parameters:
// int                            nTurretIndex                   (Parm)
// struct FVector                 vLocation                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::IsWorldLocationWithinTurretCone(int nTurretIndex, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.IsWorldLocationWithinTurretCone");

	UBioVehicleBehaviorBase_IsWorldLocationWithinTurretCone_Params params;
	params.nTurretIndex = nTurretIndex;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.IsWeaponAimWithinTurretCone
// (Native, Public)
// Parameters:
// class ABioWeaponRanged*        oWeapon                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::IsWeaponAimWithinTurretCone(class ABioWeaponRanged* oWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.IsWeaponAimWithinTurretCone");

	UBioVehicleBehaviorBase_IsWeaponAimWithinTurretCone_Params params;
	params.oWeapon = oWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SetDesiredTurretAimPoint
// (Native, Public)
// Parameters:
// int                            nTurretIndex                   (Parm)
// struct FVector                 vTargetLocation                (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UBioVehicleBehaviorBase::SetDesiredTurretAimPoint(int nTurretIndex, const struct FVector& vTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SetDesiredTurretAimPoint");

	UBioVehicleBehaviorBase_SetDesiredTurretAimPoint_Params params;
	params.nTurretIndex = nTurretIndex;
	params.vTargetLocation = vTargetLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetWeaponIndex
// (Native, Public)
// Parameters:
// class ABioWeapon*              oWeapon                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioVehicleBehaviorBase::GetWeaponIndex(class ABioWeapon* oWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetWeaponIndex");

	UBioVehicleBehaviorBase_GetWeaponIndex_Params params;
	params.oWeapon = oWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.GetWeaponAtIndex
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class ABioWeapon*              ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioWeapon* UBioVehicleBehaviorBase::GetWeaponAtIndex(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.GetWeaponAtIndex");

	UBioVehicleBehaviorBase_GetWeaponAtIndex_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.DetachAndDestroyWeapon
// (Native, Public)
// Parameters:
// class ABioWeapon*              oWeapon                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::DetachAndDestroyWeapon(class ABioWeapon* oWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.DetachAndDestroyWeapon");

	UBioVehicleBehaviorBase_DetachAndDestroyWeapon_Params params;
	params.oWeapon = oWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.CreateAndAttachWeapon
// (Native, Public, HasOutParms)
// Parameters:
// class UClass*                  oWeaponClass                   (Parm)
// class UBioItemWeapon*          oWeaponItem                    (Parm)
// int                            nTurretIndex                   (Parm)
// struct FBioVehicleWeaponInfo   oWeaponInfo                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::CreateAndAttachWeapon(class UClass* oWeaponClass, class UBioItemWeapon* oWeaponItem, int nTurretIndex, struct FBioVehicleWeaponInfo* oWeaponInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.CreateAndAttachWeapon");

	UBioVehicleBehaviorBase_CreateAndAttachWeapon_Params params;
	params.oWeaponClass = oWeaponClass;
	params.oWeaponItem = oWeaponItem;
	params.nTurretIndex = nTurretIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oWeaponInfo != nullptr)
		*oWeaponInfo = params.oWeaponInfo;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializeVehicleWeapons
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::InitializeVehicleWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializeVehicleWeapons");

	UBioVehicleBehaviorBase_InitializeVehicleWeapons_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializeVehicle
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::InitializeVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializeVehicle");

	UBioVehicleBehaviorBase_InitializeVehicle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.OnVehicleExit
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::OnVehicleExit()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.OnVehicleExit");

	UBioVehicleBehaviorBase_OnVehicleExit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.OnVehicleEnter
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::OnVehicleEnter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.OnVehicleEnter");

	UBioVehicleBehaviorBase_OnVehicleEnter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SetBrakeState
// (Native, Public)
// Parameters:
// bool                           bStatus                        (Parm)

void UBioVehicleBehaviorBase::SetBrakeState(bool bStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SetBrakeState");

	UBioVehicleBehaviorBase_SetBrakeState_Params params;
	params.bStatus = bStatus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SetVehicleFunctionState
// (Native, Public)
// Parameters:
// bool                           bStatus                        (Parm)

void UBioVehicleBehaviorBase::SetVehicleFunctionState(bool bStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SetVehicleFunctionState");

	UBioVehicleBehaviorBase_SetVehicleFunctionState_Params params;
	params.bStatus = bStatus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SetPowertrainState
// (Native, Public)
// Parameters:
// bool                           bStatus                        (Parm)

void UBioVehicleBehaviorBase::SetPowertrainState(bool bStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SetPowertrainState");

	UBioVehicleBehaviorBase_SetPowertrainState_Params params;
	params.bStatus = bStatus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.CanBeShot
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       pOther                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::CanBeShot(class UBioActorBehavior* pOther)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.CanBeShot");

	UBioVehicleBehaviorBase_CanBeShot_Params params;
	params.pOther = pOther;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.SetSuperMode
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    nSuperMode                     (Parm)
// bool                           bActivate                      (Parm)
// bool                           bReturnToSuperMode             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::SetSuperMode(TEnumAsByte<EBioSuperModes> nSuperMode, bool bActivate, bool bReturnToSuperMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.SetSuperMode");

	UBioVehicleBehaviorBase_SetSuperMode_Params params;
	params.nSuperMode = nSuperMode;
	params.bActivate = bActivate;
	params.bReturnToSuperMode = bReturnToSuperMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.ReleaseActive
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorBase::ReleaseActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.ReleaseActive");

	UBioVehicleBehaviorBase_ReleaseActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializePawnBehaviorForPlay
// (Final, Native, Private)

void UBioVehicleBehaviorBase::InitializePawnBehaviorForPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializePawnBehaviorForPlay");

	UBioVehicleBehaviorBase_InitializePawnBehaviorForPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorBase.InitializeActionFramework
// (Final, Native, Private)

void UBioVehicleBehaviorBase::InitializeActionFramework()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorBase.InitializeActionFramework");

	UBioVehicleBehaviorBase_InitializeActionFramework_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.InitializeRunTimeOnlyTransients
// (Defined, Event, Public)

void UBioVehicleBehaviorWheeled::InitializeRunTimeOnlyTransients()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.InitializeRunTimeOnlyTransients");

	UBioVehicleBehaviorWheeled_InitializeRunTimeOnlyTransients_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.OnWeaponInstantFire
// (Native, Public)
// Parameters:
// class ABioWeaponRanged*        oFiredWeapon                   (OptionalParm, Parm)

void UBioVehicleBehaviorWheeled::OnWeaponInstantFire(class ABioWeaponRanged* oFiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.OnWeaponInstantFire");

	UBioVehicleBehaviorWheeled_OnWeaponInstantFire_Params params;
	params.oFiredWeapon = oFiredWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.InitializeActionFramework
// (Final, Native, Private)

void UBioVehicleBehaviorWheeled::InitializeActionFramework()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.InitializeActionFramework");

	UBioVehicleBehaviorWheeled_InitializeActionFramework_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.UnEquipMachineGun
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorWheeled::UnEquipMachineGun()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.UnEquipMachineGun");

	UBioVehicleBehaviorWheeled_UnEquipMachineGun_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.UnEquipCannon
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorWheeled::UnEquipCannon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.UnEquipCannon");

	UBioVehicleBehaviorWheeled_UnEquipCannon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.EquipMachineGun
// (Native, Public)
// Parameters:
// class UBioItem*                oNewItem                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorWheeled::EquipMachineGun(class UBioItem* oNewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.EquipMachineGun");

	UBioVehicleBehaviorWheeled_EquipMachineGun_Params params;
	params.oNewItem = oNewItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.EquipCannon
// (Native, Public)
// Parameters:
// class UBioItem*                oNewItem                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorWheeled::EquipCannon(class UBioItem* oNewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.EquipCannon");

	UBioVehicleBehaviorWheeled_EquipCannon_Params params;
	params.oNewItem = oNewItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.EquipDefaults
// (Native, Public)
// Parameters:
// class UBioEquipmentVehicle*    oEquipment                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorWheeled::EquipDefaults(class UBioEquipmentVehicle* oEquipment)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.EquipDefaults");

	UBioVehicleBehaviorWheeled_EquipDefaults_Params params;
	params.oEquipment = oEquipment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorWheeled.InitializeVehicle
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleBehaviorWheeled::InitializeVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorWheeled.InitializeVehicle");

	UBioVehicleBehaviorWheeled_InitializeVehicle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCamera.UpdateViewTarget
// (Defined, Public, HasOutParms)
// Parameters:
// struct FTViewTarget            OutVT                          (Parm, OutParm)
// float                          DeltaTime                      (Parm)

void ABioCamera::UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCamera.UpdateViewTarget");

	ABioCamera_UpdateViewTarget_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVT != nullptr)
		*OutVT = params.OutVT;
}


// Function BIOC_Base.BioCamera.SetDesiredColorScale
// (Simulated, Public)
// Parameters:
// struct FVector                 NewColorScale                  (Parm)
// float                          InterpTime                     (Parm)

void ABioCamera::SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCamera.SetDesiredColorScale");

	ABioCamera_SetDesiredColorScale_Params params;
	params.NewColorScale = NewColorScale;
	params.InterpTime = InterpTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraUtility.IsCollisionEnabled
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCameraUtility::IsCollisionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraUtility.IsCollisionEnabled");

	UBioCameraUtility_IsCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraUtility.GetDebugger
// (Final, Native, Static, Public)
// Parameters:
// class UBioCameraDebugger*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCameraDebugger* UBioCameraUtility::STATIC_GetDebugger()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraUtility.GetDebugger");

	UBioCameraUtility_GetDebugger_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraUtility.SetCameraCollisionTestPointRange
// (Final, Native, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCameraUtility::SetCameraCollisionTestPointRange(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraUtility.SetCameraCollisionTestPointRange");

	UBioCameraUtility_SetCameraCollisionTestPointRange_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehavior.DrawHUD
// (Defined, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UBioCameraBehavior::DrawHUD(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.DrawHUD");

	UBioCameraBehavior_DrawHUD_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehavior.UseExplorationSensitivity
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioCameraBehavior::UseExplorationSensitivity(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.UseExplorationSensitivity");

	UBioCameraBehavior_UseExplorationSensitivity_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehavior.ResetInput
// (Final, Native, Public)

void UBioCameraBehavior::ResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.ResetInput");

	UBioCameraBehavior_ResetInput_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehavior.Reset
// (Native, Public)

void UBioCameraBehavior::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.Reset");

	UBioCameraBehavior_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehavior.GetCameraTarget
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioCameraBehavior::GetCameraTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.GetCameraTarget");

	UBioCameraBehavior_GetCameraTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraBehavior.GetCameraSource
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioCameraBehavior::GetCameraSource()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.GetCameraSource");

	UBioCameraBehavior_GetCameraSource_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraBehavior.SetCameraTarget
// (Native, Public)
// Parameters:
// class AActor*                  Target                         (Parm)

void UBioCameraBehavior::SetCameraTarget(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.SetCameraTarget");

	UBioCameraBehavior_SetCameraTarget_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehavior.SetCameraSource
// (Native, Public)
// Parameters:
// class AActor*                  Source                         (Parm)

void UBioCameraBehavior::SetCameraSource(class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehavior.SetCameraSource");

	UBioCameraBehavior_SetCameraSource_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorConversation.GetProceduralCam
// (Defined, Event, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 vCamLocation                   (Parm, OutParm)
// struct FRotator                rCamRotation                   (Parm, OutParm)
// bool                           bInvert                        (Parm)

void UBioCameraBehaviorConversation::GetProceduralCam(bool bInvert, struct FVector* vCamLocation, struct FRotator* rCamRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorConversation.GetProceduralCam");

	UBioCameraBehaviorConversation_GetProceduralCam_Params params;
	params.bInvert = bInvert;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vCamLocation != nullptr)
		*vCamLocation = params.vCamLocation;
	if (rCamRotation != nullptr)
		*rCamRotation = params.rCamRotation;
}


// Function BIOC_Base.BioCameraBehaviorConversation.BlendIdleCameraAnimation
// (Native, Public)

void UBioCameraBehaviorConversation::BlendIdleCameraAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorConversation.BlendIdleCameraAnimation");

	UBioCameraBehaviorConversation_BlendIdleCameraAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorConversation.InitProceduralCameraClass
// (Native, Public)

void UBioCameraBehaviorConversation::InitProceduralCameraClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorConversation.InitProceduralCameraClass");

	UBioCameraBehaviorConversation_InitProceduralCameraClass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollow.SetCameraTarget
// (Native, Public)
// Parameters:
// class AActor*                  Target                         (Parm)

void UBioCameraBehaviorFollow::SetCameraTarget(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollow.SetCameraTarget");

	UBioCameraBehaviorFollow_SetCameraTarget_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollow.SetCameraOffsetRL
// (Final, Native, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCameraBehaviorFollow::SetCameraOffsetRL(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollow.SetCameraOffsetRL");

	UBioCameraBehaviorFollow_SetCameraOffsetRL_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollow.SetCameraOffsetHeight
// (Final, Native, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCameraBehaviorFollow::SetCameraOffsetHeight(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollow.SetCameraOffsetHeight");

	UBioCameraBehaviorFollow_SetCameraOffsetHeight_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollow.SetCameraOffsetRange
// (Final, Native, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCameraBehaviorFollow::SetCameraOffsetRange(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollow.SetCameraOffsetRange");

	UBioCameraBehaviorFollow_SetCameraOffsetRange_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollowSniper.GetCurrentMagnificationLevel
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioCameraBehaviorFollowSniper::GetCurrentMagnificationLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollowSniper.GetCurrentMagnificationLevel");

	UBioCameraBehaviorFollowSniper_GetCurrentMagnificationLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraBehaviorFollowSniper.Focus
// (Final, Native, Public)
// Parameters:
// float                          fDistance                      (Parm)
// class ABioWorldInfo*           pWorldInfo                     (Parm)
// class UDOFEffect*              pDOFEffect                     (Parm)

void UBioCameraBehaviorFollowSniper::Focus(float fDistance, class ABioWorldInfo* pWorldInfo, class UDOFEffect* pDOFEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollowSniper.Focus");

	UBioCameraBehaviorFollowSniper_Focus_Params params;
	params.fDistance = fDistance;
	params.pWorldInfo = pWorldInfo;
	params.pDOFEffect = pDOFEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollowSniper.SetNoiseScaleTarget
// (Final, Native, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCameraBehaviorFollowSniper::SetNoiseScaleTarget(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollowSniper.SetNoiseScaleTarget");

	UBioCameraBehaviorFollowSniper_SetNoiseScaleTarget_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollowVehicleRigidCam.SetCloseUpMode
// (Native, Public)
// Parameters:
// bool                           bState                         (Parm)
// bool                           bDoInterp                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCameraBehaviorFollowVehicleRigidCam::SetCloseUpMode(bool bState, bool bDoInterp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollowVehicleRigidCam.SetCloseUpMode");

	UBioCameraBehaviorFollowVehicleRigidCam_SetCloseUpMode_Params params;
	params.bState = bState;
	params.bDoInterp = bDoInterp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraBehaviorFollowVehicleRigidCam.SetCameraSource
// (Native, Public)
// Parameters:
// class AActor*                  Source                         (Parm)

void UBioCameraBehaviorFollowVehicleRigidCam::SetCameraSource(class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollowVehicleRigidCam.SetCameraSource");

	UBioCameraBehaviorFollowVehicleRigidCam_SetCameraSource_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFollowVehicleZoom.GetCurrentMagnificationLevel
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioCameraBehaviorFollowVehicleZoom::GetCurrentMagnificationLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollowVehicleZoom.GetCurrentMagnificationLevel");

	UBioCameraBehaviorFollowVehicleZoom_GetCurrentMagnificationLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraBehaviorFollowVehicleZoom.Focus
// (Final, Native, Public)
// Parameters:
// float                          fDistance                      (Parm)
// class ABioWorldInfo*           pWorldInfo                     (Parm)
// class UDOFEffect*              pDOFEffect                     (Parm)

void UBioCameraBehaviorFollowVehicleZoom::Focus(float fDistance, class ABioWorldInfo* pWorldInfo, class UDOFEffect* pDOFEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFollowVehicleZoom.Focus");

	UBioCameraBehaviorFollowVehicleZoom_Focus_Params params;
	params.fDistance = fDistance;
	params.pWorldInfo = pWorldInfo;
	params.pDOFEffect = pDOFEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFree.DrawHUD
// (Defined, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UBioCameraBehaviorFree::DrawHUD(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFree.DrawHUD");

	UBioCameraBehaviorFree_DrawHUD_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorFree.IsCollisionEnabled
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCameraBehaviorFree::IsCollisionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorFree.IsCollisionEnabled");

	UBioCameraBehaviorFree_IsCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraBehaviorGalaxy.RevertToCachedAutoSaveSetting
// (Final, Native, Public)

void UBioCameraBehaviorGalaxy::RevertToCachedAutoSaveSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorGalaxy.RevertToCachedAutoSaveSetting");

	UBioCameraBehaviorGalaxy_RevertToCachedAutoSaveSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorSpectator.DrawHUD
// (Defined, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UBioCameraBehaviorSpectator::DrawHUD(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorSpectator.DrawHUD");

	UBioCameraBehaviorSpectator_DrawHUD_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorSpectator.SetCameraTarget
// (Native, Public)
// Parameters:
// class AActor*                  Target                         (Parm)

void UBioCameraBehaviorSpectator::SetCameraTarget(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorSpectator.SetCameraTarget");

	UBioCameraBehaviorSpectator_SetCameraTarget_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorSpectator.SetTargetLocalizedCameraParams
// (Native, Public)
// Parameters:
// struct FVector                 vPosition                      (Parm)
// struct FRotator                rRotation                      (Parm)
// struct FRotator                rLockRotation                  (Parm)

void UBioCameraBehaviorSpectator::SetTargetLocalizedCameraParams(const struct FVector& vPosition, const struct FRotator& rRotation, const struct FRotator& rLockRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorSpectator.SetTargetLocalizedCameraParams");

	UBioCameraBehaviorSpectator_SetTargetLocalizedCameraParams_Params params;
	params.vPosition = vPosition;
	params.rRotation = rRotation;
	params.rLockRotation = rLockRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraBehaviorSpectator.GetTargetLocalizedCameraParams
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vPosition                      (Parm, OutParm)
// struct FRotator                rRotation                      (Parm, OutParm)
// struct FRotator                rLockRotation                  (Parm, OutParm)

void UBioCameraBehaviorSpectator::GetTargetLocalizedCameraParams(struct FVector* vPosition, struct FRotator* rRotation, struct FRotator* rLockRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraBehaviorSpectator.GetTargetLocalizedCameraParams");

	UBioCameraBehaviorSpectator_GetTargetLocalizedCameraParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vPosition != nullptr)
		*vPosition = params.vPosition;
	if (rRotation != nullptr)
		*rRotation = params.rRotation;
	if (rLockRotation != nullptr)
		*rLockRotation = params.rLockRotation;
}


// Function BIOC_Base.BioCameraDebugger.GetFlag
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioCameraDebuggerFlag> eFlag                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCameraDebugger::GetFlag(TEnumAsByte<EBioCameraDebuggerFlag> eFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraDebugger.GetFlag");

	UBioCameraDebugger_GetFlag_Params params;
	params.eFlag = eFlag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraDebugger.SetFlag
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioCameraDebuggerFlag> eFlag                          (Parm)
// bool                           B                              (Parm)

void UBioCameraDebugger::SetFlag(TEnumAsByte<EBioCameraDebuggerFlag> eFlag, bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraDebugger.SetFlag");

	UBioCameraDebugger_SetFlag_Params params;
	params.eFlag = eFlag;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.DrawHUD
// (Defined, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void ABioCameraManager::DrawHUD(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.DrawHUD");

	ABioCameraManager_DrawHUD_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.ComputeCameraLinePoint
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vPoint                         (Parm, OutParm)
// struct FVector                 vBeside                        (Const, Parm, OutParm)

void ABioCameraManager::ComputeCameraLinePoint(struct FVector* vPoint, struct FVector* vBeside)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.ComputeCameraLinePoint");

	ABioCameraManager_ComputeCameraLinePoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vPoint != nullptr)
		*vPoint = params.vPoint;
	if (vBeside != nullptr)
		*vBeside = params.vBeside;
}


// Function BIOC_Base.BioCameraManager.GetTransition
// (Final, Native, Public)
// Parameters:
// int                            nFromHandle                    (Parm)
// int                            nToHandle                      (Parm)
// class UBioCameraTransition*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCameraTransition* ABioCameraManager::GetTransition(int nFromHandle, int nToHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetTransition");

	ABioCameraManager_GetTransition_Params params;
	params.nFromHandle = nFromHandle;
	params.nToHandle = nToHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.SetTransition
// (Final, Native, Public)
// Parameters:
// int                            nFromHandle                    (Parm)
// int                            nToHandle                      (Parm)
// class UBioCameraTransition*    pTransition                    (Parm)
// bool                           bMirror                        (Parm)

void ABioCameraManager::SetTransition(int nFromHandle, int nToHandle, class UBioCameraTransition* pTransition, bool bMirror)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.SetTransition");

	ABioCameraManager_SetTransition_Params params;
	params.nFromHandle = nFromHandle;
	params.nToHandle = nToHandle;
	params.pTransition = pTransition;
	params.bMirror = bMirror;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.OnUnPossess
// (Final, Native, Public)

void ABioCameraManager::OnUnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.OnUnPossess");

	ABioCameraManager_OnUnPossess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.OnPossess
// (Final, Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)

void ABioCameraManager::OnPossess(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.OnPossess");

	ABioCameraManager_OnPossess_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.SetPreserveTargetPoint
// (Native, Public)
// Parameters:
// int                            nFromBehavior                  (Parm)
// int                            nToBehavior                    (Parm)
// bool                           bPreserveTargetPoint           (Parm)

void ABioCameraManager::SetPreserveTargetPoint(int nFromBehavior, int nToBehavior, bool bPreserveTargetPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.SetPreserveTargetPoint");

	ABioCameraManager_SetPreserveTargetPoint_Params params;
	params.nFromBehavior = nFromBehavior;
	params.nToBehavior = nToBehavior;
	params.bPreserveTargetPoint = bPreserveTargetPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.ShouldPreserveTargetPoint
// (Native, Public)
// Parameters:
// int                            nFromBehavior                  (Parm)
// int                            nToBehavior                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioCameraManager::ShouldPreserveTargetPoint(int nFromBehavior, int nToBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.ShouldPreserveTargetPoint");

	ABioCameraManager_ShouldPreserveTargetPoint_Params params;
	params.nFromBehavior = nFromBehavior;
	params.nToBehavior = nToBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetCameraStickScalar
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioCameraManager::GetCameraStickScalar()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetCameraStickScalar");

	ABioCameraManager_GetCameraStickScalar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.ToggleDebugCamera
// (Final, Native, Public)

void ABioCameraManager::ToggleDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.ToggleDebugCamera");

	ABioCameraManager_ToggleDebugCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.ToggleCollisionCameraLock
// (Final, Native, Public)

void ABioCameraManager::ToggleCollisionCameraLock()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.ToggleCollisionCameraLock");

	ABioCameraManager_ToggleCollisionCameraLock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.GetRange
// (Final, Native, Public)
// Parameters:
// unsigned char                  nInputMode                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioCameraManager::GetRange(unsigned char nInputMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetRange");

	ABioCameraManager_GetRange_Params params;
	params.nInputMode = nInputMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetTraceRange
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioCameraManagerTrace> eTrace                         (Parm)
// float                          fRange                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioCameraManager::GetTraceRange(TEnumAsByte<EBioCameraManagerTrace> eTrace, float fRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetTraceRange");

	ABioCameraManager_GetTraceRange_Params params;
	params.eTrace = eTrace;
	params.fRange = fRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetTrace
// (Final, Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCameraManagerTrace> eTrace                         (Parm)
// class AActor*                  oHit                           (Parm, OutParm)
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vNormal                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioCameraManager::GetTrace(TEnumAsByte<EBioCameraManagerTrace> eTrace, class AActor** oHit, struct FVector* vLocation, struct FVector* vNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetTrace");

	ABioCameraManager_GetTrace_Params params;
	params.eTrace = eTrace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oHit != nullptr)
		*oHit = params.oHit;
	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vNormal != nullptr)
		*vNormal = params.vNormal;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.SetPlayerInterface
// (Final, Native, Public)
// Parameters:
// class ABioPlayerController*    Interface                      (Parm)

void ABioCameraManager::SetPlayerInterface(class ABioPlayerController* Interface)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.SetPlayerInterface");

	ABioCameraManager_SetPlayerInterface_Params params;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.GetCameraFOV
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioCameraManager::GetCameraFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetCameraFOV");

	ABioCameraManager_GetCameraFOV_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.SetCameraRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                rRotation                      (Parm)

void ABioCameraManager::SetCameraRotation(const struct FRotator& rRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.SetCameraRotation");

	ABioCameraManager_SetCameraRotation_Params params;
	params.rRotation = rRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.GetCameraRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ABioCameraManager::GetCameraRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetCameraRotation");

	ABioCameraManager_GetCameraRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetCameraLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioCameraManager::GetCameraLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetCameraLocation");

	ABioCameraManager_GetCameraLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetCameraTarget
// (Final, Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioCameraManager::GetCameraTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetCameraTarget");

	ABioCameraManager_GetCameraTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetCameraSource
// (Final, Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioCameraManager::GetCameraSource()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetCameraSource");

	ABioCameraManager_GetCameraSource_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetPreviousBehavior
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioCameraManager::GetPreviousBehavior()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetPreviousBehavior");

	ABioCameraManager_GetPreviousBehavior_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetActiveBehavior
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioCameraManager::GetActiveBehavior()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetActiveBehavior");

	ABioCameraManager_GetActiveBehavior_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.DeactivateCurrentBehavior
// (Final, Native, Public)

void ABioCameraManager::DeactivateCurrentBehavior()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.DeactivateCurrentBehavior");

	ABioCameraManager_DeactivateCurrentBehavior_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.ActivateBehavior
// (Final, Native, Public)
// Parameters:
// int                            nBehavior                      (Parm)
// class UBioCameraTransition*    pTransitionOverride            (OptionalParm, Parm)
// class UBioCameraTransition*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCameraTransition* ABioCameraManager::ActivateBehavior(int nBehavior, class UBioCameraTransition* pTransitionOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.ActivateBehavior");

	ABioCameraManager_ActivateBehavior_Params params;
	params.nBehavior = nBehavior;
	params.pTransitionOverride = pTransitionOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetBehaviorCount
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioCameraManager::GetBehaviorCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetBehaviorCount");

	ABioCameraManager_GetBehaviorCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.GetBehavior
// (Final, Native, Public)
// Parameters:
// int                            nBehavior                      (Parm)
// class UBioCameraBehavior*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCameraBehavior* ABioCameraManager::GetBehavior(int nBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.GetBehavior");

	ABioCameraManager_GetBehavior_Params params;
	params.nBehavior = nBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.RemoveBehavior
// (Final, Native, Public)
// Parameters:
// int                            nBehavior                      (Parm)

void ABioCameraManager::RemoveBehavior(int nBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.RemoveBehavior");

	ABioCameraManager_RemoveBehavior_Params params;
	params.nBehavior = nBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraManager.AddBehavior
// (Final, Native, Public)
// Parameters:
// class UClass*                  Behavior                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioCameraManager::AddBehavior(class UClass* Behavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.AddBehavior");

	ABioCameraManager_AddBehavior_Params params;
	params.Behavior = Behavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraManager.UpdateCamera
// (Final, Native, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// float                          fAspectRatio                   (Parm)
// struct FTPOV                   POV                            (Parm, OutParm)

void ABioCameraManager::UpdateCamera(float fDeltaTime, float fAspectRatio, struct FTPOV* POV)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraManager.UpdateCamera");

	ABioCameraManager_UpdateCamera_Params params;
	params.fDeltaTime = fDeltaTime;
	params.fAspectRatio = fAspectRatio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (POV != nullptr)
		*POV = params.POV;
}


// Function BIOC_Base.BioCameraTransition.GetNormalizedDisplacementScale
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioCameraTransition::GetNormalizedDisplacementScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraTransition.GetNormalizedDisplacementScale");

	UBioCameraTransition_GetNormalizedDisplacementScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraTransition.SetNormalizedDisplacementScale
// (Final, Native, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCameraTransition::SetNormalizedDisplacementScale(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraTransition.SetNormalizedDisplacementScale");

	UBioCameraTransition_SetNormalizedDisplacementScale_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraTransition.SetVarTransfer
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioCameraTransitionVar> eVar                           (Parm)
// bool                           bTransfer                      (Parm)

void UBioCameraTransition::SetVarTransfer(TEnumAsByte<EBioCameraTransitionVar> eVar, bool bTransfer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraTransition.SetVarTransfer");

	UBioCameraTransition_SetVarTransfer_Params params;
	params.eVar = eVar;
	params.bTransfer = bTransfer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraTransitionZoomLock.SetZoomBehavior
// (Final, Native, Public)
// Parameters:
// class UBioCameraBehaviorZoom*  pZoomBehavior                  (Parm)

void UBioCameraTransitionZoomLock::SetZoomBehavior(class UBioCameraBehaviorZoom* pZoomBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraTransitionZoomLock.SetZoomBehavior");

	UBioCameraTransitionZoomLock_SetZoomBehavior_Params params;
	params.pZoomBehavior = pZoomBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCameraZoom.GetCurrentMagnificationLevel
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioCameraZoom::GetCurrentMagnificationLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraZoom.GetCurrentMagnificationLevel");

	UBioCameraZoom_GetCurrentMagnificationLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCameraZoom.Focus
// (Final, Native, Public)
// Parameters:
// float                          fDistance                      (Parm)
// class ABioWorldInfo*           pWorldInfo                     (Parm)
// class UDOFEffect*              pDOFEffect                     (Parm)

void UBioCameraZoom::Focus(float fDistance, class ABioWorldInfo* pWorldInfo, class UDOFEffect* pDOFEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCameraZoom.Focus");

	UBioCameraZoom_Focus_Params params;
	params.fDistance = fDistance;
	params.pWorldInfo = pWorldInfo;
	params.pDOFEffect = pDOFEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.DestroyedCleanupTimer
// (Defined, Event, Public)

void ABioArtPlaceable::DestroyedCleanupTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.DestroyedCleanupTimer");

	ABioArtPlaceable_DestroyedCleanupTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.FinishAnimControl
// (Defined, Simulated, Event, Public)

void ABioArtPlaceable::FinishAnimControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.FinishAnimControl");

	ABioArtPlaceable_FinishAnimControl_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.SetAnimWeights
// (Defined, Simulated, Event, Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void ABioArtPlaceable::SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.SetAnimWeights");

	ABioArtPlaceable_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.SetAnimPosition
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)

void ABioArtPlaceable::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.SetAnimPosition");

	ABioArtPlaceable_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.BeginAnimControl
// (Defined, Simulated, Event, Public)
// Parameters:
// TArray<class UAnimSet*>        InAnimSets                     (Parm, NeedCtorLink)

void ABioArtPlaceable::BeginAnimControl(TArray<class UAnimSet*> InAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.BeginAnimControl");

	ABioArtPlaceable_BeginAnimControl_Params params;
	params.InAnimSets = InAnimSets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioArtPlaceable::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetSaveObjectClass");

	ABioArtPlaceable_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.OnSkillGameCanceled
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)

void ABioArtPlaceable::OnSkillGameCanceled(class ABioPawn* oUsingPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.OnSkillGameCanceled");

	ABioArtPlaceable_OnSkillGameCanceled_Params params;
	params.oUsingPawn = oUsingPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.OnSkillGameSucceeded
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)

void ABioArtPlaceable::OnSkillGameSucceeded(class ABioPawn* oUsingPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.OnSkillGameSucceeded");

	ABioArtPlaceable_OnSkillGameSucceeded_Params params;
	params.oUsingPawn = oUsingPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.OnSkillGameFailed
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)

void ABioArtPlaceable::OnSkillGameFailed(class ABioPawn* oUsingPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.OnSkillGameFailed");

	ABioArtPlaceable_OnSkillGameFailed_Params params;
	params.oUsingPawn = oUsingPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.AbortReactive
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmToState                      (Parm)

void ABioArtPlaceable::AbortReactive(const struct FName& nmToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.AbortReactive");

	ABioArtPlaceable_AbortReactive_Params params;
	params.nmToState = nmToState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.RigidBodyCollision
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void ABioArtPlaceable::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.RigidBodyCollision");

	ABioArtPlaceable_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function BIOC_Base.BioArtPlaceable.EncroachedBy
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioArtPlaceable::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.EncroachedBy");

	ABioArtPlaceable_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.RanInto
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioArtPlaceable::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.RanInto");

	ABioArtPlaceable_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.BioBeginPlay
// (Defined, Public)

void ABioArtPlaceable::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.BioBeginPlay");

	ABioArtPlaceable_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.IsDynamicCover
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioArtPlaceable::IsDynamicCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.IsDynamicCover");

	ABioArtPlaceable_IsDynamicCover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.InitializeForPlay
// (Final, Native, Private)

void ABioArtPlaceable::InitializeForPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.InitializeForPlay");

	ABioArtPlaceable_InitializeForPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.MAT_FinishAnimControl
// (Native, Public)

void ABioArtPlaceable::MAT_FinishAnimControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.MAT_FinishAnimControl");

	ABioArtPlaceable_MAT_FinishAnimControl_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.MAT_SetAnimWeights
// (Native, Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (Parm, NeedCtorLink)

void ABioArtPlaceable::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.MAT_SetAnimWeights");

	ABioArtPlaceable_MAT_SetAnimWeights_Params params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.MAT_SetAnimPosition
// (Native, Public)
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)

void ABioArtPlaceable::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.MAT_SetAnimPosition");

	ABioArtPlaceable_MAT_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.MAT_BeginAnimControl
// (Native, Public)
// Parameters:
// TArray<class UAnimSet*>        InAnimSets                     (Parm, NeedCtorLink)

void ABioArtPlaceable::MAT_BeginAnimControl(TArray<class UAnimSet*> InAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.MAT_BeginAnimControl");

	ABioArtPlaceable_MAT_BeginAnimControl_Params params;
	params.InAnimSets = InAnimSets;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.EjectUsersOfAPCover
// (Native, Public)

void ABioArtPlaceable::EjectUsersOfAPCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.EjectUsersOfAPCover");

	ABioArtPlaceable_EjectUsersOfAPCover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.RemoveFromSquadCover
// (Native, Public)

void ABioArtPlaceable::RemoveFromSquadCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.RemoveFromSquadCover");

	ABioArtPlaceable_RemoveFromSquadCover_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.AddToSquadCover
// (Native, Public)
// Parameters:
// class ABioBaseSquad*           oSquad                         (Parm)

void ABioArtPlaceable::AddToSquadCover(class ABioBaseSquad* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.AddToSquadCover");

	ABioArtPlaceable_AddToSquadCover_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.BioDoProximityCheck
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioArtPlaceable::BioDoProximityCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.BioDoProximityCheck");

	ABioArtPlaceable_BioDoProximityCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.DoTreasureTransfer
// (Native, Public)
// Parameters:
// class ABioPawn*                pOther                         (Parm)

void ABioArtPlaceable::DoTreasureTransfer(class ABioPawn* pOther)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.DoTreasureTransfer");

	ABioArtPlaceable_DoTreasureTransfer_Params params;
	params.pOther = pOther;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.TermRagdoll
// (Native, Public)

void ABioArtPlaceable::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.TermRagdoll");

	ABioArtPlaceable_TermRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.InitRagdoll
// (Native, Public)

void ABioArtPlaceable::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.InitRagdoll");

	ABioArtPlaceable_InitRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.GetSlotRotation
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ABioArtPlaceable::GetSlotRotation(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetSlotRotation");

	ABioArtPlaceable_GetSlotRotation_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetSlotLocation
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioArtPlaceable::GetSlotLocation(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetSlotLocation");

	ABioArtPlaceable_GetSlotLocation_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.DecBlocked
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioArtPlaceable::DecBlocked(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.DecBlocked");

	ABioArtPlaceable_DecBlocked_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.IncBlocked
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioArtPlaceable::IncBlocked(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.IncBlocked");

	ABioArtPlaceable_IncBlocked_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetAiCoverSpots
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioArtPlaceable::GetAiCoverSpots()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetAiCoverSpots");

	ABioArtPlaceable_GetAiCoverSpots_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetSlotClaimedBy
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* ABioArtPlaceable::GetSlotClaimedBy(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetSlotClaimedBy");

	ABioArtPlaceable_GetSlotClaimedBy_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetSlotClaimed
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// class AController*             oCtrl                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioArtPlaceable::GetSlotClaimed(int SlotIdx, class AController* oCtrl)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetSlotClaimed");

	ABioArtPlaceable_GetSlotClaimed_Params params;
	params.SlotIdx = SlotIdx;
	params.oCtrl = oCtrl;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetSlotEnabled
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioArtPlaceable::GetSlotEnabled(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetSlotEnabled");

	ABioArtPlaceable_GetSlotEnabled_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetSlotType
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// TEnumAsByte<ECoverType>        ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ECoverType> ABioArtPlaceable::GetSlotType(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetSlotType");

	ABioArtPlaceable_GetSlotType_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.UnClaim
// (Native, Public)
// Parameters:
// class AController*             OldClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bUnclaimAll                    (Parm)

void ABioArtPlaceable::UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.UnClaim");

	ABioArtPlaceable_UnClaim_Params params;
	params.OldClaim = OldClaim;
	params.SlotIdx = SlotIdx;
	params.bUnclaimAll = bUnclaimAll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.Claim
// (Native, Public)
// Parameters:
// class AController*             NewClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioArtPlaceable::Claim(class AController* NewClaim, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.Claim");

	ABioArtPlaceable_Claim_Params params;
	params.NewClaim = NewClaim;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetStepFlags
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioArtPlaceable::GetStepFlags(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetStepFlags");

	ABioArtPlaceable_GetStepFlags_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.GetCoverSlot
// (Defined, Event, Public)
// Parameters:
// int                            nIDX                           (Parm)
// struct FCoverSlot              ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FCoverSlot ABioArtPlaceable::GetCoverSlot(int nIDX)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.GetCoverSlot");

	ABioArtPlaceable_GetCoverSlot_Params params;
	params.nIDX = nIDX;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceable.UpdateWpPointPosition
// (Native, Public)

void ABioArtPlaceable::UpdateWpPointPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.UpdateWpPointPosition");

	ABioArtPlaceable_UpdateWpPointPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceable.SetActionStationWP
// (Native, Public)
// Parameters:
// class ANavigationPoint*        oWP                            (Parm)
// struct FName                   nmSocket                       (Parm)

void ABioArtPlaceable::SetActionStationWP(class ANavigationPoint* oWP, const struct FName& nmSocket)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceable.SetActionStationWP");

	ABioArtPlaceable_SetActionStationWP_Params params;
	params.oWP = oWP;
	params.nmSocket = nmSocket;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlot
// (Native, Public, HasOutParms)
// Parameters:
// int                            SlotIdx                        (Parm)
// struct FCoverSlot              Slot                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableCoverInterface::GetSlot(int SlotIdx, struct FCoverSlot* Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlot");

	UBioArtPlaceableCoverInterface_GetSlot_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Slot != nullptr)
		*Slot = params.Slot;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.DecBlocked
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioArtPlaceableCoverInterface::DecBlocked(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.DecBlocked");

	UBioArtPlaceableCoverInterface_DecBlocked_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.IncBlocked
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioArtPlaceableCoverInterface::IncBlocked(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.IncBlocked");

	UBioArtPlaceableCoverInterface_IncBlocked_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotClaimedBy
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* UBioArtPlaceableCoverInterface::GetSlotClaimedBy(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotClaimedBy");

	UBioArtPlaceableCoverInterface_GetSlotClaimedBy_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotClaimed
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// class AController*             oCtrl                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableCoverInterface::GetSlotClaimed(int SlotIdx, class AController* oCtrl)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotClaimed");

	UBioArtPlaceableCoverInterface_GetSlotClaimed_Params params;
	params.SlotIdx = SlotIdx;
	params.oCtrl = oCtrl;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotEnabled
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableCoverInterface::GetSlotEnabled(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotEnabled");

	UBioArtPlaceableCoverInterface_GetSlotEnabled_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotType
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// TEnumAsByte<ECoverType>        ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ECoverType> UBioArtPlaceableCoverInterface::GetSlotType(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotType");

	UBioArtPlaceableCoverInterface_GetSlotType_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetStepFlags
// (Native, Public)
// Parameters:
// int                            SlotIdx                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioArtPlaceableCoverInterface::GetStepFlags(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetStepFlags");

	UBioArtPlaceableCoverInterface_GetStepFlags_Params params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.UnClaim
// (Native, Public)
// Parameters:
// class AController*             OldClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           bUnclaimAll                    (Parm)

void UBioArtPlaceableCoverInterface::UnClaim(class AController* OldClaim, int SlotIdx, bool bUnclaimAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.UnClaim");

	UBioArtPlaceableCoverInterface_UnClaim_Params params;
	params.OldClaim = OldClaim;
	params.SlotIdx = SlotIdx;
	params.bUnclaimAll = bUnclaimAll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.Claim
// (Native, Public)
// Parameters:
// class AController*             NewClaim                       (Parm)
// int                            SlotIdx                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableCoverInterface::Claim(class AController* NewClaim, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.Claim");

	UBioArtPlaceableCoverInterface_Claim_Params params;
	params.NewClaim = NewClaim;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotCount
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioArtPlaceableCoverInterface::GetSlotCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotCount");

	UBioArtPlaceableCoverInterface_GetSlotCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotRotation
// (Native, Public)
// Parameters:
// int                            nSlotID                        (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UBioArtPlaceableCoverInterface::GetSlotRotation(int nSlotID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotRotation");

	UBioArtPlaceableCoverInterface_GetSlotRotation_Params params;
	params.nSlotID = nSlotID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotLocation
// (Native, Public)
// Parameters:
// int                            nSlotID                        (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioArtPlaceableCoverInterface::GetSlotLocation(int nSlotID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetSlotLocation");

	UBioArtPlaceableCoverInterface_GetSlotLocation_Params params;
	params.nSlotID = nSlotID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.GetCoverObject
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioArtPlaceableCoverInterface::GetCoverObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.GetCoverObject");

	UBioArtPlaceableCoverInterface_GetCoverObject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.Reset
// (Native, Public)

void UBioArtPlaceableCoverInterface::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.Reset");

	UBioArtPlaceableCoverInterface_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.InitFromActor
// (Native, Public)
// Parameters:
// class AActor*                  oAct                           (Parm)

void UBioArtPlaceableCoverInterface::InitFromActor(class AActor* oAct)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.InitFromActor");

	UBioArtPlaceableCoverInterface_InitFromActor_Params params;
	params.oAct = oAct;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableCoverInterface.IsValid
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableCoverInterface::IsValid()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableCoverInterface.IsValid");

	UBioArtPlaceableCoverInterface_IsValid_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableShield.Tick
// (Defined, Event, Public)
// Parameters:
// float                          fTimeDelta                     (Parm)

void ABioArtPlaceableShield::Tick(float fTimeDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableShield.Tick");

	ABioArtPlaceableShield_Tick_Params params;
	params.fTimeDelta = fTimeDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDoor.CalcDistanceFromDoorPlane
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vWorldLocation                 (Const, Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioDoor::CalcDistanceFromDoorPlane(struct FVector* vWorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDoor.CalcDistanceFromDoorPlane");

	ABioDoor_CalcDistanceFromDoorPlane_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vWorldLocation != nullptr)
		*vWorldLocation = params.vWorldLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDoor.BioDoProximityCheck
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioDoor::BioDoProximityCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDoor.BioDoProximityCheck");

	ABioDoor_BioDoProximityCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioProjectile.ProcessPhysicsTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oOther                         (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)

void ABioProjectile::ProcessPhysicsTouch(class AActor* oOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProjectile.ProcessPhysicsTouch");

	ABioProjectile_ProcessPhysicsTouch_Params params;
	params.oOther = oOther;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioProjectile.ProcessTouch
// (Defined, Simulated, Public, HasDefaults)
// Parameters:
// class AActor*                  oOther                         (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)

void ABioProjectile::ProcessTouch(class AActor* oOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProjectile.ProcessTouch");

	ABioProjectile_ProcessTouch_Params params;
	params.oOther = oOther;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioProjectile.Explode
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)

void ABioProjectile::Explode(const struct FVector& vHitLocation, const struct FVector& vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProjectile.Explode");

	ABioProjectile_Explode_Params params;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioProjectile.IsValidTarget
// (Final, Native, Private)
// Parameters:
// class AActor*                  oActor                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioProjectile::IsValidTarget(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProjectile.IsValidTarget");

	ABioProjectile_IsValidTarget_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenadeProjectile.Detonate
// (Defined, Event, Public)

void ABioGrenadeProjectile::Detonate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.Detonate");

	ABioGrenadeProjectile_Detonate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectile.SetVelocity
// (Native, Public)
// Parameters:
// struct FVector                 vVelocity                      (Parm)

void ABioGrenadeProjectile::SetVelocity(const struct FVector& vVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.SetVelocity");

	ABioGrenadeProjectile_SetVelocity_Params params;
	params.vVelocity = vVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectile.SetTargetPoint
// (Native, Public)
// Parameters:
// struct FVector                 vTarget                        (Parm)

void ABioGrenadeProjectile::SetTargetPoint(const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.SetTargetPoint");

	ABioGrenadeProjectile_SetTargetPoint_Params params;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectile.SetTargetActor
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)

void ABioGrenadeProjectile::SetTargetActor(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.SetTargetActor");

	ABioGrenadeProjectile_SetTargetActor_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectile.HurtRadius
// (Simulated, Native, Public)
// Parameters:
// float                          fBaseDamage                    (Parm)
// float                          fDamageRadius                  (Parm)
// class UClass*                  clsDamageType                  (Parm)
// float                          fMomentum                      (Parm)
// struct FVector                 vHurtOrigin                    (Parm)
// class AActor*                  oIgnoredActor                  (OptionalParm, Parm)
// class AController*             oInstigatedByController        (OptionalParm, Parm)
// bool                           bDoFullDamage                  (OptionalParm, Parm)
// class UDamageType*             pDamage                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioGrenadeProjectile::HurtRadius(float fBaseDamage, float fDamageRadius, class UClass* clsDamageType, float fMomentum, const struct FVector& vHurtOrigin, class AActor* oIgnoredActor, class AController* oInstigatedByController, bool bDoFullDamage, class UDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.HurtRadius");

	ABioGrenadeProjectile_HurtRadius_Params params;
	params.fBaseDamage = fBaseDamage;
	params.fDamageRadius = fDamageRadius;
	params.clsDamageType = clsDamageType;
	params.fMomentum = fMomentum;
	params.vHurtOrigin = vHurtOrigin;
	params.oIgnoredActor = oIgnoredActor;
	params.oInstigatedByController = oInstigatedByController;
	params.bDoFullDamage = bDoFullDamage;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenadeProjectile.Explode
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioGrenadeProjectile::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.Explode");

	ABioGrenadeProjectile_Explode_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectile.ShouldExplode
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioGrenadeProjectile::ShouldExplode(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.ShouldExplode");

	ABioGrenadeProjectile_ShouldExplode_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenadeProjectile.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioGrenadeProjectile::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.Tick");

	ABioGrenadeProjectile_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectile.Initialize
// (Native, Public)
// Parameters:
// class UBioDamageType*          pDamage                        (Parm)
// class UBioItemGrenade*         pItem                          (Parm)

void ABioGrenadeProjectile::Initialize(class UBioDamageType* pDamage, class UBioItemGrenade* pItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.Initialize");

	ABioGrenadeProjectile_Initialize_Params params;
	params.pDamage = pDamage;
	params.pItem = pItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectile.GetActorTargetLocation
// (Native, Protected)
// Parameters:
// class AActor*                  oActor                         (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioGrenadeProjectile::GetActorTargetLocation(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.GetActorTargetLocation");

	ABioGrenadeProjectile_GetActorTargetLocation_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenadeProjectile.IsValidTarget
// (Native, Protected)
// Parameters:
// class AActor*                  oActor                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioGrenadeProjectile::IsValidTarget(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.IsValidTarget");

	ABioGrenadeProjectile_IsValidTarget_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenadeProjectile.InitializeUpgradableStats
// (Final, Native, Private)

void ABioGrenadeProjectile::InitializeUpgradableStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectile.InitializeUpgradableStats");

	ABioGrenadeProjectile_InitializeUpgradableStats_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileBallistic.ShouldExplode
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioGrenadeProjectileBallistic::ShouldExplode(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileBallistic.ShouldExplode");

	ABioGrenadeProjectileBallistic_ShouldExplode_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenadeProjectileBallistic.SetVelocity
// (Native, Public)
// Parameters:
// struct FVector                 vVelocity                      (Parm)

void ABioGrenadeProjectileBallistic::SetVelocity(const struct FVector& vVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileBallistic.SetVelocity");

	ABioGrenadeProjectileBallistic_SetVelocity_Params params;
	params.vVelocity = vVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileBallistic.SetTargetPoint
// (Native, Public)
// Parameters:
// struct FVector                 vTarget                        (Parm)

void ABioGrenadeProjectileBallistic::SetTargetPoint(const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileBallistic.SetTargetPoint");

	ABioGrenadeProjectileBallistic_SetTargetPoint_Params params;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileBallistic.SetTargetActor
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)

void ABioGrenadeProjectileBallistic::SetTargetActor(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileBallistic.SetTargetActor");

	ABioGrenadeProjectileBallistic_SetTargetActor_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.DoTouch
// (Native, Public)
// Parameters:
// class AActor*                  oHitActor                      (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)

void ABioGrenadeProjectileFrisbee::DoTouch(class AActor* oHitActor, const struct FVector& vHitLocation, const struct FVector& vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.DoTouch");

	ABioGrenadeProjectileFrisbee_DoTouch_Params params;
	params.oHitActor = oHitActor;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.Unstick
// (Defined, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioGrenadeProjectileFrisbee::Unstick(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.Unstick");

	ABioGrenadeProjectileFrisbee_Unstick_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.Stick
// (Defined, Event, Public)
// Parameters:
// class AActor*                  HitActor                       (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioGrenadeProjectileFrisbee::Stick(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.Stick");

	ABioGrenadeProjectileFrisbee_Stick_Params params;
	params.HitActor = HitActor;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.HitWall
// (Defined, Singular, Simulated, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UPrimitiveComponent*     WallComp                       (Parm, EditInline)

void ABioGrenadeProjectileFrisbee::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.HitWall");

	ABioGrenadeProjectileFrisbee_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.ProcessTouch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  HitActor                       (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)

void ABioGrenadeProjectileFrisbee::ProcessTouch(class AActor* HitActor, const struct FVector& vHitLocation, const struct FVector& vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.ProcessTouch");

	ABioGrenadeProjectileFrisbee_ProcessTouch_Params params;
	params.HitActor = HitActor;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.SetVelocity
// (Native, Public)
// Parameters:
// struct FVector                 vVelocity                      (Parm)

void ABioGrenadeProjectileFrisbee::SetVelocity(const struct FVector& vVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.SetVelocity");

	ABioGrenadeProjectileFrisbee_SetVelocity_Params params;
	params.vVelocity = vVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.SetTargetPoint
// (Native, Public)
// Parameters:
// struct FVector                 vTarget                        (Parm)

void ABioGrenadeProjectileFrisbee::SetTargetPoint(const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.SetTargetPoint");

	ABioGrenadeProjectileFrisbee_SetTargetPoint_Params params;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.SetTargetActor
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)

void ABioGrenadeProjectileFrisbee::SetTargetActor(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.SetTargetActor");

	ABioGrenadeProjectileFrisbee_SetTargetActor_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.Detonate
// (Defined, Event, Public, HasDefaults)

void ABioGrenadeProjectileFrisbee::Detonate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.Detonate");

	ABioGrenadeProjectileFrisbee_Detonate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.Explode
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioGrenadeProjectileFrisbee::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.Explode");

	ABioGrenadeProjectileFrisbee_Explode_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenadeProjectileFrisbee.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioGrenadeProjectileFrisbee::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenadeProjectileFrisbee.Tick");

	ABioGrenadeProjectileFrisbee_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLinePowerProjectile.HitWall
// (Singular, Simulated, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UPrimitiveComponent*     WallComp                       (Parm, EditInline)

void ABioLinePowerProjectile::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.HitWall");

	ABioLinePowerProjectile_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLinePowerProjectile.ProcessTouch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  oOther                         (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)

void ABioLinePowerProjectile::ProcessTouch(class AActor* oOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.ProcessTouch");

	ABioLinePowerProjectile_ProcessTouch_Params params;
	params.oOther = oOther;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLinePowerProjectile.RecordDebugAimingInfo
// (Final, Native, Private)
// Parameters:
// struct FVector                 vStartLocation1                (Parm)
// struct FVector                 vEndLocation1                  (Parm)
// struct FVector                 vStartLocation2                (OptionalParm, Parm)
// struct FVector                 vEndLocation2                  (OptionalParm, Parm)

void ABioLinePowerProjectile::RecordDebugAimingInfo(const struct FVector& vStartLocation1, const struct FVector& vEndLocation1, const struct FVector& vStartLocation2, const struct FVector& vEndLocation2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.RecordDebugAimingInfo");

	ABioLinePowerProjectile_RecordDebugAimingInfo_Params params;
	params.vStartLocation1 = vStartLocation1;
	params.vEndLocation1 = vEndLocation1;
	params.vStartLocation2 = vStartLocation2;
	params.vEndLocation2 = vEndLocation2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLinePowerProjectile.GetProjectileImpactLocation
// (Final, Native, Private, HasOutParms)
// Parameters:
// class AActor*                  oActor                         (Parm)
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vNormal                        (Parm, OutParm)

void ABioLinePowerProjectile::GetProjectileImpactLocation(class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.GetProjectileImpactLocation");

	ABioLinePowerProjectile_GetProjectileImpactLocation_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vNormal != nullptr)
		*vNormal = params.vNormal;
}


// Function BIOC_Base.BioLinePowerProjectile.GetImpactLocation
// (Final, Native, Private, HasOutParms)
// Parameters:
// class AActor*                  oActor                         (Parm)
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vNormal                        (Parm, OutParm)
// struct FName                   nmBoneName                     (Parm, OutParm)

void ABioLinePowerProjectile::GetImpactLocation(class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal, struct FName* nmBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.GetImpactLocation");

	ABioLinePowerProjectile_GetImpactLocation_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vNormal != nullptr)
		*vNormal = params.vNormal;
	if (nmBoneName != nullptr)
		*nmBoneName = params.nmBoneName;
}


// Function BIOC_Base.BioLinePowerProjectile.DoImpact
// (Final, Native, Private)
// Parameters:
// class AActor*                  oActor                         (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)
// struct FName                   nmBoneName                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioLinePowerProjectile::DoImpact(class AActor* oActor, const struct FVector& vHitLocation, const struct FVector& vHitNormal, const struct FName& nmBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.DoImpact");

	ABioLinePowerProjectile_DoImpact_Params params;
	params.oActor = oActor;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;
	params.nmBoneName = nmBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLinePowerProjectile.ImpactActors
// (Final, Native, Private)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FVector                 vNormal                        (Parm)
// float                          fRadius                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioLinePowerProjectile::ImpactActors(const struct FVector& vLocation, const struct FVector& vNormal, float fRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.ImpactActors");

	ABioLinePowerProjectile_ImpactActors_Params params;
	params.vLocation = vLocation;
	params.vNormal = vNormal;
	params.fRadius = fRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLinePowerProjectile.TickAuthoritative
// (Native, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm)

void ABioLinePowerProjectile::TickAuthoritative(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.TickAuthoritative");

	ABioLinePowerProjectile_TickAuthoritative_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLinePowerProjectile.DoTouch
// (Native, Public)
// Parameters:
// class AActor*                  pOther                         (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vHitNormal                     (Parm)

void ABioLinePowerProjectile::DoTouch(class AActor* pOther, const struct FVector& vHitLocation, const struct FVector& vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.DoTouch");

	ABioLinePowerProjectile_DoTouch_Params params;
	params.pOther = pOther;
	params.vHitLocation = vHitLocation;
	params.vHitNormal = vHitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLinePowerProjectile.InitializeData
// (Native, Public)
// Parameters:
// class AActor*                  oCaster                        (Parm)
// float                          fStability                     (Parm)
// float                          fTravelSpeed                   (Parm)
// float                          fRadius                        (Parm)
// float                          fRange                         (Parm)
// struct FVector                 vTargetLocation                (Parm)
// class UBioPowerScript*         oPowerScript                   (Parm)
// class UBioPower*               oPower                         (Parm)
// struct FVector                 vCasterVelocity                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioLinePowerProjectile::InitializeData(class AActor* oCaster, float fStability, float fTravelSpeed, float fRadius, float fRange, const struct FVector& vTargetLocation, class UBioPowerScript* oPowerScript, class UBioPower* oPower, const struct FVector& vCasterVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLinePowerProjectile.InitializeData");

	ABioLinePowerProjectile_InitializeData_Params params;
	params.oCaster = oCaster;
	params.fStability = fStability;
	params.fTravelSpeed = fTravelSpeed;
	params.fRadius = fRadius;
	params.fRange = fRange;
	params.vTargetLocation = vTargetLocation;
	params.oPowerScript = oPowerScript;
	params.oPower = oPower;
	params.vCasterVelocity = vCasterVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPathPoint.DoReachedWaypointEvent
// (Defined, Public)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPathPoint::DoReachedWaypointEvent(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPathPoint.DoReachedWaypointEvent");

	ABioPathPoint_DoReachedWaypointEvent_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPathPoint.OnCreatureReachedWayPoint
// (Defined, Public)
// Parameters:
// class APawn*                   PathFindingCreature            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPathPoint::OnCreatureReachedWayPoint(class APawn* PathFindingCreature)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPathPoint.OnCreatureReachedWayPoint");

	ABioPathPoint_OnCreatureReachedWayPoint_Params params;
	params.PathFindingCreature = PathFindingCreature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWaypointSet.GetWaypoint
// (Native, Public)
// Parameters:
// int                            nIDX                           (Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ABioWaypointSet::GetWaypoint(int nIDX)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWaypointSet.GetWaypoint");

	ABioWaypointSet_GetWaypoint_Params params;
	params.nIDX = nIDX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWaypointSet.FindNearestPoint
// (Native, Public)
// Parameters:
// struct FVector                 vLoc                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioWaypointSet::FindNearestPoint(const struct FVector& vLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWaypointSet.FindNearestPoint");

	ABioWaypointSet_FindNearestPoint_Params params;
	params.vLoc = vLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_ActionStation.OnCreatureReachedWayPoint
// (Defined, Public)
// Parameters:
// class APawn*                   PathFindingCreature            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_ActionStation::OnCreatureReachedWayPoint(class APawn* PathFindingCreature)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_ActionStation.OnCreatureReachedWayPoint");

	ABioWp_ActionStation_OnCreatureReachedWayPoint_Params params;
	params.PathFindingCreature = PathFindingCreature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_APGate.SpecialHandling
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioWp_APGate::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_APGate.SpecialHandling");

	ABioWp_APGate_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_DoorMarker.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_DoorMarker::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_DoorMarker.SuggestMovePreparation");

	ABioWp_DoorMarker_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_DoorMarker.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_DoorMarker::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_DoorMarker.ProceedWithMove");

	ABioWp_DoorMarker_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_DoorMarker.SpecialHandling
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioWp_DoorMarker::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_DoorMarker.SpecialHandling");

	ABioWp_DoorMarker_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_DoorMarker.IsDoorClosed
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_DoorMarker::IsDoorClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_DoorMarker.IsDoorClosed");

	ABioWp_DoorMarker_IsDoorClosed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_DoorMarker.IsDoorOpen
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_DoorMarker::IsDoorOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_DoorMarker.IsDoorOpen");

	ABioWp_DoorMarker_IsDoorOpen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributeMapper.GetAttributes
// (Native, Public)
// Parameters:
// class UObject*                 oSrc                           (Parm)
// TEnumAsByte<EBioGameEffectAttributeType> eType                          (Parm)
// class UBioAttributes*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioAttributes* UBioAttributeMapper::GetAttributes(class UObject* oSrc, TEnumAsByte<EBioGameEffectAttributeType> eType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributeMapper.GetAttributes");

	UBioAttributeMapper_GetAttributes_Params params;
	params.oSrc = oSrc;
	params.eType = eType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.IntToString
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexIntStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioAttributes::STATIC_IntToString(struct FBioComplexIntStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.IntToString");

	UBioAttributes_IntToString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.GetBaseIntValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexIntStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributes::STATIC_GetBaseIntValue(struct FBioComplexIntStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.GetBaseIntValue");

	UBioAttributes_GetBaseIntValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.SetBaseIntValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexIntStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// int                            baseValue                      (Parm)

void UBioAttributes::STATIC_SetBaseIntValue(int baseValue, struct FBioComplexIntStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetBaseIntValue");

	UBioAttributes_SetBaseIntValue_Params params;
	params.baseValue = baseValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;
}


// Function BIOC_Base.BioAttributes.GetCurrentIntValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexIntStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributes::STATIC_GetCurrentIntValue(struct FBioComplexIntStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.GetCurrentIntValue");

	UBioAttributes_GetCurrentIntValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.FloatToString
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexFloatStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioAttributes::STATIC_FloatToString(struct FBioComplexFloatStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.FloatToString");

	UBioAttributes_FloatToString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.GetBaseFloatValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexFloatStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioAttributes::STATIC_GetBaseFloatValue(struct FBioComplexFloatStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.GetBaseFloatValue");

	UBioAttributes_GetBaseFloatValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.SetBaseFloatValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexFloatStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// float                          baseValue                      (Parm)

void UBioAttributes::STATIC_SetBaseFloatValue(float baseValue, struct FBioComplexFloatStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetBaseFloatValue");

	UBioAttributes_SetBaseFloatValue_Params params;
	params.baseValue = baseValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;
}


// Function BIOC_Base.BioAttributes.GetCurrentFloatValue
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioComplexFloatStructAttribute attribute                      (Parm, OutParm, NeedCtorLink)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioAttributes::STATIC_GetCurrentFloatValue(struct FBioComplexFloatStructAttribute* attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.GetCurrentFloatValue");

	UBioAttributes_GetCurrentFloatValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (attribute != nullptr)
		*attribute = params.attribute;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.ClearStringAttribute
// (Native, Public)
// Parameters:
// struct FName                   nmAttribute                    (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::ClearStringAttribute(const struct FName& nmAttribute, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.ClearStringAttribute");

	UBioAttributes_ClearStringAttribute_Params params;
	params.nmAttribute = nmAttribute;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.RemoveFloatAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// int                            nIndexOfOverride               (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::RemoveFloatAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.RemoveFloatAttributeBaseOverrideModifier");

	UBioAttributes_RemoveFloatAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.nIndexOfOverride = nIndexOfOverride;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.RemoveIntAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// int                            nIndexOfOverride               (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::RemoveIntAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.RemoveIntAttributeBaseOverrideModifier");

	UBioAttributes_RemoveIntAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.nIndexOfOverride = nIndexOfOverride;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.RemoveFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.RemoveFloatAttributeModifier");

	UBioAttributes_RemoveFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.RemoveIntAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// int                            nValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::RemoveIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.RemoveIntAttributeModifier");

	UBioAttributes_RemoveIntAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.nValue = nValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.AddFloatAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          Value                          (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributes::AddFloatAttributeBaseOverrideModifier(const struct FName& attribute, float Value, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.AddFloatAttributeBaseOverrideModifier");

	UBioAttributes_AddFloatAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.Value = Value;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.AddIntAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// int                            Value                          (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributes::AddIntAttributeBaseOverrideModifier(const struct FName& attribute, int Value, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.AddIntAttributeBaseOverrideModifier");

	UBioAttributes_AddIntAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.Value = Value;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributes.AddFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.AddFloatAttributeModifier");

	UBioAttributes_AddFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.AddIntAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// int                            nValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::AddIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.AddIntAttributeModifier");

	UBioAttributes_AddIntAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.nValue = nValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.SetNameAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// struct FName                   nmValue                        (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::SetNameAttribute(const struct FName& attribute, const struct FName& nmValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetNameAttribute");

	UBioAttributes_SetNameAttribute_Params params;
	params.attribute = attribute;
	params.nmValue = nmValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.SetBoolAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// bool                           bValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::SetBoolAttribute(const struct FName& attribute, bool bValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetBoolAttribute");

	UBioAttributes_SetBoolAttribute_Params params;
	params.attribute = attribute;
	params.bValue = bValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.SetEnumAttribute
// (Native, Public)
// Parameters:
// struct FName                   nmAttributeName                (Parm)
// struct FString                 sValue                         (Parm, NeedCtorLink)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::SetEnumAttribute(const struct FName& nmAttributeName, const struct FString& sValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetEnumAttribute");

	UBioAttributes_SetEnumAttribute_Params params;
	params.nmAttributeName = nmAttributeName;
	params.sValue = sValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.SetStringAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// struct FString                 sValue                         (Parm, NeedCtorLink)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::SetStringAttribute(const struct FName& attribute, const struct FString& sValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetStringAttribute");

	UBioAttributes_SetStringAttribute_Params params;
	params.attribute = attribute;
	params.sValue = sValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.SetByteAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// unsigned char                  cValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::SetByteAttribute(const struct FName& attribute, unsigned char cValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetByteAttribute");

	UBioAttributes_SetByteAttribute_Params params;
	params.attribute = attribute;
	params.cValue = cValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.SetFloatAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetFloatAttribute");

	UBioAttributes_SetFloatAttribute_Params params;
	params.attribute = attribute;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.SetIntAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// int                            nValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributes::SetIntAttribute(const struct FName& attribute, int nValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.SetIntAttribute");

	UBioAttributes_SetIntAttribute_Params params;
	params.attribute = attribute;
	params.nValue = nValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributes.EnsureInitialized
// (Final, Native, Public)

void UBioAttributes::EnsureInitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributes.EnsureInitialized");

	UBioAttributes_EnsureInitialized_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesDamage.SetWeaponDamageType
// (Native, Public)
// Parameters:
// unsigned char                  nWeaponType                    (Parm)

void UBioAttributesDamage::SetWeaponDamageType(unsigned char nWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesDamage.SetWeaponDamageType");

	UBioAttributesDamage_SetWeaponDamageType_Params params;
	params.nWeaponType = nWeaponType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesEpicPawn.GetName
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioAttributesEpicPawn::GetName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesEpicPawn.GetName");

	UBioAttributesEpicPawn_GetName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributesEpicPawn.GetDesignedName
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioAttributesEpicPawn::GetDesignedName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesEpicPawn.GetDesignedName");

	UBioAttributesEpicPawn_GetDesignedName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributesEpicPawn.RemoveFloatAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// int                            nIndexOfOverride               (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesEpicPawn::RemoveFloatAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesEpicPawn.RemoveFloatAttributeBaseOverrideModifier");

	UBioAttributesEpicPawn_RemoveFloatAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.nIndexOfOverride = nIndexOfOverride;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesEpicPawn.AddFloatAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          Value                          (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributesEpicPawn::AddFloatAttributeBaseOverrideModifier(const struct FName& attribute, float Value, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesEpicPawn.AddFloatAttributeBaseOverrideModifier");

	UBioAttributesEpicPawn_AddFloatAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.Value = Value;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributesEpicPawn.RemoveFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesEpicPawn::RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesEpicPawn.RemoveFloatAttributeModifier");

	UBioAttributesEpicPawn_RemoveFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesEpicPawn.AddFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesEpicPawn::AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesEpicPawn.AddFloatAttributeModifier");

	UBioAttributesEpicPawn_AddFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesEpicPawn.SetFloatAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesEpicPawn::SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesEpicPawn.SetFloatAttribute");

	UBioAttributesEpicPawn_SetFloatAttribute_Params params;
	params.attribute = attribute;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItem.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItem::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItem.DescribeAttributes");

	UBioAttributesItem_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemSophisticated.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItemSophisticated::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemSophisticated.DescribeAttributes");

	UBioAttributesItemSophisticated_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemEquippable.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItemEquippable::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemEquippable.DescribeAttributes");

	UBioAttributesItemEquippable_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemArmor.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItemArmor::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemArmor.DescribeAttributes");

	UBioAttributesItemArmor_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemGrenade.ClearStringAttribute
// (Native, Public)
// Parameters:
// struct FName                   nmAttribute                    (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesItemGrenade::ClearStringAttribute(const struct FName& nmAttribute, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemGrenade.ClearStringAttribute");

	UBioAttributesItemGrenade_ClearStringAttribute_Params params;
	params.nmAttribute = nmAttribute;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemGrenade.SetStringAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// struct FString                 sValue                         (Parm, NeedCtorLink)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesItemGrenade::SetStringAttribute(const struct FName& attribute, const struct FString& sValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemGrenade.SetStringAttribute");

	UBioAttributesItemGrenade_SetStringAttribute_Params params;
	params.attribute = attribute;
	params.sValue = sValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemWeapon.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItemWeapon::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemWeapon.DescribeAttributes");

	UBioAttributesItemWeapon_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemWeaponMelee.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItemWeaponMelee::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemWeaponMelee.DescribeAttributes");

	UBioAttributesItemWeaponMelee_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemWeaponRanged.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItemWeaponRanged::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemWeaponRanged.DescribeAttributes");

	UBioAttributesItemWeaponRanged_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesItemXMod.DescribeAttributes
// (Defined, Event, Public)

void UBioAttributesItemXMod::DescribeAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesItemXMod.DescribeAttributes");

	UBioAttributesItemXMod_DescribeAttributes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesPawn.RemoveFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesPawn::RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawn.RemoveFloatAttributeModifier");

	UBioAttributesPawn_RemoveFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesPawn.RemoveIntAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// int                            nValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesPawn::RemoveIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawn.RemoveIntAttributeModifier");

	UBioAttributesPawn_RemoveIntAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.nValue = nValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesPawn.AddFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesPawn::AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawn.AddFloatAttributeModifier");

	UBioAttributesPawn_AddFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesPawn.AddIntAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// int                            nValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesPawn::AddIntAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, int nValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawn.AddIntAttributeModifier");

	UBioAttributesPawn_AddIntAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.nValue = nValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesPawn.SetFloatAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesPawn::SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawn.SetFloatAttribute");

	UBioAttributesPawn_SetFloatAttribute_Params params;
	params.attribute = attribute;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesPawn.SetIntAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// int                            nValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesPawn::SetIntAttribute(const struct FName& attribute, int nValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawn.SetIntAttribute");

	UBioAttributesPawn_SetIntAttribute_Params params;
	params.attribute = attribute;
	params.nValue = nValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesPawnParty.GetParagon
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributesPawnParty::GetParagon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawnParty.GetParagon");

	UBioAttributesPawnParty_GetParagon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributesPawnParty.GetRenegade
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributesPawnParty::GetRenegade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawnParty.GetRenegade");

	UBioAttributesPawnParty_GetRenegade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributesPawnParty.SetMainAttributes
// (Native, Public)
// Parameters:
// int                            primary                        (Parm)
// int                            secondary                      (Parm)
// int                            tertiary                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioAttributesPawnParty::SetMainAttributes(int primary, int secondary, int tertiary)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesPawnParty.SetMainAttributes");

	UBioAttributesPawnParty_SetMainAttributes_Params params;
	params.primary = primary;
	params.secondary = secondary;
	params.tertiary = tertiary;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributesShield.RemoveFloatAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// int                            nIndexOfOverride               (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesShield::RemoveFloatAttributeBaseOverrideModifier(const struct FName& attribute, int nIndexOfOverride, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesShield.RemoveFloatAttributeBaseOverrideModifier");

	UBioAttributesShield_RemoveFloatAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.nIndexOfOverride = nIndexOfOverride;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesShield.AddFloatAttributeBaseOverrideModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          Value                          (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioAttributesShield::AddFloatAttributeBaseOverrideModifier(const struct FName& attribute, float Value, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesShield.AddFloatAttributeBaseOverrideModifier");

	UBioAttributesShield_AddFloatAttributeBaseOverrideModifier_Params params;
	params.attribute = attribute;
	params.Value = Value;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAttributesShield.RemoveFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesShield::RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesShield.RemoveFloatAttributeModifier");

	UBioAttributesShield_RemoveFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesShield.AddFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesShield::AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesShield.AddFloatAttributeModifier");

	UBioAttributesShield_AddFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAttributesShield.SetFloatAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioAttributesShield::SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAttributesShield.SetFloatAttribute");

	UBioAttributesShield_SetFloatAttribute_Params params;
	params.attribute = attribute;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.AddParameter
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FName                   nmParameter                    (Parm)

void UBioPower::AddParameter(const struct FName& nmParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.AddParameter");

	UBioPower_AddParameter_Params params;
	params.nmParameter = nmParameter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.LoadPlayerLinkedPower
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadPlayerLinkedPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadPlayerLinkedPower");

	UBioPower_LoadPlayerLinkedPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.LoadHUDType
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadHUDType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadHUDType");

	UBioPower_LoadHUDType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.LoadDiscipline
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadDiscipline()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadDiscipline");

	UBioPower_LoadDiscipline_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.LoadRequiredResourceType
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadRequiredResourceType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadRequiredResourceType");

	UBioPower_LoadRequiredResourceType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.CancelDualPowerInternal
// (Final, Native, Private)

void UBioPower::CancelDualPowerInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.CancelDualPowerInternal");

	UBioPower_CancelDualPowerInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.LoadAimType
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadAimType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadAimType");

	UBioPower_LoadAimType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.LoadDualPowerInfo
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadDualPowerInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadDualPowerInfo");

	UBioPower_LoadDualPowerInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.LoadRequiredWeaponType
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadRequiredWeaponType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadRequiredWeaponType");

	UBioPower_LoadRequiredWeaponType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.RemoveParameter
// (Final, Native, Private)
// Parameters:
// struct FName                   nmParameter                    (Parm)

void UBioPower::RemoveParameter(const struct FName& nmParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.RemoveParameter");

	UBioPower_RemoveParameter_Params params;
	params.nmParameter = nmParameter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.LoadAdditionalParams
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadAdditionalParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadAdditionalParams");

	UBioPower_LoadAdditionalParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.AutoMapPower
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::AutoMapPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.AutoMapPower");

	UBioPower_AutoMapPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.IsRequiredResourceAvailable
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::IsRequiredResourceAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.IsRequiredResourceAvailable");

	UBioPower_IsRequiredResourceAvailable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.IsRequiredWeaponEquipped
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::IsRequiredWeaponEquipped()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.IsRequiredWeaponEquipped");

	UBioPower_IsRequiredWeaponEquipped_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetDescription
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sDescription                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetDescription(struct FString* sDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetDescription");

	UBioPower_GetDescription_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sDescription != nullptr)
		*sDescription = params.sDescription;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetImpactText
// (Native, Public, HasOutParms)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetImpactText()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetImpactText");

	UBioPower_GetImpactText_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetDisplayName
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sDisplayName                   (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetDisplayName(struct FString* sDisplayName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetDisplayName");

	UBioPower_GetDisplayName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sDisplayName != nullptr)
		*sDisplayName = params.sDisplayName;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetPowerIcon
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPower::GetPowerIcon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetPowerIcon");

	UBioPower_GetPowerIcon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetImpactNoise
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPower::GetImpactNoise()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetImpactNoise");

	UBioPower_GetImpactNoise_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetReleaseNoise
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPower::GetReleaseNoise()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetReleaseNoise");

	UBioPower_GetReleaseNoise_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.CancelDualPower
// (Native, Public)

void UBioPower::CancelDualPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.CancelDualPower");

	UBioPower_CancelDualPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.GetLinkedPower
// (Native, Public)
// Parameters:
// class UBioPower*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioPower* UBioPower::GetLinkedPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetLinkedPower");

	UBioPower_GetLinkedPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.IsDualPowerActive
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::IsDualPowerActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.IsDualPowerActive");

	UBioPower_IsDualPowerActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.CancelPower
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::CancelPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.CancelPower");

	UBioPower_CancelPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.IsActive
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.IsActive");

	UBioPower_IsActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.CanCasterMoveDuringPower
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::CanCasterMoveDuringPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.CanCasterMoveDuringPower");

	UBioPower_CanCasterMoveDuringPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.Tick
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioPower::Tick(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.Tick");

	UBioPower_Tick_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.SetTotalCooldownTime
// (Native, Public)
// Parameters:
// float                          fTotalCooldown                 (Parm)

void UBioPower::SetTotalCooldownTime(float fTotalCooldown)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.SetTotalCooldownTime");

	UBioPower_SetTotalCooldownTime_Params params;
	params.fTotalCooldown = fTotalCooldown;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.GetTotalCooldownTime
// (Native, Public)
// Parameters:
// bool                           bCheckLinkedPower              (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPower::GetTotalCooldownTime(bool bCheckLinkedPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetTotalCooldownTime");

	UBioPower_GetTotalCooldownTime_Params params;
	params.bCheckLinkedPower = bCheckLinkedPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.SetCooldownRemaining
// (Native, Public)
// Parameters:
// float                          fCooldownRemaining             (Parm)
// bool                           bFireCompletionEventIfZero     (OptionalParm, Parm)

void UBioPower::SetCooldownRemaining(float fCooldownRemaining, bool bFireCompletionEventIfZero)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.SetCooldownRemaining");

	UBioPower_SetCooldownRemaining_Params params;
	params.fCooldownRemaining = fCooldownRemaining;
	params.bFireCompletionEventIfZero = bFireCompletionEventIfZero;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.GetCooldownRemaining
// (Native, Public)
// Parameters:
// bool                           bCheckLinkedPower              (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPower::GetCooldownRemaining(bool bCheckLinkedPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetCooldownRemaining");

	UBioPower_GetCooldownRemaining_Params params;
	params.bCheckLinkedPower = bCheckLinkedPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.StopPowerBuildUp
// (Native, Public)
// Parameters:
// class AActor*                  oCaster                        (Parm)
// class AActor*                  oTarget                        (Parm)
// class UBioGameProperty*        oGameProperty                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::StopPowerBuildUp(class AActor* oCaster, class AActor* oTarget, class UBioGameProperty* oGameProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.StopPowerBuildUp");

	UBioPower_StopPowerBuildUp_Params params;
	params.oCaster = oCaster;
	params.oTarget = oTarget;
	params.oGameProperty = oGameProperty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetPowerBuildUp
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oCaster                        (Parm)
// class AActor*                  oTarget                        (Parm)
// float                          fPowerBuildUp                  (Parm, OutParm)
// class UBioGameProperty*        oGameProperty                  (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetPowerBuildUp(class AActor* oCaster, class AActor* oTarget, float* fPowerBuildUp, class UBioGameProperty** oGameProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetPowerBuildUp");

	UBioPower_GetPowerBuildUp_Params params;
	params.oCaster = oCaster;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fPowerBuildUp != nullptr)
		*fPowerBuildUp = params.fPowerBuildUp;
	if (oGameProperty != nullptr)
		*oGameProperty = params.oGameProperty;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.StartPowerBuildUp
// (Native, Public)
// Parameters:
// class AActor*                  oCaster                        (Parm)
// class AActor*                  oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::StartPowerBuildUp(class AActor* oCaster, class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.StartPowerBuildUp");

	UBioPower_StartPowerBuildUp_Params params;
	params.oCaster = oCaster;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.IsSuppressed
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::IsSuppressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.IsSuppressed");

	UBioPower_IsSuppressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.SuppressPower
// (Native, Public)
// Parameters:
// bool                           bSuppress                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPower::SuppressPower(bool bSuppress)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.SuppressPower");

	UBioPower_SuppressPower_Params params;
	params.bSuppress = bSuppress;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.IsEnabled
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.IsEnabled");

	UBioPower_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.EnablePower
// (Native, Public)
// Parameters:
// bool                           bEnable                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::EnablePower(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.EnablePower");

	UBioPower_EnablePower_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetLocation
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioPowerLocation> eLocation                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetLocation(TEnumAsByte<EBioPowerLocation>* eLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetLocation");

	UBioPower_GetLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (eLocation != nullptr)
		*eLocation = params.eLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetImpactShape
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioPowerImpactShape> eShape                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetImpactShape(TEnumAsByte<EBioPowerImpactShape>* eShape)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetImpactShape");

	UBioPower_GetImpactShape_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (eShape != nullptr)
		*eShape = params.eShape;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetProjectileAttachPoint
// (Native, Public, HasOutParms)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// struct FVector                 vAttachPoint                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetProjectileAttachPoint(class APawn* pPawn, struct FVector* vAttachPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetProjectileAttachPoint");

	UBioPower_GetProjectileAttachPoint_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vAttachPoint != nullptr)
		*vAttachPoint = params.vAttachPoint;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetAnim
// (Native, Public, HasOutParms)
// Parameters:
// bool                           bUseCoverAnimations            (Parm)
// struct FString                 sAnim                          (Parm, OutParm, NeedCtorLink)
// struct FName                   nmAnimSet                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetAnim(bool bUseCoverAnimations, struct FString* sAnim, struct FName* nmAnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetAnim");

	UBioPower_GetAnim_Params params;
	params.bUseCoverAnimations = bUseCoverAnimations;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sAnim != nullptr)
		*sAnim = params.sAnim;
	if (nmAnimSet != nullptr)
		*nmAnimSet = params.nmAnimSet;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetParameter
// (Native, Public)
// Parameters:
// struct FName                   nmParameter                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPower::GetParameter(const struct FName& nmParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetParameter");

	UBioPower_GetParameter_Params params;
	params.nmParameter = nmParameter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.DoImpactVFX
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oActor                         (Parm)
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vHitNormal                     (Parm, OutParm)
// class UBioActivePower*         pPowerInstance                 (Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void UBioPower::DoImpactVFX(class AActor* oActor, class UBioActivePower* pPowerInstance, const struct FName& BoneName, struct FVector* vLocation, struct FVector* vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.DoImpactVFX");

	UBioPower_DoImpactVFX_Params params;
	params.oActor = oActor;
	params.pPowerInstance = pPowerInstance;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vHitNormal != nullptr)
		*vHitNormal = params.vHitNormal;
}


// Function BIOC_Base.BioPower.GetVFXLifetime
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)
// class UBioActivePower*         oPowerInstance                 (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPower::GetVFXLifetime(TEnumAsByte<EBioPowerResource> eResource, class UBioActivePower* oPowerInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetVFXLifetime");

	UBioPower_GetVFXLifetime_Params params;
	params.eResource = eResource;
	params.oPowerInstance = oPowerInstance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetVFXTemplate
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)
// class UBioVFXTemplate*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioVFXTemplate* UBioPower::GetVFXTemplate(TEnumAsByte<EBioPowerResource> eResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetVFXTemplate");

	UBioPower_GetVFXTemplate_Params params;
	params.eResource = eResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.EndVisualEffect
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)
// bool                           bAllowVFXToFinish              (OptionalParm, Parm)

void UBioPower::EndVisualEffect(TEnumAsByte<EBioPowerResource> eResource, bool bAllowVFXToFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.EndVisualEffect");

	UBioPower_EndVisualEffect_Params params;
	params.eResource = eResource;
	params.bAllowVFXToFinish = bAllowVFXToFinish;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.GetVisualEffect
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* UBioPower::GetVisualEffect(TEnumAsByte<EBioPowerResource> eResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetVisualEffect");

	UBioPower_GetVisualEffect_Params params;
	params.eResource = eResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.LoadVFXAppearance
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::LoadVFXAppearance()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.LoadVFXAppearance");

	UBioPower_LoadVFXAppearance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.GetPowerScript
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   nmPowerScript                  (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPower::GetPowerScript(struct FName* nmPowerScript)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.GetPowerScript");

	UBioPower_GetPowerScript_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nmPowerScript != nullptr)
		*nmPowerScript = params.nmPowerScript;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPower.CreatePowerIndexMap
// (Native, Static, Public)
// Parameters:
// class UBio2DA*                 oPowers2DA                     (Parm)

void UBioPower::STATIC_CreatePowerIndexMap(class UBio2DA* oPowers2DA)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.CreatePowerIndexMap");

	UBioPower_CreatePowerIndexMap_Params params;
	params.oPowers2DA = oPowers2DA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.InitializePower
// (Native, Public)
// Parameters:
// struct FName                   nmPower                        (Parm)

void UBioPower::InitializePower(const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.InitializePower");

	UBioPower_InitializePower_Params params;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.RemoveFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioPower::RemoveFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.RemoveFloatAttributeModifier");

	UBioPower_RemoveFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.AddFloatAttributeModifier
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// TEnumAsByte<EBioAttrModType>   modType                        (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioPower::AddFloatAttributeModifier(const struct FName& attribute, TEnumAsByte<EBioAttrModType> modType, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.AddFloatAttributeModifier");

	UBioPower_AddFloatAttributeModifier_Params params;
	params.attribute = attribute;
	params.modType = modType;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPower.SetFloatAttribute
// (Native, Public)
// Parameters:
// struct FName                   attribute                      (Parm)
// float                          fValue                         (Parm)
// int                            nIndexOfAttributeInArray       (OptionalParm, Parm)

void UBioPower::SetFloatAttribute(const struct FName& attribute, float fValue, int nIndexOfAttributeInArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPower.SetFloatAttribute");

	UBioPower_SetFloatAttribute_Params params;
	params.attribute = attribute;
	params.fValue = fValue;
	params.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPowerManager.GetAimTargetForPlayer
// (Native, Public, HasOutParms)
// Parameters:
// float                          fMaxRange                      (Parm)
// class AActor*                  oTarget                        (Parm, OutParm)
// struct FVector                 vTargetLocation                (Parm, OutParm)

void UBioPowerManager::GetAimTargetForPlayer(float fMaxRange, class AActor** oTarget, struct FVector* vTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.GetAimTargetForPlayer");

	UBioPowerManager_GetAimTargetForPlayer_Params params;
	params.fMaxRange = fMaxRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oTarget != nullptr)
		*oTarget = params.oTarget;
	if (vTargetLocation != nullptr)
		*vTargetLocation = params.vTargetLocation;
}


// Function BIOC_Base.BioPowerManager.AreActorsFriendly
// (Native, Public)
// Parameters:
// class AActor*                  oFirstActor                    (Parm)
// class AActor*                  oSecondActor                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerManager::AreActorsFriendly(class AActor* oFirstActor, class AActor* oSecondActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.AreActorsFriendly");

	UBioPowerManager_AreActorsFriendly_Params params;
	params.oFirstActor = oFirstActor;
	params.oSecondActor = oSecondActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerManager.CanImpactActor
// (Native, Public)
// Parameters:
// class AActor*                  oActor                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerManager::CanImpactActor(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.CanImpactActor");

	UBioPowerManager_CanImpactActor_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerManager.CheckLOSToLocation
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oSourceActor                   (Parm)
// struct FVector                 vStartLocation                 (Parm)
// struct FVector                 vEndLocation                   (Parm)
// float                          fMaxRange                      (Parm)
// bool                           bIgnoreFriendlies              (Parm)
// class AActor*                  oHitActor                      (Parm, OutParm)
// struct FVector                 vHitLocation                   (Parm, OutParm)
// struct FVector                 vHitNormal                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerManager::CheckLOSToLocation(class AActor* oSourceActor, const struct FVector& vStartLocation, const struct FVector& vEndLocation, float fMaxRange, bool bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.CheckLOSToLocation");

	UBioPowerManager_CheckLOSToLocation_Params params;
	params.oSourceActor = oSourceActor;
	params.vStartLocation = vStartLocation;
	params.vEndLocation = vEndLocation;
	params.fMaxRange = fMaxRange;
	params.bIgnoreFriendlies = bIgnoreFriendlies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oHitActor != nullptr)
		*oHitActor = params.oHitActor;
	if (vHitLocation != nullptr)
		*vHitLocation = params.vHitLocation;
	if (vHitNormal != nullptr)
		*vHitNormal = params.vHitNormal;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerManager.CheckLOSToActor
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oSourceActor                   (Parm)
// class AActor*                  oDestinationActor              (Parm)
// struct FVector                 vStartLocation                 (Parm)
// float                          fMaxRange                      (Parm)
// bool                           bIgnoreFriendlies              (Parm)
// class AActor*                  oHitActor                      (Parm, OutParm)
// struct FVector                 vHitLocation                   (Parm, OutParm)
// struct FVector                 vHitNormal                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerManager::CheckLOSToActor(class AActor* oSourceActor, class AActor* oDestinationActor, const struct FVector& vStartLocation, float fMaxRange, bool bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.CheckLOSToActor");

	UBioPowerManager_CheckLOSToActor_Params params;
	params.oSourceActor = oSourceActor;
	params.oDestinationActor = oDestinationActor;
	params.vStartLocation = vStartLocation;
	params.fMaxRange = fMaxRange;
	params.bIgnoreFriendlies = bIgnoreFriendlies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oHitActor != nullptr)
		*oHitActor = params.oHitActor;
	if (vHitLocation != nullptr)
		*vHitLocation = params.vHitLocation;
	if (vHitNormal != nullptr)
		*vHitNormal = params.vHitNormal;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerManager.RemoveProjectile
// (Native, Public)
// Parameters:
// class ABioLinePowerProjectile* oProjectile                    (Parm)

void UBioPowerManager::RemoveProjectile(class ABioLinePowerProjectile* oProjectile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.RemoveProjectile");

	UBioPowerManager_RemoveProjectile_Params params;
	params.oProjectile = oProjectile;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPowerManager.AddProjectile
// (Native, Public)
// Parameters:
// class ABioLinePowerProjectile* oProjectile                    (Parm)

void UBioPowerManager::AddProjectile(class ABioLinePowerProjectile* oProjectile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.AddProjectile");

	UBioPowerManager_AddProjectile_Params params;
	params.oProjectile = oProjectile;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPowerManager.GetCurrentArmorEmitterPower
// (Native, Public, HasOutParms)
// Parameters:
// class UBioEpicPawnBehavior*    oBehavior                      (Parm)
// class UBioPower*               oPower                         (Parm, OutParm)
// int                            nIndexInPowerArray             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerManager::GetCurrentArmorEmitterPower(class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.GetCurrentArmorEmitterPower");

	UBioPowerManager_GetCurrentArmorEmitterPower_Params params;
	params.oBehavior = oBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oPower != nullptr)
		*oPower = params.oPower;
	if (nIndexInPowerArray != nullptr)
		*nIndexInPowerArray = params.nIndexInPowerArray;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerManager.GetCurrentHealPower
// (Native, Public, HasOutParms)
// Parameters:
// class UBioEpicPawnBehavior*    oBehavior                      (Parm)
// class UBioPower*               oPower                         (Parm, OutParm)
// int                            nIndexInPowerArray             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerManager::GetCurrentHealPower(class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.GetCurrentHealPower");

	UBioPowerManager_GetCurrentHealPower_Params params;
	params.oBehavior = oBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oPower != nullptr)
		*oPower = params.oPower;
	if (nIndexInPowerArray != nullptr)
		*nIndexInPowerArray = params.nIndexInPowerArray;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPowerManager.GetCurrentWeaponPower
// (Native, Public, HasOutParms)
// Parameters:
// class UBioEpicPawnBehavior*    oBehavior                      (Parm)
// class UBioPower*               oPower                         (Parm, OutParm)
// int                            nIndexInPowerArray             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPowerManager::GetCurrentWeaponPower(class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPowerManager.GetCurrentWeaponPower");

	UBioPowerManager_GetCurrentWeaponPower_Params params;
	params.oBehavior = oBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oPower != nullptr)
		*oPower = params.oPower;
	if (nIndexInPowerArray != nullptr)
		*nIndexInPowerArray = params.nIndexInPowerArray;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMaterialOverride.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioMaterialOverride::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMaterialOverride.GetSaveObjectClass");

	UBioMaterialOverride_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffect.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffect::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffect.Unapply");

	UBioGameEffect_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffect.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffect::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffect.Apply");

	UBioGameEffect_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffect.GetActorFromTarget
// (Native, Protected)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioGameEffect::GetActorFromTarget(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffect.GetActorFromTarget");

	UBioGameEffect_GetActorFromTarget_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffect.Scale
// (Final, Native, Public)
// Parameters:
// int                            nRank                          (Parm)

void UBioGameEffect::Scale(int nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffect.Scale");

	UBioGameEffect_Scale_Params params;
	params.nRank = nRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffect.SetScalingData
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UBio2DA*                 pEffectLevels2DA               (Parm)
// TArray<int>                    aEffectLevelRows               (Const, Parm, OutParm, NeedCtorLink)
// int                            maxRanks                       (Const, Parm, OutParm)

void UBioGameEffect::SetScalingData(class UBio2DA* pEffectLevels2DA, TArray<int>* aEffectLevelRows, int* maxRanks)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffect.SetScalingData");

	UBioGameEffect_SetScalingData_Params params;
	params.pEffectLevels2DA = pEffectLevels2DA;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aEffectLevelRows != nullptr)
		*aEffectLevelRows = params.aEffectLevelRows;
	if (maxRanks != nullptr)
		*maxRanks = params.maxRanks;
}


// Function BIOC_Base.BioGameEffect.Update
// (Event, Public)
// Parameters:
// class UObject*                 oTarget                        (OptionalParm, Parm)

void UBioGameEffect::Update(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffect.Update");

	UBioGameEffect_Update_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffect.Tick
// (Event, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// float                          fDeltaTime                     (Parm)

void UBioGameEffect::Tick(class UObject* oTarget, float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffect.Tick");

	UBioGameEffect_Tick_Params params;
	params.oTarget = oTarget;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAddForce.GetClosestBone
// (Final, Native, Private)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioGameEffectAddForce::GetClosestBone(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddForce.GetClosestBone");

	UBioGameEffectAddForce_GetClosestBone_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAddForce.Decelerate
// (Final, Native, Private)
// Parameters:
// class AActor*                  oActor                         (Parm)

void UBioGameEffectAddForce::Decelerate(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddForce.Decelerate");

	UBioGameEffectAddForce_Decelerate_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAddForce.Tick
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// float                          fDeltaTime                     (Parm)

void UBioGameEffectAddForce::Tick(class UObject* oTarget, float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddForce.Tick");

	UBioGameEffectAddForce_Tick_Params params;
	params.oTarget = oTarget;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAddForce.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAddForce::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddForce.Unapply");

	UBioGameEffectAddForce_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAddForce.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAddForce::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddForce.Apply");

	UBioGameEffectAddForce_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAddForce.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// struct FVector                 vForce                         (Parm)
// struct FName                   nmBoneName                     (Parm)
// struct FVector                 vPosition                      (Parm)
// struct FVector                 vDestination                   (Parm)
// bool                           bDecelerateAtDestination       (Parm)
// struct FVector                 vDeceleration                  (Parm)
// float                          fMinVelocity                   (Parm)
// class AActor*                  oInstigator                    (Parm)
// bool                           bApplyToAllBones               (Parm)

void UBioGameEffectAddForce::STATIC_Create(class UBioGameProperty* oProperty, const struct FVector& vForce, const struct FName& nmBoneName, const struct FVector& vPosition, const struct FVector& vDestination, bool bDecelerateAtDestination, const struct FVector& vDeceleration, float fMinVelocity, class AActor* oInstigator, bool bApplyToAllBones)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddForce.Create");

	UBioGameEffectAddForce_Create_Params params;
	params.oProperty = oProperty;
	params.vForce = vForce;
	params.nmBoneName = nmBoneName;
	params.vPosition = vPosition;
	params.vDestination = vDestination;
	params.bDecelerateAtDestination = bDecelerateAtDestination;
	params.vDeceleration = vDeceleration;
	params.fMinVelocity = fMinVelocity;
	params.oInstigator = oInstigator;
	params.bApplyToAllBones = bApplyToAllBones;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAddItemProperty.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAddItemProperty::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddItemProperty.Unapply");

	UBioGameEffectAddItemProperty_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAddItemProperty.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAddItemProperty::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAddItemProperty.Apply");

	UBioGameEffectAddItemProperty_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAdjustStability.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAdjustStability::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAdjustStability.Apply");

	UBioGameEffectAdjustStability_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAdjustStability.Create
// (Defined, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// float                          fAmount                        (Parm)

void UBioGameEffectAdjustStability::STATIC_Create(class UBioGameProperty* oProperty, float fAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAdjustStability.Create");

	UBioGameEffectAdjustStability_Create_Params params;
	params.oProperty = oProperty;
	params.fAmount = fAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttribute.GetAttributes
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UBioAttributes*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioAttributes* UBioGameEffectAttribute::GetAttributes(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttribute.GetAttributes");

	UBioGameEffectAttribute_GetAttributes_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttribute.StaticGetAttributes
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// TEnumAsByte<EBioGameEffectAttributeType> eType                          (Parm)
// class UBioAttributes*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioAttributes* UBioGameEffectAttribute::StaticGetAttributes(class UObject* oTarget, TEnumAsByte<EBioGameEffectAttributeType> eType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttribute.StaticGetAttributes");

	UBioGameEffectAttribute_StaticGetAttributes_Params params;
	params.oTarget = oTarget;
	params.eType = eType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttribute.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttribute::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttribute.Unapply");

	UBioGameEffectAttribute_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttribute.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttribute::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttribute.Apply");

	UBioGameEffectAttribute_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttributeBool.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// bool                           bValue                         (Parm)
// struct FName                   nmAttributeName                (Parm)
// TEnumAsByte<EBioGameEffectAttributeType> eType                          (Parm)
// bool                           bSetToOppositeOnUnapply        (Parm)

void UBioGameEffectAttributeBool::STATIC_Create(class UBioGameProperty* oProperty, bool bValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeType> eType, bool bSetToOppositeOnUnapply)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeBool.Create");

	UBioGameEffectAttributeBool_Create_Params params;
	params.oProperty = oProperty;
	params.bValue = bValue;
	params.nmAttributeName = nmAttributeName;
	params.eType = eType;
	params.bSetToOppositeOnUnapply = bSetToOppositeOnUnapply;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeBool.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttributeBool::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeBool.Unapply");

	UBioGameEffectAttributeBool_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeBool.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttributeBool::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeBool.Apply");

	UBioGameEffectAttributeBool_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttributeByte.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// unsigned char                  Value                          (Parm)
// struct FName                   nmAttributeName                (Parm)
// TEnumAsByte<EBioGameEffectAttributeType> eType                          (Parm)
// bool                           bZeroOnUnapply                 (Parm)

void UBioGameEffectAttributeByte::STATIC_Create(class UBioGameProperty* oProperty, unsigned char Value, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeType> eType, bool bZeroOnUnapply)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeByte.Create");

	UBioGameEffectAttributeByte_Create_Params params;
	params.oProperty = oProperty;
	params.Value = Value;
	params.nmAttributeName = nmAttributeName;
	params.eType = eType;
	params.bZeroOnUnapply = bZeroOnUnapply;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeByte.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttributeByte::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeByte.Unapply");

	UBioGameEffectAttributeByte_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeByte.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttributeByte::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeByte.Apply");

	UBioGameEffectAttributeByte_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttributeString.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttributeString::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeString.Unapply");

	UBioGameEffectAttributeString_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeString.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttributeString::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeString.Apply");

	UBioGameEffectAttributeString_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttributeEnum.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttributeEnum::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeEnum.Apply");

	UBioGameEffectAttributeEnum_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttributeNumeric.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttributeNumeric::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeNumeric.Unapply");

	UBioGameEffectAttributeNumeric_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeNumeric.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttributeNumeric::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeNumeric.Apply");

	UBioGameEffectAttributeNumeric_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttributeFloat.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        GP                             (Parm)
// float                          fValue                         (Parm)
// struct FName                   nmAttributeName                (Parm)
// TEnumAsByte<EBioGameEffectAttributeAspect> eAspect                        (Parm)
// TEnumAsByte<EBioAttrModType>   eModifier                      (Parm)
// TEnumAsByte<EBioGameEffectAttributeType> eType                          (Parm)
// int                            nIndex                         (Parm)

void UBioGameEffectAttributeFloat::STATIC_Create(class UBioGameProperty* GP, float fValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeAspect> eAspect, TEnumAsByte<EBioAttrModType> eModifier, TEnumAsByte<EBioGameEffectAttributeType> eType, int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeFloat.Create");

	UBioGameEffectAttributeFloat_Create_Params params;
	params.GP = GP;
	params.fValue = fValue;
	params.nmAttributeName = nmAttributeName;
	params.eAspect = eAspect;
	params.eModifier = eModifier;
	params.eType = eType;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeFloat.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttributeFloat::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeFloat.Unapply");

	UBioGameEffectAttributeFloat_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeFloat.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttributeFloat::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeFloat.Apply");

	UBioGameEffectAttributeFloat_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectAttributeInt.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        GP                             (Parm)
// int                            nValue                         (Parm)
// struct FName                   nmAttributeName                (Parm)
// TEnumAsByte<EBioGameEffectAttributeAspect> eAspect                        (Parm)
// TEnumAsByte<EBioAttrModType>   eModifier                      (Parm)
// TEnumAsByte<EBioGameEffectAttributeType> eType                          (Parm)
// int                            nIndex                         (Parm)
// bool                           bSetToZeroOnUnapply            (Parm)

void UBioGameEffectAttributeInt::STATIC_Create(class UBioGameProperty* GP, int nValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeAspect> eAspect, TEnumAsByte<EBioAttrModType> eModifier, TEnumAsByte<EBioGameEffectAttributeType> eType, int nIndex, bool bSetToZeroOnUnapply)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeInt.Create");

	UBioGameEffectAttributeInt_Create_Params params;
	params.GP = GP;
	params.nValue = nValue;
	params.nmAttributeName = nmAttributeName;
	params.eAspect = eAspect;
	params.eModifier = eModifier;
	params.eType = eType;
	params.nIndex = nIndex;
	params.bSetToZeroOnUnapply = bSetToZeroOnUnapply;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeInt.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttributeInt::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeInt.Unapply");

	UBioGameEffectAttributeInt_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeInt.RemoveModifier
// (Native, Public)
// Parameters:
// class UBioAttributes*          attribs                        (Parm)

void UBioGameEffectAttributeInt::RemoveModifier(class UBioAttributes* attribs)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeInt.RemoveModifier");

	UBioGameEffectAttributeInt_RemoveModifier_Params params;
	params.attribs = attribs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeInt.AddModifier
// (Native, Public)
// Parameters:
// class UBioAttributes*          attribs                        (Parm)

void UBioGameEffectAttributeInt::AddModifier(class UBioAttributes* attribs)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeInt.AddModifier");

	UBioGameEffectAttributeInt_AddModifier_Params params;
	params.attribs = attribs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeInt.SetBase
// (Native, Public)
// Parameters:
// class UBioAttributes*          attribs                        (Parm)

void UBioGameEffectAttributeInt::SetBase(class UBioAttributes* attribs)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeInt.SetBase");

	UBioGameEffectAttributeInt_SetBase_Params params;
	params.attribs = attribs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeName.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// struct FName                   nmValue                        (Parm)
// struct FName                   nmAttributeName                (Parm)
// TEnumAsByte<EBioGameEffectAttributeType> eType                          (Parm)
// bool                           bSetToNoneOnUnapply            (Parm)

void UBioGameEffectAttributeName::STATIC_Create(class UBioGameProperty* oProperty, const struct FName& nmValue, const struct FName& nmAttributeName, TEnumAsByte<EBioGameEffectAttributeType> eType, bool bSetToNoneOnUnapply)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeName.Create");

	UBioGameEffectAttributeName_Create_Params params;
	params.oProperty = oProperty;
	params.nmValue = nmValue;
	params.nmAttributeName = nmAttributeName;
	params.eType = eType;
	params.bSetToNoneOnUnapply = bSetToNoneOnUnapply;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeName.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectAttributeName::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeName.Unapply");

	UBioGameEffectAttributeName_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectAttributeName.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectAttributeName::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectAttributeName.Apply");

	UBioGameEffectAttributeName_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectDisableAI.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectDisableAI::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectDisableAI.Unapply");

	UBioGameEffectDisableAI_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectDisableAI.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectDisableAI::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectDisableAI.Apply");

	UBioGameEffectDisableAI_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectDisableAI.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// TEnumAsByte<EDisableType>      eType                          (Parm)
// struct FName                   nmSubType                      (Parm)

void UBioGameEffectDisableAI::STATIC_Create(class UBioGameProperty* oProperty, TEnumAsByte<EDisableType> eType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectDisableAI.Create");

	UBioGameEffectDisableAI_Create_Params params;
	params.oProperty = oProperty;
	params.eType = eType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectDmgVulnerability.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectDmgVulnerability::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectDmgVulnerability.Unapply");

	UBioGameEffectDmgVulnerability_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectDmgVulnerability.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectDmgVulnerability::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectDmgVulnerability.Apply");

	UBioGameEffectDmgVulnerability_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectDmgVulnerability.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// float                          fDamageVulnerability           (Parm)

void UBioGameEffectDmgVulnerability::STATIC_Create(class UBioGameProperty* oProperty, float fDamageVulnerability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectDmgVulnerability.Create");

	UBioGameEffectDmgVulnerability_Create_Params params;
	params.oProperty = oProperty;
	params.fDamageVulnerability = fDamageVulnerability;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectGiveGP.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectGiveGP::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectGiveGP.Unapply");

	UBioGameEffectGiveGP_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectGiveGP.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectGiveGP::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectGiveGP.Apply");

	UBioGameEffectGiveGP_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectGiveGP.SetGP
// (Final, Defined, Public)
// Parameters:
// class UBioGameProperty*        pGP                            (Parm)

void UBioGameEffectGiveGP::SetGP(class UBioGameProperty* pGP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectGiveGP.SetGP");

	UBioGameEffectGiveGP_SetGP_Params params;
	params.pGP = pGP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectHackAI.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// class UBioEpicPawnBehavior*    oHacker                        (Parm)

void UBioGameEffectHackAI::STATIC_Create(class UBioGameProperty* oProperty, class UBioEpicPawnBehavior* oHacker)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHackAI.Create");

	UBioGameEffectHackAI_Create_Params params;
	params.oProperty = oProperty;
	params.oHacker = oHacker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectHackAI.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 pTarget                        (Parm)

void UBioGameEffectHackAI::Unapply(class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHackAI.Unapply");

	UBioGameEffectHackAI_Unapply_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectHackAI.Apply
// (Native, Public)
// Parameters:
// class UObject*                 pTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectHackAI::Apply(class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHackAI.Apply");

	UBioGameEffectHackAI_Apply_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectHackAI.InitializeHackAI
// (Defined, Event, Public)
// Parameters:
// class UBioEpicPawnBehavior*    pSourceBehavior                (Parm)

void UBioGameEffectHackAI::InitializeHackAI(class UBioEpicPawnBehavior* pSourceBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHackAI.InitializeHackAI");

	UBioGameEffectHackAI_InitializeHackAI_Params params;
	params.pSourceBehavior = pSourceBehavior;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectHeadExplode.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectHeadExplode::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHeadExplode.Unapply");

	UBioGameEffectHeadExplode_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectHeadExplode.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectHeadExplode::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHeadExplode.Apply");

	UBioGameEffectHeadExplode_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectHeal.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectHeal::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHeal.Apply");

	UBioGameEffectHeal_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectHeal.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// float                          fHealthAmount                  (Parm)
// float                          fToxicAmount                   (Parm)
// float                          fResourcesRequired             (Parm)

void UBioGameEffectHeal::STATIC_Create(class UBioGameProperty* oProperty, float fHealthAmount, float fToxicAmount, float fResourcesRequired)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectHeal.Create");

	UBioGameEffectHeal_Create_Params params;
	params.oProperty = oProperty;
	params.fHealthAmount = fHealthAmount;
	params.fToxicAmount = fToxicAmount;
	params.fResourcesRequired = fResourcesRequired;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectImporter.CreateGameEffect
// (Native, Static, Public)
// Parameters:
// class UObject*                 _outer                         (Parm)
// class UBio2DA*                 gameEffectTable                (Parm)
// int                            nGameEffectID                  (Parm)
// class UBioGameEffect*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGameEffect* UBioGameEffectImporter::STATIC_CreateGameEffect(class UObject* _outer, class UBio2DA* gameEffectTable, int nGameEffectID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectImporter.CreateGameEffect");

	UBioGameEffectImporter_CreateGameEffect_Params params;
	params._outer = _outer;
	params.gameEffectTable = gameEffectTable;
	params.nGameEffectID = nGameEffectID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectItemAddXModSlots.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)

void UBioGameEffectItemAddXModSlots::Unapply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectItemAddXModSlots.Unapply");

	UBioGameEffectItemAddXModSlots_Unapply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectItemAddXModSlots.Apply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectItemAddXModSlots::Apply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectItemAddXModSlots.Apply");

	UBioGameEffectItemAddXModSlots_Apply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectItemPopXModSlots.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)

void UBioGameEffectItemPopXModSlots::Unapply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectItemPopXModSlots.Unapply");

	UBioGameEffectItemPopXModSlots_Unapply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectItemPopXModSlots.Apply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectItemPopXModSlots::Apply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectItemPopXModSlots.Apply");

	UBioGameEffectItemPopXModSlots_Apply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectItemRemoveXModSlot.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)

void UBioGameEffectItemRemoveXModSlot::Unapply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectItemRemoveXModSlot.Unapply");

	UBioGameEffectItemRemoveXModSlot_Unapply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectItemRemoveXModSlot.Apply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectItemRemoveXModSlot::Apply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectItemRemoveXModSlot.Apply");

	UBioGameEffectItemRemoveXModSlot_Apply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectModifyGravity.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectModifyGravity::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectModifyGravity.Unapply");

	UBioGameEffectModifyGravity_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectModifyGravity.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectModifyGravity::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectModifyGravity.Apply");

	UBioGameEffectModifyGravity_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectModifyGravity.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// float                          fScalingValue                  (Parm)

void UBioGameEffectModifyGravity::STATIC_Create(class UBioGameProperty* oProperty, float fScalingValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectModifyGravity.Create");

	UBioGameEffectModifyGravity_Create_Params params;
	params.oProperty = oProperty;
	params.fScalingValue = fScalingValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerAttributeBool.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectPowerAttributeBool::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerAttributeBool.Unapply");

	UBioGameEffectPowerAttributeBool_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerAttributeBool.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectPowerAttributeBool::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerAttributeBool.Apply");

	UBioGameEffectPowerAttributeBool_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectPowerAttributeFloat.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectPowerAttributeFloat::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerAttributeFloat.Unapply");

	UBioGameEffectPowerAttributeFloat_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerAttributeFloat.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectPowerAttributeFloat::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerAttributeFloat.Apply");

	UBioGameEffectPowerAttributeFloat_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectPowerBuildUp.Tick
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// float                          fDeltaTime                     (Parm)

void UBioGameEffectPowerBuildUp::Tick(class UObject* oTarget, float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerBuildUp.Tick");

	UBioGameEffectPowerBuildUp_Tick_Params params;
	params.oTarget = oTarget;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerBuildUp.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectPowerBuildUp::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerBuildUp.Unapply");

	UBioGameEffectPowerBuildUp_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerBuildUp.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectPowerBuildUp::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerBuildUp.Apply");

	UBioGameEffectPowerBuildUp_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectPowerBuildUp.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// class UBioPower*               oPower                         (Parm)
// float                          fTimeOut                       (Parm)

void UBioGameEffectPowerBuildUp::STATIC_Create(class UBioGameProperty* oProperty, class UBioPower* oPower, float fTimeOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerBuildUp.Create");

	UBioGameEffectPowerBuildUp_Create_Params params;
	params.oProperty = oProperty;
	params.oPower = oPower;
	params.fTimeOut = fTimeOut;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerGive.Create
// (Defined, Static, Public)
// Parameters:
// class UBioGameProperty*        GP                             (Parm)
// struct FName                   powerName                      (Parm)

void UBioGameEffectPowerGive::STATIC_Create(class UBioGameProperty* GP, const struct FName& powerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerGive.Create");

	UBioGameEffectPowerGive_Create_Params params;
	params.GP = GP;
	params.powerName = powerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerGive.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectPowerGive::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerGive.Apply");

	UBioGameEffectPowerGive_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectPowerParameter.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectPowerParameter::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerParameter.Unapply");

	UBioGameEffectPowerParameter_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerParameter.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectPowerParameter::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerParameter.Apply");

	UBioGameEffectPowerParameter_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectPowerText.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectPowerText::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerText.Unapply");

	UBioGameEffectPowerText_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectPowerText.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectPowerText::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerText.Apply");

	UBioGameEffectPowerText_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectPowerText.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)

void UBioGameEffectPowerText::STATIC_Create(class UBioGameProperty* oProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectPowerText.Create");

	UBioGameEffectPowerText_Create_Params params;
	params.oProperty = oProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectRagdoll.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectRagdoll::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectRagdoll.Unapply");

	UBioGameEffectRagdoll_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectRagdoll.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectRagdoll::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectRagdoll.Apply");

	UBioGameEffectRagdoll_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectRagdoll.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)

void UBioGameEffectRagdoll::STATIC_Create(class UBioGameProperty* oProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectRagdoll.Create");

	UBioGameEffectRagdoll_Create_Params params;
	params.oProperty = oProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectRegenerateShield.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectRegenerateShield::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectRegenerateShield.Apply");

	UBioGameEffectRegenerateShield_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectRegenerateShield.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// float                          fAmount                        (Parm)

void UBioGameEffectRegenerateShield::STATIC_Create(class UBioGameProperty* oProperty, float fAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectRegenerateShield.Create");

	UBioGameEffectRegenerateShield_Create_Params params;
	params.oProperty = oProperty;
	params.fAmount = fAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectSetMaterialParameterColor.Apply
// (Native, Event, Public)
// Parameters:
// class UObject*                 pTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectSetMaterialParameterColor::Apply(class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSetMaterialParameterColor.Apply");

	UBioGameEffectSetMaterialParameterColor_Apply_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectSetMaterialParameterScalar.Apply
// (Native, Event, Public)
// Parameters:
// class UObject*                 pTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectSetMaterialParameterScalar::Apply(class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSetMaterialParameterScalar.Apply");

	UBioGameEffectSetMaterialParameterScalar_Apply_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectSetMaterialParameterTexture.Apply
// (Native, Event, Public)
// Parameters:
// class UObject*                 pTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectSetMaterialParameterTexture::Apply(class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSetMaterialParameterTexture.Apply");

	UBioGameEffectSetMaterialParameterTexture_Apply_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectSetProperty.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 pTarget                        (Parm)

void UBioGameEffectSetProperty::Unapply(class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSetProperty.Unapply");

	UBioGameEffectSetProperty_Unapply_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectSetProperty.Apply
// (Native, Public)
// Parameters:
// class UObject*                 pTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectSetProperty::Apply(class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSetProperty.Apply");

	UBioGameEffectSetProperty_Apply_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectSingularity.MoveActor
// (Native, Public)
// Parameters:
// class AActor*                  oActor                         (Parm)

void UBioGameEffectSingularity::MoveActor(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSingularity.MoveActor");

	UBioGameEffectSingularity_MoveActor_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectSingularity.Tick
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// float                          fDeltaTime                     (Parm)

void UBioGameEffectSingularity::Tick(class UObject* oTarget, float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSingularity.Tick");

	UBioGameEffectSingularity_Tick_Params params;
	params.oTarget = oTarget;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectSingularity.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectSingularity::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSingularity.Unapply");

	UBioGameEffectSingularity_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectSingularity.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectSingularity::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSingularity.Apply");

	UBioGameEffectSingularity_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectSingularity.Create
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// struct FVector                 vSingularityLocation           (Parm)
// float                          fForce                         (Parm)
// struct FName                   nmBoneName                     (Parm)
// struct FVector                 vPosition                      (Parm)
// float                          fForceInterval                 (Parm)
// float                          fOuterBubbleRange              (Parm)
// float                          fVelocityThresholdOuterBubble  (Parm)
// float                          fInnerBubbleRange              (Parm)
// float                          fBubbleForce                   (Parm)

void UBioGameEffectSingularity::STATIC_Create(class UBioGameProperty* oProperty, const struct FVector& vSingularityLocation, float fForce, const struct FName& nmBoneName, const struct FVector& vPosition, float fForceInterval, float fOuterBubbleRange, float fVelocityThresholdOuterBubble, float fInnerBubbleRange, float fBubbleForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSingularity.Create");

	UBioGameEffectSingularity_Create_Params params;
	params.oProperty = oProperty;
	params.vSingularityLocation = vSingularityLocation;
	params.fForce = fForce;
	params.nmBoneName = nmBoneName;
	params.vPosition = vPosition;
	params.fForceInterval = fForceInterval;
	params.fOuterBubbleRange = fOuterBubbleRange;
	params.fVelocityThresholdOuterBubble = fVelocityThresholdOuterBubble;
	params.fInnerBubbleRange = fInnerBubbleRange;
	params.fBubbleForce = fBubbleForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectSuppression.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameEffectSuppression::Unapply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSuppression.Unapply");

	UBioGameEffectSuppression_Unapply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectSuppression.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectSuppression::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSuppression.Apply");

	UBioGameEffectSuppression_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectSuppression.Create
// (Defined, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)

void UBioGameEffectSuppression::STATIC_Create(class UBioGameProperty* oProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectSuppression.Create");

	UBioGameEffectSuppression_Create_Params params;
	params.oProperty = oProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameEffectTakeDamage.Apply
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGameEffectTakeDamage::Apply(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectTakeDamage.Apply");

	UBioGameEffectTakeDamage_Apply_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameEffectTakeDamage.Create
// (Defined, Static, Public)
// Parameters:
// class UBioGameProperty*        oProperty                      (Parm)
// float                          fDamage                        (Parm)
// class AController*             oInstigatorController          (Parm)
// struct FVector                 vHitLocation                   (Parm)
// struct FVector                 vMomentum                      (Parm)
// class UBioDamageType*          pDamage                        (Parm)

void UBioGameEffectTakeDamage::STATIC_Create(class UBioGameProperty* oProperty, float fDamage, class AController* oInstigatorController, const struct FVector& vHitLocation, const struct FVector& vMomentum, class UBioDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameEffectTakeDamage.Create");

	UBioGameEffectTakeDamage_Create_Params params;
	params.oProperty = oProperty;
	params.fDamage = fDamage;
	params.oInstigatorController = oInstigatorController;
	params.vHitLocation = vHitLocation;
	params.vMomentum = vMomentum;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioFSM.GetStateByIndex
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// class UBioState*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioState* UBioFSM::GetStateByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSM.GetStateByIndex");

	UBioFSM_GetStateByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFSM.DEBUG_DumpStates
// (Defined, Public)
// Parameters:
// class ABioPlayerController*    BPC                            (Parm)

void UBioFSM::DEBUG_DumpStates(class ABioPlayerController* BPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSM.DEBUG_DumpStates");

	UBioFSM_DEBUG_DumpStates_Params params;
	params.BPC = BPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioFSM.GetState
// (Defined, Event, Public)
// Parameters:
// struct FName                   RequestedState                 (Parm)
// class UBioState*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioState* UBioFSM::GetState(const struct FName& RequestedState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSM.GetState");

	UBioFSM_GetState_Params params;
	params.RequestedState = RequestedState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFSMComponent.IsTransitioning
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioFSMComponent::IsTransitioning()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.IsTransitioning");

	UBioFSMComponent_IsTransitioning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFSMComponent.CallTransitionDelegate
// (Defined, Event, Public)
// Parameters:
// struct FName                   From                           (Parm)
// struct FName                   To                             (Parm)

void UBioFSMComponent::CallTransitionDelegate(const struct FName& From, const struct FName& To)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.CallTransitionDelegate");

	UBioFSMComponent_CallTransitionDelegate_Params params;
	params.From = From;
	params.To = To;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioFSMComponent.TransitionStarted
// (Event, Public)

void UBioFSMComponent::TransitionStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.TransitionStarted");

	UBioFSMComponent_TransitionStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioFSMComponent.HasState
// (Defined, Event, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioFSMComponent::HasState(const struct FName& ToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.HasState");

	UBioFSMComponent_HasState_Params params;
	params.ToState = ToState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFSMComponent.SetState
// (Native, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// struct FName                   NamedTransition                (OptionalParm, Parm)
// bool                           IgnoreTransition               (OptionalParm, Parm)
// bool                           bForceStateNow                 (OptionalParm, Parm)
// class UBioState*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioState* UBioFSMComponent::SetState(const struct FName& ToState, const struct FName& NamedTransition, bool IgnoreTransition, bool bForceStateNow)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.SetState");

	UBioFSMComponent_SetState_Params params;
	params.ToState = ToState;
	params.NamedTransition = NamedTransition;
	params.IgnoreTransition = IgnoreTransition;
	params.bForceStateNow = bForceStateNow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFSMComponent.GetTransition
// (Defined, Event, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// struct FName                   NamedTransition                (OptionalParm, Parm)
// class UBioTransition*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioTransition* UBioFSMComponent::GetTransition(const struct FName& ToState, const struct FName& NamedTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.GetTransition");

	UBioFSMComponent_GetTransition_Params params;
	params.ToState = ToState;
	params.NamedTransition = NamedTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFSMComponent.TransitionComplete
// (Native, Public)

void UBioFSMComponent::TransitionComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.TransitionComplete");

	UBioFSMComponent_TransitionComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioFSMComponent.OnTransitionDelegate
// (Public, Delegate)
// Parameters:
// struct FName                   FromState                      (Parm)
// struct FName                   ToState                        (Parm)
// bool                           bCallCPP                       (Parm)

void UBioFSMComponent::OnTransitionDelegate(const struct FName& FromState, const struct FName& ToState, bool bCallCPP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFSMComponent.OnTransitionDelegate");

	UBioFSMComponent_OnTransitionDelegate_Params params;
	params.FromState = FromState;
	params.ToState = ToState;
	params.bCallCPP = bCallCPP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioState.GetTransition
// (Defined, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// struct FName                   NamedTransition                (OptionalParm, Parm)
// class UBioTransition*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioTransition* UBioState::GetTransition(const struct FName& ToState, const struct FName& NamedTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioState.GetTransition");

	UBioState_GetTransition_Params params;
	params.ToState = ToState;
	params.NamedTransition = NamedTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioState.HasTransitionTo
// (Defined, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// struct FName                   NamedTransition                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioState::HasTransitionTo(const struct FName& ToState, const struct FName& NamedTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioState.HasTransitionTo");

	UBioState_HasTransitionTo_Params params;
	params.ToState = ToState;
	params.NamedTransition = NamedTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.BioVINCE_MapName_MissingLipSync
// (Native, Public)

void UBioConversation::BioVINCE_MapName_MissingLipSync()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.BioVINCE_MapName_MissingLipSync");

	UBioConversation_BioVINCE_MapName_MissingLipSync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.BioVINCE_MapName_MissingVO
// (Native, Public)

void UBioConversation::BioVINCE_MapName_MissingVO()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.BioVINCE_MapName_MissingVO");

	UBioConversation_BioVINCE_MapName_MissingVO_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.GetReplyGUIStyle
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EConvGUIStyles>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EConvGUIStyles> UBioConversation::GetReplyGUIStyle(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetReplyGUIStyle");

	UBioConversation_GetReplyGUIStyle_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.FinishEntryNode
// (Native, Public)
// Parameters:
// int                            nEntryIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::FinishEntryNode(int nEntryIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.FinishEntryNode");

	UBioConversation_FinishEntryNode_Params params;
	params.nEntryIndex = nEntryIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.NeedToDisplayReplies
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::NeedToDisplayReplies()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.NeedToDisplayReplies");

	UBioConversation_NeedToDisplayReplies_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.StopScript
// (Native, Public)
// Parameters:
// struct FString                 script                         (Parm, NeedCtorLink)

void UBioConversation::StopScript(const struct FString& script)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.StopScript");

	UBioConversation_StopScript_Params params;
	params.script = script;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.GetReplyExportID
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioConversation::GetReplyExportID(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetReplyExportID");

	UBioConversation_GetReplyExportID_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.GetReplyCategory
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioConversation::GetReplyCategory(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetReplyCategory");

	UBioConversation_GetReplyCategory_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.GetReplyParaphraseText
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConversation::GetReplyParaphraseText(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetReplyParaphraseText");

	UBioConversation_GetReplyParaphraseText_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.GetReplyText
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           bParse                         (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConversation::GetReplyText(int nIndex, bool bParse)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetReplyText");

	UBioConversation_GetReplyText_Params params;
	params.nIndex = nIndex;
	params.bParse = bParse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.GetEntryText
// (Native, Public)
// Parameters:
// bool                           bParse                         (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioConversation::GetEntryText(bool bParse)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetEntryText");

	UBioConversation_GetEntryText_Params params;
	params.bParse = bParse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.GetSpeaker
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioConversation::GetSpeaker(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetSpeaker");

	UBioConversation_GetSpeaker_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.UpdateFacing
// (Native, Public)

void UBioConversation::UpdateFacing()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.UpdateFacing");

	UBioConversation_UpdateFacing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.UpdateLookAtTargets
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioConversation::UpdateLookAtTargets(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.UpdateLookAtTargets");

	UBioConversation_UpdateLookAtTargets_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.UpdateLookAtList
// (Native, Public)
// Parameters:
// class ABioPawn*                pBioPawn                       (Parm)

void UBioConversation::UpdateLookAtList(class ABioPawn* pBioPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.UpdateLookAtList");

	UBioConversation_UpdateLookAtList_Params params;
	params.pBioPawn = pBioPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.switchToAmbient
// (Native, Public)

void UBioConversation::switchToAmbient()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.switchToAmbient");

	UBioConversation_switchToAmbient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.IsAmbient
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::IsAmbient()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.IsAmbient");

	UBioConversation_IsAmbient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.WaitingForReply
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::WaitingForReply()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.WaitingForReply");

	UBioConversation_WaitingForReply_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.SkipNode
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::SkipNode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.SkipNode");

	UBioConversation_SkipNode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.FinishSelectedReply
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::FinishSelectedReply()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.FinishSelectedReply");

	UBioConversation_FinishSelectedReply_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.QueueReply
// (Native, Public)
// Parameters:
// int                            nReply                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::QueueReply(int nReply)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.QueueReply");

	UBioConversation_QueueReply_Params params;
	params.nReply = nReply;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.SelectReply
// (Native, Public)
// Parameters:
// int                            nReply                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::SelectReply(int nReply)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.SelectReply");

	UBioConversation_SelectReply_Params params;
	params.nReply = nReply;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.UpdateConversation
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::UpdateConversation(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.UpdateConversation");

	UBioConversation_UpdateConversation_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.EndConversation
// (Native, Public)

void UBioConversation::EndConversation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.EndConversation");

	UBioConversation_EndConversation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConversation.StartConversation
// (Native, Public)
// Parameters:
// class AActor*                  aOwner                         (Parm)
// class AActor*                  aPlayer                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioConversation::StartConversation(class AActor* aOwner, class AActor* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.StartConversation");

	UBioConversation_StartConversation_Params params;
	params.aOwner = aOwner;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.GetConversationObject
// (Native, Public)
// Parameters:
// int                            nObjectIndex                   (Parm)
// bool                           bNoisyErrors                   (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioConversation::GetConversationObject(int nObjectIndex, bool bNoisyErrors)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.GetConversationObject");

	UBioConversation_GetConversationObject_Params params;
	params.nObjectIndex = nObjectIndex;
	params.bNoisyErrors = bNoisyErrors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioConversation.SetPositionRotator
// (Native, Public)
// Parameters:
// class AActor*                  pActor                         (Parm)
// struct FVector                 Position                       (Parm)
// struct FRotator                facing                         (Parm)

void UBioConversation::SetPositionRotator(class AActor* pActor, const struct FVector& Position, const struct FRotator& facing)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConversation.SetPositionRotator");

	UBioConversation_SetPositionRotator_Params params;
	params.pActor = pActor;
	params.Position = Position;
	params.facing = facing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStage.GetBestCameraPosition
// (Native, Public, HasOutParms)
// Parameters:
// class UBioConversation*        Conv                           (Parm)
// bool                           bLineOfActionCheck             (Parm)
// int                            nIntimacyLevel                 (Parm)
// struct FVector                 vCamLoc                        (Parm, OutParm)
// struct FRotator                vCamRot                        (Parm, OutParm)
// float                          fFov                           (Parm, OutParm)
// float                          fNearPlane                     (Parm, OutParm)
// struct FBioStageDOFData        tDOFData                       (Parm, OutParm)

void ABioStage::GetBestCameraPosition(class UBioConversation* Conv, bool bLineOfActionCheck, int nIntimacyLevel, struct FVector* vCamLoc, struct FRotator* vCamRot, float* fFov, float* fNearPlane, struct FBioStageDOFData* tDOFData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetBestCameraPosition");

	ABioStage_GetBestCameraPosition_Params params;
	params.Conv = Conv;
	params.bLineOfActionCheck = bLineOfActionCheck;
	params.nIntimacyLevel = nIntimacyLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vCamLoc != nullptr)
		*vCamLoc = params.vCamLoc;
	if (vCamRot != nullptr)
		*vCamRot = params.vCamRot;
	if (fFov != nullptr)
		*fFov = params.fFov;
	if (fNearPlane != nullptr)
		*fNearPlane = params.fNearPlane;
	if (tDOFData != nullptr)
		*tDOFData = params.tDOFData;
}


// Function BIOC_Base.BioStage.BioVINCE_MapName_FailedStagePlacement
// (Native, Public)

void ABioStage::BioVINCE_MapName_FailedStagePlacement()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.BioVINCE_MapName_FailedStagePlacement");

	ABioStage_BioVINCE_MapName_FailedStagePlacement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStage.CameraSpeaker
// (Native, Public)
// Parameters:
// struct FString                 sLabel                         (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioStage::CameraSpeaker(const struct FString& sLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.CameraSpeaker");

	ABioStage_CameraSpeaker_Params params;
	params.sLabel = sLabel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.CameraListener
// (Native, Public)
// Parameters:
// struct FString                 sLabel                         (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioStage::CameraListener(const struct FString& sLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.CameraListener");

	ABioStage_CameraListener_Params params;
	params.sLabel = sLabel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.GetActorByNode
// (Native, Public)
// Parameters:
// TEnumAsByte<EStageNodes>       eNode                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioStage::GetActorByNode(TEnumAsByte<EStageNodes> eNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetActorByNode");

	ABioStage_GetActorByNode_Params params;
	params.eNode = eNode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.GetActorOnNode
// (Native, Public)
// Parameters:
// int                            nNode                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioStage::GetActorOnNode(int nNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetActorOnNode");

	ABioStage_GetActorOnNode_Params params;
	params.nNode = nNode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.GetActorStageNodePosition
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  pActor                         (Parm)
// bool                           bPuppetsUseParentNode          (Parm)
// struct FVector                 vPosition                      (Parm, OutParm)

void ABioStage::GetActorStageNodePosition(class AActor* pActor, bool bPuppetsUseParentNode, struct FVector* vPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetActorStageNodePosition");

	ABioStage_GetActorStageNodePosition_Params params;
	params.pActor = pActor;
	params.bPuppetsUseParentNode = bPuppetsUseParentNode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vPosition != nullptr)
		*vPosition = params.vPosition;
}


// Function BIOC_Base.BioStage.GetStageCamName
// (Native, Public)
// Parameters:
// TEnumAsByte<EStageNodes>       eNode                          (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName ABioStage::GetStageCamName(TEnumAsByte<EStageNodes> eNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetStageCamName");

	ABioStage_GetStageCamName_Params params;
	params.eNode = eNode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.GetStageCamLocRot
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EStageNodes>       eNode                          (Parm)
// struct FVector                 vCamLoc                        (Parm, OutParm)
// struct FRotator                vCamRot                        (Parm, OutParm)

void ABioStage::GetStageCamLocRot(TEnumAsByte<EStageNodes> eNode, struct FVector* vCamLoc, struct FRotator* vCamRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetStageCamLocRot");

	ABioStage_GetStageCamLocRot_Params params;
	params.eNode = eNode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vCamLoc != nullptr)
		*vCamLoc = params.vCamLoc;
	if (vCamRot != nullptr)
		*vCamRot = params.vCamRot;
}


// Function BIOC_Base.BioStage.GetStageCamDOFData
// (Native, Public, HasOutParms)
// Parameters:
// int                            nCamIndex                      (Parm)
// struct FBioStageDOFData        tDOFData                       (Parm, OutParm)

void ABioStage::GetStageCamDOFData(int nCamIndex, struct FBioStageDOFData* tDOFData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetStageCamDOFData");

	ABioStage_GetStageCamDOFData_Params params;
	params.nCamIndex = nCamIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (tDOFData != nullptr)
		*tDOFData = params.tDOFData;
}


// Function BIOC_Base.BioStage.GetStageCamNearPlane
// (Native, Public)
// Parameters:
// int                            nCamIndex                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioStage::GetStageCamNearPlane(int nCamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetStageCamNearPlane");

	ABioStage_GetStageCamNearPlane_Params params;
	params.nCamIndex = nCamIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.GetStageCamFov
// (Native, Public)
// Parameters:
// int                            nCamIndex                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioStage::GetStageCamFov(int nCamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetStageCamFov");

	ABioStage_GetStageCamFov_Params params;
	params.nCamIndex = nCamIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.GetStageCamIndex
// (Native, Public)
// Parameters:
// struct FName                   nmCamName                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioStage::GetStageCamIndex(const struct FName& nmCamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.GetStageCamIndex");

	ABioStage_GetStageCamIndex_Params params;
	params.nmCamName = nmCamName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStage.PlaceActors
// (Native, Public)
// Parameters:
// class UBioConversation*        Conv                           (Parm)

void ABioStage::PlaceActors(class UBioConversation* Conv)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.PlaceActors");

	ABioStage_PlaceActors_Params params;
	params.Conv = Conv;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStage.EndConversation
// (Native, Public)

void ABioStage::EndConversation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStage.EndConversation");

	ABioStage_EndConversation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.TickEquipment
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioEquipment::TickEquipment(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.TickEquipment");

	UBioEquipment_TickEquipment_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.OnHide
// (Final, Native, Public)
// Parameters:
// bool                           bHide                          (Parm)

void UBioEquipment::OnHide(bool bHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.OnHide");

	UBioEquipment_OnHide_Params params;
	params.bHide = bHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.SetScalerMaterialParameter
// (Final, Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void UBioEquipment::SetScalerMaterialParameter(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.SetScalerMaterialParameter");

	UBioEquipment_SetScalerMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.SetHiddenForAllWeapons
// (Native, Public)
// Parameters:
// bool                           shouldHide                     (Parm)

void UBioEquipment::SetHiddenForAllWeapons(bool shouldHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.SetHiddenForAllWeapons");

	UBioEquipment_SetHiddenForAllWeapons_Params params;
	params.shouldHide = shouldHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.ReattachAllWeapons
// (Native, Public)
// Parameters:
// class ABioPawn*                Pawn                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::ReattachAllWeapons(class ABioPawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.ReattachAllWeapons");

	UBioEquipment_ReattachAllWeapons_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.ChangeToQuickSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Slot                           (Parm)

void UBioEquipment::ChangeToQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.ChangeToQuickSlot");

	UBioEquipment_ChangeToQuickSlot_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.ComputePrevQuickSlot
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Slot                           (Parm, OutParm)
// TEnumAsByte<EBioItemWeaponRangedType> fromslot                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::ComputePrevQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> fromslot, TEnumAsByte<EBioItemWeaponRangedType>* Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.ComputePrevQuickSlot");

	UBioEquipment_ComputePrevQuickSlot_Params params;
	params.fromslot = fromslot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Slot != nullptr)
		*Slot = params.Slot;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.ComputeNextQuickSlot
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Slot                           (Parm, OutParm)
// TEnumAsByte<EBioItemWeaponRangedType> fromslot                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::ComputeNextQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> fromslot, TEnumAsByte<EBioItemWeaponRangedType>* Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.ComputeNextQuickSlot");

	UBioEquipment_ComputeNextQuickSlot_Params params;
	params.fromslot = fromslot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Slot != nullptr)
		*Slot = params.Slot;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.PrevQuickSlot
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::PrevQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.PrevQuickSlot");

	UBioEquipment_PrevQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.NextQuickSlot
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::NextQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.NextQuickSlot");

	UBioEquipment_NextQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.DeactivateCurrentQuickSlot
// (Native, Public)

void UBioEquipment::DeactivateCurrentQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.DeactivateCurrentQuickSlot");

	UBioEquipment_DeactivateCurrentQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.ActivateCurrentQuickSlot
// (Native, Public)

void UBioEquipment::ActivateCurrentQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.ActivateCurrentQuickSlot");

	UBioEquipment_ActivateCurrentQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEquipment.ClearQuickSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Slot                           (Parm)
// class UBioItemWeapon*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemWeapon* UBioEquipment::ClearQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.ClearQuickSlot");

	UBioEquipment_ClearQuickSlot_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.SetQuickSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Slot                           (Parm)
// class ABioPawn*                Pawn                           (Parm)
// class UBioItemWeapon*          itemWeapon                     (Parm)
// class UBioItemWeapon*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemWeapon* UBioEquipment::SetQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot, class ABioPawn* Pawn, class UBioItemWeapon* itemWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.SetQuickSlot");

	UBioEquipment_SetQuickSlot_Params params;
	params.Slot = Slot;
	params.Pawn = Pawn;
	params.itemWeapon = itemWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.IsActiveQuickSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Slot                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::IsActiveQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.IsActiveQuickSlot");

	UBioEquipment_IsActiveQuickSlot_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.IsQuickSlotEmpty
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Slot                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::IsQuickSlotEmpty(TEnumAsByte<EBioItemWeaponRangedType> Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.IsQuickSlotEmpty");

	UBioEquipment_IsQuickSlotEmpty_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.GetCurrentQuickSlot
// (Native, Public)
// Parameters:
// class ABioWeapon*              ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioWeapon* UBioEquipment::GetCurrentQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.GetCurrentQuickSlot");

	UBioEquipment_GetCurrentQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.IsEquipped
// (Native, Public)
// Parameters:
// class UBioItemEquippable*      Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::IsEquipped(class UBioItemEquippable* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.IsEquipped");

	UBioEquipment_IsEquipped_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.Unequip
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioEquipmentSlot> Slot                           (Parm)
// class UBioItemEquippable*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemEquippable* UBioEquipment::Unequip(TEnumAsByte<EBioEquipmentSlot> Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.Unequip");

	UBioEquipment_Unequip_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.Equip
// (Native, Public)
// Parameters:
// class UBioItemEquippable*      Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::Equip(class UBioItemEquippable* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.Equip");

	UBioEquipment_Equip_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.GetEquipmentType
// (Native, Static, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioEquipmentSlot> Slot                           (Parm)
// TEnumAsByte<EBioEquipmentType> Type                           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::STATIC_GetEquipmentType(TEnumAsByte<EBioEquipmentSlot> Slot, TEnumAsByte<EBioEquipmentType>* Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.GetEquipmentType");

	UBioEquipment_GetEquipmentType_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Type != nullptr)
		*Type = params.Type;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipment.GetEquipmentSlot
// (Native, Static, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioEquipmentType> Type                           (Parm)
// TEnumAsByte<EBioEquipmentSlot> Slot                           (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipment::STATIC_GetEquipmentSlot(TEnumAsByte<EBioEquipmentType> Type, TEnumAsByte<EBioEquipmentSlot>* Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipment.GetEquipmentSlot");

	UBioEquipment_GetEquipmentSlot_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Slot != nullptr)
		*Slot = params.Slot;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.ScaleEquipment
// (Native, Public)
// Parameters:
// int                            nSophisticationLevel           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentBase::ScaleEquipment(int nSophisticationLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.ScaleEquipment");

	UBioEquipmentBase_ScaleEquipment_Params params;
	params.nSophisticationLevel = nSophisticationLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.GetEquippedSlotID
// (Native, Public)
// Parameters:
// class UBioItem*                oItem                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioEquipmentBase::GetEquippedSlotID(class UBioItem* oItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.GetEquippedSlotID");

	UBioEquipmentBase_GetEquippedSlotID_Params params;
	params.oItem = oItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.UnequipSlot
// (Native, Public, HasOutParms)
// Parameters:
// int                            nSlot                          (Parm)
// class UBioItem*                oOldItem                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentBase::UnequipSlot(int nSlot, class UBioItem** oOldItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.UnequipSlot");

	UBioEquipmentBase_UnequipSlot_Params params;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oOldItem != nullptr)
		*oOldItem = params.oOldItem;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.EquipSlot
// (Native, Public, HasOutParms)
// Parameters:
// class UBioItem*                oNewItem                       (Parm)
// int                            nSlot                          (Parm)
// class UBioItem*                oOldItem                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentBase::EquipSlot(class UBioItem* oNewItem, int nSlot, class UBioItem** oOldItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.EquipSlot");

	UBioEquipmentBase_EquipSlot_Params params;
	params.oNewItem = oNewItem;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oOldItem != nullptr)
		*oOldItem = params.oOldItem;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.ClearAll
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentBase::ClearAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.ClearAll");

	UBioEquipmentBase_ClearAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.Initialize
// (Native, Public)
// Parameters:
// class AActor*                  oOwner                         (Parm)
// class UObject*                 oDelegateObj                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentBase::Initialize(class AActor* oOwner, class UObject* oDelegateObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.Initialize");

	UBioEquipmentBase_Initialize_Params params;
	params.oOwner = oOwner;
	params.oDelegateObj = oDelegateObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.OnUnEquipAction
// (Public, Delegate)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentBase::OnUnEquipAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.OnUnEquipAction");

	UBioEquipmentBase_OnUnEquipAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentBase.OnEquipAction
// (Public, Delegate)
// Parameters:
// class UBioItem*                oNewItem                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentBase::OnEquipAction(class UBioItem* oNewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentBase.OnEquipAction");

	UBioEquipmentBase_OnEquipAction_Params params;
	params.oNewItem = oNewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEquipmentVehicle.Initialize
// (Native, Public)
// Parameters:
// class AActor*                  oOwner                         (Parm)
// class UObject*                 oDelegateObj                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEquipmentVehicle::Initialize(class AActor* oOwner, class UObject* oDelegateObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEquipmentVehicle.Initialize");

	UBioEquipmentVehicle_Initialize_Params params;
	params.oOwner = oOwner;
	params.oDelegateObj = oDelegateObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGUIBox.Draw
// (Defined, Public)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioGUIBox::Draw(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGUIBox.Draw");

	UBioGUIBox_Draw_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGUIBox.SetFont
// (Native, Public)
// Parameters:
// class UFont*                   Font                           (Parm)

void UBioGUIBox::SetFont(class UFont* Font)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGUIBox.SetFont");

	UBioGUIBox_SetFont_Params params;
	params.Font = Font;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGUIBox.PopCanvasProperties
// (Final, Defined, Private)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioGUIBox::PopCanvasProperties(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGUIBox.PopCanvasProperties");

	UBioGUIBox_PopCanvasProperties_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGUIBox.PushCanvasProperties
// (Final, Defined, Private)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioGUIBox::PushCanvasProperties(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGUIBox.PushCanvasProperties");

	UBioGUIBox_PushCanvasProperties_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGUIBox.RenderContent
// (Protected)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioGUIBox::RenderContent(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGUIBox.RenderContent");

	UBioGUIBox_RenderContent_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGUIBox.ComputeDrawParameters
// (Protected)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioGUIBox::ComputeDrawParameters(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGUIBox.ComputeDrawParameters");

	UBioGUIBox_ComputeDrawParameters_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGUIBox.ShouldRender
// (Protected)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGUIBox::ShouldRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGUIBox.ShouldRender");

	UBioGUIBox_ShouldRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDebugMenu.ScrollUp
// (Defined, Public)

void UBioDebugMenu::ScrollUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDebugMenu.ScrollUp");

	UBioDebugMenu_ScrollUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDebugMenu.ScrollDown
// (Defined, Public)

void UBioDebugMenu::ScrollDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDebugMenu.ScrollDown");

	UBioDebugMenu_ScrollDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDebugMenu.RenderContent
// (Defined, Protected)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioDebugMenu::RenderContent(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDebugMenu.RenderContent");

	UBioDebugMenu_RenderContent_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDebugMenu.ComputeDrawParameters
// (Defined, Protected)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioDebugMenu::ComputeDrawParameters(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDebugMenu.ComputeDrawParameters");

	UBioDebugMenu_ComputeDrawParameters_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDebugMenu.ShouldRender
// (Defined, Protected)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDebugMenu::ShouldRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDebugMenu.ShouldRender");

	UBioDebugMenu_ShouldRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDebugMenu.Clear
// (Defined, Public)

void UBioDebugMenu::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDebugMenu.Clear");

	UBioDebugMenu_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDebugMenu.AddEntry
// (Defined, Public)
// Parameters:
// struct FString                 sMenuEntry                     (Parm, NeedCtorLink)

void UBioDebugMenu::AddEntry(const struct FString& sMenuEntry)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDebugMenu.AddEntry");

	UBioDebugMenu_AddEntry_Params params;
	params.sMenuEntry = sMenuEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ShowPawnAnimNodeDebug
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)
// struct FName                   nmStartingPoint                (Parm)

void ABioHUD::ShowPawnAnimNodeDebug(class UClass* aClass, const struct FName& nmStartingPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ShowPawnAnimNodeDebug");

	ABioHUD_ShowPawnAnimNodeDebug_Params params;
	params.aClass = aClass;
	params.nmStartingPoint = nmStartingPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ShowWeapAnimNodeDebug
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmStartingPoint                (Parm)

void ABioHUD::ShowWeapAnimNodeDebug(const struct FName& nmStartingPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ShowWeapAnimNodeDebug");

	ABioHUD_ShowWeapAnimNodeDebug_Params params;
	params.nmStartingPoint = nmStartingPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ShowAnimNodeDebug
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmStartingPoint                (Parm)

void ABioHUD::ShowAnimNodeDebug(const struct FName& nmStartingPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ShowAnimNodeDebug");

	ABioHUD_ShowAnimNodeDebug_Params params;
	params.nmStartingPoint = nmStartingPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.UpdateActorInfo
// (Defined, Public, HasDefaults)

void ABioHUD::UpdateActorInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.UpdateActorInfo");

	ABioHUD_UpdateActorInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.HideLocation
// (Defined, Exec, Public)

void ABioHUD::HideLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.HideLocation");

	ABioHUD_HideLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ShowLocation
// (Defined, Exec, Public)

void ABioHUD::ShowLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ShowLocation");

	ABioHUD_ShowLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.LockActorInfo
// (Defined, Exec, Public, HasDefaults)

void ABioHUD::LockActorInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.LockActorInfo");

	ABioHUD_LockActorInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DisplayActorInfo
// (Defined, Exec, Public)

void ABioHUD::DisplayActorInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayActorInfo");

	ABioHUD_DisplayActorInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.LoadGUIResources
// (Native, Public)

void ABioHUD::LoadGUIResources()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.LoadGUIResources");

	ABioHUD_LoadGUIResources_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.SetGUITexture
// (Defined, Exec, Public)
// Parameters:
// struct FString                 sMaterial                      (Parm, NeedCtorLink)

void ABioHUD::SetGUITexture(const struct FString& sMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.SetGUITexture");

	ABioHUD_SetGUITexture_Params params;
	params.sMaterial = sMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DrawTextWithColor
// (Defined, Event, Public)
// Parameters:
// struct FString                 valuename                      (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)
// struct FColor                  LabelColor                     (Parm)
// struct FColor                  DataColor                      (Parm)

void ABioHUD::DrawTextWithColor(const struct FString& valuename, const struct FString& Value, const struct FColor& LabelColor, const struct FColor& DataColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DrawTextWithColor");

	ABioHUD_DrawTextWithColor_Params params;
	params.valuename = valuename;
	params.Value = Value;
	params.LabelColor = LabelColor;
	params.DataColor = DataColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DrawText
// (Defined, Event, Public)
// Parameters:
// struct FString                 valuename                      (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)
// struct FColor                  LabelColor                     (OptionalParm, Parm)
// struct FColor                  DataColor                      (OptionalParm, Parm)

void ABioHUD::DrawText(const struct FString& valuename, const struct FString& Value, const struct FColor& LabelColor, const struct FColor& DataColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DrawText");

	ABioHUD_DrawText_Params params;
	params.valuename = valuename;
	params.Value = Value;
	params.LabelColor = LabelColor;
	params.DataColor = DataColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DisplayProfiling
// (Defined, Public)

void ABioHUD::DisplayProfiling()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayProfiling");

	ABioHUD_DisplayProfiling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DrawCircle
// (Defined, Public)
// Parameters:
// float                          fX                             (Parm)
// float                          fY                             (Parm)
// float                          fRadius                        (Parm)

void ABioHUD::DrawCircle(float fX, float fY, float fRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DrawCircle");

	ABioHUD_DrawCircle_Params params;
	params.fX = fX;
	params.fY = fY;
	params.fRadius = fRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.CDrawSquare
// (Defined, Public)
// Parameters:
// int                            nSize                          (Parm)

void ABioHUD::CDrawSquare(int nSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.CDrawSquare");

	ABioHUD_CDrawSquare_Params params;
	params.nSize = nSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.PointInsideBox
// (Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          CX                             (Parm)
// float                          CY                             (Parm)
// float                          nSize                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioHUD::PointInsideBox(float X, float Y, float CX, float CY, float nSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.PointInsideBox");

	ABioHUD_PointInsideBox_Params params;
	params.X = X;
	params.Y = Y;
	params.CX = CX;
	params.CY = CY;
	params.nSize = nSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.GetBoxCoordsFromAngle
// (Defined, Public, HasOutParms)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          Size                           (Parm)
// float                          Angle                          (Parm)
// float                          XSt                            (Parm, OutParm)
// float                          YSt                            (Parm, OutParm)

void ABioHUD::GetBoxCoordsFromAngle(float X, float Y, float Size, float Angle, float* XSt, float* YSt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.GetBoxCoordsFromAngle");

	ABioHUD_GetBoxCoordsFromAngle_Params params;
	params.X = X;
	params.Y = Y;
	params.Size = Size;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XSt != nullptr)
		*XSt = params.XSt;
	if (YSt != nullptr)
		*YSt = params.YSt;
}


// Function BIOC_Base.BioHUD.BoxesIntersecting
// (Defined, Public)
// Parameters:
// int                            X1                             (Parm)
// int                            Y1                             (Parm)
// int                            nSize1                         (Parm)
// int                            X2                             (Parm)
// int                            Y2                             (Parm)
// int                            nSize2                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioHUD::BoxesIntersecting(int X1, int Y1, int nSize1, int X2, int Y2, int nSize2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.BoxesIntersecting");

	ABioHUD_BoxesIntersecting_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.nSize1 = nSize1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.nSize2 = nSize2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.CDrawVertLine
// (Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y1                             (Parm)
// float                          Y2                             (Parm)

void ABioHUD::CDrawVertLine(float X, float Y1, float Y2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.CDrawVertLine");

	ABioHUD_CDrawVertLine_Params params;
	params.X = X;
	params.Y1 = Y1;
	params.Y2 = Y2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.CDrawHorzLine
// (Defined, Public)
// Parameters:
// float                          X1                             (Parm)
// float                          X2                             (Parm)
// float                          Y                              (Parm)

void ABioHUD::CDrawHorzLine(float X1, float X2, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.CDrawHorzLine");

	ABioHUD_CDrawHorzLine_Params params;
	params.X1 = X1;
	params.X2 = X2;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ConnectBoxes
// (Defined, Public)
// Parameters:
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          nSize1                         (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// float                          nSize2                         (Parm)

void ABioHUD::ConnectBoxes(float X1, float Y1, float nSize1, float X2, float Y2, float nSize2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ConnectBoxes");

	ABioHUD_ConnectBoxes_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.nSize1 = nSize1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.nSize2 = nSize2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.GetStabilityColor
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fCurrentStability              (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ABioHUD::GetStabilityColor(float fCurrentStability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.GetStabilityColor");

	ABioHUD_GetStabilityColor_Params params;
	params.fCurrentStability = fCurrentStability;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.LoadTestTextStringFromFile
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioHUD::LoadTestTextStringFromFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.LoadTestTextStringFromFile");

	ABioHUD_LoadTestTextStringFromFile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.SmartWrapStringToArray
// (Defined, Public, HasOutParms)
// Parameters:
// struct FString                 sText                          (Parm, NeedCtorLink)
// TArray<struct FString>         OutArray                       (Parm, OutParm, NeedCtorLink)
// int                            nTextWidth                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioHUD::SmartWrapStringToArray(const struct FString& sText, int nTextWidth, TArray<struct FString>* OutArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.SmartWrapStringToArray");

	ABioHUD_SmartWrapStringToArray_Params params;
	params.sText = sText;
	params.nTextWidth = nTextWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutArray != nullptr)
		*OutArray = params.OutArray;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DrawFakeShadowText
// (Defined, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// struct FColor                  DrawColor                      (Parm)
// struct FString                 sText                          (Parm, NeedCtorLink)

void ABioHUD::DrawFakeShadowText(int X, int Y, const struct FColor& DrawColor, const struct FString& sText)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DrawFakeShadowText");

	ABioHUD_DrawFakeShadowText_Params params;
	params.X = X;
	params.Y = Y;
	params.DrawColor = DrawColor;
	params.sText = sText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DrawEngineHUD
// (Public)

void ABioHUD::DrawEngineHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DrawEngineHUD");

	ABioHUD_DrawEngineHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.PostRender
// (Defined, Simulated, Event, Public)

void ABioHUD::PostRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.PostRender");

	ABioHUD_PostRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DoFontTest
// (Defined, Public)

void ABioHUD::DoFontTest()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DoFontTest");

	ABioHUD_DoFontTest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DrawTestFontString
// (Defined, Public)
// Parameters:
// int                            Y                              (Parm)
// struct FString                 sFontName                      (Parm, NeedCtorLink)
// struct FString                 sTestString                    (Parm, NeedCtorLink)

void ABioHUD::DrawTestFontString(int Y, const struct FString& sFontName, const struct FString& sTestString)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DrawTestFontString");

	ABioHUD_DrawTestFontString_Params params;
	params.Y = Y;
	params.sFontName = sFontName;
	params.sTestString = sTestString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DrawTestFont
// (Defined, Public)
// Parameters:
// int                            Y                              (Parm)
// struct FString                 sFontName                      (Parm, NeedCtorLink)
// int                            nPoint                         (Parm)
// bool                           bScaled                        (OptionalParm, Parm)
// float                          fScale                         (OptionalParm, Parm)

void ABioHUD::DrawTestFont(int Y, const struct FString& sFontName, int nPoint, bool bScaled, float fScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DrawTestFont");

	ABioHUD_DrawTestFont_Params params;
	params.Y = Y;
	params.sFontName = sFontName;
	params.nPoint = nPoint;
	params.bScaled = bScaled;
	params.fScale = fScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ToggleSafeArea
// (Defined, Exec, Public)

void ABioHUD::ToggleSafeArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ToggleSafeArea");

	ABioHUD_ToggleSafeArea_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DisplaySafeArea
// (Defined, Public)

void ABioHUD::DisplaySafeArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplaySafeArea");

	ABioHUD_DisplaySafeArea_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileConversationExtra
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class UBioConversation*        oCurConv                       (Parm)

void ABioHUD::ProfileConversationExtra(class UBioConversation* oCurConv)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileConversationExtra");

	ABioHUD_ProfileConversationExtra_Params params;
	params.oCurConv = oCurConv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProxyCanvasProject
// (Defined, Event, Public)
// Parameters:
// struct FVector                 V                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioHUD::ProxyCanvasProject(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProxyCanvasProject");

	ABioHUD_ProxyCanvasProject_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.ProxyCanvasDrawMaterialTile
// (Defined, Event, Public)
// Parameters:
// class UMaterialInterface*      Mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)

void ABioHUD::ProxyCanvasDrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProxyCanvasDrawMaterialTile");

	ABioHUD_ProxyCanvasDrawMaterialTile_Params params;
	params.Mat = Mat;
	params.XL = XL;
	params.YL = YL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProxyCanvasSetPos
// (Defined, Event, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void ABioHUD::ProxyCanvasSetPos(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProxyCanvasSetPos");

	ABioHUD_ProxyCanvasSetPos_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProxyMakeLinearColor
// (Defined, Event, Public)
// Parameters:
// float                          R                              (Parm)
// float                          G                              (Parm)
// float                          B                              (Parm)
// float                          A                              (Parm)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FLinearColor ABioHUD::ProxyMakeLinearColor(float R, float G, float B, float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProxyMakeLinearColor");

	ABioHUD_ProxyMakeLinearColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplayCapability
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// int                            idx                            (Parm)
// class UBioCapability*          oCap                           (Parm)
// bool                           bShowOwner                     (Parm)

void ABioHUD::DisplayCapability(int X, int Y, int idx, class UBioCapability* oCap, bool bShowOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayCapability");

	ABioHUD_DisplayCapability_Params params;
	params.X = X;
	params.Y = Y;
	params.idx = idx;
	params.oCap = oCap;
	params.bShowOwner = bShowOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DisplaySquadMember
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// class UBioPawnBehavior*        targetBehavior                 (Parm)
// class ABioPawn*                oBP                            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioHUD::DisplaySquadMember(int X, int Y, class UBioPawnBehavior* targetBehavior, class ABioPawn* oBP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplaySquadMember");

	ABioHUD_DisplaySquadMember_Params params;
	params.X = X;
	params.Y = Y;
	params.targetBehavior = targetBehavior;
	params.oBP = oBP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplayStreaming
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// class ABioPawn*                oBP                            (Parm)
// class UBioPawnBehavior*        targetBehavior                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioHUD::DisplayStreaming(int X, int Y, class ABioPawn* oBP, class UBioPawnBehavior* targetBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayStreaming");

	ABioHUD_DisplayStreaming_Params params;
	params.X = X;
	params.Y = Y;
	params.oBP = oBP;
	params.targetBehavior = targetBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplaySquad_QA
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// class UBioPawnBehavior*        targetBehavior                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioHUD::DisplaySquad_QA(int X, int Y, class UBioPawnBehavior* targetBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplaySquad_QA");

	ABioHUD_DisplaySquad_QA_Params params;
	params.X = X;
	params.Y = Y;
	params.targetBehavior = targetBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplaySquad
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// class UBioPawnBehavior*        targetBehavior                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioHUD::DisplaySquad(int X, int Y, class UBioPawnBehavior* targetBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplaySquad");

	ABioHUD_DisplaySquad_Params params;
	params.X = X;
	params.Y = Y;
	params.targetBehavior = targetBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplayPerceptionList
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// class ABioPawn*                oBP                            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioHUD::DisplayPerceptionList(int X, int Y, class ABioPawn* oBP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayPerceptionList");

	ABioHUD_DisplayPerceptionList_Params params;
	params.X = X;
	params.Y = Y;
	params.oBP = oBP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplayActionQueue
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// class ABioAiController*        oAIC                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioHUD::DisplayActionQueue(int X, int Y, class ABioAiController* oAIC)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayActionQueue");

	ABioHUD_DisplayActionQueue_Params params;
	params.X = X;
	params.Y = Y;
	params.oAIC = oAIC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplayActionStack
// (Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// class ABioAiController*        oAIC                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioHUD::DisplayActionStack(int X, int Y, class ABioAiController* oAIC)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayActionStack");

	ABioHUD_DisplayActionStack_Params params;
	params.X = X;
	params.Y = Y;
	params.oAIC = oAIC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.GetNameOfEnumEntry
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FString                 EnumName                       (Parm, NeedCtorLink)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName ABioHUD::GetNameOfEnumEntry(int nIndex, const struct FString& EnumName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.GetNameOfEnumEntry");

	ABioHUD_GetNameOfEnumEntry_Params params;
	params.nIndex = nIndex;
	params.EnumName = EnumName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioHUD.DisplayIcon
// (Native, Public)
// Parameters:
// class UMaterialInstanceConstant* oMatInstance                   (Parm)
// struct FVector                 vWorldLocation                 (Parm)
// bool                           bScaleWithDistance             (OptionalParm, Parm)
// float                          fMinTextureSize                (OptionalParm, Parm)
// float                          fMaxTextureSize                (OptionalParm, Parm)
// float                          fScaleRange                    (OptionalParm, Parm)

void ABioHUD::DisplayIcon(class UMaterialInstanceConstant* oMatInstance, const struct FVector& vWorldLocation, bool bScaleWithDistance, float fMinTextureSize, float fMaxTextureSize, float fScaleRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayIcon");

	ABioHUD_DisplayIcon_Params params;
	params.oMatInstance = oMatInstance;
	params.vWorldLocation = vWorldLocation;
	params.bScaleWithDistance = bScaleWithDistance;
	params.fMinTextureSize = fMinTextureSize;
	params.fMaxTextureSize = fMaxTextureSize;
	params.fScaleRange = fScaleRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DisplayWeaponAttributes
// (Native, Public)
// Parameters:
// class ABioWeapon*              oWeapon                        (Parm)

void ABioHUD::DisplayWeaponAttributes(class ABioWeapon* oWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplayWeaponAttributes");

	ABioHUD_DisplayWeaponAttributes_Params params;
	params.oWeapon = oWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.DisplaySquadPlaypen
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)
// bool                           bShowPlaypen                   (OptionalParm, Parm)

void ABioHUD::DisplaySquadPlaypen(class UBioActorBehavior* targetActorBehavior, bool bShowPlaypen)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.DisplaySquadPlaypen");

	ABioHUD_DisplaySquadPlaypen_Params params;
	params.targetActorBehavior = targetActorBehavior;
	params.bShowPlaypen = bShowPlaypen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileComponents
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileComponents(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileComponents");

	ABioHUD_ProfileComponents_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileStasis
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileStasis(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileStasis");

	ABioHUD_ProfileStasis_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfilePerception
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfilePerception(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfilePerception");

	ABioHUD_ProfilePerception_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileSquadCaps
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileSquadCaps(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileSquadCaps");

	ABioHUD_ProfileSquadCaps_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileCaps
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileCaps(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileCaps");

	ABioHUD_ProfileCaps_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileGestures
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileGestures(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileGestures");

	ABioHUD_ProfileGestures_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileSave
// (Native, Public)

void ABioHUD::ProfileSave()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileSave");

	ABioHUD_ProfileSave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileAnim
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileAnim(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileAnim");

	ABioHUD_ProfileAnim_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileSquadFollow
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileSquadFollow(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileSquadFollow");

	ABioHUD_ProfileSquadFollow_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileQAAI
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileQAAI(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileQAAI");

	ABioHUD_ProfileQAAI_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileCamera
// (Native, Public)

void ABioHUD::ProfileCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileCamera");

	ABioHUD_ProfileCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileVehicleWeapons
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileVehicleWeapons(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileVehicleWeapons");

	ABioHUD_ProfileVehicleWeapons_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileVehicle
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileVehicle(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileVehicle");

	ABioHUD_ProfileVehicle_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileGrenade
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileGrenade(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileGrenade");

	ABioHUD_ProfileGrenade_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileRagdoll
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileRagdoll(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileRagdoll");

	ABioHUD_ProfileRagdoll_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileConversation
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileConversation(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileConversation");

	ABioHUD_ProfileConversation_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileConversationBug
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileConversationBug(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileConversationBug");

	ABioHUD_ProfileConversationBug_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileNoise
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileNoise(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileNoise");

	ABioHUD_ProfileNoise_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfilePath
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfilePath(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfilePath");

	ABioHUD_ProfilePath_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileAvoid
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileAvoid(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileAvoid");

	ABioHUD_ProfileAvoid_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileSquad
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileSquad(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileSquad");

	ABioHUD_ProfileSquad_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileLookat
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileLookat(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileLookat");

	ABioHUD_ProfileLookat_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileMovement
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileMovement(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileMovement");

	ABioHUD_ProfileMovement_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileCover
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileCover(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileCover");

	ABioHUD_ProfileCover_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileAI_Player
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileAI_Player(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileAI_Player");

	ABioHUD_ProfileAI_Player_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileAI_AI
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileAI_AI(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileAI_AI");

	ABioHUD_ProfileAI_AI_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileAI
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileAI(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileAI");

	ABioHUD_ProfileAI_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileHopper
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileHopper(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileHopper");

	ABioHUD_ProfileHopper_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileInventory
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileInventory(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileInventory");

	ABioHUD_ProfileInventory_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfilePower
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)
// struct FName                   nmPower                        (Parm)

void ABioHUD::ProfilePower(class UBioActorBehavior* targetActorBehavior, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfilePower");

	ABioHUD_ProfilePower_Params params;
	params.targetActorBehavior = targetActorBehavior;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfilePowers
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)
// struct FName                   nmPower                        (Parm)

void ABioHUD::ProfilePowers(class UBioActorBehavior* targetActorBehavior, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfilePowers");

	ABioHUD_ProfilePowers_Params params;
	params.targetActorBehavior = targetActorBehavior;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileWeaponAttributes
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileWeaponAttributes(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileWeaponAttributes");

	ABioHUD_ProfileWeaponAttributes_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfilePawnAttributes
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfilePawnAttributes(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfilePawnAttributes");

	ABioHUD_ProfilePawnAttributes_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileTalents
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileTalents(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileTalents");

	ABioHUD_ProfileTalents_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioHUD.ProfileCombat
// (Native, Public)
// Parameters:
// class UBioActorBehavior*       targetActorBehavior            (Parm)

void ABioHUD::ProfileCombat(class UBioActorBehavior* targetActorBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioHUD.ProfileCombat");

	ABioHUD_ProfileCombat_Params params;
	params.targetActorBehavior = targetActorBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMessageBox.PageUp
// (Defined, Public)

void UBioMessageBox::PageUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.PageUp");

	UBioMessageBox_PageUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMessageBox.PageDown
// (Defined, Public)

void UBioMessageBox::PageDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.PageDown");

	UBioMessageBox_PageDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMessageBox.ScrollUp
// (Defined, Public)

void UBioMessageBox::ScrollUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.ScrollUp");

	UBioMessageBox_ScrollUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMessageBox.ScrollDown
// (Defined, Public)

void UBioMessageBox::ScrollDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.ScrollDown");

	UBioMessageBox_ScrollDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMessageBox.RenderContent
// (Defined, Protected)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioMessageBox::RenderContent(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.RenderContent");

	UBioMessageBox_RenderContent_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMessageBox.HasText
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioMessageBox::HasText()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.HasText");

	UBioMessageBox_HasText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMessageBox.SetTextArray
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         aText                          (Const, Parm, OutParm, NeedCtorLink)

void UBioMessageBox::SetTextArray(TArray<struct FString>* aText)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.SetTextArray");

	UBioMessageBox_SetTextArray_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aText != nullptr)
		*aText = params.aText;
}


// Function BIOC_Base.BioMessageBox.SetText
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void UBioMessageBox::SetText(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.SetText");

	UBioMessageBox_SetText_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMessageBox.ShouldRender
// (Defined, Protected)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioMessageBox::ShouldRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.ShouldRender");

	UBioMessageBox_ShouldRender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMessageBox.ComputeDrawParameters
// (Defined, Protected)
// Parameters:
// class UCanvas*                 oCanvas                        (Parm)

void UBioMessageBox::ComputeDrawParameters(class UCanvas* oCanvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMessageBox.ComputeDrawParameters");

	UBioMessageBox_ComputeDrawParameters_Params params;
	params.oCanvas = oCanvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMoviePlayer.ShutdownMovie
// (Defined, Event, Public)

void UBioMoviePlayer::ShutdownMovie()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMoviePlayer.ShutdownMovie");

	UBioMoviePlayer_ShutdownMovie_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMoviePlayer.Draw
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UBioMoviePlayer::Draw(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMoviePlayer.Draw");

	UBioMoviePlayer_Draw_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMoviePlayer.SetMaterial
// (Defined, Public)
// Parameters:
// class UMaterial*               Material                       (Parm)

void UBioMoviePlayer::SetMaterial(class UMaterial* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMoviePlayer.SetMaterial");

	UBioMoviePlayer_SetMaterial_Params params;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMoviePlayer.SetTextureMovie
// (Defined, Public)
// Parameters:
// class UTextureMovie*           TextureMovie                   (Parm)

void UBioMoviePlayer::SetTextureMovie(class UTextureMovie* TextureMovie)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMoviePlayer.SetTextureMovie");

	UBioMoviePlayer_SetTextureMovie_Params params;
	params.TextureMovie = TextureMovie;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMoviePlayer.InitializeMovie
// (Final, Defined, Private)

void UBioMoviePlayer::InitializeMovie()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMoviePlayer.InitializeMovie");

	UBioMoviePlayer_InitializeMovie_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMoviePlayer.OnMovieFinished
// (Public, Delegate)
// Parameters:
// class UTextureMovie*           TextureMovie                   (Parm)

void UBioMoviePlayer::OnMovieFinished(class UTextureMovie* TextureMovie)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMoviePlayer.OnMovieFinished");

	UBioMoviePlayer_OnMovieFinished_Params params;
	params.TextureMovie = TextureMovie;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSubtitles.UpdateSubtitles
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSubtitles::UpdateSubtitles(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSubtitles.UpdateSubtitles");

	UBioSubtitles_UpdateSubtitles_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSubtitles.ClearHistory
// (Native, Public)

void UBioSubtitles::ClearHistory()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSubtitles.ClearHistory");

	UBioSubtitles_ClearHistory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSubtitles.SetRenderMode
// (Native, Public)
// Parameters:
// TEnumAsByte<ESubtitlesRenderMode> RenderMode                     (Parm)
// bool                           bForceDisplay                  (OptionalParm, Parm)
// TEnumAsByte<ESubtitlesRenderMode> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESubtitlesRenderMode> UBioSubtitles::SetRenderMode(TEnumAsByte<ESubtitlesRenderMode> RenderMode, bool bForceDisplay)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSubtitles.SetRenderMode");

	UBioSubtitles_SetRenderMode_Params params;
	params.RenderMode = RenderMode;
	params.bForceDisplay = bForceDisplay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSubtitles.GetRenderMode
// (Native, Public)
// Parameters:
// TEnumAsByte<ESubtitlesRenderMode> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESubtitlesRenderMode> UBioSubtitles::GetRenderMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSubtitles.GetRenderMode");

	UBioSubtitles_GetRenderMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSubtitles.HasSubtitle
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSubtitles::HasSubtitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSubtitles.HasSubtitle");

	UBioSubtitles_HasSubtitle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSubtitles.DisplaySubtitle
// (Native, Public)
// Parameters:
// struct FString                 sSubtitle                      (Parm, NeedCtorLink)
// float                          fDuration                      (Parm)

void UBioSubtitles::DisplaySubtitle(const struct FString& sSubtitle, float fDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSubtitles.DisplaySubtitle");

	UBioSubtitles_DisplaySubtitle_Params params;
	params.sSubtitle = sSubtitle;
	params.fDuration = fDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.Tick
// (Native, Public)
// Parameters:
// float                          a_fDeltaSeconds                (Parm)

void UBioUIWorld::Tick(float a_fDeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.Tick");

	UBioUIWorld_Tick_Params params;
	params.a_fDeltaSeconds = a_fDeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.HidePawn
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pOriginalPawn                (Parm)
// bool                           bHidden                        (OptionalParm, Parm)

void UBioUIWorld::HidePawn(class ABioPawn* a_pOriginalPawn, bool bHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.HidePawn");

	UBioUIWorld_HidePawn_Params params;
	params.a_pOriginalPawn = a_pOriginalPawn;
	params.bHidden = bHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.AttachOmnitool
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pSourcePawn                  (Parm)
// bool                           a_fnClassName                  (Parm)

void UBioUIWorld::AttachOmnitool(class ABioPawn* a_pSourcePawn, bool a_fnClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.AttachOmnitool");

	UBioUIWorld_AttachOmnitool_Params params;
	params.a_pSourcePawn = a_pSourcePawn;
	params.a_fnClassName = a_fnClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.PrimeTextures
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pSourcePawn                  (Parm)

void UBioUIWorld::PrimeTextures(class ABioPawn* a_pSourcePawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.PrimeTextures");

	UBioUIWorld_PrimeTextures_Params params;
	params.a_pSourcePawn = a_pSourcePawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.AttachBioticsAndTech
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pSourcePawn                  (Parm)
// struct FName                   a_fnClassName                  (Parm)

void UBioUIWorld::AttachBioticsAndTech(class ABioPawn* a_pSourcePawn, const struct FName& a_fnClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.AttachBioticsAndTech");

	UBioUIWorld_AttachBioticsAndTech_Params params;
	params.a_pSourcePawn = a_pSourcePawn;
	params.a_fnClassName = a_fnClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.MovePawn
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pOriginalPawn                (Parm)
// struct FName                   a_fnNewLocation                (Parm)

void UBioUIWorld::MovePawn(class ABioPawn* a_pOriginalPawn, const struct FName& a_fnNewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.MovePawn");

	UBioUIWorld_MovePawn_Params params;
	params.a_pOriginalPawn = a_pOriginalPawn;
	params.a_fnNewLocation = a_fnNewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.SwapPawn
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pSourcePawn                  (Parm)
// struct FName                   a_fnSourceVarName              (Parm)
// class ABioPawn*                a_pOtherPawn                   (Parm)
// struct FName                   a_fnOtherVarName               (Parm)

void UBioUIWorld::SwapPawn(class ABioPawn* a_pSourcePawn, const struct FName& a_fnSourceVarName, class ABioPawn* a_pOtherPawn, const struct FName& a_fnOtherVarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.SwapPawn");

	UBioUIWorld_SwapPawn_Params params;
	params.a_pSourcePawn = a_pSourcePawn;
	params.a_fnSourceVarName = a_fnSourceVarName;
	params.a_pOtherPawn = a_pOtherPawn;
	params.a_fnOtherVarName = a_fnOtherVarName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.ResetActors
// (Native, Public)

void UBioUIWorld::ResetActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.ResetActors");

	UBioUIWorld_ResetActors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.SetNameVariable
// (Native, Public)
// Parameters:
// struct FName                   a_fnVariableName               (Parm)
// struct FName                   a_nmValue                      (Parm)

void UBioUIWorld::SetNameVariable(const struct FName& a_fnVariableName, const struct FName& a_nmValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.SetNameVariable");

	UBioUIWorld_SetNameVariable_Params params;
	params.a_fnVariableName = a_fnVariableName;
	params.a_nmValue = a_nmValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.SetObjectVariable
// (Native, Public)
// Parameters:
// struct FName                   a_fnVariableName               (Parm)
// class UObject*                 a_pValue                       (Parm)

void UBioUIWorld::SetObjectVariable(const struct FName& a_fnVariableName, class UObject* a_pValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.SetObjectVariable");

	UBioUIWorld_SetObjectVariable_Params params;
	params.a_fnVariableName = a_fnVariableName;
	params.a_pValue = a_pValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.UpdateHeadGearVisibility
// (Final, Native, Public)
// Parameters:
// class ABioPawn*                pOriginalPawn                  (Parm)

void UBioUIWorld::UpdateHeadGearVisibility(class ABioPawn* pOriginalPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.UpdateHeadGearVisibility");

	UBioUIWorld_UpdateHeadGearVisibility_Params params;
	params.pOriginalPawn = pOriginalPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.UpdateAppearance
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pOriginalPawn                (Parm)
// struct FName                   a_fnClassAnimSet               (OptionalParm, Parm)

void UBioUIWorld::UpdateAppearance(class ABioPawn* a_pOriginalPawn, const struct FName& a_fnClassAnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.UpdateAppearance");

	UBioUIWorld_UpdateAppearance_Params params;
	params.a_pOriginalPawn = a_pOriginalPawn;
	params.a_fnClassAnimSet = a_fnClassAnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.DestroyPawn
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pOriginalPawn                (Parm)

void UBioUIWorld::DestroyPawn(class ABioPawn* a_pOriginalPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.DestroyPawn");

	UBioUIWorld_DestroyPawn_Params params;
	params.a_pOriginalPawn = a_pOriginalPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.SpawnPawn
// (Native, Public)
// Parameters:
// class ABioPawn*                a_pOriginalPawn                (Parm)
// struct FName                   a_fnSpawnLocation              (Parm)
// struct FName                   a_fnSpawnVariable              (Parm)
// struct FName                   a_fnClassAnimSet               (OptionalParm, Parm)
// struct FName                   a_fnRemoteEvent                (OptionalParm, Parm)

void UBioUIWorld::SpawnPawn(class ABioPawn* a_pOriginalPawn, const struct FName& a_fnSpawnLocation, const struct FName& a_fnSpawnVariable, const struct FName& a_fnClassAnimSet, const struct FName& a_fnRemoteEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.SpawnPawn");

	UBioUIWorld_SpawnPawn_Params params;
	params.a_pOriginalPawn = a_pOriginalPawn;
	params.a_fnSpawnLocation = a_fnSpawnLocation;
	params.a_fnSpawnVariable = a_fnSpawnVariable;
	params.a_fnClassAnimSet = a_fnClassAnimSet;
	params.a_fnRemoteEvent = a_fnRemoteEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioUIWorld.TriggerEvent
// (Native, Public)
// Parameters:
// struct FName                   a_fnEventName                  (Parm)
// class AActor*                  a_pCaller                      (Parm)

void UBioUIWorld::TriggerEvent(const struct FName& a_fnEventName, class AActor* a_pCaller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioUIWorld.TriggerEvent");

	UBioUIWorld_TriggerEvent_Params params;
	params.a_fnEventName = a_fnEventName;
	params.a_pCaller = a_pCaller;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCharacterImporter.FindCharacterInfoByName
// (Defined, Public, HasOutParms)
// Parameters:
// struct FName                   nmCharacter                    (Parm)
// int                            Index                          (Parm, OutParm)
// struct FString                 actorTypeString                (Parm, OutParm, NeedCtorLink)
// int                            nIsHeadGearVisible             (Parm, OutParm)
// struct FName                   nmPackage                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::FindCharacterInfoByName(const struct FName& nmCharacter, const struct FName& nmPackage, int* Index, struct FString* actorTypeString, int* nIsHeadGearVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.FindCharacterInfoByName");

	UBioCharacterImporter_FindCharacterInfoByName_Params params;
	params.nmCharacter = nmCharacter;
	params.nmPackage = nmPackage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Index != nullptr)
		*Index = params.Index;
	if (actorTypeString != nullptr)
		*actorTypeString = params.actorTypeString;
	if (nIsHeadGearVisible != nullptr)
		*nIsHeadGearVisible = params.nIsHeadGearVisible;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.FindPlayerCharacterInfo
// (Defined, Public, HasOutParms)
// Parameters:
// int                            Index                          (Parm, OutParm)
// struct FString                 actorTypeString                (Parm, OutParm, NeedCtorLink)
// int                            nIsHeadGearVisible             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::FindPlayerCharacterInfo(int* Index, struct FString* actorTypeString, int* nIsHeadGearVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.FindPlayerCharacterInfo");

	UBioCharacterImporter_FindPlayerCharacterInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Index != nullptr)
		*Index = params.Index;
	if (actorTypeString != nullptr)
		*actorTypeString = params.actorTypeString;
	if (nIsHeadGearVisible != nullptr)
		*nIsHeadGearVisible = params.nIsHeadGearVisible;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.GetSavedPlayerInformation
// (Defined, Public, HasOutParms)
// Parameters:
// struct FString                 actorTypeString                (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::GetSavedPlayerInformation(struct FString* actorTypeString)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.GetSavedPlayerInformation");

	UBioCharacterImporter_GetSavedPlayerInformation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (actorTypeString != nullptr)
		*actorTypeString = params.actorTypeString;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.LoadCharacterDefinitionByIndexInternal
// (Final, Defined, Private, HasDefaults)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (Parm)
// int                            nCharacterID                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::LoadCharacterDefinitionByIndexInternal(class UBioPawnBehavior* oBehavior, int nCharacterID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadCharacterDefinitionByIndexInternal");

	UBioCharacterImporter_LoadCharacterDefinitionByIndexInternal_Params params;
	params.oBehavior = oBehavior;
	params.nCharacterID = nCharacterID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.LoadCharacterDefinitionByIndex
// (Defined, Event, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (Parm)
// int                            nCharacterID                   (Parm)
// struct FName                   nmPackage                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::LoadCharacterDefinitionByIndex(class UBioPawnBehavior* oBehavior, int nCharacterID, const struct FName& nmPackage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadCharacterDefinitionByIndex");

	UBioCharacterImporter_LoadCharacterDefinitionByIndex_Params params;
	params.oBehavior = oBehavior;
	params.nCharacterID = nCharacterID;
	params.nmPackage = nmPackage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.GetAllValuesForKey
// (Final, Defined, Private, HasOutParms, HasDefaults)
// Parameters:
// class UBio2DA*                 o2DA                           (Parm)
// struct FName                   nmKeyColumn                    (Parm)
// int                            nKey                           (Parm)
// struct FName                   nmValueColumn                  (Parm)
// struct FBioIntArray            oValueArray                    (Parm, OutParm, NeedCtorLink)

void UBioCharacterImporter::GetAllValuesForKey(class UBio2DA* o2DA, const struct FName& nmKeyColumn, int nKey, const struct FName& nmValueColumn, struct FBioIntArray* oValueArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.GetAllValuesForKey");

	UBioCharacterImporter_GetAllValuesForKey_Params params;
	params.o2DA = o2DA;
	params.nmKeyColumn = nmKeyColumn;
	params.nKey = nKey;
	params.nmValueColumn = nmValueColumn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oValueArray != nullptr)
		*oValueArray = params.oValueArray;
}


// Function BIOC_Base.BioCharacterImporter.GetAllRowsAndValuesForKey
// (Final, Defined, Private, HasOutParms)
// Parameters:
// class UBio2DA*                 o2DA                           (Parm)
// struct FName                   nmKeyColumn                    (Parm)
// int                            nKey                           (Parm)
// struct FName                   nmValueColumn                  (Parm)
// struct FBioIntArray            oRowIndexArray                 (Parm, OutParm, NeedCtorLink)
// struct FBioIntArray            oValueArray                    (Parm, OutParm, NeedCtorLink)

void UBioCharacterImporter::GetAllRowsAndValuesForKey(class UBio2DA* o2DA, const struct FName& nmKeyColumn, int nKey, const struct FName& nmValueColumn, struct FBioIntArray* oRowIndexArray, struct FBioIntArray* oValueArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.GetAllRowsAndValuesForKey");

	UBioCharacterImporter_GetAllRowsAndValuesForKey_Params params;
	params.o2DA = o2DA;
	params.nmKeyColumn = nmKeyColumn;
	params.nKey = nKey;
	params.nmValueColumn = nmValueColumn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oRowIndexArray != nullptr)
		*oRowIndexArray = params.oRowIndexArray;
	if (oValueArray != nullptr)
		*oValueArray = params.oValueArray;
}


// Function BIOC_Base.BioCharacterImporter.GetAllRowsForKey
// (Final, Defined, Private, HasOutParms)
// Parameters:
// class UBio2DA*                 o2DA                           (Parm)
// struct FName                   nmKeyColumn                    (Parm)
// int                            nKey                           (Parm)
// struct FBioIntArray            oRowIndexArray                 (Parm, OutParm, NeedCtorLink)

void UBioCharacterImporter::GetAllRowsForKey(class UBio2DA* o2DA, const struct FName& nmKeyColumn, int nKey, struct FBioIntArray* oRowIndexArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.GetAllRowsForKey");

	UBioCharacterImporter_GetAllRowsForKey_Params params;
	params.o2DA = o2DA;
	params.nmKeyColumn = nmKeyColumn;
	params.nKey = nKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oRowIndexArray != nullptr)
		*oRowIndexArray = params.oRowIndexArray;
}


// Function BIOC_Base.BioCharacterImporter.LoadAndEquipItem
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (Parm)
// TEnumAsByte<EBioCharacterImporterCharacter2DA> table                          (Parm)
// int                            Row                            (Parm)
// struct FName                   itemIDColumnName               (Parm)
// struct FName                   sophisticationColumnName       (OptionalParm, Parm)
// struct FName                   nmManufacturerColumn           (OptionalParm, Parm)

void UBioCharacterImporter::LoadAndEquipItem(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioCharacterImporterCharacter2DA> table, int Row, const struct FName& itemIDColumnName, const struct FName& sophisticationColumnName, const struct FName& nmManufacturerColumn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadAndEquipItem");

	UBioCharacterImporter_LoadAndEquipItem_Params params;
	params.oBehavior = oBehavior;
	params.table = table;
	params.Row = Row;
	params.itemIDColumnName = itemIDColumnName;
	params.sophisticationColumnName = sophisticationColumnName;
	params.nmManufacturerColumn = nmManufacturerColumn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCharacterImporter.LoadItem
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (Parm)
// TEnumAsByte<EBioCharacterImporterCharacter2DA> table                          (Parm)
// int                            Row                            (Parm)
// struct FName                   itemIDColumnName               (Parm)
// struct FName                   sophisticationColumnName       (Parm)
// struct FName                   nmManufacturerColumn           (OptionalParm, Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioCharacterImporter::LoadItem(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioCharacterImporterCharacter2DA> table, int Row, const struct FName& itemIDColumnName, const struct FName& sophisticationColumnName, const struct FName& nmManufacturerColumn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadItem");

	UBioCharacterImporter_LoadItem_Params params;
	params.oBehavior = oBehavior;
	params.table = table;
	params.Row = Row;
	params.itemIDColumnName = itemIDColumnName;
	params.sophisticationColumnName = sophisticationColumnName;
	params.nmManufacturerColumn = nmManufacturerColumn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.LoadAndEquipItemOfUnknownType
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (Parm)
// TEnumAsByte<EBioCharacterImporterCharacter2DA> table                          (Parm)
// int                            Row                            (Parm)
// struct FName                   itemIDColumnName               (Parm)
// struct FName                   sophisticationColumnName       (OptionalParm, Parm)
// struct FName                   nmManufacturerColumn           (OptionalParm, Parm)

void UBioCharacterImporter::LoadAndEquipItemOfUnknownType(class UBioPawnBehavior* oBehavior, TEnumAsByte<EBioCharacterImporterCharacter2DA> table, int Row, const struct FName& itemIDColumnName, const struct FName& sophisticationColumnName, const struct FName& nmManufacturerColumn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadAndEquipItemOfUnknownType");

	UBioCharacterImporter_LoadAndEquipItemOfUnknownType_Params params;
	params.oBehavior = oBehavior;
	params.table = table;
	params.Row = Row;
	params.itemIDColumnName = itemIDColumnName;
	params.sophisticationColumnName = sophisticationColumnName;
	params.nmManufacturerColumn = nmManufacturerColumn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCharacterImporter.AddAchievementUnlockedTalentTrees
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        Behavior                       (Parm)

void UBioCharacterImporter::AddAchievementUnlockedTalentTrees(class UBioPawnBehavior* Behavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.AddAchievementUnlockedTalentTrees");

	UBioCharacterImporter_AddAchievementUnlockedTalentTrees_Params params;
	params.Behavior = Behavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCharacterImporter.LoadSpecializationData
// (Native, Public, HasOutParms)
// Parameters:
// int                            classID                        (Parm)
// TArray<struct FBioSpecializationData> specData                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::LoadSpecializationData(int classID, TArray<struct FBioSpecializationData>* specData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadSpecializationData");

	UBioCharacterImporter_LoadSpecializationData_Params params;
	params.classID = classID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (specData != nullptr)
		*specData = params.specData;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.LoadClassGUIInfo
// (Native, Public, HasOutParms)
// Parameters:
// int                            Row                            (Parm)
// struct FBioClassGuiInfo        stGuiInfo                      (Parm, OutParm, NeedCtorLink)

void UBioCharacterImporter::LoadClassGUIInfo(int Row, struct FBioClassGuiInfo* stGuiInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadClassGUIInfo");

	UBioCharacterImporter_LoadClassGUIInfo_Params params;
	params.Row = Row;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stGuiInfo != nullptr)
		*stGuiInfo = params.stGuiInfo;
}


// Function BIOC_Base.BioCharacterImporter.LoadPlayableClassRows
// (Native, Public, HasOutParms)
// Parameters:
// TArray<int>                    classRows                      (Parm, OutParm, NeedCtorLink)

void UBioCharacterImporter::LoadPlayableClassRows(TArray<int>* classRows)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadPlayableClassRows");

	UBioCharacterImporter_LoadPlayableClassRows_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (classRows != nullptr)
		*classRows = params.classRows;
}


// Function BIOC_Base.BioCharacterImporter.InitializePlayerOverrideInfo
// (Native, Public)
// Parameters:
// struct FString                 Label                          (Parm, NeedCtorLink)
// TEnumAsByte<EBioAttributePawnGender> gender                         (Parm)
// struct FString                 PlayerName                     (Parm, NeedCtorLink)
// TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> Origin                         (Parm)
// TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> notoriety                      (Parm)
// class UBioMorphFace*           Morph                          (Parm)
// int                            nBonusTalentID                 (OptionalParm, Parm)

void UBioCharacterImporter::InitializePlayerOverrideInfo(const struct FString& Label, TEnumAsByte<EBioAttributePawnGender> gender, const struct FString& PlayerName, TEnumAsByte<EBioPlayerCharacterBackgroundOrigin> Origin, TEnumAsByte<EBioPlayerCharacterBackgroundNotoriety> notoriety, class UBioMorphFace* Morph, int nBonusTalentID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.InitializePlayerOverrideInfo");

	UBioCharacterImporter_InitializePlayerOverrideInfo_Params params;
	params.Label = Label;
	params.gender = gender;
	params.PlayerName = PlayerName;
	params.Origin = Origin;
	params.notoriety = notoriety;
	params.Morph = Morph;
	params.nBonusTalentID = nBonusTalentID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCharacterImporter.LoadClassTalents
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        Behavior                       (Parm)
// int                            classID                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::LoadClassTalents(class UBioPawnBehavior* Behavior, int classID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadClassTalents");

	UBioCharacterImporter_LoadClassTalents_Params params;
	params.Behavior = Behavior;
	params.classID = classID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.GetEnumEntryIN
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FName                   nmEnum                         (Parm)
// class UBio2DA*                 o2DA                           (Parm)
// int                            nRow                           (Parm)
// struct FName                   nmColumn                       (Parm)
// unsigned char                  cValue                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::GetEnumEntryIN(const struct FName& nmEnum, class UBio2DA* o2DA, int nRow, const struct FName& nmColumn, unsigned char* cValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.GetEnumEntryIN");

	UBioCharacterImporter_GetEnumEntryIN_Params params;
	params.nmEnum = nmEnum;
	params.o2DA = o2DA;
	params.nRow = nRow;
	params.nmColumn = nmColumn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (cValue != nullptr)
		*cValue = params.cValue;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.GetRowIndex
// (Final, Native, Private)
// Parameters:
// class UBio2DA*                 o2DA                           (Parm)
// int                            nKeyValue                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioCharacterImporter::GetRowIndex(class UBio2DA* o2DA, int nKeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.GetRowIndex");

	UBioCharacterImporter_GetRowIndex_Params params;
	params.o2DA = o2DA;
	params.nKeyValue = nKeyValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.LoadClasses2DAs
// (Final, Native, Private)
// Parameters:
// struct FName                   nmPackage                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::LoadClasses2DAs(const struct FName& nmPackage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadClasses2DAs");

	UBioCharacterImporter_LoadClasses2DAs_Params params;
	params.nmPackage = nmPackage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCharacterImporter.LoadCharacter2DAs
// (Final, Native, Private)
// Parameters:
// struct FName                   nmPackage                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioCharacterImporter::LoadCharacter2DAs(const struct FName& nmPackage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCharacterImporter.LoadCharacter2DAs");

	UBioCharacterImporter_LoadCharacter2DAs_Params params;
	params.nmPackage = nmPackage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetMaxMedigel
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInventory::GetMaxMedigel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetMaxMedigel");

	UBioInventory_GetMaxMedigel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetMaxGrenades
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioInventory::GetMaxGrenades()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetMaxGrenades");

	UBioInventory_GetMaxGrenades_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.Sort
// (Final, Native, Public)

void UBioInventory::Sort()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.Sort");

	UBioInventory_Sort_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.ClearNewItemFlags
// (Defined, Public)

void UBioInventory::ClearNewItemFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.ClearNewItemFlags");

	UBioInventory_ClearNewItemFlags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.IsPlotItem
// (Defined, Public)
// Parameters:
// class UBioItem*                oItem                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventory::IsPlotItem(class UBioItem* oItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.IsPlotItem");

	UBioInventory_IsPlotItem_Params params;
	params.oItem = oItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioInventory::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetSaveObjectClass");

	UBioInventory_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.ReadSaveObject
// (Defined, Event, Public)
// Parameters:
// class UBioBaseSaveObject*      Save                           (Parm)

void UBioInventory::ReadSaveObject(class UBioBaseSaveObject* Save)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.ReadSaveObject");

	UBioInventory_ReadSaveObject_Params params;
	params.Save = Save;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.WriteSaveObject
// (Defined, Event, Public)
// Parameters:
// class UObject*                 InOuter                        (Parm)
// class UBioBaseSaveObject*      Save                           (OptionalParm, Parm)
// class UBioBaseSaveObject*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioBaseSaveObject* UBioInventory::WriteSaveObject(class UObject* InOuter, class UBioBaseSaveObject* Save)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.WriteSaveObject");

	UBioInventory_WriteSaveObject_Params params;
	params.InOuter = InOuter;
	params.Save = Save;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GrantScaledCredits
// (Native, Public)
// Parameters:
// int                            nSize                          (Parm)
// bool                           i_bTickResource                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventory::GrantScaledCredits(int nSize, bool i_bTickResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GrantScaledCredits");

	UBioInventory_GrantScaledCredits_Params params;
	params.nSize = nSize;
	params.i_bTickResource = i_bTickResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetInventoryResourceFloat
// (Native, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInventory::GetInventoryResourceFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetInventoryResourceFloat");

	UBioInventory_GetInventoryResourceFloat_Params params;
	params.eInvResType = eInvResType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetAttributeAdjustedAmountFloat
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// float                          fAmt                           (Parm, OutParm)

void UBioInventory::GetAttributeAdjustedAmountFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType, float* fAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetAttributeAdjustedAmountFloat");

	UBioInventory_GetAttributeAdjustedAmountFloat_Params params;
	params.eInvResType = eInvResType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fAmt != nullptr)
		*fAmt = params.fAmt;
}


// Function BIOC_Base.BioInventory.GetAttributeAdjustedAmountInt
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// int                            nAmt                           (Parm, OutParm)

void UBioInventory::GetAttributeAdjustedAmountInt(TEnumAsByte<EInventoryResourceTypes> eInvResType, int* nAmt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetAttributeAdjustedAmountInt");

	UBioInventory_GetAttributeAdjustedAmountInt_Params params;
	params.eInvResType = eInvResType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nAmt != nullptr)
		*nAmt = params.nAmt;
}


// Function BIOC_Base.BioInventory.GetInventoryResourceInt
// (Native, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioInventory::GetInventoryResourceInt(TEnumAsByte<EInventoryResourceTypes> eInvResType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetInventoryResourceInt");

	UBioInventory_GetInventoryResourceInt_Params params;
	params.eInvResType = eInvResType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.AdjustInventoryResourceFloat
// (Native, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// float                          fAmt                           (Parm)
// bool                           bUseTalentAdjustedResources    (OptionalParm, Parm)
// bool                           bTickerResource                (OptionalParm, Parm)

void UBioInventory::AdjustInventoryResourceFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType, float fAmt, bool bUseTalentAdjustedResources, bool bTickerResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.AdjustInventoryResourceFloat");

	UBioInventory_AdjustInventoryResourceFloat_Params params;
	params.eInvResType = eInvResType;
	params.fAmt = fAmt;
	params.bUseTalentAdjustedResources = bUseTalentAdjustedResources;
	params.bTickerResource = bTickerResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.AdjustInventoryResourceInt
// (Native, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// int                            nAmt                           (Parm)
// bool                           bUseTalentAdjustedResources    (OptionalParm, Parm)
// bool                           bTickerResource                (OptionalParm, Parm)

void UBioInventory::AdjustInventoryResourceInt(TEnumAsByte<EInventoryResourceTypes> eInvResType, int nAmt, bool bUseTalentAdjustedResources, bool bTickerResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.AdjustInventoryResourceInt");

	UBioInventory_AdjustInventoryResourceInt_Params params;
	params.eInvResType = eInvResType;
	params.nAmt = nAmt;
	params.bUseTalentAdjustedResources = bUseTalentAdjustedResources;
	params.bTickerResource = bTickerResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.Empty
// (Native, Public)

void UBioInventory::Empty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.Empty");

	UBioInventory_Empty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.IsEmpty
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventory::IsEmpty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.IsEmpty");

	UBioInventory_IsEmpty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.TickerResources
// (Native, Public)
// Parameters:
// class UBioEventNotifier*       notifier                       (Parm)

void UBioInventory::TickerResources(class UBioEventNotifier* notifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.TickerResources");

	UBioInventory_TickerResources_Params params;
	params.notifier = notifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.TickerItems
// (Native, Public)
// Parameters:
// class UBioEventNotifier*       notifier                       (Parm)

void UBioInventory::TickerItems(class UBioEventNotifier* notifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.TickerItems");

	UBioInventory_TickerItems_Params params;
	params.notifier = notifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.SubsumePlotItems
// (Native, Public)
// Parameters:
// class UBioInventory*           Other                          (Parm)
// bool                           bFlagAsNew                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventory::SubsumePlotItems(class UBioInventory* Other, bool bFlagAsNew)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.SubsumePlotItems");

	UBioInventory_SubsumePlotItems_Params params;
	params.Other = Other;
	params.bFlagAsNew = bFlagAsNew;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.SubsumeResources
// (Native, Public)
// Parameters:
// class UBioInventory*           Other                          (Parm)
// class UBioEventNotifier*       notifier                       (Parm)
// bool                           bUseTalentAdjustedResources    (OptionalParm, Parm)
// bool                           bFlagAsNew                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventory::SubsumeResources(class UBioInventory* Other, class UBioEventNotifier* notifier, bool bUseTalentAdjustedResources, bool bFlagAsNew)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.SubsumeResources");

	UBioInventory_SubsumeResources_Params params;
	params.Other = Other;
	params.notifier = notifier;
	params.bUseTalentAdjustedResources = bUseTalentAdjustedResources;
	params.bFlagAsNew = bFlagAsNew;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.SubsumeItems
// (Native, Public)
// Parameters:
// class UBioInventory*           Other                          (Parm)
// bool                           bFlagAsNew                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventory::SubsumeItems(class UBioInventory* Other, bool bFlagAsNew)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.SubsumeItems");

	UBioInventory_SubsumeItems_Params params;
	params.Other = Other;
	params.bFlagAsNew = bFlagAsNew;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.Subsume
// (Native, Public)
// Parameters:
// class UBioInventory*           Other                          (Parm)
// bool                           bFlagAsNew                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventory::Subsume(class UBioInventory* Other, bool bFlagAsNew)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.Subsume");

	UBioInventory_Subsume_Params params;
	params.Other = Other;
	params.bFlagAsNew = bFlagAsNew;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GenerateTreasure
// (Native, Public)
// Parameters:
// int                            treasureID                     (Const, Parm)
// int                            challengeLevel                 (Const, Parm)
// bool                           shouldFilterItemsByConditional (Const, Parm)

void UBioInventory::GenerateTreasure(int treasureID, int challengeLevel, bool shouldFilterItemsByConditional)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GenerateTreasure");

	UBioInventory_GenerateTreasure_Params params;
	params.treasureID = treasureID;
	params.challengeLevel = challengeLevel;
	params.shouldFilterItemsByConditional = shouldFilterItemsByConditional;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventory.Swap
// (Defined, Event, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class UBioItem*                pItem                          (Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioInventory::Swap(int nIndex, class UBioItem* pItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.Swap");

	UBioInventory_Swap_Params params;
	params.nIndex = nIndex;
	params.pItem = pItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.Appraise
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EInventoryResourceTypes> eResource                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInventory::Appraise(int nIndex, TEnumAsByte<EInventoryResourceTypes> eResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.Appraise");

	UBioInventory_Appraise_Params params;
	params.nIndex = nIndex;
	params.eResource = eResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.Remove
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioInventory::Remove(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.Remove");

	UBioInventory_Remove_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.Add
// (Native, Public)
// Parameters:
// class UBioItem*                Item                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioInventory::Add(class UBioItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.Add");

	UBioInventory_Add_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetMaxSophistication
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioInventory::GetMaxSophistication()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetMaxSophistication");

	UBioInventory_GetMaxSophistication_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetMinSophistication
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioInventory::GetMinSophistication()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetMinSophistication");

	UBioInventory_GetMinSophistication_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventory.GetStringRepresentation
// (Defined, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioInventory::GetStringRepresentation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventory.GetStringRepresentation");

	UBioInventory_GetStringRepresentation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.SetShieldRatio
// (Native, Public)
// Parameters:
// float                          ratio                          (Parm)

void UBioInventoryView::SetShieldRatio(float ratio)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.SetShieldRatio");

	UBioInventoryView_SetShieldRatio_Params params;
	params.ratio = ratio;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryView.GetShieldRatio
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInventoryView::GetShieldRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.GetShieldRatio");

	UBioInventoryView_GetShieldRatio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.ReplaceSelectedItem
// (Native, Public)

void UBioInventoryView::ReplaceSelectedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.ReplaceSelectedItem");

	UBioInventoryView_ReplaceSelectedItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryView.RemoveSelectedItem
// (Native, Public)

void UBioInventoryView::RemoveSelectedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.RemoveSelectedItem");

	UBioInventoryView_RemoveSelectedItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryView.IsSelectedItemVolatile
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::IsSelectedItemVolatile()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.IsSelectedItemVolatile");

	UBioInventoryView_IsSelectedItemVolatile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.GetSelectedItem
// (Defined, Public)
// Parameters:
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioInventoryView::GetSelectedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.GetSelectedItem");

	UBioInventoryView_GetSelectedItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.UninstallXMod
// (Native, Public)
// Parameters:
// int                            xModType                       (Parm)
// int                            xModIndexInItem                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::UninstallXMod(int xModType, int xModIndexInItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.UninstallXMod");

	UBioInventoryView_UninstallXMod_Params params;
	params.xModType = xModType;
	params.xModIndexInItem = xModIndexInItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.InstallXMod
// (Native, Public)
// Parameters:
// int                            filteredIndex                  (Parm)
// int                            xModTypeUsedForFilter          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::InstallXMod(int filteredIndex, int xModTypeUsedForFilter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.InstallXMod");

	UBioInventoryView_InstallXMod_Params params;
	params.filteredIndex = filteredIndex;
	params.xModTypeUsedForFilter = xModTypeUsedForFilter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.Drop
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::Drop()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.Drop");

	UBioInventoryView_Drop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.Equip
// (Native, Public)
// Parameters:
// int                            filteredIndex                  (Parm)
// bool                           bXferXMods                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::Equip(int filteredIndex, bool bXferXMods)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.Equip");

	UBioInventoryView_Equip_Params params;
	params.filteredIndex = filteredIndex;
	params.bXferXMods = bXferXMods;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.Unequip
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::Unequip()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.Unequip");

	UBioInventoryView_Unequip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.SetTargetInventory
// (Native, Public)
// Parameters:
// class UBioInventory*           pInv                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::SetTargetInventory(class UBioInventory* pInv)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.SetTargetInventory");

	UBioInventoryView_SetTargetInventory_Params params;
	params.pInv = pInv;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.SetTargetEquipment
// (Native, Public)
// Parameters:
// class UBioEquipment*           pEqp                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::SetTargetEquipment(class UBioEquipment* pEqp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.SetTargetEquipment");

	UBioInventoryView_SetTargetEquipment_Params params;
	params.pEqp = pEqp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.SetTarget
// (Native, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::SetTarget(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.SetTarget");

	UBioInventoryView_SetTarget_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.ResetTarget
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::ResetTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.ResetTarget");

	UBioInventoryView_ResetTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.SelectQuickslotItem
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> eType                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::SelectQuickslotItem(TEnumAsByte<EBioItemWeaponRangedType> eType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.SelectQuickslotItem");

	UBioInventoryView_SelectQuickslotItem_Params params;
	params.eType = eType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.SelectEquipmentItem
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioEquipmentSlot> eSlot                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::SelectEquipmentItem(TEnumAsByte<EBioEquipmentSlot> eSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.SelectEquipmentItem");

	UBioInventoryView_SelectEquipmentItem_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.SelectInventoryItem
// (Native, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryView::SelectInventoryItem(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.SelectInventoryItem");

	UBioInventoryView_SelectInventoryItem_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryView.ExtractXModIndices
// (Native, Public, HasOutParms)
// Parameters:
// TArray<int>                    aIndices                       (Parm, OutParm, NeedCtorLink)
// int                            nXModTypeID                    (OptionalParm, Parm)

void UBioInventoryView::ExtractXModIndices(int nXModTypeID, TArray<int>* aIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.ExtractXModIndices");

	UBioInventoryView_ExtractXModIndices_Params params;
	params.nXModTypeID = nXModTypeID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aIndices != nullptr)
		*aIndices = params.aIndices;
}


// Function BIOC_Base.BioInventoryView.ExtractXModIndicesByEquipmentType
// (Native, Public, HasOutParms)
// Parameters:
// TArray<int>                    aIndices                       (Parm, OutParm, NeedCtorLink)
// TEnumAsByte<EBioEquipmentType> eEquipType                     (Parm)
// int                            xModTypeUsedForFilter          (OptionalParm, Parm)

void UBioInventoryView::ExtractXModIndicesByEquipmentType(TEnumAsByte<EBioEquipmentType> eEquipType, int xModTypeUsedForFilter, TArray<int>* aIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.ExtractXModIndicesByEquipmentType");

	UBioInventoryView_ExtractXModIndicesByEquipmentType_Params params;
	params.eEquipType = eEquipType;
	params.xModTypeUsedForFilter = xModTypeUsedForFilter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aIndices != nullptr)
		*aIndices = params.aIndices;
}


// Function BIOC_Base.BioInventoryView.ExtractEquippableIndices
// (Native, Public, HasOutParms)
// Parameters:
// TArray<int>                    aEquipIndices                  (Parm, OutParm, NeedCtorLink)
// TEnumAsByte<EBioEquipmentType> eEquipType                     (Parm)

void UBioInventoryView::ExtractEquippableIndices(TEnumAsByte<EBioEquipmentType> eEquipType, TArray<int>* aEquipIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.ExtractEquippableIndices");

	UBioInventoryView_ExtractEquippableIndices_Params params;
	params.eEquipType = eEquipType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aEquipIndices != nullptr)
		*aEquipIndices = params.aEquipIndices;
}


// Function BIOC_Base.BioInventoryView.ExtractWeaponIndices
// (Native, Public, HasOutParms)
// Parameters:
// TArray<int>                    aEquipIndices                  (Parm, OutParm, NeedCtorLink)
// TEnumAsByte<EBioItemWeaponRangedType> eWeaponRangedType              (Parm)

void UBioInventoryView::ExtractWeaponIndices(TEnumAsByte<EBioItemWeaponRangedType> eWeaponRangedType, TArray<int>* aEquipIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.ExtractWeaponIndices");

	UBioInventoryView_ExtractWeaponIndices_Params params;
	params.eWeaponRangedType = eWeaponRangedType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aEquipIndices != nullptr)
		*aEquipIndices = params.aEquipIndices;
}


// Function BIOC_Base.BioInventoryView.ClearObjectRefs
// (Native, Public)

void UBioInventoryView::ClearObjectRefs()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryView.ClearObjectRefs");

	UBioInventoryView_ClearObjectRefs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.BuildEquippableXModList
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            nXModSlotType                  (Parm)

void UBioInventoryGuiInterface::BuildEquippableXModList(int nXModSlotType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.BuildEquippableXModList");

	UBioInventoryGuiInterface_BuildEquippableXModList_Params params;
	params.nXModSlotType = nXModSlotType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.Appraise
// (Final, Defined, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EInventoryResourceTypes> eResource                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioInventoryGuiInterface::Appraise(int nIndex, TEnumAsByte<EInventoryResourceTypes> eResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.Appraise");

	UBioInventoryGuiInterface_Appraise_Params params;
	params.nIndex = nIndex;
	params.eResource = eResource;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.ConvertItemIntoResource
// (Final, Defined, Public)
// Parameters:
// int                            nFilteredIndex                 (Parm)
// TEnumAsByte<EInventoryResourceTypes> eResource                      (Parm)

void UBioInventoryGuiInterface::ConvertItemIntoResource(int nFilteredIndex, TEnumAsByte<EInventoryResourceTypes> eResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.ConvertItemIntoResource");

	UBioInventoryGuiInterface_ConvertItemIntoResource_Params params;
	params.nFilteredIndex = nFilteredIndex;
	params.eResource = eResource;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.GetStatLabel
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EBioInventoryGuiInterfaceItemStat> eStat                          (Parm)

void UBioInventoryGuiInterface::GetStatLabel(TEnumAsByte<EBioInventoryGuiInterfaceItemStat> eStat)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.GetStatLabel");

	UBioInventoryGuiInterface_GetStatLabel_Params params;
	params.eStat = eStat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.GetPrevEquipSlot
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eCompareSlot                   (OptionalParm, Parm)
// TEnumAsByte<EGuiEquipSlots>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EGuiEquipSlots> UBioInventoryGuiInterface::GetPrevEquipSlot(TEnumAsByte<EGuiEquipSlots> eCompareSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.GetPrevEquipSlot");

	UBioInventoryGuiInterface_GetPrevEquipSlot_Params params;
	params.eCompareSlot = eCompareSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.GetNextEquipSlot
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eCompareSlot                   (OptionalParm, Parm)
// TEnumAsByte<EGuiEquipSlots>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EGuiEquipSlots> UBioInventoryGuiInterface::GetNextEquipSlot(TEnumAsByte<EGuiEquipSlots> eCompareSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.GetNextEquipSlot");

	UBioInventoryGuiInterface_GetNextEquipSlot_Params params;
	params.eCompareSlot = eCompareSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.GetFirstEquipSlot
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EGuiEquipSlots> UBioInventoryGuiInterface::GetFirstEquipSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.GetFirstEquipSlot");

	UBioInventoryGuiInterface_GetFirstEquipSlot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.HasEquipSlot
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eSlot                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::HasEquipSlot(TEnumAsByte<EGuiEquipSlots> eSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.HasEquipSlot");

	UBioInventoryGuiInterface_HasEquipSlot_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.DescribeGuiItemStats
// (Final, Defined, Public)
// Parameters:
// struct FBioInventoryGuiInterfaceItemStats stats                          (Const, Parm, NeedCtorLink)

void UBioInventoryGuiInterface::DescribeGuiItemStats(const struct FBioInventoryGuiInterfaceItemStats& stats)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.DescribeGuiItemStats");

	UBioInventoryGuiInterface_DescribeGuiItemStats_Params params;
	params.stats = stats;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.DescribeGuiItem
// (Final, Defined, Public)
// Parameters:
// struct FItemInfo               ItemToDescribe                 (Parm, NeedCtorLink)

void UBioInventoryGuiInterface::DescribeGuiItem(const struct FItemInfo& ItemToDescribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.DescribeGuiItem");

	UBioInventoryGuiInterface_DescribeGuiItem_Params params;
	params.ItemToDescribe = ItemToDescribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.ComplementAndScale
// (Final, Defined, Private, HasOutParms)
// Parameters:
// float                          fValue                         (Parm, OutParm)
// float                          FMax                           (Parm)

void UBioInventoryGuiInterface::ComplementAndScale(float FMax, float* fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.ComplementAndScale");

	UBioInventoryGuiInterface_ComplementAndScale_Params params;
	params.FMax = FMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fValue != nullptr)
		*fValue = params.fValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.Scale
// (Final, Defined, Private, HasOutParms)
// Parameters:
// float                          fValue                         (Parm, OutParm)
// float                          FMax                           (Parm)

void UBioInventoryGuiInterface::Scale(float FMax, float* fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.Scale");

	UBioInventoryGuiInterface_Scale_Params params;
	params.FMax = FMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fValue != nullptr)
		*fValue = params.fValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.Drop
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::Drop()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.Drop");

	UBioInventoryGuiInterface_Drop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.Equip
// (Defined, Public)
// Parameters:
// int                            filteredIndex                  (Parm)
// bool                           bXferXMods                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::Equip(int filteredIndex, bool bXferXMods)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.Equip");

	UBioInventoryGuiInterface_Equip_Params params;
	params.filteredIndex = filteredIndex;
	params.bXferXMods = bXferXMods;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.Unequip
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::Unequip()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.Unequip");

	UBioInventoryGuiInterface_Unequip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.DirectSetTargetInventory
// (Defined, Public)
// Parameters:
// class UBioInventory*           pInv                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::DirectSetTargetInventory(class UBioInventory* pInv)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.DirectSetTargetInventory");

	UBioInventoryGuiInterface_DirectSetTargetInventory_Params params;
	params.pInv = pInv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.SetTargetInventory
// (Defined, Public)
// Parameters:
// class UBioInventory*           pInv                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::SetTargetInventory(class UBioInventory* pInv)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.SetTargetInventory");

	UBioInventoryGuiInterface_SetTargetInventory_Params params;
	params.pInv = pInv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.DirectSetTarget
// (Defined, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::DirectSetTarget(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.DirectSetTarget");

	UBioInventoryGuiInterface_DirectSetTarget_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.SetTarget
// (Defined, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::SetTarget(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.SetTarget");

	UBioInventoryGuiInterface_SetTarget_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.GetEquippedItem
// (Final, Defined, Public, HasOutParms)
// Parameters:
// struct FItemInfo               stEquippedItem                 (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::GetEquippedItem(struct FItemInfo* stEquippedItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.GetEquippedItem");

	UBioInventoryGuiInterface_GetEquippedItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stEquippedItem != nullptr)
		*stEquippedItem = params.stEquippedItem;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.SelectItemSlot
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eSlot                          (Parm)

void UBioInventoryGuiInterface::SelectItemSlot(TEnumAsByte<EGuiEquipSlots> eSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.SelectItemSlot");

	UBioInventoryGuiInterface_SelectItemSlot_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.MapSlotToType
// (Final, Defined, Private, HasOutParms)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eSlot                          (Parm)
// int                            nWeapon                        (Parm, OutParm)
// int                            nEquipment                     (Parm, OutParm)

void UBioInventoryGuiInterface::MapSlotToType(TEnumAsByte<EGuiEquipSlots> eSlot, int* nWeapon, int* nEquipment)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.MapSlotToType");

	UBioInventoryGuiInterface_MapSlotToType_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nWeapon != nullptr)
		*nWeapon = params.nWeapon;
	if (nEquipment != nullptr)
		*nEquipment = params.nEquipment;
}


// Function BIOC_Base.BioInventoryGuiInterface.ItemStatValue
// (Final, Defined, Private, HasOutParms)
// Parameters:
// class UBioItem*                oItem                          (Parm)
// TEnumAsByte<EGuiItemStatTypes> eItemStatType                  (Parm)
// struct FBioInventoryGuiInterfaceItemStat Stat                           (Parm, OutParm)

void UBioInventoryGuiInterface::ItemStatValue(class UBioItem* oItem, TEnumAsByte<EGuiItemStatTypes> eItemStatType, struct FBioInventoryGuiInterfaceItemStat* Stat)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.ItemStatValue");

	UBioInventoryGuiInterface_ItemStatValue_Params params;
	params.oItem = oItem;
	params.eItemStatType = eItemStatType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Stat != nullptr)
		*Stat = params.Stat;
}


// Function BIOC_Base.BioInventoryGuiInterface.Round
// (Final, Defined, Private)
// Parameters:
// float                          F                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioInventoryGuiInterface::Round(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.Round");

	UBioInventoryGuiInterface_Round_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.CanBearArmorWeight
// (Final, Defined, Private)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)
// class UBioItemArmor*           oArmor                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::CanBearArmorWeight(class ABioPawn* oPawn, class UBioItemArmor* oArmor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.CanBearArmorWeight");

	UBioInventoryGuiInterface_CanBearArmorWeight_Params params;
	params.oPawn = oPawn;
	params.oArmor = oArmor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.PrepareSlotList
// (Final, Defined, Private, HasOutParms)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    Slot                           (Parm)
// TArray<TEnumAsByte<EGuiEquipSlots>> slotList                       (Parm, OutParm, NeedCtorLink)

void UBioInventoryGuiInterface::PrepareSlotList(TEnumAsByte<EGuiEquipSlots> Slot, TArray<TEnumAsByte<EGuiEquipSlots>>* slotList)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.PrepareSlotList");

	UBioInventoryGuiInterface_PrepareSlotList_Params params;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (slotList != nullptr)
		*slotList = params.slotList;
}


// Function BIOC_Base.BioInventoryGuiInterface.BuildResourcesList
// (Final, Defined, Public, HasDefaults)

void UBioInventoryGuiInterface::BuildResourcesList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.BuildResourcesList");

	UBioInventoryGuiInterface_BuildResourcesList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.BuildEquippableItemList
// (Final, Defined, Private)

void UBioInventoryGuiInterface::BuildEquippableItemList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.BuildEquippableItemList");

	UBioInventoryGuiInterface_BuildEquippableItemList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.BuildResourceInfo
// (Final, Defined, Private, HasOutParms)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eResource                      (Parm)
// float                          fQty                           (Parm)
// struct FResourceInfo           oResourceInfo                  (Parm, OutParm)

void UBioInventoryGuiInterface::BuildResourceInfo(TEnumAsByte<EInventoryResourceTypes> eResource, float fQty, struct FResourceInfo* oResourceInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.BuildResourceInfo");

	UBioInventoryGuiInterface_BuildResourceInfo_Params params;
	params.eResource = eResource;
	params.fQty = fQty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oResourceInfo != nullptr)
		*oResourceInfo = params.oResourceInfo;
}


// Function BIOC_Base.BioInventoryGuiInterface.IsMerchandisable
// (Final, Defined, Private)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eItemsSlot                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::IsMerchandisable(TEnumAsByte<EGuiEquipSlots> eItemsSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.IsMerchandisable");

	UBioInventoryGuiInterface_IsMerchandisable_Params params;
	params.eItemsSlot = eItemsSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.CreateXModInfo
// (Final, Defined, Event, Public, HasDefaults)
// Parameters:
// class UBioItemXMod*            oItem                          (Parm)
// int                            nXModType                      (Parm)
// struct FXModInfo               ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FXModInfo UBioInventoryGuiInterface::CreateXModInfo(class UBioItemXMod* oItem, int nXModType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.CreateXModInfo");

	UBioInventoryGuiInterface_CreateXModInfo_Params params;
	params.oItem = oItem;
	params.nXModType = nXModType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.CreateItemInfo
// (Final, Defined, Event, Public, HasDefaults)
// Parameters:
// class UBioItem*                oItem                          (Parm)
// TEnumAsByte<EGuiEquipSlots>    slotType                       (Parm)
// int                            nOverrideIndex                 (Parm)
// struct FItemInfo               ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FItemInfo UBioInventoryGuiInterface::CreateItemInfo(class UBioItem* oItem, TEnumAsByte<EGuiEquipSlots> slotType, int nOverrideIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.CreateItemInfo");

	UBioInventoryGuiInterface_CreateItemInfo_Params params;
	params.oItem = oItem;
	params.slotType = slotType;
	params.nOverrideIndex = nOverrideIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.FullReset
// (Native, Public)

void UBioInventoryGuiInterface::FullReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.FullReset");

	UBioInventoryGuiInterface_FullReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.ClearCachedItemInfo
// (Native, Public)

void UBioInventoryGuiInterface::ClearCachedItemInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.ClearCachedItemInfo");

	UBioInventoryGuiInterface_ClearCachedItemInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.CacheItemInfo
// (Native, Public, HasOutParms)
// Parameters:
// class UBioItem*                oItem                          (Parm)
// struct FItemInfo               rItemInfo                      (Const, Parm, OutParm, NeedCtorLink)

void UBioInventoryGuiInterface::CacheItemInfo(class UBioItem* oItem, struct FItemInfo* rItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.CacheItemInfo");

	UBioInventoryGuiInterface_CacheItemInfo_Params params;
	params.oItem = oItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rItemInfo != nullptr)
		*rItemInfo = params.rItemInfo;
}


// Function BIOC_Base.BioInventoryGuiInterface.FindCachedItemInfo
// (Native, Public, HasOutParms)
// Parameters:
// class UBioItem*                oItem                          (Parm)
// TEnumAsByte<EGuiEquipSlots>    slotType                       (Parm)
// struct FItemInfo               rItemInfo                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInventoryGuiInterface::FindCachedItemInfo(class UBioItem* oItem, TEnumAsByte<EGuiEquipSlots> slotType, struct FItemInfo* rItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.FindCachedItemInfo");

	UBioInventoryGuiInterface_FindCachedItemInfo_Params params;
	params.oItem = oItem;
	params.slotType = slotType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rItemInfo != nullptr)
		*rItemInfo = params.rItemInfo;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.ExtractRawItemStats
// (Final, Defined, Private, HasDefaults)
// Parameters:
// class UBioItemSophisticated*   oItem                          (Parm)
// TEnumAsByte<EGuiItemStatTypes> ePrimaryStatType               (Parm)
// TEnumAsByte<EGuiItemStatTypes> eSecondaryStatType             (Parm)
// TEnumAsByte<EGuiItemStatTypes> eTertiaryStatType              (Parm)
// struct FBioInventoryGuiInterfaceItemStats ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FBioInventoryGuiInterfaceItemStats UBioInventoryGuiInterface::ExtractRawItemStats(class UBioItemSophisticated* oItem, TEnumAsByte<EGuiItemStatTypes> ePrimaryStatType, TEnumAsByte<EGuiItemStatTypes> eSecondaryStatType, TEnumAsByte<EGuiItemStatTypes> eTertiaryStatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.ExtractRawItemStats");

	UBioInventoryGuiInterface_ExtractRawItemStats_Params params;
	params.oItem = oItem;
	params.ePrimaryStatType = ePrimaryStatType;
	params.eSecondaryStatType = eSecondaryStatType;
	params.eTertiaryStatType = eTertiaryStatType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInventoryGuiInterface.GetStatTypes
// (Final, Defined, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eSlot                          (Parm)
// TEnumAsByte<EGuiItemStatTypes> ePrimaryStatType               (Parm, OutParm)
// TEnumAsByte<EGuiItemStatTypes> eSecondaryStatType             (Parm, OutParm)
// TEnumAsByte<EGuiItemStatTypes> eTertiaryStatType              (Parm, OutParm)

void UBioInventoryGuiInterface::GetStatTypes(TEnumAsByte<EGuiEquipSlots> eSlot, TEnumAsByte<EGuiItemStatTypes>* ePrimaryStatType, TEnumAsByte<EGuiItemStatTypes>* eSecondaryStatType, TEnumAsByte<EGuiItemStatTypes>* eTertiaryStatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.GetStatTypes");

	UBioInventoryGuiInterface_GetStatTypes_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ePrimaryStatType != nullptr)
		*ePrimaryStatType = params.ePrimaryStatType;
	if (eSecondaryStatType != nullptr)
		*eSecondaryStatType = params.eSecondaryStatType;
	if (eTertiaryStatType != nullptr)
		*eTertiaryStatType = params.eTertiaryStatType;
}


// Function BIOC_Base.BioInventoryGuiInterface.FilterEquippableItemsByPlotConditional
// (Native, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioInventoryGuiInterface::FilterEquippableItemsByPlotConditional(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.FilterEquippableItemsByPlotConditional");

	UBioInventoryGuiInterface_FilterEquippableItemsByPlotConditional_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventoryGuiInterface.SortEquippableItems
// (Native, Public)
// Parameters:
// int                            nSortMode                      (Parm)

void UBioInventoryGuiInterface::SortEquippableItems(int nSortMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventoryGuiInterface.SortEquippableItems");

	UBioInventoryGuiInterface_SortEquippableItems_Params params;
	params.nSortMode = nSortMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMountFallVolume.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioMountFallVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMountFallVolume.UnTouch");

	ABioMountFallVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMountFallVolume.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioMountFallVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMountFallVolume.Touch");

	ABioMountFallVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTrigger.BioBeginPlay
// (Defined, Event, Public)

void ABioTrigger::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTrigger.BioBeginPlay");

	ABioTrigger_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTrigger.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioTrigger::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTrigger.UnTouch");

	ABioTrigger_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTrigger.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioTrigger::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTrigger.Touch");

	ABioTrigger_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventNotifier.RemoveTalentNotify
// (Final, Native, Public)
// Parameters:
// class ABioPawn*                oCharacter                     (Parm)

void UBioEventNotifier::RemoveTalentNotify(class ABioPawn* oCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.RemoveTalentNotify");

	UBioEventNotifier_RemoveTalentNotify_Params params;
	params.oCharacter = oCharacter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventNotifier.OnTalentNoticeInput
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioEventNotifier::OnTalentNoticeInput(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.OnTalentNoticeInput");

	UBioEventNotifier_OnTalentNoticeInput_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventNotifier.PendingTalentNotify
// (Final, Native, Public)
// Parameters:
// class ABioPawn*                oCharacter                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioEventNotifier::PendingTalentNotify(class ABioPawn* oCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.PendingTalentNotify");

	UBioEventNotifier_PendingTalentNotify_Params params;
	params.oCharacter = oCharacter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioEventNotifier.ShowTalentNotify
// (Final, Native, Public)
// Parameters:
// class ABioPawn*                oCharacter                     (Parm)

void UBioEventNotifier::ShowTalentNotify(class ABioPawn* oCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.ShowTalentNotify");

	UBioEventNotifier_ShowTalentNotify_Params params;
	params.oCharacter = oCharacter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventNotifier.AddNotice
// (Final, Native, Public)
// Parameters:
// int                            nType                          (Parm)
// int                            nContext                       (Parm)
// int                            nTimeToLive                    (Parm)
// int                            nIconIndex                     (Parm)
// struct FString                 strTitle                       (Parm, NeedCtorLink)
// int                            nQuantity                      (OptionalParm, Parm)
// int                            nQuantMin                      (OptionalParm, Parm)
// int                            nQuantMax                      (OptionalParm, Parm)

void UBioEventNotifier::AddNotice(int nType, int nContext, int nTimeToLive, int nIconIndex, const struct FString& strTitle, int nQuantity, int nQuantMin, int nQuantMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.AddNotice");

	UBioEventNotifier_AddNotice_Params params;
	params.nType = nType;
	params.nContext = nContext;
	params.nTimeToLive = nTimeToLive;
	params.nIconIndex = nIconIndex;
	params.strTitle = strTitle;
	params.nQuantity = nQuantity;
	params.nQuantMin = nQuantMin;
	params.nQuantMax = nQuantMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventNotifier.NotarizeNotices
// (Native, Public)

void UBioEventNotifier::NotarizeNotices()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.NotarizeNotices");

	UBioEventNotifier_NotarizeNotices_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventNotifier.HasListChanged
// (Native, Public)

void UBioEventNotifier::HasListChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.HasListChanged");

	UBioEventNotifier_HasListChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEventNotifier.RetrieveNotices
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FBioDisplayNotice> lstNotices                     (Parm, OutParm, NeedCtorLink)

void UBioEventNotifier::RetrieveNotices(TArray<struct FBioDisplayNotice>* lstNotices)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEventNotifier.RetrieveNotices");

	UBioEventNotifier_RetrieveNotices_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstNotices != nullptr)
		*lstNotices = params.lstNotices;
}


// Function BIOC_Base.BioWorldInfo.StartNoBrowserWheelTimer
// (Defined, Event, Public)

void ABioWorldInfo::StartNoBrowserWheelTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.StartNoBrowserWheelTimer");

	ABioWorldInfo_StartNoBrowserWheelTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.SaveGamesExist
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::SaveGamesExist()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SaveGamesExist");

	ABioWorldInfo_SaveGamesExist_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.HandleSkillGameButtonPress
// (Defined, Event, Public)
// Parameters:
// int                            nButtonPressed                 (Parm)

void ABioWorldInfo::HandleSkillGameButtonPress(int nButtonPressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.HandleSkillGameButtonPress");

	ABioWorldInfo_HandleSkillGameButtonPress_Params params;
	params.nButtonPressed = nButtonPressed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.UpdateLowestCombatDifficulty
// (Defined, Event, Public)

void ABioWorldInfo::UpdateLowestCombatDifficulty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateLowestCombatDifficulty");

	ABioWorldInfo_UpdateLowestCombatDifficulty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.BioStartMatch
// (Defined, Event, Public)

void ABioWorldInfo::BioStartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.BioStartMatch");

	ABioWorldInfo_BioStartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioWorldInfo::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetSaveObjectClass");

	ABioWorldInfo_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.OnPlayerSquadDeath
// (Defined, Public)

void ABioWorldInfo::OnPlayerSquadDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.OnPlayerSquadDeath");

	ABioWorldInfo_OnPlayerSquadDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.EndGame
// (Defined, Public)

void ABioWorldInfo::EndGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.EndGame");

	ABioWorldInfo_EndGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.OnSaveGameNotFound
// (Native, Public)
// Parameters:
// class UObject*                 oDelegateObject                (OptionalParm, Parm)
// struct FName                   nmDelegateFunctionName         (OptionalParm, Parm)

void ABioWorldInfo::OnSaveGameNotFound(class UObject* oDelegateObject, const struct FName& nmDelegateFunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.OnSaveGameNotFound");

	ABioWorldInfo_OnSaveGameNotFound_Params params;
	params.oDelegateObject = oDelegateObject;
	params.nmDelegateFunctionName = nmDelegateFunctionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetGlobalEvents
// (Native, Public, HasOutParms)
// Parameters:
// class UClass*                  EventClass                     (Parm)
// TArray<class USequenceObject*> aEvents                        (Parm, OutParm, NeedCtorLink)

void ABioWorldInfo::GetGlobalEvents(class UClass* EventClass, TArray<class USequenceObject*>* aEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetGlobalEvents");

	ABioWorldInfo_GetGlobalEvents_Params params;
	params.EventClass = EventClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aEvents != nullptr)
		*aEvents = params.aEvents;
}


// Function BIOC_Base.BioWorldInfo.SetSoundGroupPitch
// (Native, Public)
// Parameters:
// struct FName                   SoundGroupName                 (Parm)
// float                          fPitch                         (Parm)

void ABioWorldInfo::SetSoundGroupPitch(const struct FName& SoundGroupName, float fPitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetSoundGroupPitch");

	ABioWorldInfo_SetSoundGroupPitch_Params params;
	params.SoundGroupName = SoundGroupName;
	params.fPitch = fPitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetSoundGroupPitch
// (Native, Public)
// Parameters:
// struct FName                   SoundGroupName                 (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioWorldInfo::GetSoundGroupPitch(const struct FName& SoundGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetSoundGroupPitch");

	ABioWorldInfo_GetSoundGroupPitch_Params params;
	params.SoundGroupName = SoundGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.SetSoundGroupPriority
// (Native, Public)
// Parameters:
// struct FName                   SoundGroupName                 (Parm)
// float                          fPriority                      (Parm)

void ABioWorldInfo::SetSoundGroupPriority(const struct FName& SoundGroupName, float fPriority)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetSoundGroupPriority");

	ABioWorldInfo_SetSoundGroupPriority_Params params;
	params.SoundGroupName = SoundGroupName;
	params.fPriority = fPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetSoundGroupPriority
// (Native, Public)
// Parameters:
// struct FName                   SoundGroupName                 (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioWorldInfo::GetSoundGroupPriority(const struct FName& SoundGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetSoundGroupPriority");

	ABioWorldInfo_GetSoundGroupPriority_Params params;
	params.SoundGroupName = SoundGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.SetSoundGroupVolume
// (Native, Public)
// Parameters:
// struct FName                   SoundGroupName                 (Parm)
// float                          fVolume                        (Parm)
// float                          fFadeDuration                  (OptionalParm, Parm)

void ABioWorldInfo::SetSoundGroupVolume(const struct FName& SoundGroupName, float fVolume, float fFadeDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetSoundGroupVolume");

	ABioWorldInfo_SetSoundGroupVolume_Params params;
	params.SoundGroupName = SoundGroupName;
	params.fVolume = fVolume;
	params.fFadeDuration = fFadeDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetSoundGroupVolume
// (Native, Public)
// Parameters:
// struct FName                   SoundGroupName                 (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioWorldInfo::GetSoundGroupVolume(const struct FName& SoundGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetSoundGroupVolume");

	ABioWorldInfo_GetSoundGroupVolume_Params params;
	params.SoundGroupName = SoundGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetIsOriginalFileCreator
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetIsOriginalFileCreator()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetIsOriginalFileCreator");

	ABioWorldInfo_GetIsOriginalFileCreator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.SetInvalidSaveFileCreator
// (Native, Public)
// Parameters:
// unsigned char                  nSaveFileType                  (Parm)
// bool                           bInvalid                       (Parm)

void ABioWorldInfo::SetInvalidSaveFileCreator(unsigned char nSaveFileType, bool bInvalid)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetInvalidSaveFileCreator");

	ABioWorldInfo_SetInvalidSaveFileCreator_Params params;
	params.nSaveFileType = nSaveFileType;
	params.bInvalid = bInvalid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.SetDisplayRealSaveGameNames
// (Native, Public)
// Parameters:
// bool                           i_bValue                       (Parm)

void ABioWorldInfo::SetDisplayRealSaveGameNames(bool i_bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetDisplayRealSaveGameNames");

	ABioWorldInfo_SetDisplayRealSaveGameNames_Params params;
	params.i_bValue = i_bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetDisplayRealSaveGameNames
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetDisplayRealSaveGameNames()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetDisplayRealSaveGameNames");

	ABioWorldInfo_GetDisplayRealSaveGameNames_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.SetGuiStartupSystemsInitialized
// (Native, Public)
// Parameters:
// bool                           i_bValue                       (Parm)

void ABioWorldInfo::SetGuiStartupSystemsInitialized(bool i_bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetGuiStartupSystemsInitialized");

	ABioWorldInfo_SetGuiStartupSystemsInitialized_Params params;
	params.i_bValue = i_bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetGuiStartupSystemsInitialized
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetGuiStartupSystemsInitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetGuiStartupSystemsInitialized");

	ABioWorldInfo_GetGuiStartupSystemsInitialized_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.SetRenderStateOfPlayerToDefault
// (Native, Public)
// Parameters:
// TEnumAsByte<EPlayerRenderStateSetting> RenderState                    (Parm)

void ABioWorldInfo::SetRenderStateOfPlayerToDefault(TEnumAsByte<EPlayerRenderStateSetting> RenderState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetRenderStateOfPlayerToDefault");

	ABioWorldInfo_SetRenderStateOfPlayerToDefault_Params params;
	params.RenderState = RenderState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.SetRenderStateOfPlayer
// (Native, Public)
// Parameters:
// TEnumAsByte<EPlayerRenderStateSetting> RenderState                    (Parm)
// float                          fValue                         (Parm)

void ABioWorldInfo::SetRenderStateOfPlayer(TEnumAsByte<EPlayerRenderStateSetting> RenderState, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetRenderStateOfPlayer");

	ABioWorldInfo_SetRenderStateOfPlayer_Params params;
	params.RenderState = RenderState;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetRenderStateOfPlayer
// (Native, Public)
// Parameters:
// TEnumAsByte<EPlayerRenderStateSetting> RenderState                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioWorldInfo::GetRenderStateOfPlayer(TEnumAsByte<EPlayerRenderStateSetting> RenderState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetRenderStateOfPlayer");

	ABioWorldInfo_GetRenderStateOfPlayer_Params params;
	params.RenderState = RenderState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.UpdateEnvironmentEffects
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::UpdateEnvironmentEffects(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateEnvironmentEffects");

	ABioWorldInfo_UpdateEnvironmentEffects_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.UpdateSubtitles
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::UpdateSubtitles(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateSubtitles");

	ABioWorldInfo_UpdateSubtitles_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetSubtitles
// (Native, Public)
// Parameters:
// class UBioSubtitles*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSubtitles* ABioWorldInfo::GetSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetSubtitles");

	ABioWorldInfo_GetSubtitles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.ApplyWind
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::ApplyWind(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ApplyWind");

	ABioWorldInfo_ApplyWind_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.AdjustWind
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::AdjustWind(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.AdjustWind");

	ABioWorldInfo_AdjustWind_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.DoFakeWind
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::DoFakeWind(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.DoFakeWind");

	ABioWorldInfo_DoFakeWind_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.PrintSlowMotionQ
// (Native, Public)

void ABioWorldInfo::PrintSlowMotionQ()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.PrintSlowMotionQ");

	ABioWorldInfo_PrintSlowMotionQ_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.ClearAllSlowMotion
// (Native, Public)

void ABioWorldInfo::ClearAllSlowMotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ClearAllSlowMotion");

	ABioWorldInfo_ClearAllSlowMotion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.EndSlowMoRequest
// (Native, Public)
// Parameters:
// int                            nReqID                         (Parm)
// float                          fExpireTime                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::EndSlowMoRequest(int nReqID, float fExpireTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.EndSlowMoRequest");

	ABioWorldInfo_EndSlowMoRequest_Params params;
	params.nReqID = nReqID;
	params.fExpireTime = fExpireTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.RequestSlowMotion
// (Native, Public)
// Parameters:
// float                          fSpeed                         (Parm)
// float                          fLifeTime                      (Parm)
// int                            nPriority                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioWorldInfo::RequestSlowMotion(float fSpeed, float fLifeTime, int nPriority)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.RequestSlowMotion");

	ABioWorldInfo_RequestSlowMotion_Params params;
	params.fSpeed = fSpeed;
	params.fLifeTime = fLifeTime;
	params.nPriority = nPriority;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.UpdateSlowMotionQ
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void ABioWorldInfo::UpdateSlowMotionQ(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateSlowMotionQ");

	ABioWorldInfo_UpdateSlowMotionQ_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.SetGlobalTlk
// (Native, Public)
// Parameters:
// bool                           bMale                          (Parm)
// bool                           bPurge                         (OptionalParm, Parm)

void ABioWorldInfo::SetGlobalTlk(bool bMale, bool bPurge)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetGlobalTlk");

	ABioWorldInfo_SetGlobalTlk_Params params;
	params.bMale = bMale;
	params.bPurge = bPurge;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.LoadDLCTlkFiles
// (Native, Public)
// Parameters:
// bool                           bMale                          (Parm)
// bool                           bFemale                        (Parm)
// bool                           bAddMale                       (Parm)
// bool                           bAddFemale                     (Parm)

void ABioWorldInfo::LoadDLCTlkFiles(bool bMale, bool bFemale, bool bAddMale, bool bAddFemale)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.LoadDLCTlkFiles");

	ABioWorldInfo_LoadDLCTlkFiles_Params params;
	params.bMale = bMale;
	params.bFemale = bFemale;
	params.bAddMale = bAddMale;
	params.bAddFemale = bAddFemale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.LoadTlkFiles
// (Native, Public)
// Parameters:
// bool                           bMale                          (Parm)
// bool                           bFemale                        (Parm)
// bool                           bAddMale                       (Parm)
// bool                           bAddFemale                     (Parm)

void ABioWorldInfo::LoadTlkFiles(bool bMale, bool bFemale, bool bAddMale, bool bAddFemale)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.LoadTlkFiles");

	ABioWorldInfo_LoadTlkFiles_Params params;
	params.bMale = bMale;
	params.bFemale = bFemale;
	params.bAddMale = bAddMale;
	params.bAddFemale = bAddFemale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.BioBeginPlay
// (Defined, Simulated, Event, Public)

void ABioWorldInfo::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.BioBeginPlay");

	ABioWorldInfo_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.IsAbleToSave
// (Native, Public, HasOutParms)
// Parameters:
// struct FString                 sReason                        (OptionalParm, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::IsAbleToSave(struct FString* sReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.IsAbleToSave");

	ABioWorldInfo_IsAbleToSave_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sReason != nullptr)
		*sReason = params.sReason;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.CheckState
// (Defined, Event, Public)
// Parameters:
// int                            nState                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::CheckState(int nState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.CheckState");

	ABioWorldInfo_CheckState_Params params;
	params.nState = nState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetCameraManager
// (Native, Public)
// Parameters:
// class ABioCameraManager*       ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioCameraManager* ABioWorldInfo::GetCameraManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetCameraManager");

	ABioWorldInfo_GetCameraManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.InterruptConversation
// (Native, Public)
// Parameters:
// class UBioConversation*        oConv                          (OptionalParm, Parm)

void ABioWorldInfo::InterruptConversation(class UBioConversation* oConv)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.InterruptConversation");

	ABioWorldInfo_InterruptConversation_Params params;
	params.oConv = oConv;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.UpdateConversation
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::UpdateConversation(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateConversation");

	ABioWorldInfo_UpdateConversation_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.EndCurrentFaceOnlyVO
// (Native, Public)
// Parameters:
// class UBioSeqAct_FaceOnlyVO*   pFOVO                          (Parm)

void ABioWorldInfo::EndCurrentFaceOnlyVO(class UBioSeqAct_FaceOnlyVO* pFOVO)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.EndCurrentFaceOnlyVO");

	ABioWorldInfo_EndCurrentFaceOnlyVO_Params params;
	params.pFOVO = pFOVO;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.EndCurrentConversation
// (Native, Public)

void ABioWorldInfo::EndCurrentConversation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.EndCurrentConversation");

	ABioWorldInfo_EndCurrentConversation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.StartConversation
// (Native, Public)
// Parameters:
// class UBioConversation*        oConv                          (Parm)
// class AActor*                  Owner_                         (Parm)
// class AActor*                  Target                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::StartConversation(class UBioConversation* oConv, class AActor* Owner_, class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.StartConversation");

	ABioWorldInfo_StartConversation_Params params;
	params.oConv = oConv;
	params.Owner_ = Owner_;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetConversation
// (Defined, Event, Public)
// Parameters:
// class UBioConversation*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioConversation* ABioWorldInfo::GetConversation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetConversation");

	ABioWorldInfo_GetConversation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.ClearCurrentGame
// (Defined, Event, Public)
// Parameters:
// bool                           bRestorGamerProfilePlotManagerVariables (OptionalParm, Parm)

void ABioWorldInfo::ClearCurrentGame(bool bRestorGamerProfilePlotManagerVariables)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ClearCurrentGame");

	ABioWorldInfo_ClearCurrentGame_Params params;
	params.bRestorGamerProfilePlotManagerVariables = bRestorGamerProfilePlotManagerVariables;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetGlobalVariables
// (Native, Public)
// Parameters:
// class UBioGlobalVariableTable* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGlobalVariableTable* ABioWorldInfo::GetGlobalVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetGlobalVariables");

	ABioWorldInfo_GetGlobalVariables_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetBioGamerProfile
// (Native, Public)
// Parameters:
// class UBioGamerProfile*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamerProfile* ABioWorldInfo::GetBioGamerProfile()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetBioGamerProfile");

	ABioWorldInfo_GetBioGamerProfile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.DownloadableContentMessageBox
// (Final, Native, Public)

void ABioWorldInfo::DownloadableContentMessageBox()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.DownloadableContentMessageBox");

	ABioWorldInfo_DownloadableContentMessageBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.InitDownloadableContent
// (Final, Native, Public)

void ABioWorldInfo::InitDownloadableContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.InitDownloadableContent");

	ABioWorldInfo_InitDownloadableContent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.InitGUIDependentStartupSystems
// (Final, Native, Public)
// Parameters:
// class UBioSFPanel*             i_oPanel                       (Parm)

void ABioWorldInfo::InitGUIDependentStartupSystems(class UBioSFPanel* i_oPanel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.InitGUIDependentStartupSystems");

	ABioWorldInfo_InitGUIDependentStartupSystems_Params params;
	params.i_oPanel = i_oPanel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.Tick
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::Tick(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.Tick");

	ABioWorldInfo_Tick_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.UpdateTutorialMovie
// (Native, Public)

void ABioWorldInfo::UpdateTutorialMovie()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateTutorialMovie");

	ABioWorldInfo_UpdateTutorialMovie_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.LootBagActivated
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::LootBagActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.LootBagActivated");

	ABioWorldInfo_LootBagActivated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.CreateLootBag
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 SpawnLocation                  (Const, Parm, OutParm)
// class ULevel*                  spawnLevel                     (Parm)
// struct FString                 actorTypeString                (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::CreateLootBag(class ULevel* spawnLevel, const struct FString& actorTypeString, struct FVector* SpawnLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.CreateLootBag");

	ABioWorldInfo_CreateLootBag_Params params;
	params.spawnLevel = spawnLevel;
	params.actorTypeString = actorTypeString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpawnLocation != nullptr)
		*SpawnLocation = params.SpawnLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetLocalPlayerController
// (Native, Public)
// Parameters:
// class ABioPlayerController*    ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPlayerController* ABioWorldInfo::GetLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetLocalPlayerController");

	ABioWorldInfo_GetLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.TutorialCompletionCallback
// (Public, Delegate)

void ABioWorldInfo::TutorialCompletionCallback()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.TutorialCompletionCallback");

	ABioWorldInfo_TutorialCompletionCallback_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.BioVINCE_MapName_PlayerDeath
// (Native, Public)

void ABioWorldInfo::BioVINCE_MapName_PlayerDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.BioVINCE_MapName_PlayerDeath");

	ABioWorldInfo_BioVINCE_MapName_PlayerDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.PlayEndGameMusic
// (Final, Native, Public)

void ABioWorldInfo::PlayEndGameMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.PlayEndGameMusic");

	ABioWorldInfo_PlayEndGameMusic_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.OnBioMatchStart
// (Native, Public)

void ABioWorldInfo::OnBioMatchStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.OnBioMatchStart");

	ABioWorldInfo_OnBioMatchStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.HandleMessageBoxLoadingDownloadableContent
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void ABioWorldInfo::HandleMessageBoxLoadingDownloadableContent(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.HandleMessageBoxLoadingDownloadableContent");

	ABioWorldInfo_HandleMessageBoxLoadingDownloadableContent_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.HandleMessageBoxCheckContentOnMemoryCard
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void ABioWorldInfo::HandleMessageBoxCheckContentOnMemoryCard(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.HandleMessageBoxCheckContentOnMemoryCard");

	ABioWorldInfo_HandleMessageBoxCheckContentOnMemoryCard_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.HandleMessageBoxCheckForCorruptPackages
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void ABioWorldInfo::HandleMessageBoxCheckForCorruptPackages(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.HandleMessageBoxCheckForCorruptPackages");

	ABioWorldInfo_HandleMessageBoxCheckForCorruptPackages_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetCharacterImporter
// (Native, Static, Public)
// Parameters:
// class UBioCharacterImporter*   ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCharacterImporter* ABioWorldInfo::STATIC_GetCharacterImporter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetCharacterImporter");

	ABioWorldInfo_GetCharacterImporter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.UpdateVFXPools
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::UpdateVFXPools(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateVFXPools");

	ABioWorldInfo_UpdateVFXPools_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.UpdateVFXStats
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfo::UpdateVFXStats(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.UpdateVFXStats");

	ABioWorldInfo_UpdateVFXStats_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.CheckResetBehavior
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        pBehavior                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::CheckResetBehavior(class UBioPawnBehavior* pBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.CheckResetBehavior");

	ABioWorldInfo_CheckResetBehavior_Params params;
	params.pBehavior = pBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.ClearResetBehaviors
// (Native, Public)

void ABioWorldInfo::ClearResetBehaviors()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ClearResetBehaviors");

	ABioWorldInfo_ClearResetBehaviors_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.OverrideVFXPoolSize
// (Native, Public)
// Parameters:
// class UBioVFXTemplate*         a_pEffect                      (Parm)
// int                            a_nMaxPoolSize                 (Parm)
// int                            a_nMinPoolSize                 (Parm)

void ABioWorldInfo::OverrideVFXPoolSize(class UBioVFXTemplate* a_pEffect, int a_nMaxPoolSize, int a_nMinPoolSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.OverrideVFXPoolSize");

	ABioWorldInfo_OverrideVFXPoolSize_Params params;
	params.a_pEffect = a_pEffect;
	params.a_nMaxPoolSize = a_nMaxPoolSize;
	params.a_nMinPoolSize = a_nMinPoolSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetDefaultVFXPoolSize
// (Native, Public, HasOutParms)
// Parameters:
// class UBioVFXTemplate*         a_pEffect                      (Parm)
// int                            a_rnMaxPoolSize                (Parm, OutParm)
// int                            a_rnMinPoolSize                (Parm, OutParm)

void ABioWorldInfo::GetDefaultVFXPoolSize(class UBioVFXTemplate* a_pEffect, int* a_rnMaxPoolSize, int* a_rnMinPoolSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetDefaultVFXPoolSize");

	ABioWorldInfo_GetDefaultVFXPoolSize_Params params;
	params.a_pEffect = a_pEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (a_rnMaxPoolSize != nullptr)
		*a_rnMaxPoolSize = params.a_rnMaxPoolSize;
	if (a_rnMinPoolSize != nullptr)
		*a_rnMinPoolSize = params.a_rnMinPoolSize;
}


// Function BIOC_Base.BioWorldInfo.GetVFXPool
// (Native, Public)
// Parameters:
// class UBioVFXTemplate*         pEffect                        (Parm)
// class UBioVisualEffectPool*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioVisualEffectPool* ABioWorldInfo::GetVFXPool(class UBioVFXTemplate* pEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetVFXPool");

	ABioWorldInfo_GetVFXPool_Params params;
	params.pEffect = pEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.OnGameLoaded
// (Final, Native, Private)

void ABioWorldInfo::OnGameLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.OnGameLoaded");

	ABioWorldInfo_OnGameLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.InitializeForPlay
// (Final, Native, Private)

void ABioWorldInfo::InitializeForPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.InitializeForPlay");

	ABioWorldInfo_InitializeForPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetDetailedVersionString
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioWorldInfo::GetDetailedVersionString()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetDetailedVersionString");

	ABioWorldInfo_GetDetailedVersionString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetEpicVersionString
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioWorldInfo::GetEpicVersionString()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetEpicVersionString");

	ABioWorldInfo_GetEpicVersionString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetVersionString
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioWorldInfo::GetVersionString()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetVersionString");

	ABioWorldInfo_GetVersionString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.MoveToArea
// (Final, Native, Public)
// Parameters:
// struct FName                   sAreaName                      (Parm)
// struct FName                   sNextAreaStartPoint            (Parm)

void ABioWorldInfo::MoveToArea(const struct FName& sAreaName, const struct FName& sNextAreaStartPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.MoveToArea");

	ABioWorldInfo_MoveToArea_Params params;
	params.sAreaName = sAreaName;
	params.sNextAreaStartPoint = sNextAreaStartPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.AllBioActors
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class AActor*                  Actor                          (Parm, OutParm)
// struct FName                   MatchTag                       (OptionalParm, Parm)

void ABioWorldInfo::AllBioActors(const struct FName& MatchTag, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.AllBioActors");

	ABioWorldInfo_AllBioActors_Params params;
	params.MatchTag = MatchTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function BIOC_Base.BioWorldInfo.GetLocalBoolVariable
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioLocalVariableObjectType> eObjectType                    (Parm)
// struct FName                   GetFunctionName                (Parm)
// struct FName                   sTag                           (OptionalParm, Parm)
// int                            nParam                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetLocalBoolVariable(TEnumAsByte<EBioLocalVariableObjectType> eObjectType, const struct FName& GetFunctionName, const struct FName& sTag, int nParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetLocalBoolVariable");

	ABioWorldInfo_GetLocalBoolVariable_Params params;
	params.eObjectType = eObjectType;
	params.GetFunctionName = GetFunctionName;
	params.sTag = sTag;
	params.nParam = nParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetLocalFloatVariable
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioLocalVariableObjectType> eObjectType                    (Parm)
// struct FName                   GetFunctionName                (Parm)
// struct FName                   sTag                           (OptionalParm, Parm)
// int                            nParam                         (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioWorldInfo::GetLocalFloatVariable(TEnumAsByte<EBioLocalVariableObjectType> eObjectType, const struct FName& GetFunctionName, const struct FName& sTag, int nParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetLocalFloatVariable");

	ABioWorldInfo_GetLocalFloatVariable_Params params;
	params.eObjectType = eObjectType;
	params.GetFunctionName = GetFunctionName;
	params.sTag = sTag;
	params.nParam = nParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetLocalIntegerVariable
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioLocalVariableObjectType> eObjectType                    (Parm)
// struct FName                   GetFunctionName                (Parm)
// struct FName                   sTag                           (OptionalParm, Parm)
// int                            nParam                         (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioWorldInfo::GetLocalIntegerVariable(TEnumAsByte<EBioLocalVariableObjectType> eObjectType, const struct FName& GetFunctionName, const struct FName& sTag, int nParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetLocalIntegerVariable");

	ABioWorldInfo_GetLocalIntegerVariable_Params params;
	params.eObjectType = eObjectType;
	params.GetFunctionName = GetFunctionName;
	params.sTag = sTag;
	params.nParam = nParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.ExecuteConsequence
// (Native, Public)
// Parameters:
// int                            nConsequence                   (Parm)
// int                            nParam                         (OptionalParm, Parm)

void ABioWorldInfo::ExecuteConsequence(int nConsequence, int nParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ExecuteConsequence");

	ABioWorldInfo_ExecuteConsequence_Params params;
	params.nConsequence = nConsequence;
	params.nParam = nParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.ExecuteStateTransition
// (Native, Public)
// Parameters:
// int                            nTransition                    (Parm)
// int                            nParam                         (OptionalParm, Parm)

void ABioWorldInfo::ExecuteStateTransition(int nTransition, int nParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ExecuteStateTransition");

	ABioWorldInfo_ExecuteStateTransition_Params params;
	params.nTransition = nTransition;
	params.nParam = nParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.CheckConditional
// (Native, Public)
// Parameters:
// int                            nConditional                   (Parm)
// int                            nParam                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::CheckConditional(int nConditional, int nParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.CheckConditional");

	ABioWorldInfo_CheckConditional_Params params;
	params.nConditional = nConditional;
	params.nParam = nParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.CauseEvent
// (Defined, Event, Public)
// Parameters:
// struct FName                   EventName                      (Parm)

void ABioWorldInfo::CauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.CauseEvent");

	ABioWorldInfo_CauseEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.TutorialDismissed
// (Final, Defined, Public)
// Parameters:
// bool                           bAButtonPressed                (Parm)
// int                            nContext                       (Parm)

void ABioWorldInfo::TutorialDismissed(bool bAButtonPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.TutorialDismissed");

	ABioWorldInfo_TutorialDismissed_Params params;
	params.bAButtonPressed = bAButtonPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetGuiInputPermission
// (Final, Native, Public)
// Parameters:
// unsigned char                  nEvent                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetGuiInputPermission(unsigned char nEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetGuiInputPermission");

	ABioWorldInfo_GetGuiInputPermission_Params params;
	params.nEvent = nEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.CancelTutorial
// (Final, Native, Public)
// Parameters:
// bool                           bFadeOut                       (OptionalParm, Parm)
// struct FName                   nmTutorial                     (OptionalParm, Parm)

void ABioWorldInfo::CancelTutorial(bool bFadeOut, const struct FName& nmTutorial)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.CancelTutorial");

	ABioWorldInfo_CancelTutorial_Params params;
	params.bFadeOut = bFadeOut;
	params.nmTutorial = nmTutorial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.ClearTutorialsViewed
// (Final, Native, Public)

void ABioWorldInfo::ClearTutorialsViewed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ClearTutorialsViewed");

	ABioWorldInfo_ClearTutorialsViewed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.IsTutorialRunning
// (Final, Native, Public)
// Parameters:
// struct FName                   nmTutorial                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::IsTutorialRunning(const struct FName& nmTutorial)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.IsTutorialRunning");

	ABioWorldInfo_IsTutorialRunning_Params params;
	params.nmTutorial = nmTutorial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetTutorialViewed
// (Final, Native, Public)
// Parameters:
// struct FName                   nmTutorial                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetTutorialViewed(const struct FName& nmTutorial)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetTutorialViewed");

	ABioWorldInfo_GetTutorialViewed_Params params;
	params.nmTutorial = nmTutorial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.SetTutorialViewed
// (Final, Native, Public)
// Parameters:
// struct FName                   nmTutorial                     (Parm)
// bool                           bSetViewed                     (OptionalParm, Parm)

void ABioWorldInfo::SetTutorialViewed(const struct FName& nmTutorial, bool bSetViewed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetTutorialViewed");

	ABioWorldInfo_SetTutorialViewed_Params params;
	params.nmTutorial = nmTutorial;
	params.bSetViewed = bSetViewed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.ShowTutorialMessageBox
// (Final, Native, Public)
// Parameters:
// class UObject*                 pCallbackObject                (Parm)
// struct FName                   nmCallbackFunction             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::ShowTutorialMessageBox(class UObject* pCallbackObject, const struct FName& nmCallbackFunction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ShowTutorialMessageBox");

	ABioWorldInfo_ShowTutorialMessageBox_Params params;
	params.pCallbackObject = pCallbackObject;
	params.nmCallbackFunction = nmCallbackFunction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.ShowTutorial
// (Final, Native, Public)
// Parameters:
// struct FName                   nmTutorial                     (Parm)
// bool                           bSetViewed                     (OptionalParm, Parm)
// class UObject*                 oCallbackObject                (OptionalParm, Parm)
// struct FName                   oCallbackFunction              (OptionalParm, Parm)
// bool                           i_bIgnoreDesignerSuppression   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::ShowTutorial(const struct FName& nmTutorial, bool bSetViewed, class UObject* oCallbackObject, const struct FName& oCallbackFunction, bool i_bIgnoreDesignerSuppression)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.ShowTutorial");

	ABioWorldInfo_ShowTutorial_Params params;
	params.nmTutorial = nmTutorial;
	params.bSetViewed = bSetViewed;
	params.oCallbackObject = oCallbackObject;
	params.oCallbackFunction = oCallbackFunction;
	params.i_bIgnoreDesignerSuppression = i_bIgnoreDesignerSuppression;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.SetHasShownPRCMessage
// (Native, Public)
// Parameters:
// bool                           i_bValue                       (Parm)

void ABioWorldInfo::SetHasShownPRCMessage(bool i_bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetHasShownPRCMessage");

	ABioWorldInfo_SetHasShownPRCMessage_Params params;
	params.i_bValue = i_bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.GetHasShownPRCMessage
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetHasShownPRCMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetHasShownPRCMessage");

	ABioWorldInfo_GetHasShownPRCMessage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetChallengeLevel
// (Native, Public, HasOutParms)
// Parameters:
// int                            challengeLevel                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::GetChallengeLevel(int* challengeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetChallengeLevel");

	ABioWorldInfo_GetChallengeLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (challengeLevel != nullptr)
		*challengeLevel = params.challengeLevel;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.GetBuybackItemPriceAtIndex
// (Native, Public)
// Parameters:
// int                            Index                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioWorldInfo::GetBuybackItemPriceAtIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.GetBuybackItemPriceAtIndex");

	ABioWorldInfo_GetBuybackItemPriceAtIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.RemoveBuybackItem
// (Native, Public)
// Parameters:
// int                            Index                          (Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* ABioWorldInfo::RemoveBuybackItem(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.RemoveBuybackItem");

	ABioWorldInfo_RemoveBuybackItem_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfo.AppendBuybackItemsToInventory
// (Native, Public, HasOutParms)
// Parameters:
// class UBioInventory*           Inventory                      (Parm, OutParm)

void ABioWorldInfo::AppendBuybackItemsToInventory(class UBioInventory** Inventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.AppendBuybackItemsToInventory");

	ABioWorldInfo_AppendBuybackItemsToInventory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Inventory != nullptr)
		*Inventory = params.Inventory;
}


// Function BIOC_Base.BioWorldInfo.AddBuybackItem
// (Native, Public)
// Parameters:
// class UBioItem*                Item                           (Parm)

void ABioWorldInfo::AddBuybackItem(class UBioItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.AddBuybackItem");

	ABioWorldInfo_AddBuybackItem_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.SetDebugSave
// (Native, Public)
// Parameters:
// int                            nSet                           (Parm)

void ABioWorldInfo::SetDebugSave(int nSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.SetDebugSave");

	ABioWorldInfo_SetDebugSave_Params params;
	params.nSet = nSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.BioDeleteGame
// (Native, Public)
// Parameters:
// int                            nSaveGameSlot                  (Parm)

void ABioWorldInfo::BioDeleteGame(int nSaveGameSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.BioDeleteGame");

	ABioWorldInfo_BioDeleteGame_Params params;
	params.nSaveGameSlot = nSaveGameSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.BioLoadGame
// (Native, Public)
// Parameters:
// int                            nSaveGameSlot                  (Parm)

void ABioWorldInfo::BioLoadGame(int nSaveGameSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.BioLoadGame");

	ABioWorldInfo_BioLoadGame_Params params;
	params.nSaveGameSlot = nSaveGameSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.BioSaveGame
// (Native, Public)
// Parameters:
// int                            nSaveGameSlot                  (Parm)
// struct FName                   sArea                          (Parm)
// bool                           bStartFromCurrentPosition      (Parm)
// struct FName                   sNextAreaStartPoint            (Parm)

void ABioWorldInfo::BioSaveGame(int nSaveGameSlot, const struct FName& sArea, bool bStartFromCurrentPosition, const struct FName& sNextAreaStartPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.BioSaveGame");

	ABioWorldInfo_BioSaveGame_Params params;
	params.nSaveGameSlot = nSaveGameSlot;
	params.sArea = sArea;
	params.bStartFromCurrentPosition = bStartFromCurrentPosition;
	params.sNextAreaStartPoint = sNextAreaStartPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.OnNewGameStartRequest
// (Native, Public)

void ABioWorldInfo::OnNewGameStartRequest()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.OnNewGameStartRequest");

	ABioWorldInfo_OnNewGameStartRequest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfo.TriggerCinematicSkippedEvent
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWorldInfo::TriggerCinematicSkippedEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfo.TriggerCinematicSkippedEvent");

	ABioWorldInfo_TriggerCinematicSkippedEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.SpawnGameOverGUI
// (Final, Defined, Public)

void ABioSPGame::SpawnGameOverGUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SpawnGameOverGUI");

	ABioSPGame_SpawnGameOverGUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.AdjustHeightOfPawnSpawnedAtNavigationPoint
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   Pawn                           (Parm)
// class ANavigationPoint*        SpawnPoint                     (Parm)

void ABioSPGame::AdjustHeightOfPawnSpawnedAtNavigationPoint(class APawn* Pawn, class ANavigationPoint* SpawnPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.AdjustHeightOfPawnSpawnedAtNavigationPoint");

	ABioSPGame_AdjustHeightOfPawnSpawnedAtNavigationPoint_Params params;
	params.Pawn = Pawn;
	params.SpawnPoint = SpawnPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.SpawnPawn
// (Defined, Public, HasDefaults)
// Parameters:
// struct FString                 actorType                      (Parm, NeedCtorLink)
// struct FVector                 SpawnLocation                  (Parm)
// struct FRotator                SpawnRotation                  (Parm)
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* ABioSPGame::SpawnPawn(const struct FString& actorType, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SpawnPawn");

	ABioSPGame_SpawnPawn_Params params;
	params.actorType = actorType;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.SpawnHenchman
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FName                   pawnTag                        (Parm)
// class AActor*                  Player                         (Parm)
// float                          backOffset                     (Parm)
// float                          sideOffset                     (Parm)
// bool                           spawnLeft                      (Parm)
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* ABioSPGame::SpawnHenchman(const struct FName& pawnTag, class AActor* Player, float backOffset, float sideOffset, bool spawnLeft)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SpawnHenchman");

	ABioSPGame_SpawnHenchman_Params params;
	params.pawnTag = pawnTag;
	params.Player = Player;
	params.backOffset = backOffset;
	params.sideOffset = sideOffset;
	params.spawnLeft = spawnLeft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.SpawnPlayer
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioPlayerController*    PlayerController               (Parm)
// class ANavigationPoint*        playerSpawnPoint               (Parm)
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* ABioSPGame::SpawnPlayer(class ABioPlayerController* PlayerController, class ANavigationPoint* playerSpawnPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SpawnPlayer");

	ABioSPGame_SpawnPlayer_Params params;
	params.PlayerController = PlayerController;
	params.playerSpawnPoint = playerSpawnPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.SpawnPlayerSquadMembers
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioPlayerController*    PlayerController               (Parm)
// class ANavigationPoint*        SpawnPoint                     (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioSPGame::SpawnPlayerSquadMembers(class ABioPlayerController* PlayerController, class ANavigationPoint* SpawnPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SpawnPlayerSquadMembers");

	ABioSPGame_SpawnPlayerSquadMembers_Params params;
	params.PlayerController = PlayerController;
	params.SpawnPoint = SpawnPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.SpawnDefaultPawnFor
// (Defined, Public)
// Parameters:
// class AController*             NewPlayer                      (Parm)
// class ANavigationPoint*        SpawnPoint                     (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioSPGame::SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* SpawnPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SpawnDefaultPawnFor");

	ABioSPGame_SpawnDefaultPawnFor_Params params;
	params.NewPlayer = NewPlayer;
	params.SpawnPoint = SpawnPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.SetPlayerDefaults
// (Defined, Public)
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void ABioSPGame::SetPlayerDefaults(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SetPlayerDefaults");

	ABioSPGame_SetPlayerDefaults_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.PreventDeath
// (Defined, Public)
// Parameters:
// class APawn*                   Killed_                        (Parm)
// class AController*             Killer_                        (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioSPGame::PreventDeath(class APawn* Killed_, class AController* Killer_, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.PreventDeath");

	ABioSPGame_PreventDeath_Params params;
	params.Killed_ = Killed_;
	params.Killer_ = Killer_;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.Reset
// (Defined, Public)

void ABioSPGame::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.Reset");

	ABioSPGame_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.FindPlayerStart
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  InTeam                         (OptionalParm, Parm)
// struct FString                 IncomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ABioSPGame::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.FindPlayerStart");

	ABioSPGame_FindPlayerStart_Params params;
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.FindStartingNavPoint
// (Native, Public)
// Parameters:
// struct FName                   nmStartPoint                   (Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ABioSPGame::FindStartingNavPoint(const struct FName& nmStartPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.FindStartingNavPoint");

	ABioSPGame_FindStartingNavPoint_Params params;
	params.nmStartPoint = nmStartPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSPGame.OnMovieFinished
// (Defined, Public)
// Parameters:
// class UTextureMovie*           TextureMovie                   (Parm)

void ABioSPGame::OnMovieFinished(class UTextureMovie* TextureMovie)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.OnMovieFinished");

	ABioSPGame_OnMovieFinished_Params params;
	params.TextureMovie = TextureMovie;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.PostLogin
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       NewPlayer                      (Parm)

void ABioSPGame::PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.PostLogin");

	ABioSPGame_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.PreloadPackage
// (Final, Native, Private)
// Parameters:
// struct FString                 actorType                      (Parm, NeedCtorLink)

void ABioSPGame::PreloadPackage(const struct FString& actorType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.PreloadPackage");

	ABioSPGame_PreloadPackage_Params params;
	params.actorType = actorType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.CalculateHenchmanSpawn
// (Final, Native, Private, HasOutParms)
// Parameters:
// class AActor*                  Player                         (Parm)
// float                          backOffset                     (Parm)
// float                          sideOffset                     (Parm)
// bool                           spawnLeft                      (Parm)
// struct FVector                 SpawnPoint                     (Parm, OutParm)
// struct FRotator                SpawnRotation                  (Parm, OutParm)

void ABioSPGame::CalculateHenchmanSpawn(class AActor* Player, float backOffset, float sideOffset, bool spawnLeft, struct FVector* SpawnPoint, struct FRotator* SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.CalculateHenchmanSpawn");

	ABioSPGame_CalculateHenchmanSpawn_Params params;
	params.Player = Player;
	params.backOffset = backOffset;
	params.sideOffset = sideOffset;
	params.spawnLeft = spawnLeft;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpawnPoint != nullptr)
		*SpawnPoint = params.SpawnPoint;
	if (SpawnRotation != nullptr)
		*SpawnRotation = params.SpawnRotation;
}


// Function BIOC_Base.BioSPGame.SetupPartyMemberAttributes
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        Behavior                       (Parm)
// class UClass*                  attributesClass                (Parm)

void ABioSPGame::SetupPartyMemberAttributes(class UBioPawnBehavior* Behavior, class UClass* attributesClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.SetupPartyMemberAttributes");

	ABioSPGame_SetupPartyMemberAttributes_Params params;
	params.Behavior = Behavior;
	params.attributesClass = attributesClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.ChallengeScalePersistentLevelPawns
// (Native, Public)

void ABioSPGame::ChallengeScalePersistentLevelPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.ChallengeScalePersistentLevelPawns");

	ABioSPGame_ChallengeScalePersistentLevelPawns_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSPGame.ExtractLogoMovieSettings
// (Native, Public, HasOutParms)
// Parameters:
// int                            nShouldPlay                    (Parm, OutParm)
// int                            nIsInterruptable               (Parm, OutParm)

void ABioSPGame::ExtractLogoMovieSettings(int* nShouldPlay, int* nIsInterruptable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSPGame.ExtractLogoMovieSettings");

	ABioSPGame_ExtractLogoMovieSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nShouldPlay != nullptr)
		*nShouldPlay = params.nShouldPlay;
	if (nIsInterruptable != nullptr)
		*nIsInterruptable = params.nIsInterruptable;
}


// Function BIOC_Base.BioTalent.AddGameProperty
// (Native, Public)
// Parameters:
// class UBioGameProperty*        GameProperty                   (Parm)

void UBioTalent::AddGameProperty(class UBioGameProperty* GameProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalent.AddGameProperty");

	UBioTalent_AddGameProperty_Params params;
	params.GameProperty = GameProperty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalent.ScaleToRank
// (Native, Public)
// Parameters:
// int                            Rank                           (Parm)

void UBioTalent::ScaleToRank(int Rank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalent.ScaleToRank");

	UBioTalent_ScaleToRank_Params params;
	params.Rank = Rank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalent.Unapply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)

void UBioTalent::Unapply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalent.Unapply");

	UBioTalent_Unapply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalent.Apply
// (Native, Public)
// Parameters:
// class UObject*                 Target                         (Parm)

void UBioTalent::Apply(class UObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalent.Apply");

	UBioTalent_Apply_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalent.GetRank
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioTalent::GetRank()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalent.GetRank");

	UBioTalent_GetRank_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalent.GetID
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioTalent::GetID()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalent.GetID");

	UBioTalent_GetID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalent.Initialize
// (Native, Public)
// Parameters:
// int                            Id                             (Parm)
// int                            StartingRank                   (Parm)

void UBioTalent::Initialize(int Id, int StartingRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalent.Initialize");

	UBioTalent_Initialize_Params params;
	params.Id = Id;
	params.StartingRank = StartingRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalentContainer.GetNumberOfTalentPointsSpent
// (Final, Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioTalentContainer::GetNumberOfTalentPointsSpent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetNumberOfTalentPointsSpent");

	UBioTalentContainer_GetNumberOfTalentPointsSpent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.ReloadTalentContainer
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UBioPawnBehavior*        targetBehavior                 (Parm)
// TArray<struct FBioSimpleTalentSave> simpleTalents                  (Parm, OutParm, NeedCtorLink)
// TArray<struct FBioComplexTalentSave> complexTalents                 (Parm, OutParm, NeedCtorLink)

void UBioTalentContainer::ReloadTalentContainer(class UBioPawnBehavior* targetBehavior, TArray<struct FBioSimpleTalentSave>* simpleTalents, TArray<struct FBioComplexTalentSave>* complexTalents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.ReloadTalentContainer");

	UBioTalentContainer_ReloadTalentContainer_Params params;
	params.targetBehavior = targetBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (simpleTalents != nullptr)
		*simpleTalents = params.simpleTalents;
	if (complexTalents != nullptr)
		*complexTalents = params.complexTalents;
}


// Function BIOC_Base.BioTalentContainer.GetTalentSaveData
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FBioSimpleTalentSave> simpleTalents                  (Parm, OutParm, NeedCtorLink)
// TArray<struct FBioComplexTalentSave> complexTalents                 (Parm, OutParm, NeedCtorLink)

void UBioTalentContainer::GetTalentSaveData(TArray<struct FBioSimpleTalentSave>* simpleTalents, TArray<struct FBioComplexTalentSave>* complexTalents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetTalentSaveData");

	UBioTalentContainer_GetTalentSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (simpleTalents != nullptr)
		*simpleTalents = params.simpleTalents;
	if (complexTalents != nullptr)
		*complexTalents = params.complexTalents;
}


// Function BIOC_Base.BioTalentContainer.GetTalentRank
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            TalentID                       (Parm)
// int                            talentRank                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetTalentRank(int TalentID, int* talentRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetTalentRank");

	UBioTalentContainer_GetTalentRank_Params params;
	params.TalentID = TalentID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (talentRank != nullptr)
		*talentRank = params.talentRank;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.GetTalentDebugData
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FBioTalentDebugData> dataArray                      (Parm, OutParm, NeedCtorLink)
// int                            simpleTalentStartIndex         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetTalentDebugData(TArray<struct FBioTalentDebugData>* dataArray, int* simpleTalentStartIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetTalentDebugData");

	UBioTalentContainer_GetTalentDebugData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (dataArray != nullptr)
		*dataArray = params.dataArray;
	if (simpleTalentStartIndex != nullptr)
		*simpleTalentStartIndex = params.simpleTalentStartIndex;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.CanDecrementLevelUpRank
// (Final, Native, Public)
// Parameters:
// int                            talentIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::CanDecrementLevelUpRank(int talentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.CanDecrementLevelUpRank");

	UBioTalentContainer_CanDecrementLevelUpRank_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.CanIncrementLevelUpRank
// (Final, Native, Public)
// Parameters:
// int                            talentIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::CanIncrementLevelUpRank(int talentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.CanIncrementLevelUpRank");

	UBioTalentContainer_CanIncrementLevelUpRank_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.DecrementLevelUpRank
// (Final, Native, Public)
// Parameters:
// int                            talentIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::DecrementLevelUpRank(int talentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.DecrementLevelUpRank");

	UBioTalentContainer_DecrementLevelUpRank_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.IncrementLevelUpRank
// (Final, Native, Public)
// Parameters:
// int                            talentIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::IncrementLevelUpRank(int talentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.IncrementLevelUpRank");

	UBioTalentContainer_IncrementLevelUpRank_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.GetTalentLevelUpRank
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            talentIndex                    (Parm)
// int                            talentRank                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetTalentLevelUpRank(int talentIndex, int* talentRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetTalentLevelUpRank");

	UBioTalentContainer_GetTalentLevelUpRank_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (talentRank != nullptr)
		*talentRank = params.talentRank;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.GetTalentLevelUpIndex
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            TalentID                       (Parm)
// int                            talentIndex                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetTalentLevelUpIndex(int TalentID, int* talentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetTalentLevelUpIndex");

	UBioTalentContainer_GetTalentLevelUpIndex_Params params;
	params.TalentID = TalentID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (talentIndex != nullptr)
		*talentIndex = params.talentIndex;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.GetDynamicLevelUpTalentData
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            talentIndex                    (Parm)
// struct FBioTalentDynamicData   Data                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetDynamicLevelUpTalentData(int talentIndex, struct FBioTalentDynamicData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetDynamicLevelUpTalentData");

	UBioTalentContainer_GetDynamicLevelUpTalentData_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.GetStaticLevelUpTalentData
// (Final, Native, Public, HasOutParms)
// Parameters:
// TArray<struct FBioTalentStaticData> dataArray                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetStaticLevelUpTalentData(TArray<struct FBioTalentStaticData>* dataArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetStaticLevelUpTalentData");

	UBioTalentContainer_GetStaticLevelUpTalentData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (dataArray != nullptr)
		*dataArray = params.dataArray;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.GetNumLevelUpPoints
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            numPoints                      (Parm, OutParm)
// int                            pointsSpent                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetNumLevelUpPoints(int* numPoints, int* pointsSpent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetNumLevelUpPoints");

	UBioTalentContainer_GetNumLevelUpPoints_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (numPoints != nullptr)
		*numPoints = params.numPoints;
	if (pointsSpent != nullptr)
		*pointsSpent = params.pointsSpent;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.GetNumLevelUpTalents
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            numTalents                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::GetNumLevelUpTalents(int* numTalents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.GetNumLevelUpTalents");

	UBioTalentContainer_GetNumLevelUpTalents_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (numTalents != nullptr)
		*numTalents = params.numTalents;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.ClearLevelUp
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::ClearLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.ClearLevelUp");

	UBioTalentContainer_ClearLevelUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.ApplyLevelUp
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::ApplyLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.ApplyLevelUp");

	UBioTalentContainer_ApplyLevelUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.InitializeLevelUp
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::InitializeLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.InitializeLevelUp");

	UBioTalentContainer_InitializeLevelUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.AddPrerequisiteTalent
// (Final, Native, Public)
// Parameters:
// int                            TalentID                       (Parm)
// int                            prereqID                       (Parm)
// int                            prereqRank                     (Parm)

void UBioTalentContainer::AddPrerequisiteTalent(int TalentID, int prereqID, int prereqRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.AddPrerequisiteTalent");

	UBioTalentContainer_AddPrerequisiteTalent_Params params;
	params.TalentID = TalentID;
	params.prereqID = prereqID;
	params.prereqRank = prereqRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalentContainer.ScaleTalentByIncrement
// (Final, Native, Public)
// Parameters:
// int                            Id                             (Parm)
// int                            rankIncrement                  (Parm)

void UBioTalentContainer::ScaleTalentByIncrement(int Id, int rankIncrement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.ScaleTalentByIncrement");

	UBioTalentContainer_ScaleTalentByIncrement_Params params;
	params.Id = Id;
	params.rankIncrement = rankIncrement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalentContainer.ScaleTalentToRank
// (Final, Native, Public)
// Parameters:
// int                            Id                             (Parm)
// int                            Rank                           (Parm)

void UBioTalentContainer::ScaleTalentToRank(int Id, int Rank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.ScaleTalentToRank");

	UBioTalentContainer_ScaleTalentToRank_Params params;
	params.Id = Id;
	params.Rank = Rank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalentContainer.IncreaseTalentMaxRankByIncrement
// (Final, Native, Public)
// Parameters:
// int                            Id                             (Parm)
// int                            MaxRankIncrement               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::IncreaseTalentMaxRankByIncrement(int Id, int MaxRankIncrement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.IncreaseTalentMaxRankByIncrement");

	UBioTalentContainer_IncreaseTalentMaxRankByIncrement_Params params;
	params.Id = Id;
	params.MaxRankIncrement = MaxRankIncrement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.IncreaseTalentMaxRank
// (Final, Native, Public)
// Parameters:
// int                            Id                             (Parm)
// int                            MaxRank                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::IncreaseTalentMaxRank(int Id, int MaxRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.IncreaseTalentMaxRank");

	UBioTalentContainer_IncreaseTalentMaxRank_Params params;
	params.Id = Id;
	params.MaxRank = MaxRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.RemoveTalent
// (Final, Native, Public)
// Parameters:
// int                            Id                             (Parm)
// class UBioTalent*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioTalent* UBioTalentContainer::RemoveTalent(int Id)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.RemoveTalent");

	UBioTalentContainer_RemoveTalent_Params params;
	params.Id = Id;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.AddSimpleTalent
// (Final, Native, Public)
// Parameters:
// class UBioTalent*              Talent                         (Parm)

void UBioTalentContainer::AddSimpleTalent(class UBioTalent* Talent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.AddSimpleTalent");

	UBioTalentContainer_AddSimpleTalent_Params params;
	params.Talent = Talent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalentContainer.AddSpecialization
// (Final, Native, Public)
// Parameters:
// int                            bonusIdentification            (Parm)
// int                            ReplaceTalentID                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::AddSpecialization(int bonusIdentification, int ReplaceTalentID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.AddSpecialization");

	UBioTalentContainer_AddSpecialization_Params params;
	params.bonusIdentification = bonusIdentification;
	params.ReplaceTalentID = ReplaceTalentID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.AddBonusTalents
// (Final, Native, Public)
// Parameters:
// int                            bonusIdentifier                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentContainer::AddBonusTalents(int bonusIdentifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.AddBonusTalents");

	UBioTalentContainer_AddBonusTalents_Params params;
	params.bonusIdentifier = bonusIdentifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentContainer.AddTalent
// (Final, Native, Public)
// Parameters:
// class UBioTalent*              Talent                         (Parm)
// int                            MaxRank                        (Parm)
// int                            LevelOffset                    (Parm)
// int                            LevelsPerRank                  (Parm)
// int                            VisualOrder                    (Parm)

void UBioTalentContainer::AddTalent(class UBioTalent* Talent, int MaxRank, int LevelOffset, int LevelsPerRank, int VisualOrder)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.AddTalent");

	UBioTalentContainer_AddTalent_Params params;
	params.Talent = Talent;
	params.MaxRank = MaxRank;
	params.LevelOffset = LevelOffset;
	params.LevelsPerRank = LevelsPerRank;
	params.VisualOrder = VisualOrder;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalentContainer.SetTarget
// (Final, Native, Public)
// Parameters:
// class ABioPawn*                Target                         (Parm)

void UBioTalentContainer::SetTarget(class ABioPawn* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentContainer.SetTarget");

	UBioTalentContainer_SetTarget_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTalentImporter.LoadTalent2DAs
// (Native, Public)
// Parameters:
// struct FName                   nmPackage                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentImporter::LoadTalent2DAs(const struct FName& nmPackage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentImporter.LoadTalent2DAs");

	UBioTalentImporter_LoadTalent2DAs_Params params;
	params.nmPackage = nmPackage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentImporter.GetTalentRankGuiData
// (Native, Static, Public, HasOutParms)
// Parameters:
// int                            TalentID                       (Parm)
// int                            MaxRank                        (Parm)
// TArray<int>                    iconArray                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentImporter::STATIC_GetTalentRankGuiData(int TalentID, int MaxRank, TArray<int>* iconArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentImporter.GetTalentRankGuiData");

	UBioTalentImporter_GetTalentRankGuiData_Params params;
	params.TalentID = TalentID;
	params.MaxRank = MaxRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (iconArray != nullptr)
		*iconArray = params.iconArray;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentImporter.GetTalentGuiData
// (Native, Static, Public, HasOutParms)
// Parameters:
// int                            TalentID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentImporter::STATIC_GetTalentGuiData(int TalentID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentImporter.GetTalentGuiData");

	UBioTalentImporter_GetTalentGuiData_Params params;
	params.TalentID = TalentID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentImporter.LoadBonusTalentData
// (Native, Static, Public, HasOutParms)
// Parameters:
// int                            Row                            (Parm)
// int                            MaxRank                        (Parm, OutParm)
// int                            LevelOffset                    (Parm, OutParm)
// int                            LevelsPerRank                  (Parm, OutParm)
// int                            StartingRank                   (Parm, OutParm)
// int                            IsVisible                      (Parm, OutParm)
// int                            VisualOrder                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentImporter::STATIC_LoadBonusTalentData(int Row, int* MaxRank, int* LevelOffset, int* LevelsPerRank, int* StartingRank, int* IsVisible, int* VisualOrder)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentImporter.LoadBonusTalentData");

	UBioTalentImporter_LoadBonusTalentData_Params params;
	params.Row = Row;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MaxRank != nullptr)
		*MaxRank = params.MaxRank;
	if (LevelOffset != nullptr)
		*LevelOffset = params.LevelOffset;
	if (LevelsPerRank != nullptr)
		*LevelsPerRank = params.LevelsPerRank;
	if (StartingRank != nullptr)
		*StartingRank = params.StartingRank;
	if (IsVisible != nullptr)
		*IsVisible = params.IsVisible;
	if (VisualOrder != nullptr)
		*VisualOrder = params.VisualOrder;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentImporter.LoadBonusTalentRowsAndIDs
// (Native, Static, Public, HasOutParms)
// Parameters:
// int                            bonusIdentifier                (Parm)
// TArray<int>                    Rows                           (Parm, OutParm, NeedCtorLink)
// TArray<int>                    talentIDs                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTalentImporter::STATIC_LoadBonusTalentRowsAndIDs(int bonusIdentifier, TArray<int>* Rows, TArray<int>* talentIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentImporter.LoadBonusTalentRowsAndIDs");

	UBioTalentImporter_LoadBonusTalentRowsAndIDs_Params params;
	params.bonusIdentifier = bonusIdentifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Rows != nullptr)
		*Rows = params.Rows;
	if (talentIDs != nullptr)
		*talentIDs = params.talentIDs;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTalentImporter.LoadTalent
// (Native, Static, Public)
// Parameters:
// class UBioActorBehavior*       Behavior                       (Parm)
// int                            TalentID                       (Parm)
// int                            Rank                           (Parm)
// class UBioTalent*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioTalent* UBioTalentImporter::STATIC_LoadTalent(class UBioActorBehavior* Behavior, int TalentID, int Rank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTalentImporter.LoadTalent");

	UBioTalentImporter_LoadTalent_Params params;
	params.Behavior = Behavior;
	params.TalentID = TalentID;
	params.Rank = Rank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.Initialize
// (Public)

void ABioAiController::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.Initialize");

	ABioAiController_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnSelected
// (Event, Public)
// Parameters:
// class AActor*                  oOther                         (Parm)

void ABioAiController::OnSelected(class AActor* oOther)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnSelected");

	ABioAiController_OnSelected_Params params;
	params.oOther = oOther;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnHacked
// (Event, Public)

void ABioAiController::OnHacked()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnHacked");

	ABioAiController_OnHacked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnProximityAlarm
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioAiController::OnProximityAlarm(class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnProximityAlarm");

	ABioAiController_OnProximityAlarm_Params params;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnSquadSeen
// (Event, Public)
// Parameters:
// class AActor*                  oSquad                         (Parm)

void ABioAiController::OnSquadSeen(class AActor* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnSquadSeen");

	ABioAiController_OnSquadSeen_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnActionComplete_Movement
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oTarget                        (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioAiController::OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnActionComplete_Movement");

	ABioAiController_OnActionComplete_Movement_Params params;
	params.nmAction = nmAction;
	params.nReason = nReason;
	params.oTarget = oTarget;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnActionComplete_Combat
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// struct FName                   nmTechnique                    (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oLastTarget                    (Parm)

void ABioAiController::OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnActionComplete_Combat");

	ABioAiController_OnActionComplete_Combat_Params params;
	params.nmAction = nmAction;
	params.nmTechnique = nmTechnique;
	params.nReason = nReason;
	params.oLastTarget = oLastTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAiController::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnDamaged");

	ABioAiController_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnCastAt
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmPower                        (Parm)

void ABioAiController::OnCastAt(class APawn* oAttacker, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnCastAt");

	ABioAiController_OnCastAt_Params params;
	params.oAttacker = oAttacker;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnAttacked
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioAiController::OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnAttacked");

	ABioAiController_OnAttacked_Params params;
	params.oAttacker = oAttacker;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnAbilityDisabled
// (Defined, Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioAiController::OnAbilityDisabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnAbilityDisabled");

	ABioAiController_OnAbilityDisabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnAbilityEnabled
// (Defined, Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioAiController::OnAbilityEnabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnAbilityEnabled");

	ABioAiController_OnAbilityEnabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnNoCombatAction
// (Defined, Event, Public)

void ABioAiController::OnNoCombatAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnNoCombatAction");

	ABioAiController_OnNoCombatAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnDeath
// (Defined, Event, Public)
// Parameters:
// class AController*             oKiller                        (Parm)

void ABioAiController::OnDeath(class AController* oKiller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnDeath");

	ABioAiController_OnDeath_Params params;
	params.oKiller = oKiller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioAiController::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetSaveObjectClass");

	ABioAiController_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PostPollMove
// (Defined, Event, Public, HasDefaults)

void ABioAiController::PostPollMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PostPollMove");

	ABioAiController_PostPollMove_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.CanMount
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CanMount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CanMount");

	ABioAiController_CanMount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.DoneBehavior
// (Event, Public)
// Parameters:
// struct FName                   Behavior                       (Parm)

void ABioAiController::DoneBehavior(const struct FName& Behavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DoneBehavior");

	ABioAiController_DoneBehavior_Params params;
	params.Behavior = Behavior;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.DoneWeaponSelection
// (Event, Public)
// Parameters:
// TEnumAsByte<ESwitchToWeapon>   Weapon                         (Parm)

void ABioAiController::DoneWeaponSelection(TEnumAsByte<ESwitchToWeapon> Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DoneWeaponSelection");

	ABioAiController_DoneWeaponSelection_Params params;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.DoneGrenadeThrow
// (Event, Public)

void ABioAiController::DoneGrenadeThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DoneGrenadeThrow");

	ABioAiController_DoneGrenadeThrow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.CanPullTrigger
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CanPullTrigger(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CanPullTrigger");

	ABioAiController_CanPullTrigger_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.FiringPullTrigger
// (Event, Public)

void ABioAiController::FiringPullTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.FiringPullTrigger");

	ABioAiController_FiringPullTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ActionComplete_None
// (Event, Public)
// Parameters:
// struct FName                   Action                         (Parm)
// int                            nReason                        (Parm)

void ABioAiController::ActionComplete_None(const struct FName& Action, int nReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ActionComplete_None");

	ABioAiController_ActionComplete_None_Params params;
	params.Action = Action;
	params.nReason = nReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.HearNoise
// (Defined, Event, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FVector                 vNoiseLocation                 (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void ABioAiController::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.HearNoise");

	ABioAiController_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.vNoiseLocation = vNoiseLocation;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.NotifyCoverDisabled
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Link                           (Parm)
// int                            SlotIdx                        (Parm)

void ABioAiController::NotifyCoverDisabled(class AActor* Link, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.NotifyCoverDisabled");

	ABioAiController_NotifyCoverDisabled_Params params;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.CancelCover
// (Defined, Public)
// Parameters:
// int                            nReason                        (OptionalParm, Parm)

void ABioAiController::CancelCover(int nReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CancelCover");

	ABioAiController_CancelCover_Params params;
	params.nReason = nReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.IsEngagedWithCover
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::IsEngagedWithCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.IsEngagedWithCover");

	ABioAiController_IsEngagedWithCover_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.IsTakingCover
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::IsTakingCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.IsTakingCover");

	ABioAiController_IsTakingCover_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.OnDisengageWithCover
// (Event, Public)
// Parameters:
// class AActor*                  oCoverObj                      (Parm)

void ABioAiController::OnDisengageWithCover(class AActor* oCoverObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnDisengageWithCover");

	ABioAiController_OnDisengageWithCover_Params params;
	params.oCoverObj = oCoverObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnEngagedWithCover
// (Event, Public)
// Parameters:
// class AActor*                  oCoverObj                      (Parm)

void ABioAiController::OnEngagedWithCover(class AActor* oCoverObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnEngagedWithCover");

	ABioAiController_OnEngagedWithCover_Params params;
	params.oCoverObj = oCoverObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.FindNearestOpenLocation
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vStartLocation                 (Parm)
// struct FVector                 vFoundLocation                 (Parm, OutParm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::FindNearestOpenLocation(const struct FVector& vStartLocation, class APawn* oTarget, struct FVector* vFoundLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.FindNearestOpenLocation");

	ABioAiController_FindNearestOpenLocation_Params params;
	params.vStartLocation = vStartLocation;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vFoundLocation != nullptr)
		*vFoundLocation = params.vFoundLocation;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.LeaderCanITeleport
// (Defined, Public)
// Parameters:
// struct FVector                 vOldLocation                   (Parm)
// struct FVector                 vNewLocation                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::LeaderCanITeleport(const struct FVector& vOldLocation, const struct FVector& vNewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.LeaderCanITeleport");

	ABioAiController_LeaderCanITeleport_Params params;
	params.vOldLocation = vOldLocation;
	params.vNewLocation = vNewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.HandleTeleport
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 vLoc                           (Parm)
// bool                           bFindNearestOpenLocation       (OptionalParm, Parm)
// bool                           bForceTeleport                 (OptionalParm, Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::HandleTeleport(const struct FVector& vLoc, bool bFindNearestOpenLocation, bool bForceTeleport, class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.HandleTeleport");

	ABioAiController_HandleTeleport_Params params;
	params.vLoc = vLoc;
	params.bFindNearestOpenLocation = bFindNearestOpenLocation;
	params.bForceTeleport = bForceTeleport;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.TeleportToLeader
// (Defined, Public, HasDefaults)
// Parameters:
// float                          DistanceBack                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::TeleportToLeader(float DistanceBack)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.TeleportToLeader");

	ABioAiController_TeleportToLeader_Params params;
	params.DistanceBack = DistanceBack;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.EndRestFormation
// (Public)

void ABioAiController::EndRestFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.EndRestFormation");

	ABioAiController_EndRestFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.BeginRestFormation
// (Public)

void ABioAiController::BeginRestFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.BeginRestFormation");

	ABioAiController_BeginRestFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.CollectFollowingStats
// (Public)

void ABioAiController::CollectFollowingStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CollectFollowingStats");

	ABioAiController_CollectFollowingStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.LogRouteCache
// (Defined, Public)

void ABioAiController::LogRouteCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.LogRouteCache");

	ABioAiController_LogRouteCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.PushOntoRouteCache
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        Marker                         (Parm)

void ABioAiController::PushOntoRouteCache(class ANavigationPoint* Marker)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushOntoRouteCache");

	ABioAiController_PushOntoRouteCache_Params params;
	params.Marker = Marker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.GetLastObjectInRouteCache
// (Final, Defined, Public)
// Parameters:
// class AActor*                  oMoveTarget                    (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioAiController::GetLastObjectInRouteCache(class AActor* oMoveTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetLastObjectInRouteCache");

	ABioAiController_GetLastObjectInRouteCache_Params params;
	params.oMoveTarget = oMoveTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.DecrementRouteCache
// (Final, Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioAiController::DecrementRouteCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DecrementRouteCache");

	ABioAiController_DecrementRouteCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.RouteCacheSize
// (Final, Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioAiController::RouteCacheSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.RouteCacheSize");

	ABioAiController_RouteCacheSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.ClearRouteCache
// (Final, Defined, Public)

void ABioAiController::ClearRouteCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ClearRouteCache");

	ABioAiController_ClearRouteCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.DropRouteCache
// (Defined, Public, HasDefaults)

void ABioAiController::DropRouteCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DropRouteCache");

	ABioAiController_DropRouteCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.UpDateFollowerMarkerPosition
// (Event, Public)
// Parameters:
// int                            SquadId                        (Parm)

void ABioAiController::UpDateFollowerMarkerPosition(int SquadId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.UpDateFollowerMarkerPosition");

	ABioAiController_UpDateFollowerMarkerPosition_Params params;
	params.SquadId = SquadId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.IsAttackTargetValid
// (Defined, Public)
// Parameters:
// class APawn*                   oAttackTarget                  (Parm)
// bool                           bTestShooting                  (OptionalParm, Parm)
// bool                           bTestExposed                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::IsAttackTargetValid(class APawn* oAttackTarget, bool bTestShooting, bool bTestExposed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.IsAttackTargetValid");

	ABioAiController_IsAttackTargetValid_Params params;
	params.oAttackTarget = oAttackTarget;
	params.bTestShooting = bTestShooting;
	params.bTestExposed = bTestExposed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.HandleSteeringMovementFailed
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::HandleSteeringMovementFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.HandleSteeringMovementFailed");

	ABioAiController_HandleSteeringMovementFailed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetFollowTargets
// (Defined, Event, Public, HasOutParms)
// Parameters:
// class APawn*                   oFollow                        (Parm, OutParm)
// struct FVector                 vMoveTo                        (Parm, OutParm)

void ABioAiController::GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetFollowTargets");

	ABioAiController_GetFollowTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oFollow != nullptr)
		*oFollow = params.oFollow;
	if (vMoveTo != nullptr)
		*vMoveTo = params.vMoveTo;
}


// Function BIOC_Base.BioAiController.LeaderChanged
// (Event, Public)
// Parameters:
// class APawn*                   OldLeader                      (Parm)
// class APawn*                   NewLeader                      (Parm)

void ABioAiController::LeaderChanged(class APawn* OldLeader, class APawn* NewLeader)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.LeaderChanged");

	ABioAiController_LeaderChanged_Params params;
	params.OldLeader = OldLeader;
	params.NewLeader = NewLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ComputeGroundLevel
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 vPoint                         (Parm, OutParm)
// bool                           drawFail                       (OptionalParm, Parm)
// bool                           drawSussess                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::ComputeGroundLevel(bool drawFail, bool drawSussess, struct FVector* vPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ComputeGroundLevel");

	ABioAiController_ComputeGroundLevel_Params params;
	params.drawFail = drawFail;
	params.drawSussess = drawSussess;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vPoint != nullptr)
		*vPoint = params.vPoint;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.DebugGroundHeight
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 vLoc                           (Parm)

void ABioAiController::DebugGroundHeight(const struct FVector& vLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DebugGroundHeight");

	ABioAiController_DebugGroundHeight_Params params;
	params.vLoc = vLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.IsControllerPaused
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::IsControllerPaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.IsControllerPaused");

	ABioAiController_IsControllerPaused_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.UnPauseController
// (Defined, Event, Public)

void ABioAiController::UnPauseController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.UnPauseController");

	ABioAiController_UnPauseController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.PauseController
// (Defined, Event, Public)

void ABioAiController::PauseController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PauseController");

	ABioAiController_PauseController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ClearSomeActions_Queue
// (Defined, Event, Public)
// Parameters:
// struct FString                 sClearLabel                    (OptionalParm, Parm, NeedCtorLink)

void ABioAiController::ClearSomeActions_Queue(const struct FString& sClearLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ClearSomeActions_Queue");

	ABioAiController_ClearSomeActions_Queue_Params params;
	params.sClearLabel = sClearLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ClearSomeActions_State
// (Defined, Event, Public)
// Parameters:
// struct FString                 sClearLabel                    (OptionalParm, Parm, NeedCtorLink)

void ABioAiController::ClearSomeActions_State(const struct FString& sClearLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ClearSomeActions_State");

	ABioAiController_ClearSomeActions_State_Params params;
	params.sClearLabel = sClearLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ClearAllActions
// (Defined, Public)
// Parameters:
// struct FString                 sClearLabel                    (OptionalParm, Parm, NeedCtorLink)

void ABioAiController::ClearAllActions(const struct FString& sClearLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ClearAllActions");

	ABioAiController_ClearAllActions_Params params;
	params.sClearLabel = sClearLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.AdjustFocus
// (Public)

void ABioAiController::AdjustFocus()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AdjustFocus");

	ABioAiController_AdjustFocus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.AdjustGroundSpeed
// (Defined, Public)

void ABioAiController::AdjustGroundSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AdjustGroundSpeed");

	ABioAiController_AdjustGroundSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnCancelAction
// (Event, Public)

void ABioAiController::OnCancelAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnCancelAction");

	ABioAiController_OnCancelAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.RestoreAI
// (Defined, Public)

void ABioAiController::RestoreAI()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.RestoreAI");

	ABioAiController_RestoreAI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ChangeAI
// (Defined, Public)
// Parameters:
// class UClass*                  NewAIClass                     (Parm)
// bool                           bCacheOldController            (OptionalParm, Parm)

void ABioAiController::ChangeAI(class UClass* NewAIClass, bool bCacheOldController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ChangeAI");

	ABioAiController_ChangeAI_Params params;
	params.NewAIClass = NewAIClass;
	params.bCacheOldController = bCacheOldController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.PostBeginPlay
// (Defined, Event, Public)

void ABioAiController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PostBeginPlay");

	ABioAiController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.DumpAILog
// (Defined, Public)

void ABioAiController::DumpAILog()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DumpAILog");

	ABioAiController_DumpAILog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.AILog_Internal
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// struct FName                   group_                         (OptionalParm, Parm)

void ABioAiController::AILog_Internal(const struct FString& Text, const struct FName& group_)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AILog_Internal");

	ABioAiController_AILog_Internal_Params params;
	params.Text = Text;
	params.group_ = group_;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ConLog_Internal
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// struct FName                   group_                         (OptionalParm, Parm)

void ABioAiController::ConLog_Internal(const struct FString& Text, const struct FName& group_)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ConLog_Internal");

	ABioAiController_ConLog_Internal_Params params;
	params.Text = Text;
	params.group_ = group_;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioAiController::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.Tick");

	ABioAiController_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.PlayerActivate
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Target_                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::PlayerActivate(class AActor* Target_)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PlayerActivate");

	ABioAiController_PlayerActivate_Params params;
	params.Target_ = Target_;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddMoveToTag
// (Defined, Public)
// Parameters:
// struct FName                   MoveToTag                      (Parm)
// float                          PointTolerance                 (Parm)
// bool                           bWalking                       (OptionalParm, Parm)
// bool                           bHead                          (OptionalParm, Parm)

void ABioAiController::AddMoveToTag(const struct FName& MoveToTag, float PointTolerance, bool bWalking, bool bHead)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddMoveToTag");

	ABioAiController_AddMoveToTag_Params params;
	params.MoveToTag = MoveToTag;
	params.PointTolerance = PointTolerance;
	params.bWalking = bWalking;
	params.bHead = bHead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.IsMetaActionInProgress
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::IsMetaActionInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.IsMetaActionInProgress");

	ABioAiController_IsMetaActionInProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.NotifyBump
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::NotifyBump(class AActor* Other, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.NotifyBump");

	ABioAiController_NotifyBump_Params params;
	params.Other = Other;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetNextPredictedMoveLocation
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 out_vLoc                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::GetNextPredictedMoveLocation(struct FVector* out_vLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetNextPredictedMoveLocation");

	ABioAiController_GetNextPredictedMoveLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_vLoc != nullptr)
		*out_vLoc = params.out_vLoc;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.LookAtPawn
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oLookTarget                    (Parm)
// int                            nRank                          (Parm)

void ABioAiController::LookAtPawn(class ABioPawn* oLookTarget, int nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.LookAtPawn");

	ABioAiController_LookAtPawn_Params params;
	params.oLookTarget = oLookTarget;
	params.nRank = nRank;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.onLeftPlayPen
// (Defined, Event, Public)
// Parameters:
// class ANavigationPoint*        oNavPoint                      (Parm)

void ABioAiController::onLeftPlayPen(class ANavigationPoint* oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.onLeftPlayPen");

	ABioAiController_onLeftPlayPen_Params params;
	params.oNavPoint = oNavPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.onStopFollowerHoldPosition
// (Event, Public)

void ABioAiController::onStopFollowerHoldPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.onStopFollowerHoldPosition");

	ABioAiController_onStopFollowerHoldPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.onStartFollowerHoldPosition
// (Event, Public)
// Parameters:
// class ABioSquadHoldMarker*     oHoldMarker                    (Parm)

void ABioAiController::onStartFollowerHoldPosition(class ABioSquadHoldMarker* oHoldMarker)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.onStartFollowerHoldPosition");

	ABioAiController_onStartFollowerHoldPosition_Params params;
	params.oHoldMarker = oHoldMarker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnLeavingStasis
// (Event, Public)

void ABioAiController::OnLeavingStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnLeavingStasis");

	ABioAiController_OnLeavingStasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnEnteringStasis
// (Defined, Event, Public)

void ABioAiController::OnEnteringStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnEnteringStasis");

	ABioAiController_OnEnteringStasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ExtendFiringTimeOut
// (Native, Public)
// Parameters:
// float                          fTime                          (Parm)

void ABioAiController::ExtendFiringTimeOut(float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ExtendFiringTimeOut");

	ABioAiController_ExtendFiringTimeOut_Params params;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnStreamingLevelLeavingStasis
// (Native, Public)

void ABioAiController::OnStreamingLevelLeavingStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnStreamingLevelLeavingStasis");

	ABioAiController_OnStreamingLevelLeavingStasis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.OnStreamingLevelEnteringStasis
// (Native, Public)

void ABioAiController::OnStreamingLevelEnteringStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.OnStreamingLevelEnteringStasis");

	ABioAiController_OnStreamingLevelEnteringStasis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.UpdateGenericTacticalMovement
// (Native, Public)
// Parameters:
// bool                           bMoving                        (Parm)

void ABioAiController::UpdateGenericTacticalMovement(bool bMoving)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.UpdateGenericTacticalMovement");

	ABioAiController_UpdateGenericTacticalMovement_Params params;
	params.bMoving = bMoving;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.GetPawnBehavior
// (Native, Public)
// Parameters:
// class APawn*                   oPawn                          (Parm)
// class UBioEpicPawnBehavior*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioEpicPawnBehavior* ABioAiController::GetPawnBehavior(class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetPawnBehavior");

	ABioAiController_GetPawnBehavior_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.BioSetAdjustLocation
// (Native, Public)
// Parameters:
// struct FVector                 vAdjustLoc                     (Parm)

void ABioAiController::BioSetAdjustLocation(const struct FVector& vAdjustLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.BioSetAdjustLocation");

	ABioAiController_BioSetAdjustLocation_Params params;
	params.vAdjustLoc = vAdjustLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.CancelCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)

void ABioAiController::CancelCapability(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CancelCapability");

	ABioAiController_CancelCapability_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.GetCapabilityPowerBuildUp
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioAiController::GetCapabilityPowerBuildUp(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetCapabilityPowerBuildUp");

	ABioAiController_GetCapabilityPowerBuildUp_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetCapabilityImpactRadius
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioAiController::GetCapabilityImpactRadius(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetCapabilityImpactRadius");

	ABioAiController_GetCapabilityImpactRadius_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetCapabilityIsEnabled
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::GetCapabilityIsEnabled(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetCapabilityIsEnabled");

	ABioAiController_GetCapabilityIsEnabled_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetCapabilityCoolDownTimeRemaining
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioAiController::GetCapabilityCoolDownTimeRemaining(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetCapabilityCoolDownTimeRemaining");

	ABioAiController_GetCapabilityCoolDownTimeRemaining_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          fReqStabilityRatio             (Parm)
// float                          fAbortStabilityRatio           (Parm)
// float                          fTimeOut                       (Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddCapability");

	ABioAiController_AddCapability_Params params;
	params.oCapability = oCapability;
	params.fReqStabilityRatio = fReqStabilityRatio;
	params.fAbortStabilityRatio = fAbortStabilityRatio;
	params.fTimeOut = fTimeOut;
	params.oTarget = oTarget;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.DoCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          fReqStabilityRatio             (Parm)
// float                          fAbortStabilityRatio           (Parm)
// float                          fTimeOut                       (Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::DoCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DoCapability");

	ABioAiController_DoCapability_Params params;
	params.oCapability = oCapability;
	params.fReqStabilityRatio = fReqStabilityRatio;
	params.fAbortStabilityRatio = fAbortStabilityRatio;
	params.fTimeOut = fTimeOut;
	params.oTarget = oTarget;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.MobTarget
// (Final, Latent, Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// float                          fMoveTolerance                 (Parm)

void ABioAiController::MobTarget(class AActor* oTarget, float fMoveTolerance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.MobTarget");

	ABioAiController_MobTarget_Params params;
	params.oTarget = oTarget;
	params.fMoveTolerance = fMoveTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.AdjustSteeringMoveSpeed
// (Native, Public)
// Parameters:
// struct FVector                 vSteering                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::AdjustSteeringMoveSpeed(const struct FVector& vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AdjustSteeringMoveSpeed");

	ABioAiController_AdjustSteeringMoveSpeed_Params params;
	params.vSteering = vSteering;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetSteeringVector
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vSteering                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::GetSteeringVector(struct FVector* vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetSteeringVector");

	ABioAiController_GetSteeringVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vSteering != nullptr)
		*vSteering = params.vSteering;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.SteeringMovement
// (Final, Latent, Native, Public)

void ABioAiController::SteeringMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.SteeringMovement");

	ABioAiController_SteeringMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.GetTarget
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioAiController::GetTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetTarget");

	ABioAiController_GetTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.ExploreMode
// (Native, Public)
// Parameters:
// float                          fDelaySeconds                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::ExploreMode(float fDelaySeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ExploreMode");

	ABioAiController_ExploreMode_Params params;
	params.fDelaySeconds = fDelaySeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.ReadyMode
// (Native, Public)
// Parameters:
// float                          fDelaySeconds                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::ReadyMode(float fDelaySeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ReadyMode");

	ABioAiController_ReadyMode_Params params;
	params.fDelaySeconds = fDelaySeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.UnlockTarget
// (Native, Public)
// Parameters:
// bool                           bSwitchActionState             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::UnlockTarget(bool bSwitchActionState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.UnlockTarget");

	ABioAiController_UnlockTarget_Params params;
	params.bSwitchActionState = bSwitchActionState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.LockTarget
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::LockTarget(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.LockTarget");

	ABioAiController_LockTarget_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddTempLookAt
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (OptionalParm, Parm)
// struct FVector                 vPoint                         (OptionalParm, Parm)
// struct FVector                 vRelitivePoint                 (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddTempLookAt(class AActor* oTarget, const struct FVector& vPoint, const struct FVector& vRelitivePoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddTempLookAt");

	ABioAiController_AddTempLookAt_Params params;
	params.oTarget = oTarget;
	params.vPoint = vPoint;
	params.vRelitivePoint = vRelitivePoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddUseArtPlaceable
// (Native, Public)
// Parameters:
// class ABioArtPlaceable*        oAP                            (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddUseArtPlaceable(class ABioArtPlaceable* oAP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddUseArtPlaceable");

	ABioAiController_AddUseArtPlaceable_Params params;
	params.oAP = oAP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddUsePower
// (Native, Public)
// Parameters:
// struct FName                   nmPower                        (Parm)
// class AActor*                  oTarget                        (Parm)
// bool                           bOrderedByPlayer               (Parm)
// float                          fTimeOut                       (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddUsePower(const struct FName& nmPower, class AActor* oTarget, bool bOrderedByPlayer, float fTimeOut, const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddUsePower");

	ABioAiController_AddUsePower_Params params;
	params.nmPower = nmPower;
	params.oTarget = oTarget;
	params.bOrderedByPlayer = bOrderedByPlayer;
	params.fTimeOut = fTimeOut;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.SwitchWeaponTypeToRangedItemType
// (Native, Public)
// Parameters:
// TEnumAsByte<ESwitchToWeapon>   nSwitchType                    (Parm)
// TEnumAsByte<EBioItemWeaponRangedType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioItemWeaponRangedType> ABioAiController::SwitchWeaponTypeToRangedItemType(TEnumAsByte<ESwitchToWeapon> nSwitchType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.SwitchWeaponTypeToRangedItemType");

	ABioAiController_SwitchWeaponTypeToRangedItemType_Params params;
	params.nSwitchType = nSwitchType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.RangedItemTypeToSwitchWeaponType
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> nWeaponType                    (Parm)
// TEnumAsByte<ESwitchToWeapon>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESwitchToWeapon> ABioAiController::RangedItemTypeToSwitchWeaponType(TEnumAsByte<EBioItemWeaponRangedType> nWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.RangedItemTypeToSwitchWeaponType");

	ABioAiController_RangedItemTypeToSwitchWeaponType_Params params;
	params.nWeaponType = nWeaponType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetSelectedWeaponSwitchType
// (Native, Public)
// Parameters:
// TEnumAsByte<ESwitchToWeapon>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESwitchToWeapon> ABioAiController::GetSelectedWeaponSwitchType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetSelectedWeaponSwitchType");

	ABioAiController_GetSelectedWeaponSwitchType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.GetSelectedWeapon
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> out_Type                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::GetSelectedWeapon(TEnumAsByte<EBioItemWeaponRangedType>* out_Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.GetSelectedWeapon");

	ABioAiController_GetSelectedWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Type != nullptr)
		*out_Type = params.out_Type;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddSelectWeapon
// (Native, Public)
// Parameters:
// TEnumAsByte<ESwitchToWeapon>   NewWeapon                      (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddSelectWeapon(TEnumAsByte<ESwitchToWeapon> NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddSelectWeapon");

	ABioAiController_AddSelectWeapon_Params params;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddThrowGrenade
// (Native, Public)
// Parameters:
// class APawn*                   pTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// int                            nGrenadeType                   (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddThrowGrenade(class APawn* pTarget, const struct FVector& vTarget, int nGrenadeType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddThrowGrenade");

	ABioAiController_AddThrowGrenade_Params params;
	params.pTarget = pTarget;
	params.vTarget = vTarget;
	params.nGrenadeType = nGrenadeType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddStopFiring
// (Native, Public)
// Parameters:
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddStopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddStopFiring");

	ABioAiController_AddStopFiring_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddStartFiring
// (Native, Public)
// Parameters:
// class AActor*                  pTarget                        (Parm)
// float                          fReqStabilityRatio             (OptionalParm, Parm)
// float                          fAbortStabilityRatio           (OptionalParm, Parm)
// float                          fTimeOut                       (OptionalParm, Parm)
// bool                           bIgnoreLOS                     (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddStartFiring(class AActor* pTarget, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, bool bIgnoreLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddStartFiring");

	ABioAiController_AddStartFiring_Params params;
	params.pTarget = pTarget;
	params.fReqStabilityRatio = fReqStabilityRatio;
	params.fAbortStabilityRatio = fAbortStabilityRatio;
	params.fTimeOut = fTimeOut;
	params.bIgnoreLOS = bIgnoreLOS;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushUseCover
// (Native, Public)
// Parameters:
// struct FCoverRecord            oCoverInfo                     (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushUseCover(const struct FCoverRecord& oCoverInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushUseCover");

	ABioAiController_PushUseCover_Params params;
	params.oCoverInfo = oCoverInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushDoWorldInteraction
// (Native, Public)
// Parameters:
// class ABioWp_ActionStation*    ActionStation                  (Parm)
// TArray<class UBioActivityTiming*> Timings_                       (Parm, NeedCtorLink)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushDoWorldInteraction(class ABioWp_ActionStation* ActionStation, TArray<class UBioActivityTiming*> Timings_)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushDoWorldInteraction");

	ABioAiController_PushDoWorldInteraction_Params params;
	params.ActionStation = ActionStation;
	params.Timings_ = Timings_;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushPlayAnimation
// (Native, Public)
// Parameters:
// TArray<class UAnimSet*>        AnimationSets                  (Parm, NeedCtorLink)
// TArray<struct FName>           AnimName                       (Parm, NeedCtorLink)
// bool                           Looping                        (Parm)
// bool                           Random                         (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushPlayAnimation(TArray<class UAnimSet*> AnimationSets, TArray<struct FName> AnimName, bool Looping, bool Random)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushPlayAnimation");

	ABioAiController_PushPlayAnimation_Params params;
	params.AnimationSets = AnimationSets;
	params.AnimName = AnimName;
	params.Looping = Looping;
	params.Random = Random;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushMobTarget
// (Native, Public)
// Parameters:
// class AActor*                  MoveToObject                   (Parm)
// float                          PointTolerance                 (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushMobTarget(class AActor* MoveToObject, float PointTolerance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushMobTarget");

	ABioAiController_PushMobTarget_Params params;
	params.MoveToObject = MoveToObject;
	params.PointTolerance = PointTolerance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushMoveAndAttack
// (Native, Public)
// Parameters:
// class AActor*                  MoveToObject                   (Parm)
// bool                           bWalking                       (Parm)
// class UBioCapability*          oCapability                    (Parm)
// float                          fReqStab                       (Parm)
// float                          fAbortStab                     (Parm)
// float                          fTimeOut                       (Parm)
// class AActor*                  oAttackTarget                  (OptionalParm, Parm)
// bool                           bUseMobMovement                (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushMoveAndAttack(class AActor* MoveToObject, bool bWalking, class UBioCapability* oCapability, float fReqStab, float fAbortStab, float fTimeOut, class AActor* oAttackTarget, bool bUseMobMovement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushMoveAndAttack");

	ABioAiController_PushMoveAndAttack_Params params;
	params.MoveToObject = MoveToObject;
	params.bWalking = bWalking;
	params.oCapability = oCapability;
	params.fReqStab = fReqStab;
	params.fAbortStab = fAbortStab;
	params.fTimeOut = fTimeOut;
	params.oAttackTarget = oAttackTarget;
	params.bUseMobMovement = bUseMobMovement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushRandomWalk
// (Native, Public)
// Parameters:
// int                            MaxWalkDist_                   (Parm)
// float                          DelayAfterWalk_                (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushRandomWalk(int MaxWalkDist_, float DelayAfterWalk_)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushRandomWalk");

	ABioAiController_PushRandomWalk_Params params;
	params.MaxWalkDist_ = MaxWalkDist_;
	params.DelayAfterWalk_ = DelayAfterWalk_;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushFollowSquadLeader
// (Native, Public)
// Parameters:
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushFollowSquadLeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushFollowSquadLeader");

	ABioAiController_PushFollowSquadLeader_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushMoveToPointList
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FVector>         aMoveToLocations               (Const, Parm, OutParm, NeedCtorLink)
// float                          fTolerance                     (Parm)
// bool                           bWalking                       (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushMoveToPointList(float fTolerance, bool bWalking, TArray<struct FVector>* aMoveToLocations)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushMoveToPointList");

	ABioAiController_PushMoveToPointList_Params params;
	params.fTolerance = fTolerance;
	params.bWalking = bWalking;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aMoveToLocations != nullptr)
		*aMoveToLocations = params.aMoveToLocations;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushMoveToPoint
// (Native, Public)
// Parameters:
// struct FVector                 vLoc                           (Parm)
// float                          PointTolerance                 (Parm)
// bool                           bWalking                       (OptionalParm, Parm)
// bool                           bRequiresPrecisionMovement     (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushMoveToPoint(const struct FVector& vLoc, float PointTolerance, bool bWalking, bool bRequiresPrecisionMovement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushMoveToPoint");

	ABioAiController_PushMoveToPoint_Params params;
	params.vLoc = vLoc;
	params.PointTolerance = PointTolerance;
	params.bWalking = bWalking;
	params.bRequiresPrecisionMovement = bRequiresPrecisionMovement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushMoveToObject
// (Native, Public)
// Parameters:
// class AActor*                  MoveToObject                   (Parm)
// float                          PointTolerance                 (Parm)
// bool                           bWalking                       (OptionalParm, Parm)
// bool                           bRequiresPrecisionMovement     (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushMoveToObject(class AActor* MoveToObject, float PointTolerance, bool bWalking, bool bRequiresPrecisionMovement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushMoveToObject");

	ABioAiController_PushMoveToObject_Params params;
	params.MoveToObject = MoveToObject;
	params.PointTolerance = PointTolerance;
	params.bWalking = bWalking;
	params.bRequiresPrecisionMovement = bRequiresPrecisionMovement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.ResumeWalking
// (Native, Public)

void ABioAiController::ResumeWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ResumeWalking");

	ABioAiController_ResumeWalking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.PushWalkWaypointSet
// (Native, Public)
// Parameters:
// class ABioWaypointSet*         oWaypointSet                   (Parm)
// TEnumAsByte<EeWalkWaypointsTypes> eWalkType                      (Parm)
// bool                           bWalking                       (OptionalParm, Parm)
// float                          fMoveTolerance                 (OptionalParm, Parm)
// int                            nNextWaypoint                  (OptionalParm, Parm)
// bool                           bCounting_Up                   (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushWalkWaypointSet(class ABioWaypointSet* oWaypointSet, TEnumAsByte<EeWalkWaypointsTypes> eWalkType, bool bWalking, float fMoveTolerance, int nNextWaypoint, bool bCounting_Up)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushWalkWaypointSet");

	ABioAiController_PushWalkWaypointSet_Params params;
	params.oWaypointSet = oWaypointSet;
	params.eWalkType = eWalkType;
	params.bWalking = bWalking;
	params.fMoveTolerance = fMoveTolerance;
	params.nNextWaypoint = nNextWaypoint;
	params.bCounting_Up = bCounting_Up;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.AddDelay
// (Native, Public)
// Parameters:
// float                          DelayTime                      (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::AddDelay(float DelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.AddDelay");

	ABioAiController_AddDelay_Params params;
	params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PushDelay
// (Native, Public)
// Parameters:
// float                          DelayTime                      (Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioAiController::PushDelay(float DelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PushDelay");

	ABioAiController_PushDelay_Params params;
	params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.IsOnPathNetwork
// (Native, Public)
// Parameters:
// class APawn*                   oTarget                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::IsOnPathNetwork(class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.IsOnPathNetwork");

	ABioAiController_IsOnPathNetwork_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.DirectWalkCheck
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vTarget                        (Const, Parm, OutParm)
// class AActor*                  pTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::DirectWalkCheck(class AActor* pTarget, struct FVector* vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DirectWalkCheck");

	ABioAiController_DirectWalkCheck_Params params;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vTarget != nullptr)
		*vTarget = params.vTarget;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.PrecisionMoveTo
// (Final, Latent, Native, Public)
// Parameters:
// struct FVector                 vLoc                           (Parm)
// struct FRotator                rRot                           (Parm)

void ABioAiController::PrecisionMoveTo(const struct FVector& vLoc, const struct FRotator& rRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.PrecisionMoveTo");

	ABioAiController_PrecisionMoveTo_Params params;
	params.vLoc = vLoc;
	params.rRot = rRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.WaitForActionToComplete
// (Final, Latent, Native, Public)
// Parameters:
// class UBioSeqData*             oSeqData                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::WaitForActionToComplete(class UBioSeqData* oSeqData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.WaitForActionToComplete");

	ABioAiController_WaitForActionToComplete_Params params;
	params.oSeqData = oSeqData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.ClearFriendActionResource
// (Native, Public)

void ABioAiController::ClearFriendActionResource()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ClearFriendActionResource");

	ABioAiController_ClearFriendActionResource_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.SetFriendActionResource
// (Native, Public)
// Parameters:
// int                            nResource                      (Parm)

void ABioAiController::SetFriendActionResource(int nResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.SetFriendActionResource");

	ABioAiController_SetFriendActionResource_Params params;
	params.nResource = nResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ClearActionResource
// (Native, Public)
// Parameters:
// TEnumAsByte<EeActionType>      ActionTYP                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::ClearActionResource(TEnumAsByte<EeActionType> ActionTYP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ClearActionResource");

	ABioAiController_ClearActionResource_Params params;
	params.ActionTYP = ActionTYP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.ReserveActionResource
// (Native, Public)
// Parameters:
// TEnumAsByte<EeActionType>      ActionTYP                      (Parm)
// int                            nResource                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::ReserveActionResource(TEnumAsByte<EeActionType> ActionTYP, int nResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ReserveActionResource");

	ABioAiController_ReserveActionResource_Params params;
	params.ActionTYP = ActionTYP;
	params.nResource = nResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.CheckActionResource
// (Native, Public)
// Parameters:
// int                            nResource                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CheckActionResource(int nResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CheckActionResource");

	ABioAiController_CheckActionResource_Params params;
	params.nResource = nResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.DoingCombatTransition
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::DoingCombatTransition()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.DoingCombatTransition");

	ABioAiController_DoingCombatTransition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.CanUsePowers
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CanUsePowers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CanUsePowers");

	ABioAiController_CanUsePowers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.CanUseGrenades
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CanUseGrenades()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CanUseGrenades");

	ABioAiController_CanUseGrenades_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.CanUseWeapons
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CanUseWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CanUseWeapons");

	ABioAiController_CanUseWeapons_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.CanUseStack
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CanUseStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CanUseStack");

	ABioAiController_CanUseStack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.CanUseQueue
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::CanUseQueue()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.CanUseQueue");

	ABioAiController_CanUseQueue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.QueueCompletionEvent
// (Native, Public)
// Parameters:
// class UBioSeqData*             oCompletedAction               (Parm)

void ABioAiController::QueueCompletionEvent(class UBioSeqData* oCompletedAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.QueueCompletionEvent");

	ABioAiController_QueueCompletionEvent_Params params;
	params.oCompletedAction = oCompletedAction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.HandleCompletionEvent
// (Native, Public)
// Parameters:
// class UBioSeqData*             oCompletedAction               (Parm)

void ABioAiController::HandleCompletionEvent(class UBioSeqData* oCompletedAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.HandleCompletionEvent");

	ABioAiController_HandleCompletionEvent_Params params;
	params.oCompletedAction = oCompletedAction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ActionStarving
// (Event, Public)
// Parameters:
// class UClass*                  cSeqClass                      (Parm)

void ABioAiController::ActionStarving(class UClass* cSeqClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ActionStarving");

	ABioAiController_ActionStarving_Params params;
	params.cSeqClass = cSeqClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.ClearActionQueue
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::ClearActionQueue()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.ClearActionQueue");

	ABioAiController_ClearActionQueue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.HasActions
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAiController::HasActions()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.HasActions");

	ABioAiController_HasActions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAiController.BioVINCE_MapName_Hench_Teleport
// (Native, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void ABioAiController::BioVINCE_MapName_Hench_Teleport(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.BioVINCE_MapName_Hench_Teleport");

	ABioAiController_BioVINCE_MapName_Hench_Teleport_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.BioVINCE_MapName_Hench_FailToPath
// (Native, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void ABioAiController::BioVINCE_MapName_Hench_FailToPath(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.BioVINCE_MapName_Hench_FailToPath");

	ABioAiController_BioVINCE_MapName_Hench_FailToPath_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAiController.BioOnPawnActionStateChanged
// (Native, Public)

void ABioAiController::BioOnPawnActionStateChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAiController.BioOnPawnActionStateChanged");

	ABioAiController_BioOnPawnActionStateChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBasePlayerController.QuickSave
// (Defined, Exec, Public)

void ABioBasePlayerController::QuickSave()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBasePlayerController.QuickSave");

	ABioBasePlayerController_QuickSave_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnExternalUIChanged
// (Defined, Public)
// Parameters:
// bool                           bIsOpening                     (Parm)

void ABioPlayerController::OnExternalUIChanged(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnExternalUIChanged");

	ABioPlayerController_OnExternalUIChanged_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ProxyOnExternalUIChanged
// (Defined, Event, Public)
// Parameters:
// bool                           bIsOpening                     (Parm)

void ABioPlayerController::ProxyOnExternalUIChanged(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ProxyOnExternalUIChanged");

	ABioPlayerController_ProxyOnExternalUIChanged_Params params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ProxyOnControllerChanged
// (Defined, Event, Public)
// Parameters:
// int                            ControllerId                   (Parm)
// bool                           bIsConnected                   (Parm)

void ABioPlayerController::ProxyOnControllerChanged(int ControllerId, bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ProxyOnControllerChanged");

	ABioPlayerController_ProxyOnControllerChanged_Params params;
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.Initialize
// (Public)

void ABioPlayerController::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.Initialize");

	ABioPlayerController_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnProximityAlarm
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioPlayerController::OnProximityAlarm(class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnProximityAlarm");

	ABioPlayerController_OnProximityAlarm_Params params;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnSquadSeen
// (Event, Public)
// Parameters:
// class AActor*                  oSquad                         (Parm)

void ABioPlayerController::OnSquadSeen(class AActor* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnSquadSeen");

	ABioPlayerController_OnSquadSeen_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnActionComplete_Movement
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oTarget                        (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioPlayerController::OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnActionComplete_Movement");

	ABioPlayerController_OnActionComplete_Movement_Params params;
	params.nmAction = nmAction;
	params.nReason = nReason;
	params.oTarget = oTarget;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnActionComplete_Combat
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// struct FName                   nmTechnique                    (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oLastTarget                    (Parm)

void ABioPlayerController::OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnActionComplete_Combat");

	ABioPlayerController_OnActionComplete_Combat_Params params;
	params.nmAction = nmAction;
	params.nmTechnique = nmTechnique;
	params.nReason = nReason;
	params.oLastTarget = oLastTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioPlayerController::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnDamaged");

	ABioPlayerController_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnCastAt
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmPower                        (Parm)

void ABioPlayerController::OnCastAt(class APawn* oAttacker, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnCastAt");

	ABioPlayerController_OnCastAt_Params params;
	params.oAttacker = oAttacker;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnAttacked
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioPlayerController::OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnAttacked");

	ABioPlayerController_OnAttacked_Params params;
	params.oAttacker = oAttacker;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnAbilityDisabled
// (Defined, Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioPlayerController::OnAbilityDisabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnAbilityDisabled");

	ABioPlayerController_OnAbilityDisabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnAbilityEnabled
// (Defined, Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioPlayerController::OnAbilityEnabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnAbilityEnabled");

	ABioPlayerController_OnAbilityEnabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnNoCombatAction
// (Defined, Event, Public)

void ABioPlayerController::OnNoCombatAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnNoCombatAction");

	ABioPlayerController_OnNoCombatAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.OnDeath
// (Defined, Event, Public)
// Parameters:
// class AController*             oKiller                        (Parm)

void ABioPlayerController::OnDeath(class AController* oKiller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnDeath");

	ABioPlayerController_OnDeath_Params params;
	params.oKiller = oKiller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.IsMoveInputIgnored
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.IsMoveInputIgnored");

	ABioPlayerController_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.OnTeleportCameraSync
// (Defined, Public, HasDefaults)
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void ABioPlayerController::OnTeleportCameraSync(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnTeleportCameraSync");

	ABioPlayerController_OnTeleportCameraSync_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SpawnPlayerCamera
// (Defined, Event, Public)

void ABioPlayerController::SpawnPlayerCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SpawnPlayerCamera");

	ABioPlayerController_SpawnPlayerCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.setcoverdelay
// (Defined, Public)
// Parameters:
// float                          fTime                          (Parm)

void ABioPlayerController::setcoverdelay(float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.setcoverdelay");

	ABioPlayerController_setcoverdelay_Params params;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.UnlockGamerPicture
// (Defined, Event, Public)
// Parameters:
// int                            PictureId                      (Parm)

void ABioPlayerController::UnlockGamerPicture(int PictureId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.UnlockGamerPicture");

	ABioPlayerController_UnlockGamerPicture_Params params;
	params.PictureId = PictureId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.UnlockAchievement
// (Defined, Event, Public)
// Parameters:
// int                            AchievementId                  (Parm)
// bool                           bUpdatePlotState               (Parm)

void ABioPlayerController::UnlockAchievement(int AchievementId, bool bUpdatePlotState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.UnlockAchievement");

	ABioPlayerController_UnlockAchievement_Params params;
	params.AchievementId = AchievementId;
	params.bUpdatePlotState = bUpdatePlotState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SetPostProcessEnableFlags
// (Native, Public)
// Parameters:
// unsigned char                  EnableFlags                    (Parm)

void ABioPlayerController::SetPostProcessEnableFlags(unsigned char EnableFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SetPostProcessEnableFlags");

	ABioPlayerController_SetPostProcessEnableFlags_Params params;
	params.EnableFlags = EnableFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.InitializeGammaCorrectionSettings
// (Native, Public)

void ABioPlayerController::InitializeGammaCorrectionSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.InitializeGammaCorrectionSettings");

	ABioPlayerController_InitializeGammaCorrectionSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SetPostProcessValuesEx
// (Defined, Public)
// Parameters:
// int                            i_GammaPreset                  (Parm)

void ABioPlayerController::SetPostProcessValuesEx(int i_GammaPreset)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SetPostProcessValuesEx");

	ABioPlayerController_SetPostProcessValuesEx_Params params;
	params.i_GammaPreset = i_GammaPreset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SetPostProcessValues
// (Native, Public)
// Parameters:
// TEnumAsByte<ETVType>           Preset                         (Parm)

void ABioPlayerController::SetPostProcessValues(TEnumAsByte<ETVType> Preset)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SetPostProcessValues");

	ABioPlayerController_SetPostProcessValues_Params params;
	params.Preset = Preset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ProxyClientStopForceFeedbackWaveform
// (Final, Defined, Event, Public)
// Parameters:
// class UForceFeedbackWaveform*  pWaveform                      (OptionalParm, Parm)

void ABioPlayerController::ProxyClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* pWaveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ProxyClientStopForceFeedbackWaveform");

	ABioPlayerController_ProxyClientStopForceFeedbackWaveform_Params params;
	params.pWaveform = pWaveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ProxyClientPlayForceFeedbackWaveform
// (Final, Defined, Event, Public)
// Parameters:
// class UForceFeedbackWaveform*  pWaveform                      (Parm)

void ABioPlayerController::ProxyClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* pWaveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ProxyClientPlayForceFeedbackWaveform");

	ABioPlayerController_ProxyClientPlayForceFeedbackWaveform_Params params;
	params.pWaveform = pWaveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioPlayerController::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.GetSaveObjectClass");

	ABioPlayerController_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.ToggleCrouch
// (Defined, Exec, Event, Public)

void ABioPlayerController::ToggleCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ToggleCrouch");

	ABioPlayerController_ToggleCrouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.UnPossess
// (Defined, Event, Public)

void ABioPlayerController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.UnPossess");

	ABioPlayerController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.Possess
// (Defined, Public)
// Parameters:
// class APawn*                   aPawn                          (Parm)
// bool                           bVehicleTransition             (Parm)

void ABioPlayerController::Possess(class APawn* aPawn, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.Possess");

	ABioPlayerController_Possess_Params params;
	params.aPawn = aPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SetStartupMode
// (Defined, Public)
// Parameters:
// bool                           bIsSpectate                    (Parm)

void ABioPlayerController::SetStartupMode(bool bIsSpectate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SetStartupMode");

	ABioPlayerController_SetStartupMode_Params params;
	params.bIsSpectate = bIsSpectate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.InitInputSystemMouse
// (Native, Public)

void ABioPlayerController::InitInputSystemMouse()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.InitInputSystemMouse");

	ABioPlayerController_InitInputSystemMouse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.InitInputSystem
// (Defined, Event, Public)

void ABioPlayerController::InitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.InitInputSystem");

	ABioPlayerController_InitInputSystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.UnPauseController
// (Defined, Event, Public)

void ABioPlayerController::UnPauseController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.UnPauseController");

	ABioPlayerController_UnPauseController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.PauseController
// (Defined, Event, Public)

void ABioPlayerController::PauseController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.PauseController");

	ABioPlayerController_PauseController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.CamInvert
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmAxis                         (Parm)

void ABioPlayerController::CamInvert(const struct FName& nmAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.CamInvert");

	ABioPlayerController_CamInvert_Params params;
	params.nmAxis = nmAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ToggleFlyCamControl
// (Defined, Exec, Public)

void ABioPlayerController::ToggleFlyCamControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ToggleFlyCamControl");

	ABioPlayerController_ToggleFlyCamControl_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ToggleFlyCam
// (Defined, Exec, Public)

void ABioPlayerController::ToggleFlyCam()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ToggleFlyCam");

	ABioPlayerController_ToggleFlyCam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.CheckWalkDebugFlag
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::CheckWalkDebugFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.CheckWalkDebugFlag");

	ABioPlayerController_CheckWalkDebugFlag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.SetCameraMode
// (Defined, Public)
// Parameters:
// struct FName                   NewCamMode                     (Parm)

void ABioPlayerController::SetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SetCameraMode");

	ABioPlayerController_SetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.PlayerTick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioPlayerController::PlayerTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.PlayerTick");

	ABioPlayerController_PlayerTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.PlayerCalcCamera
// (Defined, Simulated, Public, HasOutParms, HasDefaults)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 POVLoc                         (Parm, OutParm)
// struct FRotator                POVRot                         (Parm, OutParm)
// float                          newFOVAngle                    (Parm, OutParm)

void ABioPlayerController::PlayerCalcCamera(float fDeltaTime, struct FVector* POVLoc, struct FRotator* POVRot, float* newFOVAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.PlayerCalcCamera");

	ABioPlayerController_PlayerCalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (POVLoc != nullptr)
		*POVLoc = params.POVLoc;
	if (POVRot != nullptr)
		*POVRot = params.POVRot;
	if (newFOVAngle != nullptr)
		*newFOVAngle = params.newFOVAngle;
}


// Function BIOC_Base.BioPlayerController.EndConversationMode
// (Defined, Event, Public)

void ABioPlayerController::EndConversationMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.EndConversationMode");

	ABioPlayerController_EndConversationMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.StartConversationMode
// (Defined, Event, Public)

void ABioPlayerController::StartConversationMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.StartConversationMode");

	ABioPlayerController_StartConversationMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.InitCameraManager
// (Defined, Public)

void ABioPlayerController::InitCameraManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.InitCameraManager");

	ABioPlayerController_InitCameraManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.PostBeginPlay
// (Defined, Simulated, Event, Public)

void ABioPlayerController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.PostBeginPlay");

	ABioPlayerController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SharedPost
// (Defined, Public)

void ABioPlayerController::SharedPost()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SharedPost");

	ABioPlayerController_SharedPost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.EnablePauseGameOnControllerRemoval
// (Defined, Public)

void ABioPlayerController::EnablePauseGameOnControllerRemoval()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.EnablePauseGameOnControllerRemoval");

	ABioPlayerController_EnablePauseGameOnControllerRemoval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.DissablePauseGameOnControllerRemoval
// (Defined, Public)

void ABioPlayerController::DissablePauseGameOnControllerRemoval()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.DissablePauseGameOnControllerRemoval");

	ABioPlayerController_DissablePauseGameOnControllerRemoval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.IsAbleToInstigate
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::IsAbleToInstigate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.IsAbleToInstigate");

	ABioPlayerController_IsAbleToInstigate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.ComputeMovementStickAngle
// (Native, Public)
// Parameters:
// float                          fLRValue                       (Parm)
// float                          fFBValue                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerController::ComputeMovementStickAngle(float fLRValue, float fFBValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ComputeMovementStickAngle");

	ABioPlayerController_ComputeMovementStickAngle_Params params;
	params.fLRValue = fLRValue;
	params.fFBValue = fFBValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.CanPerceiveTarget
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::CanPerceiveTarget(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.CanPerceiveTarget");

	ABioPlayerController_CanPerceiveTarget_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.GetTargetRelativeRotation
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vDirection                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::GetTargetRelativeRotation(struct FVector* vDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.GetTargetRelativeRotation");

	ABioPlayerController_GetTargetRelativeRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vDirection != nullptr)
		*vDirection = params.vDirection;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.GetCameraRelativeRotation
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vDirection                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::GetCameraRelativeRotation(struct FVector* vDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.GetCameraRelativeRotation");

	ABioPlayerController_GetCameraRelativeRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vDirection != nullptr)
		*vDirection = params.vDirection;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.OnCameraUpdate
// (Native, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FTPOV                   POV                            (Const, Parm, OutParm)

void ABioPlayerController::OnCameraUpdate(float fDeltaTime, struct FTPOV* POV)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnCameraUpdate");

	ABioPlayerController_OnCameraUpdate_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (POV != nullptr)
		*POV = params.POV;
}


// Function BIOC_Base.BioPlayerController.GetCombatModePenalty
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerController::GetCombatModePenalty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.GetCombatModePenalty");

	ABioPlayerController_GetCombatModePenalty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.LogCinematicMode
// (Native, Public)
// Parameters:
// bool                           bIsStartingCinematic           (Parm)

void ABioPlayerController::LogCinematicMode(bool bIsStartingCinematic)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.LogCinematicMode");

	ABioPlayerController_LogCinematicMode_Params params;
	params.bIsStartingCinematic = bIsStartingCinematic;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.BioOnPawnActionStateChanged
// (Native, Public)

void ABioPlayerController::BioOnPawnActionStateChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.BioOnPawnActionStateChanged");

	ABioPlayerController_BioOnPawnActionStateChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.FireLeaveWorldEvent
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::FireLeaveWorldEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.FireLeaveWorldEvent");

	ABioPlayerController_FireLeaveWorldEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.BioExitVehicle
// (Native, Public)
// Parameters:
// bool                           bForceExit                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::BioExitVehicle(bool bForceExit)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.BioExitVehicle");

	ABioPlayerController_BioExitVehicle_Params params;
	params.bForceExit = bForceExit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.BioEnterVehicle
// (Native, Public)
// Parameters:
// class ABioVehicleBase*         oVehicle                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::BioEnterVehicle(class ABioVehicleBase* oVehicle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.BioEnterVehicle");

	ABioPlayerController_BioEnterVehicle_Params params;
	params.oVehicle = oVehicle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.BioTryExitVehicle
// (Native, Public)
// Parameters:
// bool                           bIsPlayerInput                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::BioTryExitVehicle(bool bIsPlayerInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.BioTryExitVehicle");

	ABioPlayerController_BioTryExitVehicle_Params params;
	params.bIsPlayerInput = bIsPlayerInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.BioTryEnterVehicle
// (Native, Public)
// Parameters:
// bool                           bIsPlayerInput                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::BioTryEnterVehicle(bool bIsPlayerInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.BioTryEnterVehicle");

	ABioPlayerController_BioTryEnterVehicle_Params params;
	params.bIsPlayerInput = bIsPlayerInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.InitializeCommandTarget
// (Final, Native, Public)

void ABioPlayerController::InitializeCommandTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.InitializeCommandTarget");

	ABioPlayerController_InitializeCommandTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ReApplyTacticalOrders
// (Final, Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// float                          fDelay                         (Parm)

void ABioPlayerController::ReApplyTacticalOrders(class APawn* pPawn, float fDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ReApplyTacticalOrders");

	ABioPlayerController_ReApplyTacticalOrders_Params params;
	params.pPawn = pPawn;
	params.fDelay = fDelay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ApplyMovementOrders
// (Final, Native, Public)

void ABioPlayerController::ApplyMovementOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ApplyMovementOrders");

	ABioPlayerController_ApplyMovementOrders_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.ApplyTacticalOrders
// (Final, Native, Public)

void ABioPlayerController::ApplyTacticalOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ApplyTacticalOrders");

	ABioPlayerController_ApplyTacticalOrders_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SquadOrderDequeuePower
// (Final, Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)

void ABioPlayerController::SquadOrderDequeuePower(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SquadOrderDequeuePower");

	ABioPlayerController_SquadOrderDequeuePower_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SquadOrderUseGrenade
// (Final, Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)

void ABioPlayerController::SquadOrderUseGrenade(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SquadOrderUseGrenade");

	ABioPlayerController_SquadOrderUseGrenade_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SquadOrderEquipWeapon
// (Final, Native, Public)
// Parameters:
// unsigned char                  nWeapon                        (Parm)
// class APawn*                   pPawn                          (Parm)

void ABioPlayerController::SquadOrderEquipWeapon(unsigned char nWeapon, class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SquadOrderEquipWeapon");

	ABioPlayerController_SquadOrderEquipWeapon_Params params;
	params.nWeapon = nWeapon;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SquadOrderUsePower
// (Final, Native, Public)
// Parameters:
// struct FName                   nmPower                        (Parm)
// class APawn*                   pPawn                          (Parm)

void ABioPlayerController::SquadOrderUsePower(const struct FName& nmPower, class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SquadOrderUsePower");

	ABioPlayerController_SquadOrderUsePower_Params params;
	params.nmPower = nmPower;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.SquadOrderShootTarget
// (Final, Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)

void ABioPlayerController::SquadOrderShootTarget(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SquadOrderShootTarget");

	ABioPlayerController_SquadOrderShootTarget_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.QuickCommandUseMappedAction
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioActionMappingSlot> nSlot                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::QuickCommandUseMappedAction(TEnumAsByte<EBioActionMappingSlot> nSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.QuickCommandUseMappedAction");

	ABioPlayerController_QuickCommandUseMappedAction_Params params;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.QuickCommandChangeCommandTarget
// (Final, Native, Public)
// Parameters:
// bool                           bRevertToSquadLeader           (OptionalParm, Parm)
// bool                           bClockwise                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::QuickCommandChangeCommandTarget(bool bRevertToSquadLeader, bool bClockwise)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.QuickCommandChangeCommandTarget");

	ABioPlayerController_QuickCommandChangeCommandTarget_Params params;
	params.bRevertToSquadLeader = bRevertToSquadLeader;
	params.bClockwise = bClockwise;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.QuickCommandMoveTo
// (Final, Native, Public)
// Parameters:
// int                            iSquadMember                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::QuickCommandMoveTo(int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.QuickCommandMoveTo");

	ABioPlayerController_QuickCommandMoveTo_Params params;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.QuickCommandAttackTarget
// (Final, Native, Public)
// Parameters:
// int                            iSquadMember                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::QuickCommandAttackTarget(int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.QuickCommandAttackTarget");

	ABioPlayerController_QuickCommandAttackTarget_Params params;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.QuickCommandChangeFormation
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EFollowFormation>  eFormation                     (Parm)
// int                            iSquadMember                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::QuickCommandChangeFormation(TEnumAsByte<EFollowFormation> eFormation, int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.QuickCommandChangeFormation");

	ABioPlayerController_QuickCommandChangeFormation_Params params;
	params.eFormation = eFormation;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.ToggleSquadCommandVisibility
// (Native, Public)
// Parameters:
// bool                           bVisible                       (Parm)

void ABioPlayerController::ToggleSquadCommandVisibility(bool bVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ToggleSquadCommandVisibility");

	ABioPlayerController_ToggleSquadCommandVisibility_Params params;
	params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.EndSquadCommand
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::EndSquadCommand()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.EndSquadCommand");

	ABioPlayerController_EndSquadCommand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.ToggleSquadCommand
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::ToggleSquadCommand()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ToggleSquadCommand");

	ABioPlayerController_ToggleSquadCommand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.PlayerSquadSetActionState
// (Final, Native, Public)
// Parameters:
// unsigned char                  eState                         (Parm)

void ABioPlayerController::PlayerSquadSetActionState(unsigned char eState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.PlayerSquadSetActionState");

	ABioPlayerController_PlayerSquadSetActionState_Params params;
	params.eState = eState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.GetHenchmanMappedPower
// (Native, Public)
// Parameters:
// class APawn*                   oHenchman                      (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName ABioPlayerController::GetHenchmanMappedPower(class APawn* oHenchman)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.GetHenchmanMappedPower");

	ABioPlayerController_GetHenchmanMappedPower_Params params;
	params.oHenchman = oHenchman;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.SetHenchmanMappedPower
// (Native, Public)
// Parameters:
// class APawn*                   oHenchman                      (Parm)
// struct FName                   nmPower                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::SetHenchmanMappedPower(class APawn* oHenchman, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.SetHenchmanMappedPower");

	ABioPlayerController_SetHenchmanMappedPower_Params params;
	params.oHenchman = oHenchman;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.IsActionMappedToPlayerSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioActionType>    eType                          (Parm)
// struct FName                   nmPower                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::IsActionMappedToPlayerSlot(TEnumAsByte<EBioActionType> eType, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.IsActionMappedToPlayerSlot");

	ABioPlayerController_IsActionMappedToPlayerSlot_Params params;
	params.eType = eType;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.ClearMapByIndex
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioActionMappingSlot> nSlot                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::ClearMapByIndex(TEnumAsByte<EBioActionMappingSlot> nSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.ClearMapByIndex");

	ABioPlayerController_ClearMapByIndex_Params params;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.GetMappingByIndex
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioActionMappingSlot> nSlot                          (Parm)
// struct FBioActionMapping       stMapData                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::GetMappingByIndex(TEnumAsByte<EBioActionMappingSlot> nSlot, struct FBioActionMapping* stMapData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.GetMappingByIndex");

	ABioPlayerController_GetMappingByIndex_Params params;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stMapData != nullptr)
		*stMapData = params.stMapData;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.MapActionToAvailablePlayerSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioActionType>    eType                          (Parm)
// struct FName                   nmPower                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::MapActionToAvailablePlayerSlot(TEnumAsByte<EBioActionType> eType, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.MapActionToAvailablePlayerSlot");

	ABioPlayerController_MapActionToAvailablePlayerSlot_Params params;
	params.eType = eType;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.MapAction
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioActionMappingSlot> nSlot                          (Parm)
// TEnumAsByte<EBioActionType>    nType                          (Parm)
// struct FName                   nmPower                        (OptionalParm, Parm)
// class APawn*                   oPawn                          (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::MapAction(TEnumAsByte<EBioActionMappingSlot> nSlot, TEnumAsByte<EBioActionType> nType, const struct FName& nmPower, class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.MapAction");

	ABioPlayerController_MapAction_Params params;
	params.nSlot = nSlot;
	params.nType = nType;
	params.nmPower = nmPower;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.InitializeDefaultMapping
// (Native, Public)

void ABioPlayerController::InitializeDefaultMapping()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.InitializeDefaultMapping");

	ABioPlayerController_InitializeDefaultMapping_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.IsNCO
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::IsNCO()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.IsNCO");

	ABioPlayerController_IsNCO_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.IsCO
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::IsCO()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.IsCO");

	ABioPlayerController_IsCO_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.OnNewPlayerSelection
// (Native, Public)
// Parameters:
// class AActor*                  Selection                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerController::OnNewPlayerSelection(class AActor* Selection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OnNewPlayerSelection");

	ABioPlayerController_OnNewPlayerSelection_Params params;
	params.Selection = Selection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerController.DisableDOF
// (Native, Public)

void ABioPlayerController::DisableDOF()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.DisableDOF");

	ABioPlayerController_DisableDOF_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.NonRelativeTransformVehicleInputs
// (Native, Public, HasOutParms)
// Parameters:
// float                          fVerticalDir                   (Parm, OutParm)
// float                          fHorizontalDir                 (Parm, OutParm)

void ABioPlayerController::NonRelativeTransformVehicleInputs(float* fVerticalDir, float* fHorizontalDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.NonRelativeTransformVehicleInputs");

	ABioPlayerController_NonRelativeTransformVehicleInputs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fVerticalDir != nullptr)
		*fVerticalDir = params.fVerticalDir;
	if (fHorizontalDir != nullptr)
		*fHorizontalDir = params.fHorizontalDir;
}


// Function BIOC_Base.BioPlayerController.TransformToCameraRelativeVehicleInputs
// (Native, Public, HasOutParms)
// Parameters:
// float                          fVerticalDir                   (Parm, OutParm)
// float                          fHorizontalDir                 (Parm, OutParm)

void ABioPlayerController::TransformToCameraRelativeVehicleInputs(float* fVerticalDir, float* fHorizontalDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.TransformToCameraRelativeVehicleInputs");

	ABioPlayerController_TransformToCameraRelativeVehicleInputs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fVerticalDir != nullptr)
		*fVerticalDir = params.fVerticalDir;
	if (fHorizontalDir != nullptr)
		*fHorizontalDir = params.fHorizontalDir;
}


// Function BIOC_Base.BioPlayerController.OutputConsoleText
// (Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void ABioPlayerController::OutputConsoleText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.OutputConsoleText");

	ABioPlayerController_OutputConsoleText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.RecoverForPlayerPawnActionState
// (Native, Public)

void ABioPlayerController::RecoverForPlayerPawnActionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.RecoverForPlayerPawnActionState");

	ABioPlayerController_RecoverForPlayerPawnActionState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.RecoverSelectionForPawnActionState
// (Native, Public)

void ABioPlayerController::RecoverSelectionForPawnActionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.RecoverSelectionForPawnActionState");

	ABioPlayerController_RecoverSelectionForPawnActionState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.RecoverCameraForPawnActionState
// (Native, Public)

void ABioPlayerController::RecoverCameraForPawnActionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.RecoverCameraForPawnActionState");

	ABioPlayerController_RecoverCameraForPawnActionState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.RecoverCameraPostCinematic
// (Native, Public)

void ABioPlayerController::RecoverCameraPostCinematic()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.RecoverCameraPostCinematic");

	ABioPlayerController_RecoverCameraPostCinematic_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.DrawSelectionReticule
// (Native, Public)
// Parameters:
// struct FVector                 vLocation                      (Parm)

void ABioPlayerController::DrawSelectionReticule(const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.DrawSelectionReticule");

	ABioPlayerController_DrawSelectionReticule_Params params;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerController.DrawCircle
// (Native, Public)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FVector                 vNormal                        (Parm)
// float                          fRadius                        (Parm)
// struct FColor                  CircleColor                    (Parm)

void ABioPlayerController::DrawCircle(const struct FVector& vLocation, const struct FVector& vNormal, float fRadius, const struct FColor& CircleColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerController.DrawCircle");

	ABioPlayerController_DrawCircle_Params params;
	params.vLocation = vLocation;
	params.vNormal = vNormal;
	params.fRadius = fRadius;
	params.CircleColor = CircleColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.RestrictNumberOfSaves
// (Defined, Exec, Public)
// Parameters:
// bool                           bValue                         (Parm)

void UBioCheatManager::RestrictNumberOfSaves(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.RestrictNumberOfSaves");

	UBioCheatManager_RestrictNumberOfSaves_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.LogAllControllers
// (Defined, Exec, Public)

void UBioCheatManager::LogAllControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.LogAllControllers");

	UBioCheatManager_LogAllControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.LogAllPawns
// (Defined, Exec, Public)

void UBioCheatManager::LogAllPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.LogAllPawns");

	UBioCheatManager_LogAllPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetPlayerStabilityCurrent
// (Defined, Exec, Public)
// Parameters:
// float                          nStabilityCurrent              (Parm)

void UBioCheatManager::SetPlayerStabilityCurrent(float nStabilityCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetPlayerStabilityCurrent");

	UBioCheatManager_SetPlayerStabilityCurrent_Params params;
	params.nStabilityCurrent = nStabilityCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetPlayerStabilityRegenRate0
// (Exec, Native, Public)

void UBioCheatManager::SetPlayerStabilityRegenRate0()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetPlayerStabilityRegenRate0");

	UBioCheatManager_SetPlayerStabilityRegenRate0_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ChangeWeapon
// (Defined, Exec, Public)
// Parameters:
// int                            nWeapon                        (Parm)

void UBioCheatManager::ChangeWeapon(int nWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ChangeWeapon");

	UBioCheatManager_ChangeWeapon_Params params;
	params.nWeapon = nWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetAutoRightUpForceAndTorque
// (Defined, Exec, Public)
// Parameters:
// float                          fUpLiftForce                   (Parm)
// float                          fUprightTorque                 (Parm)

void UBioCheatManager::SetAutoRightUpForceAndTorque(float fUpLiftForce, float fUprightTorque)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetAutoRightUpForceAndTorque");

	UBioCheatManager_SetAutoRightUpForceAndTorque_Params params;
	params.fUpLiftForce = fUpLiftForce;
	params.fUprightTorque = fUprightTorque;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetVehicleCOMOffsetZ
// (Defined, Exec, Public)
// Parameters:
// float                          fOffsetZ                       (Parm)

void UBioCheatManager::SetVehicleCOMOffsetZ(float fOffsetZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetVehicleCOMOffsetZ");

	UBioCheatManager_SetVehicleCOMOffsetZ_Params params;
	params.fOffsetZ = fOffsetZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Mark
// (Exec, Native, Public)
// Parameters:
// struct FString                 sComment                       (Parm, NeedCtorLink)

void UBioCheatManager::Mark(const struct FString& sComment)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Mark");

	UBioCheatManager_Mark_Params params;
	params.sComment = sComment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.RecoverFromBleedOut
// (Defined, Exec, Public)

void UBioCheatManager::RecoverFromBleedOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.RecoverFromBleedOut");

	UBioCheatManager_RecoverFromBleedOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ClearDebugLines
// (Defined, Exec, Public)

void UBioCheatManager::ClearDebugLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ClearDebugLines");

	UBioCheatManager_ClearDebugLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetRenegade
// (Final, Defined, Exec, Public)
// Parameters:
// int                            Points                         (Parm)

void UBioCheatManager::SetRenegade(int Points)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetRenegade");

	UBioCheatManager_SetRenegade_Params params;
	params.Points = Points;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetParagon
// (Final, Defined, Exec, Public)
// Parameters:
// int                            Points                         (Parm)

void UBioCheatManager::SetParagon(int Points)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetParagon");

	UBioCheatManager_SetParagon_Params params;
	params.Points = Points;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GameOver
// (Defined, Exec, Public)

void UBioCheatManager::GameOver()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GameOver");

	UBioCheatManager_GameOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.AddPowerAimingInfoToList
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FVector                 vStartLocation1                (Parm)
// struct FVector                 vEndLocation1                  (Parm)
// struct FVector                 vStartLocation2                (Parm)
// struct FVector                 vEndLocation2                  (Parm)

void UBioCheatManager::AddPowerAimingInfoToList(const struct FVector& vStartLocation1, const struct FVector& vEndLocation1, const struct FVector& vStartLocation2, const struct FVector& vEndLocation2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.AddPowerAimingInfoToList");

	UBioCheatManager_AddPowerAimingInfoToList_Params params;
	params.vStartLocation1 = vStartLocation1;
	params.vEndLocation1 = vEndLocation1;
	params.vStartLocation2 = vStartLocation2;
	params.vEndLocation2 = vEndLocation2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowRecentPowers
// (Defined, Exec, Public)

void UBioCheatManager::ShowRecentPowers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowRecentPowers");

	UBioCheatManager_ShowRecentPowers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.AddPowerInfoToList
// (Defined, Event, Public)
// Parameters:
// struct FString                 sPowerInfo                     (Parm, NeedCtorLink)

void UBioCheatManager::AddPowerInfoToList(const struct FString& sPowerInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.AddPowerInfoToList");

	UBioCheatManager_AddPowerInfoToList_Params params;
	params.sPowerInfo = sPowerInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DisplayPowerList
// (Defined, Public)
// Parameters:
// class ABioHUD*                 oHud                           (Parm)

void UBioCheatManager::DisplayPowerList(class ABioHUD* oHud)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DisplayPowerList");

	UBioCheatManager_DisplayPowerList_Params params;
	params.oHud = oHud;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ClearPowerList
// (Defined, Exec, Public)

void UBioCheatManager::ClearPowerList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ClearPowerList");

	UBioCheatManager_ClearPowerList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TogglePowerList
// (Defined, Exec, Public)

void UBioCheatManager::TogglePowerList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TogglePowerList");

	UBioCheatManager_TogglePowerList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetVehicleExitLog
// (Defined, Exec, Public)
// Parameters:
// bool                           bStatus                        (Parm)

void UBioCheatManager::SetVehicleExitLog(bool bStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetVehicleExitLog");

	UBioCheatManager_SetVehicleExitLog_Params params;
	params.bStatus = bStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.coverdelay
// (Defined, Exec, Public)
// Parameters:
// float                          fTime                          (Parm)

void UBioCheatManager::coverdelay(float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.coverdelay");

	UBioCheatManager_coverdelay_Params params;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.MakeInvulnerable
// (Final, Defined, Exec, Public)
// Parameters:
// struct FString                 sWhitespaceDelimitedArgs       (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::MakeInvulnerable(const struct FString& sWhitespaceDelimitedArgs)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.MakeInvulnerable");

	UBioCheatManager_MakeInvulnerable_Params params;
	params.sWhitespaceDelimitedArgs = sWhitespaceDelimitedArgs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetCurvePixelError
// (Final, Defined, Exec, Public)
// Parameters:
// struct FName                   nmPanel                        (Parm)
// float                          fError                         (Parm)

void UBioCheatManager::SetCurvePixelError(const struct FName& nmPanel, float fError)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetCurvePixelError");

	UBioCheatManager_SetCurvePixelError_Params params;
	params.nmPanel = nmPanel;
	params.fError = fError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleEdgeAA
// (Final, Defined, Exec, Public)
// Parameters:
// struct FName                   nmPanel                        (Parm)

void UBioCheatManager::ToggleEdgeAA(const struct FName& nmPanel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleEdgeAA");

	UBioCheatManager_ToggleEdgeAA_Params params;
	params.nmPanel = nmPanel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DisplayPowerImpactText
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioHUD*                 oHud                           (Parm)

void UBioCheatManager::DisplayPowerImpactText(class ABioHUD* oHud)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DisplayPowerImpactText");

	UBioCheatManager_DisplayPowerImpactText_Params params;
	params.oHud = oHud;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TogglePowerImpact
// (Defined, Exec, Public)

void UBioCheatManager::TogglePowerImpact()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TogglePowerImpact");

	UBioCheatManager_TogglePowerImpact_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.HexHere
// (Defined, Exec, Public, HasDefaults)
// Parameters:
// float                          fTime                          (OptionalParm, Parm)

void UBioCheatManager::HexHere(float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.HexHere");

	UBioCheatManager_HexHere_Params params;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.LifeSpan
// (Defined, Exec, Public, HasDefaults)
// Parameters:
// float                          fTime                          (Parm)

void UBioCheatManager::LifeSpan(float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.LifeSpan");

	UBioCheatManager_LifeSpan_Params params;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnableBleedOut
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioCheatManager::EnableBleedOut(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnableBleedOut");

	UBioCheatManager_EnableBleedOut_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleShowAlignmentGains
// (Defined, Exec, Public)

void UBioCheatManager::ToggleShowAlignmentGains()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleShowAlignmentGains");

	UBioCheatManager_ToggleShowAlignmentGains_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetGrenadeAttribute
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmAttribute                    (Parm)
// struct FString                 sValue                         (Parm, NeedCtorLink)

void UBioCheatManager::SetGrenadeAttribute(const struct FName& nmAttribute, const struct FString& sValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetGrenadeAttribute");

	UBioCheatManager_SetGrenadeAttribute_Params params;
	params.nmAttribute = nmAttribute;
	params.sValue = sValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.UpdateEndGameAchievements
// (Defined, Exec, Public)

void UBioCheatManager::UpdateEndGameAchievements()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.UpdateEndGameAchievements");

	UBioCheatManager_UpdateEndGameAchievements_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.UnlockAchievementRange
// (Defined, Exec, Public)
// Parameters:
// int                            nLowerAchievementID            (Parm)
// int                            nUpperAchievementID            (Parm)

void UBioCheatManager::UnlockAchievementRange(int nLowerAchievementID, int nUpperAchievementID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.UnlockAchievementRange");

	UBioCheatManager_UnlockAchievementRange_Params params;
	params.nLowerAchievementID = nLowerAchievementID;
	params.nUpperAchievementID = nUpperAchievementID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.UnlockAchievement
// (Defined, Exec, Public)
// Parameters:
// int                            nAchievementID                 (Parm)

void UBioCheatManager::UnlockAchievement(int nAchievementID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.UnlockAchievement");

	UBioCheatManager_UnlockAchievement_Params params;
	params.nAchievementID = nAchievementID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.InitPlotManagerValueByIndex
// (Defined, Exec, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FString                 sVariableType                  (Parm, NeedCtorLink)
// float                          fValue                         (Parm)

void UBioCheatManager::InitPlotManagerValueByIndex(int nIndex, const struct FString& sVariableType, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.InitPlotManagerValueByIndex");

	UBioCheatManager_InitPlotManagerValueByIndex_Params params;
	params.nIndex = nIndex;
	params.sVariableType = sVariableType;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DumpPlotManagerValueByIndex
// (Exec, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FString                 sVariableType                  (Parm, NeedCtorLink)

void UBioCheatManager::DumpPlotManagerValueByIndex(int nIndex, const struct FString& sVariableType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DumpPlotManagerValueByIndex");

	UBioCheatManager_DumpPlotManagerValueByIndex_Params params;
	params.nIndex = nIndex;
	params.sVariableType = sVariableType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetCombatSprintSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioCheatManager::SetCombatSprintSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetCombatSprintSpeed");

	UBioCheatManager_SetCombatSprintSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetCombatRunSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioCheatManager::SetCombatRunSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetCombatRunSpeed");

	UBioCheatManager_SetCombatRunSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetCombatWalkSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioCheatManager::SetCombatWalkSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetCombatWalkSpeed");

	UBioCheatManager_SetCombatWalkSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetSprintSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioCheatManager::SetSprintSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetSprintSpeed");

	UBioCheatManager_SetSprintSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetRunSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioCheatManager::SetRunSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetRunSpeed");

	UBioCheatManager_SetRunSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetWalkSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioCheatManager::SetWalkSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetWalkSpeed");

	UBioCheatManager_SetWalkSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ResetSpeeds
// (Defined, Exec, Public)

void UBioCheatManager::ResetSpeeds()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ResetSpeeds");

	UBioCheatManager_ResetSpeeds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.InitAchievementStat
// (Defined, Exec, Public)
// Parameters:
// struct FString                 sAchievement                   (Parm, NeedCtorLink)
// int                            nAmount                        (Parm)

void UBioCheatManager::InitAchievementStat(const struct FString& sAchievement, int nAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.InitAchievementStat");

	UBioCheatManager_InitAchievementStat_Params params;
	params.sAchievement = sAchievement;
	params.nAmount = nAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DumpAchievementStats
// (Defined, Exec, Public)

void UBioCheatManager::DumpAchievementStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DumpAchievementStats");

	UBioCheatManager_DumpAchievementStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnablePowerCooldown
// (Defined, Exec, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void UBioCheatManager::EnablePowerCooldown(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnablePowerCooldown");

	UBioCheatManager_EnablePowerCooldown_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ApplyGrime
// (Defined, Exec, Public)
// Parameters:
// float                          a_fCombatGrime                 (Parm)
// float                          a_fDirtGrime                   (Parm)
// float                          a_fGrimeGrime                  (Parm)
// struct FName                   nmPawn                         (OptionalParm, Parm)

void UBioCheatManager::ApplyGrime(float a_fCombatGrime, float a_fDirtGrime, float a_fGrimeGrime, const struct FName& nmPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ApplyGrime");

	UBioCheatManager_ApplyGrime_Params params;
	params.a_fCombatGrime = a_fCombatGrime;
	params.a_fDirtGrime = a_fDirtGrime;
	params.a_fGrimeGrime = a_fGrimeGrime;
	params.nmPawn = nmPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowSquadMembers
// (Defined, Exec, Public)

void UBioCheatManager::ShowSquadMembers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowSquadMembers");

	UBioCheatManager_ShowSquadMembers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FFScale
// (Defined, Exec, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCheatManager::FFScale(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FFScale");

	UBioCheatManager_FFScale_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FFEnable
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioCheatManager::FFEnable(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FFEnable");

	UBioCheatManager_FFEnable_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnterCombatStasis
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// float                          fDuration                      (Parm)
// bool                           bAllowDamage                   (Parm)

void UBioCheatManager::EnterCombatStasis(const struct FName& nmPawn, float fDuration, bool bAllowDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnterCombatStasis");

	UBioCheatManager_EnterCombatStasis_Params params;
	params.nmPawn = nmPawn;
	params.fDuration = fDuration;
	params.bAllowDamage = bAllowDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FireGrenade
// (Defined, Exec, Public)

void UBioCheatManager::FireGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FireGrenade");

	UBioCheatManager_FireGrenade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.UsePower
// (Defined, Exec, Public, HasDefaults)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   nmPower                        (Parm)

void UBioCheatManager::UsePower(const struct FName& nmPawn, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.UsePower");

	UBioCheatManager_UsePower_Params params;
	params.nmPawn = nmPawn;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetMicPos
// (Defined, Exec, Public)
// Parameters:
// float                          fPos                           (Parm)

void UBioCheatManager::SetMicPos(float fPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetMicPos");

	UBioCheatManager_SetMicPos_Params params;
	params.fPos = fPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.UpgradeVehicle
// (Exec, Native, Public)
// Parameters:
// int                            nSlot                          (Parm)
// struct FName                   nmItemLabelName                (Parm)

void UBioCheatManager::UpgradeVehicle(int nSlot, const struct FName& nmItemLabelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.UpgradeVehicle");

	UBioCheatManager_UpgradeVehicle_Params params;
	params.nSlot = nSlot;
	params.nmItemLabelName = nmItemLabelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TogglePlayerMovementDump
// (Defined, Exec, Public)

void UBioCheatManager::TogglePlayerMovementDump()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TogglePlayerMovementDump");

	UBioCheatManager_TogglePlayerMovementDump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowMountVolumes
// (Exec, Native, Public)
// Parameters:
// bool                           bValue                         (Parm)

void UBioCheatManager::ShowMountVolumes(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowMountVolumes");

	UBioCheatManager_ShowMountVolumes_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnablePowerRelativeVelocity
// (Defined, Exec, Public)
// Parameters:
// int                            nEnable                        (Parm)

void UBioCheatManager::EnablePowerRelativeVelocity(int nEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnablePowerRelativeVelocity");

	UBioCheatManager_EnablePowerRelativeVelocity_Params params;
	params.nEnable = nEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.listai
// (Defined, Exec, Public)

void UBioCheatManager::listai()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.listai");

	UBioCheatManager_listai_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetPlayerLocFPS
// (Exec, Native, Public)

void UBioCheatManager::GetPlayerLocFPS()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetPlayerLocFPS");

	UBioCheatManager_GetPlayerLocFPS_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DisplayStringID
// (Exec, Native, Public)
// Parameters:
// bool                           i_bDisplay                     (Parm)

void UBioCheatManager::DisplayStringID(bool i_bDisplay)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DisplayStringID");

	UBioCheatManager_DisplayStringID_Params params;
	params.i_bDisplay = i_bDisplay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CodexAudit
// (Exec, Native, Public)

void UBioCheatManager::CodexAudit()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CodexAudit");

	UBioCheatManager_CodexAudit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.JournalAudit
// (Exec, Native, Public)

void UBioCheatManager::JournalAudit()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.JournalAudit");

	UBioCheatManager_JournalAudit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DebugSpawnActor
// (Exec, Native, Public)
// Parameters:
// struct FString                 sActorResource                 (Parm, NeedCtorLink)
// float                          fDistanceFromPlayer            (Parm)
// float                          fLifeSpan                      (OptionalParm, Parm)

void UBioCheatManager::DebugSpawnActor(const struct FString& sActorResource, float fDistanceFromPlayer, float fLifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DebugSpawnActor");

	UBioCheatManager_DebugSpawnActor_Params params;
	params.sActorResource = sActorResource;
	params.fDistanceFromPlayer = fDistanceFromPlayer;
	params.fLifeSpan = fLifeSpan;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DestroySpawnedVehicles
// (Exec, Native, Public)

void UBioCheatManager::DestroySpawnedVehicles()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DestroySpawnedVehicles");

	UBioCheatManager_DestroySpawnedVehicles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SpawnVehicle
// (Exec, Native, Public)

void UBioCheatManager::SpawnVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SpawnVehicle");

	UBioCheatManager_SpawnVehicle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FeignDeath
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// bool                           B                              (Parm)

void UBioCheatManager::FeignDeath(const struct FName& nmPawn, bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FeignDeath");

	UBioCheatManager_FeignDeath_Params params;
	params.nmPawn = nmPawn;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetPowerAttribute
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   nmPower                        (Parm)
// struct FName                   nmAttribute                    (Parm)
// float                          fValue                         (Parm)

void UBioCheatManager::SetPowerAttribute(const struct FName& nmPawn, const struct FName& nmPower, const struct FName& nmAttribute, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetPowerAttribute");

	UBioCheatManager_SetPowerAttribute_Params params;
	params.nmPawn = nmPawn;
	params.nmPower = nmPower;
	params.nmAttribute = nmAttribute;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TogglePowerAiming
// (Defined, Exec, Public)

void UBioCheatManager::TogglePowerAiming()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TogglePowerAiming");

	UBioCheatManager_TogglePowerAiming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.HackAI
// (Defined, Exec, Public)
// Parameters:
// struct FString                 sWhitespaceDelimitedNamedParameters (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::HackAI(const struct FString& sWhitespaceDelimitedNamedParameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.HackAI");

	UBioCheatManager_HackAI_Params params;
	params.sWhitespaceDelimitedNamedParameters = sWhitespaceDelimitedNamedParameters;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.PlayXenonMovie
// (Exec, Native, Public)
// Parameters:
// struct FString                 sMoviePath                     (Parm, NeedCtorLink)

void UBioCheatManager::PlayXenonMovie(const struct FString& sMoviePath)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.PlayXenonMovie");

	UBioCheatManager_PlayXenonMovie_Params params;
	params.sMoviePath = sMoviePath;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DebugPlayerSquadCombatAI
// (Defined, Exec, Public)
// Parameters:
// bool                           bVal                           (Parm)

void UBioCheatManager::DebugPlayerSquadCombatAI(bool bVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DebugPlayerSquadCombatAI");

	UBioCheatManager_DebugPlayerSquadCombatAI_Params params;
	params.bVal = bVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.StasisAll
// (Defined, Exec, Public)

void UBioCheatManager::StasisAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.StasisAll");

	UBioCheatManager_StasisAll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.VINCEToAreaMapGeneric
// (Exec, Native, Public)
// Parameters:
// struct FName                   genericString                  (Parm)

void UBioCheatManager::VINCEToAreaMapGeneric(const struct FName& genericString)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.VINCEToAreaMapGeneric");

	UBioCheatManager_VINCEToAreaMapGeneric_Params params;
	params.genericString = genericString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAll
// (Exec, Native, Public)

void UBioCheatManager::GiveAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAll");

	UBioCheatManager_GiveAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveSuperArmor
// (Exec, Native, Public)

void UBioCheatManager::GiveSuperArmor()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveSuperArmor");

	UBioCheatManager_GiveSuperArmor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveSupergun
// (Exec, Native, Public)

void UBioCheatManager::GiveSupergun()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveSupergun");

	UBioCheatManager_GiveSupergun_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllXmods
// (Exec, Native, Public)

void UBioCheatManager::GiveAllXmods()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllXmods");

	UBioCheatManager_GiveAllXmods_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllArmorHuman
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllArmorHuman(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllArmorHuman");

	UBioCheatManager_GiveAllArmorHuman_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllArmorKrogan
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllArmorKrogan(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllArmorKrogan");

	UBioCheatManager_GiveAllArmorKrogan_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllArmorQuarian
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllArmorQuarian(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllArmorQuarian");

	UBioCheatManager_GiveAllArmorQuarian_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllArmorTurian
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllArmorTurian(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllArmorTurian");

	UBioCheatManager_GiveAllArmorTurian_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllArmor
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllArmor(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllArmor");

	UBioCheatManager_GiveAllArmor_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllGrenades
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllGrenades(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllGrenades");

	UBioCheatManager_GiveAllGrenades_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllWeapons
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllWeapons(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllWeapons");

	UBioCheatManager_GiveAllWeapons_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllBioAmps
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllBioAmps(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllBioAmps");

	UBioCheatManager_GiveAllBioAmps_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveAllOmnitools
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmManufacturer                 (Parm)

void UBioCheatManager::GiveAllOmnitools(const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveAllOmnitools");

	UBioCheatManager_GiveAllOmnitools_Params params;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GuiInventoryEquip
// (Defined, Exec, Public)
// Parameters:
// int                            nSlotListIndex                 (Parm)

void UBioCheatManager::GuiInventoryEquip(int nSlotListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GuiInventoryEquip");

	UBioCheatManager_GuiInventoryEquip_Params params;
	params.nSlotListIndex = nSlotListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GuiInventorySelect
// (Defined, Exec, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eSlot                          (Parm)

void UBioCheatManager::GuiInventorySelect(TEnumAsByte<EGuiEquipSlots> eSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GuiInventorySelect");

	UBioCheatManager_GuiInventorySelect_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GuiInventorySetTarget
// (Defined, Exec, Public)
// Parameters:
// struct FString                 sTarget                        (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::GuiInventorySetTarget(const struct FString& sTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GuiInventorySetTarget");

	UBioCheatManager_GuiInventorySetTarget_Params params;
	params.sTarget = sTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnableCombatStateLogging
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioCheatManager::EnableCombatStateLogging(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnableCombatStateLogging");

	UBioCheatManager_EnableCombatStateLogging_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnableVFXSound
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioCheatManager::EnableVFXSound(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnableVFXSound");

	UBioCheatManager_EnableVFXSound_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetPlayerSquadMin1Health
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void UBioCheatManager::SetPlayerSquadMin1Health(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetPlayerSquadMin1Health");

	UBioCheatManager_SetPlayerSquadMin1Health_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.PImp
// (Defined, Exec, Public, HasDefaults)
// Parameters:
// float                          fForce                         (Parm)

void UBioCheatManager::PImp(float fForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.PImp");

	UBioCheatManager_PImp_Params params;
	params.fForce = fForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DumpPlayPen
// (Defined, Exec, Public)

void UBioCheatManager::DumpPlayPen()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DumpPlayPen");

	UBioCheatManager_DumpPlayPen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GrahamDebug_HideAllPanels
// (Defined, Exec, Public)

void UBioCheatManager::GrahamDebug_HideAllPanels()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GrahamDebug_HideAllPanels");

	UBioCheatManager_GrahamDebug_HideAllPanels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GrahamDebug_ShowAllPanels
// (Defined, Exec, Public)

void UBioCheatManager::GrahamDebug_ShowAllPanels()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GrahamDebug_ShowAllPanels");

	UBioCheatManager_GrahamDebug_ShowAllPanels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleSFHUD
// (Defined, Exec, Public)

void UBioCheatManager::ToggleSFHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleSFHUD");

	UBioCheatManager_ToggleSFHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetSelectionHalfAngle
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::SetSelectionHalfAngle(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetSelectionHalfAngle");

	UBioCheatManager_SetSelectionHalfAngle_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.PaperDoll
// (Exec, Native, Public)
// Parameters:
// struct FString                 whitespaceDelimitedArguments   (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::PaperDoll(const struct FString& whitespaceDelimitedArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.PaperDoll");

	UBioCheatManager_PaperDoll_Params params;
	params.whitespaceDelimitedArguments = whitespaceDelimitedArguments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DisableOffensive
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   subtype                        (Parm)

void UBioCheatManager::DisableOffensive(const struct FName& nmPawn, const struct FName& subtype)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DisableOffensive");

	UBioCheatManager_DisableOffensive_Params params;
	params.nmPawn = nmPawn;
	params.subtype = subtype;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnableOffensive
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   subtype                        (Parm)

void UBioCheatManager::EnableOffensive(const struct FName& nmPawn, const struct FName& subtype)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnableOffensive");

	UBioCheatManager_EnableOffensive_Params params;
	params.nmPawn = nmPawn;
	params.subtype = subtype;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DisablePower
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   subtype                        (Parm)

void UBioCheatManager::DisablePower(const struct FName& nmPawn, const struct FName& subtype)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DisablePower");

	UBioCheatManager_DisablePower_Params params;
	params.nmPawn = nmPawn;
	params.subtype = subtype;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnablePower
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   subtype                        (Parm)

void UBioCheatManager::EnablePower(const struct FName& nmPawn, const struct FName& subtype)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnablePower");

	UBioCheatManager_EnablePower_Params params;
	params.nmPawn = nmPawn;
	params.subtype = subtype;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DisableAi
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   subtype                        (Parm)

void UBioCheatManager::DisableAi(const struct FName& nmPawn, const struct FName& subtype)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DisableAi");

	UBioCheatManager_DisableAi_Params params;
	params.nmPawn = nmPawn;
	params.subtype = subtype;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnableAi
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmPawn                         (Parm)
// struct FName                   subtype                        (Parm)

void UBioCheatManager::EnableAi(const struct FName& nmPawn, const struct FName& subtype)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnableAi");

	UBioCheatManager_EnableAi_Params params;
	params.nmPawn = nmPawn;
	params.subtype = subtype;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetCharmSkill
// (Defined, Exec, Public)
// Parameters:
// int                            nCharm                         (Parm)

void UBioCheatManager::SetCharmSkill(int nCharm)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetCharmSkill");

	UBioCheatManager_SetCharmSkill_Params params;
	params.nCharm = nCharm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetCharmSkill
// (Defined, Exec, Public)

void UBioCheatManager::GetCharmSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetCharmSkill");

	UBioCheatManager_GetCharmSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetIntimidateSkill
// (Defined, Exec, Public)
// Parameters:
// int                            nIntimidate                    (Parm)

void UBioCheatManager::SetIntimidateSkill(int nIntimidate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetIntimidateSkill");

	UBioCheatManager_SetIntimidateSkill_Params params;
	params.nIntimidate = nIntimidate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetIntimidateSkill
// (Defined, Exec, Public)

void UBioCheatManager::GetIntimidateSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetIntimidateSkill");

	UBioCheatManager_GetIntimidateSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.WeaponFireTrace
// (Defined, Exec, Public)
// Parameters:
// bool                           bNotPersist                    (OptionalParm, Parm)

void UBioCheatManager::WeaponFireTrace(bool bNotPersist)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.WeaponFireTrace");

	UBioCheatManager_WeaponFireTrace_Params params;
	params.bNotPersist = bNotPersist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DownloadContent
// (Defined, Exec, Public)

void UBioCheatManager::DownloadContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DownloadContent");

	UBioCheatManager_DownloadContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowMarketplaceUI
// (Native, Public)

void UBioCheatManager::ShowMarketplaceUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowMarketplaceUI");

	UBioCheatManager_ShowMarketplaceUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.AdjustCredits
// (Defined, Exec, Public)
// Parameters:
// int                            nAmount                        (Parm)

void UBioCheatManager::AdjustCredits(int nAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.AdjustCredits");

	UBioCheatManager_AdjustCredits_Params params;
	params.nAmount = nAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DescribeEquipment
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// struct FString                 sEquipment                     (Parm, NeedCtorLink)

void UBioCheatManager::DescribeEquipment(const struct FName& nmTarget, const struct FString& sEquipment)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DescribeEquipment");

	UBioCheatManager_DescribeEquipment_Params params;
	params.nmTarget = nmTarget;
	params.sEquipment = sEquipment;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DescribeItemInQuickSlot
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// int                            nQuickslot                     (Parm)

void UBioCheatManager::DescribeItemInQuickSlot(const struct FName& nmTarget, int nQuickslot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DescribeItemInQuickSlot");

	UBioCheatManager_DescribeItemInQuickSlot_Params params;
	params.nmTarget = nmTarget;
	params.nQuickslot = nQuickslot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DescribeItem
// (Defined, Exec, Public)
// Parameters:
// int                            nSophistication                (Parm)
// struct FString                 sLabel                         (Parm, NeedCtorLink)

void UBioCheatManager::DescribeItem(int nSophistication, const struct FString& sLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DescribeItem");

	UBioCheatManager_DescribeItem_Params params;
	params.nSophistication = nSophistication;
	params.sLabel = sLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveWeaponXModded
// (Exec, Native, Public)
// Parameters:
// struct FString                 whitespaceDelimitedArguments   (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::GiveWeaponXModded(const struct FString& whitespaceDelimitedArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveWeaponXModded");

	UBioCheatManager_GiveWeaponXModded_Params params;
	params.whitespaceDelimitedArguments = whitespaceDelimitedArguments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.InitGrenades
// (Defined, Exec, Public)
// Parameters:
// int                            nGrenades                      (Parm)

void UBioCheatManager::InitGrenades(int nGrenades)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.InitGrenades");

	UBioCheatManager_InitGrenades_Params params;
	params.nGrenades = nGrenades;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.InitMedigel
// (Defined, Exec, Public)
// Parameters:
// float                          fMedigel                       (Parm)

void UBioCheatManager::InitMedigel(float fMedigel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.InitMedigel");

	UBioCheatManager_InitMedigel_Params params;
	params.fMedigel = fMedigel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.InitSalvage
// (Defined, Exec, Public)
// Parameters:
// float                          fSalvage                       (Parm)

void UBioCheatManager::InitSalvage(float fSalvage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.InitSalvage");

	UBioCheatManager_InitSalvage_Params params;
	params.fSalvage = fSalvage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.InitCredits
// (Defined, Exec, Public)
// Parameters:
// int                            nCredits                       (Parm)

void UBioCheatManager::InitCredits(int nCredits)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.InitCredits");

	UBioCheatManager_InitCredits_Params params;
	params.nCredits = nCredits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveItem
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmActor                        (Parm)
// int                            nSophistication                (Parm)
// struct FName                   nmItemLabel                    (Parm)
// struct FName                   nmManufacturer                 (OptionalParm, Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* UBioCheatManager::GiveItem(const struct FName& nmActor, int nSophistication, const struct FName& nmItemLabel, const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveItem");

	UBioCheatManager_GiveItem_Params params;
	params.nmActor = nmActor;
	params.nSophistication = nSophistication;
	params.nmItemLabel = nmItemLabel;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.MSSwarm
// (Defined, Exec, Public, HasDefaults)

void UBioCheatManager::MSSwarm()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.MSSwarm");

	UBioCheatManager_MSSwarm_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.MSSwarmInfo
// (Exec, Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// int                            Z                              (Parm)

void UBioCheatManager::MSSwarmInfo(int X, int Y, int Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.MSSwarmInfo");

	UBioCheatManager_MSSwarmInfo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TestGamePropertySys
// (Defined, Exec, Public)

void UBioCheatManager::TestGamePropertySys()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TestGamePropertySys");

	UBioCheatManager_TestGamePropertySys_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ValidateOwnershipSemantics
// (Defined, Exec, Public)
// Parameters:
// struct FName                   TargetName                     (Parm)
// bool                           isVerbose                      (OptionalParm, Parm)

void UBioCheatManager::ValidateOwnershipSemantics(const struct FName& TargetName, bool isVerbose)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ValidateOwnershipSemantics");

	UBioCheatManager_ValidateOwnershipSemantics_Params params;
	params.TargetName = TargetName;
	params.isVerbose = isVerbose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ResurrectTarget
// (Defined, Exec, Public)

void UBioCheatManager::ResurrectTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ResurrectTarget");

	UBioCheatManager_ResurrectTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Stability
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Command                        (Parm)
// struct FString                 whitespaceDelimitedArguments   (Parm, NeedCtorLink)

void UBioCheatManager::Stability(const struct FName& Command, const struct FString& whitespaceDelimitedArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Stability");

	UBioCheatManager_Stability_Params params;
	params.Command = Command;
	params.whitespaceDelimitedArguments = whitespaceDelimitedArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReCaps
// (Defined, Exec, Public)

void UBioCheatManager::ReCaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReCaps");

	UBioCheatManager_ReCaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.testfollow
// (Defined, Exec, Public)

void UBioCheatManager::testfollow()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.testfollow");

	UBioCheatManager_testfollow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.testhold
// (Defined, Exec, Public)

void UBioCheatManager::testhold()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.testhold");

	UBioCheatManager_testhold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveArmor
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmActor                        (Parm)
// int                            nSophistication                (Parm)
// struct FName                   nmArmorLabel                   (Parm)
// struct FName                   nmManufacturer                 (OptionalParm, Parm)

void UBioCheatManager::GiveArmor(const struct FName& nmActor, int nSophistication, const struct FName& nmArmorLabel, const struct FName& nmManufacturer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveArmor");

	UBioCheatManager_GiveArmor_Params params;
	params.nmActor = nmActor;
	params.nSophistication = nSophistication;
	params.nmArmorLabel = nmArmorLabel;
	params.nmManufacturer = nmManufacturer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FWindDir
// (Defined, Exec, Public)
// Parameters:
// int                            nVal                           (Parm)

void UBioCheatManager::FWindDir(int nVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FWindDir");

	UBioCheatManager_FWindDir_Params params;
	params.nVal = nVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FWindProb
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::FWindProb(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FWindProb");

	UBioCheatManager_FWindProb_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FWindEnable
// (Defined, Exec, Public)
// Parameters:
// int                            nVal                           (Parm)

void UBioCheatManager::FWindEnable(int nVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FWindEnable");

	UBioCheatManager_FWindEnable_Params params;
	params.nVal = nVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.FWindMax
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::FWindMax(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.FWindMax");

	UBioCheatManager_FWindMax_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CombatWriteLog
// (Defined, Exec, Event, Public)
// Parameters:
// struct FString                 sVal                           (OptionalParm, Parm, NeedCtorLink)

void UBioCheatManager::CombatWriteLog(const struct FString& sVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CombatWriteLog");

	UBioCheatManager_CombatWriteLog_Params params;
	params.sVal = sVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.EnableDamage
// (Defined, Exec, Public)
// Parameters:
// int                            nVal                           (Parm)

void UBioCheatManager::EnableDamage(int nVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.EnableDamage");

	UBioCheatManager_EnableDamage_Params params;
	params.nVal = nVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetUIWorldActor
// (Native, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioCheatManager::GetUIWorldActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetUIWorldActor");

	UBioCheatManager_GetUIWorldActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.GetActorFromString
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FString                 Str                            (Parm, NeedCtorLink)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UBioCheatManager::GetActorFromString(const struct FString& Str)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetActorFromString");

	UBioCheatManager_GetActorFromString_Params params;
	params.Str = Str;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.ToxicDmgMax
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// struct FName                   nmAccess                       (Parm)
// float                          fModifier                      (Parm)

void UBioCheatManager::ToxicDmgMax(const struct FName& nmTarget, const struct FName& nmAccess, float fModifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToxicDmgMax");

	UBioCheatManager_ToxicDmgMax_Params params;
	params.nmTarget = nmTarget;
	params.nmAccess = nmAccess;
	params.fModifier = fModifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToxicHealRatio
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// struct FName                   nmAccess                       (Parm)
// float                          fModifier                      (Parm)

void UBioCheatManager::ToxicHealRatio(const struct FName& nmTarget, const struct FName& nmAccess, float fModifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToxicHealRatio");

	UBioCheatManager_ToxicHealRatio_Params params;
	params.nmTarget = nmTarget;
	params.nmAccess = nmAccess;
	params.fModifier = fModifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.HealRate
// (Exec, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// float                          fHealRate                      (Parm)
// float                          fBonusToxicHealRate            (OptionalParm, Parm)

void UBioCheatManager::HealRate(const struct FName& nmTarget, float fHealRate, float fBonusToxicHealRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.HealRate");

	UBioCheatManager_HealRate_Params params;
	params.nmTarget = nmTarget;
	params.fHealRate = fHealRate;
	params.fBonusToxicHealRate = fBonusToxicHealRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.HealLatent
// (Exec, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// float                          fDuration                      (Parm)

void UBioCheatManager::HealLatent(const struct FName& nmTarget, float fDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.HealLatent");

	UBioCheatManager_HealLatent_Params params;
	params.nmTarget = nmTarget;
	params.fDuration = fDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.HealInstant
// (Exec, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// float                          fHealAmount                    (Parm)
// float                          fBonusToxicHealAmount          (OptionalParm, Parm)

void UBioCheatManager::HealInstant(const struct FName& nmTarget, float fHealAmount, float fBonusToxicHealAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.HealInstant");

	UBioCheatManager_HealInstant_Params params;
	params.nmTarget = nmTarget;
	params.fHealAmount = fHealAmount;
	params.fBonusToxicHealAmount = fBonusToxicHealAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Damage
// (Defined, Exec, Public, HasDefaults)
// Parameters:
// struct FName                   nmTarget                       (Parm)
// float                          fDamage                        (Parm)

void UBioCheatManager::Damage(const struct FName& nmTarget, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Damage");

	UBioCheatManager_Damage_Params params;
	params.nmTarget = nmTarget;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CombatAssignTarget
// (Defined, Exec, Public)
// Parameters:
// struct FName                   sActor                         (Parm)
// struct FName                   sTarget                        (Parm)

void UBioCheatManager::CombatAssignTarget(const struct FName& sActor, const struct FName& sTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CombatAssignTarget");

	UBioCheatManager_CombatAssignTarget_Params params;
	params.sActor = sActor;
	params.sTarget = sTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TestRagdoll
// (Exec, Native, Public)
// Parameters:
// struct FString                 sWhitespaceDelimitedArguments  (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::TestRagdoll(const struct FString& sWhitespaceDelimitedArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TestRagdoll");

	UBioCheatManager_TestRagdoll_Params params;
	params.sWhitespaceDelimitedArguments = sWhitespaceDelimitedArguments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SightTo
// (Exec, Native, Public)
// Parameters:
// struct FName                   nmTarget                       (Parm)

void UBioCheatManager::SightTo(const struct FName& nmTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SightTo");

	UBioCheatManager_SightTo_Params params;
	params.nmTarget = nmTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Profile
// (Exec, Native, Public)
// Parameters:
// struct FString                 whitespaceDelimitedArguments   (Parm, NeedCtorLink)

void UBioCheatManager::Profile(const struct FString& whitespaceDelimitedArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Profile");

	UBioCheatManager_Profile_Params params;
	params.whitespaceDelimitedArguments = whitespaceDelimitedArguments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ConvCamFrame
// (Defined, Exec, Public)
// Parameters:
// float                          fYAW                           (Parm)
// float                          fLatDis                        (Parm)

void UBioCheatManager::ConvCamFrame(float fYAW, float fLatDis)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ConvCamFrame");

	UBioCheatManager_ConvCamFrame_Params params;
	params.fYAW = fYAW;
	params.fLatDis = fLatDis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DebugSpawnPrefab
// (Native, Public)
// Parameters:
// int                            nTestNum                       (Parm)

void UBioCheatManager::DebugSpawnPrefab(int nTestNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DebugSpawnPrefab");

	UBioCheatManager_DebugSpawnPrefab_Params params;
	params.nTestNum = nTestNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TestPrefab
// (Defined, Exec, Public)
// Parameters:
// int                            nTestNum                       (Parm)

void UBioCheatManager::TestPrefab(int nTestNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TestPrefab");

	UBioCheatManager_TestPrefab_Params params;
	params.nTestNum = nTestNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.APGotoState
// (Defined, Exec, Public)
// Parameters:
// struct FName                   ToState                        (Parm)
// struct FName                   optrans                        (OptionalParm, Parm)

void UBioCheatManager::APGotoState(const struct FName& ToState, const struct FName& optrans)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.APGotoState");

	UBioCheatManager_APGotoState_Params params;
	params.ToState = ToState;
	params.optrans = optrans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.APShowStates
// (Defined, Exec, Public)

void UBioCheatManager::APShowStates()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.APShowStates");

	UBioCheatManager_APShowStates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetDummyCreature
// (Defined, Exec, Public)

void UBioCheatManager::SetDummyCreature()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetDummyCreature");

	UBioCheatManager_SetDummyCreature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioRunTest
// (Exec, Native, Public)
// Parameters:
// struct FString                 TestName                       (Parm, NeedCtorLink)

void UBioCheatManager::BioRunTest(const struct FString& TestName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioRunTest");

	UBioCheatManager_BioRunTest_Params params;
	params.TestName = TestName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioTransition
// (Exec, Native, Public)
// Parameters:
// int                            nTransition                    (Parm)
// int                            nParam                         (Parm)

void UBioCheatManager::BioTransition(int nTransition, int nParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioTransition");

	UBioCheatManager_BioTransition_Params params;
	params.nTransition = nTransition;
	params.nParam = nParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioLoadState
// (Exec, Native, Public)
// Parameters:
// int                            nSaveStateSlot                 (Parm)

void UBioCheatManager::BioLoadState(int nSaveStateSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioLoadState");

	UBioCheatManager_BioLoadState_Params params;
	params.nSaveStateSlot = nSaveStateSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioSaveState
// (Exec, Native, Public)
// Parameters:
// int                            nSaveStateSlot                 (Parm)

void UBioCheatManager::BioSaveState(int nSaveStateSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioSaveState");

	UBioCheatManager_BioSaveState_Params params;
	params.nSaveStateSlot = nSaveStateSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioDeleteGame
// (Defined, Exec, Public)
// Parameters:
// int                            nSaveGameSlot                  (Parm)

void UBioCheatManager::BioDeleteGame(int nSaveGameSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioDeleteGame");

	UBioCheatManager_BioDeleteGame_Params params;
	params.nSaveGameSlot = nSaveGameSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioLoadGame
// (Defined, Exec, Public)
// Parameters:
// int                            nSaveGameSlot                  (Parm)

void UBioCheatManager::BioLoadGame(int nSaveGameSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioLoadGame");

	UBioCheatManager_BioLoadGame_Params params;
	params.nSaveGameSlot = nSaveGameSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioSaveGame
// (Defined, Exec, Public)
// Parameters:
// int                            nSaveGameSlot                  (Parm)

void UBioCheatManager::BioSaveGame(int nSaveGameSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioSaveGame");

	UBioCheatManager_BioSaveGame_Params params;
	params.nSaveGameSlot = nSaveGameSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioSetDebugSave
// (Defined, Exec, Public)
// Parameters:
// int                            nSet                           (Parm)

void UBioCheatManager::BioSetDebugSave(int nSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioSetDebugSave");

	UBioCheatManager_BioSetDebugSave_Params params;
	params.nSet = nSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.PawnControll
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)

void UBioCheatManager::PawnControll(const struct FName& nmAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.PawnControll");

	UBioCheatManager_PawnControll_Params params;
	params.nmAction = nmAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SRange
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::SRange(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SRange");

	UBioCheatManager_SRange_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.PickSpecialization
// (Defined, Exec, Public)

void UBioCheatManager::PickSpecialization()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.PickSpecialization");

	UBioCheatManager_PickSpecialization_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveSpectreTalents
// (Defined, Exec, Public)

void UBioCheatManager::GiveSpectreTalents()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveSpectreTalents");

	UBioCheatManager_GiveSpectreTalents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ScaleTalentByIncrement
// (Defined, Exec, Public)
// Parameters:
// int                            TalentID                       (Parm)
// int                            rankIncrement                  (Parm)

void UBioCheatManager::ScaleTalentByIncrement(int TalentID, int rankIncrement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ScaleTalentByIncrement");

	UBioCheatManager_ScaleTalentByIncrement_Params params;
	params.TalentID = TalentID;
	params.rankIncrement = rankIncrement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.IncreaseTalentMaxRankByIncrement
// (Defined, Exec, Public)
// Parameters:
// int                            TalentID                       (Parm)
// int                            MaxRankIncrement               (Parm)

void UBioCheatManager::IncreaseTalentMaxRankByIncrement(int TalentID, int MaxRankIncrement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.IncreaseTalentMaxRankByIncrement");

	UBioCheatManager_IncreaseTalentMaxRankByIncrement_Params params;
	params.TalentID = TalentID;
	params.MaxRankIncrement = MaxRankIncrement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.IncreaseTalentMaxRank
// (Defined, Exec, Public)
// Parameters:
// int                            TalentID                       (Parm)
// int                            MaxRank                        (Parm)

void UBioCheatManager::IncreaseTalentMaxRank(int TalentID, int MaxRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.IncreaseTalentMaxRank");

	UBioCheatManager_IncreaseTalentMaxRank_Params params;
	params.TalentID = TalentID;
	params.MaxRank = MaxRank;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveBonusTalent
// (Defined, Exec, Public)
// Parameters:
// int                            bonusIdentifier                (Parm)

void UBioCheatManager::GiveBonusTalent(int bonusIdentifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveBonusTalent");

	UBioCheatManager_GiveBonusTalent_Params params;
	params.bonusIdentifier = bonusIdentifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveTalentPoints
// (Defined, Exec, Public)
// Parameters:
// int                            numPoints                      (Parm)

void UBioCheatManager::GiveTalentPoints(int numPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveTalentPoints");

	UBioCheatManager_GiveTalentPoints_Params params;
	params.numPoints = numPoints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetVolume
// (Defined, Exec, Public)
// Parameters:
// int                            i_VolumeType                   (Parm)
// int                            i_VolumeLevel                  (Parm)

void UBioCheatManager::SetVolume(int i_VolumeType, int i_VolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetVolume");

	UBioCheatManager_SetVolume_Params params;
	params.i_VolumeType = i_VolumeType;
	params.i_VolumeLevel = i_VolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleSaveGameDisplayRawName
// (Defined, Exec, Public)

void UBioCheatManager::ToggleSaveGameDisplayRawName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleSaveGameDisplayRawName");

	UBioCheatManager_ToggleSaveGameDisplayRawName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetSaveGameDisplayRawName
// (Defined, Exec, Public)
// Parameters:
// bool                           i_bValue                       (Parm)

void UBioCheatManager::SetSaveGameDisplayRawName(bool i_bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetSaveGameDisplayRawName");

	UBioCheatManager_SetSaveGameDisplayRawName_Params params;
	params.i_bValue = i_bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetCombatDifficulty
// (Defined, Exec, Public)
// Parameters:
// int                            i_CombatDifficulty             (Parm)

void UBioCheatManager::SetCombatDifficulty(int i_CombatDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetCombatDifficulty");

	UBioCheatManager_SetCombatDifficulty_Params params;
	params.i_CombatDifficulty = i_CombatDifficulty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetPredefinedGammaCorrectionOption
// (Defined, Exec, Public)
// Parameters:
// int                            i_GammaSetting                 (Parm)

void UBioCheatManager::SetPredefinedGammaCorrectionOption(int i_GammaSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetPredefinedGammaCorrectionOption");

	UBioCheatManager_SetPredefinedGammaCorrectionOption_Params params;
	params.i_GammaSetting = i_GammaSetting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GiveXP
// (Defined, Exec, Public)
// Parameters:
// int                            nValue                         (Parm)

void UBioCheatManager::GiveXP(int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GiveXP");

	UBioCheatManager_GiveXP_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowDialogData
// (Defined, Exec, Public)
// Parameters:
// struct FName                   nValue                         (Parm)

void UBioCheatManager::ShowDialogData(const struct FName& nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowDialogData");

	UBioCheatManager_ShowDialogData_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetGender
// (Defined, Exec, Public)
// Parameters:
// int                            nValue                         (Parm)

void UBioCheatManager::SetGender(int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetGender");

	UBioCheatManager_SetGender_Params params;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleAPCollision
// (Exec, Public)

void UBioCheatManager::ToggleAPCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleAPCollision");

	UBioCheatManager_ToggleAPCollision_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetSquadMemberBehavior
// (Final, Defined, Private)
// Parameters:
// struct FString                 sSquadMemberName               (Parm, NeedCtorLink)
// class UBioPawnBehavior*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioPawnBehavior* UBioCheatManager::GetSquadMemberBehavior(const struct FString& sSquadMemberName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetSquadMemberBehavior");

	UBioCheatManager_GetSquadMemberBehavior_Params params;
	params.sSquadMemberName = sSquadMemberName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.BioEndSloMo
// (Defined, Exec, Public)
// Parameters:
// int                            nReqID                         (Parm)
// float                          fExpireTime                    (Parm)

void UBioCheatManager::BioEndSloMo(int nReqID, float fExpireTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioEndSloMo");

	UBioCheatManager_BioEndSloMo_Params params;
	params.nReqID = nReqID;
	params.fExpireTime = fExpireTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioSloMo
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)
// float                          fLife                          (Parm)
// int                            nPriority                      (Parm)

void UBioCheatManager::BioSloMo(float fSpeed, float fLife, int nPriority)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioSloMo");

	UBioCheatManager_BioSloMo_Params params;
	params.fSpeed = fSpeed;
	params.fLife = fLife;
	params.nPriority = nPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioSloMoTest
// (Defined, Exec, Public)

void UBioCheatManager::BioSloMoTest()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioSloMoTest");

	UBioCheatManager_BioSloMoTest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetAct
// (Defined, Exec, Public)
// Parameters:
// struct FName                   intag                          (Parm)
// struct FName                   activity                       (Parm)

void UBioCheatManager::SetAct(const struct FName& intag, const struct FName& activity)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetAct");

	UBioCheatManager_SetAct_Params params;
	params.intag = intag;
	params.activity = activity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetKey
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Key                            (Parm)

void UBioCheatManager::SetKey(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetKey");

	UBioCheatManager_SetKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SwitchToPlayerCam
// (Defined, Exec, Public)

void UBioCheatManager::SwitchToPlayerCam()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SwitchToPlayerCam");

	UBioCheatManager_SwitchToPlayerCam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Stcam
// (Exec, Native, Public)
// Parameters:
// struct FString                 sCamName                       (Parm, NeedCtorLink)

void UBioCheatManager::Stcam(const struct FString& sCamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Stcam");

	UBioCheatManager_Stcam_Params params;
	params.sCamName = sCamName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetTacSelDistancel
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::SetTacSelDistancel(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetTacSelDistancel");

	UBioCheatManager_SetTacSelDistancel_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetTacSelMovment
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::SetTacSelMovment(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetTacSelMovment");

	UBioCheatManager_SetTacSelMovment_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.togglefreetacsel
// (Defined, Exec, Public)

void UBioCheatManager::togglefreetacsel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.togglefreetacsel");

	UBioCheatManager_togglefreetacsel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.QSlotPrev
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Target                         (OptionalParm, Parm, NeedCtorLink)

void UBioCheatManager::QSlotPrev(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.QSlotPrev");

	UBioCheatManager_QSlotPrev_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.QSlotNext
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Target                         (OptionalParm, Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::QSlotNext(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.QSlotNext");

	UBioCheatManager_QSlotNext_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.QSlotActivate
// (Defined, Exec, Public)
// Parameters:
// struct FString                 whitespaceDelimitedArguments   (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::QSlotActivate(const struct FString& whitespaceDelimitedArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.QSlotActivate");

	UBioCheatManager_QSlotActivate_Params params;
	params.whitespaceDelimitedArguments = whitespaceDelimitedArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.QSlotActivateCurrent
// (Defined, Exec, Public)
// Parameters:
// struct FString                 whitespaceDelimitedArguments   (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::QSlotActivateCurrent(const struct FString& whitespaceDelimitedArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.QSlotActivateCurrent");

	UBioCheatManager_QSlotActivateCurrent_Params params;
	params.whitespaceDelimitedArguments = whitespaceDelimitedArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetCurrentQuickSlotIndex
// (Final, Defined, Private)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioCheatManager::GetCurrentQuickSlotIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetCurrentQuickSlotIndex");

	UBioCheatManager_GetCurrentQuickSlotIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.GetQuickSlot
// (Final, Defined, Private)
// Parameters:
// int                            nSlot                          (Parm)
// class ABioWeapon*              ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioWeapon* UBioCheatManager::GetQuickSlot(int nSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetQuickSlot");

	UBioCheatManager_GetQuickSlot_Params params;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.GetPawn
// (Final, Defined, Private)
// Parameters:
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* UBioCheatManager::GetPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetPawn");

	UBioCheatManager_GetPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.SDS
// (Defined, Exec, Public)
// Parameters:
// struct FName                   State                          (Parm)
// struct FName                   Trans                          (OptionalParm, Parm)

void UBioCheatManager::SDS(const struct FName& State, const struct FName& Trans)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SDS");

	UBioCheatManager_SDS_Params params;
	params.State = State;
	params.Trans = Trans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Movie
// (Exec, Public)

void UBioCheatManager::Movie()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Movie");

	UBioCheatManager_Movie_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.PopUp
// (Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void UBioCheatManager::PopUp(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.PopUp");

	UBioCheatManager_PopUp_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.View2DA
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Str                            (Parm, NeedCtorLink)

void UBioCheatManager::View2DA(const struct FString& Str)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.View2DA");

	UBioCheatManager_View2DA_Params params;
	params.Str = Str;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ClearAll
// (Defined, Exec, Public)

void UBioCheatManager::ClearAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ClearAll");

	UBioCheatManager_ClearAll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.TestConditionals
// (Defined, Exec, Public)

void UBioCheatManager::TestConditionals()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.TestConditionals");

	UBioCheatManager_TestConditionals_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowPathNodes
// (Defined, Exec, Public)

void UBioCheatManager::ShowPathNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowPathNodes");

	UBioCheatManager_ShowPathNodes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ClearMarkers
// (Defined, Exec, Public)

void UBioCheatManager::ClearMarkers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ClearMarkers");

	UBioCheatManager_ClearMarkers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Player
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Cmd                            (Parm)
// struct FString                 Param                          (Parm, NeedCtorLink)

void UBioCheatManager::Player(const struct FName& Cmd, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Player");

	UBioCheatManager_Player_Params params;
	params.Cmd = Cmd;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioStats
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Cmd                            (Parm)
// struct FString                 Param                          (Parm, NeedCtorLink)

void UBioCheatManager::BioStats(const struct FName& Cmd, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioStats");

	UBioCheatManager_BioStats_Params params;
	params.Cmd = Cmd;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Party
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Cmd                            (Parm)
// struct FString                 Param                          (Parm, NeedCtorLink)

void UBioCheatManager::Party(const struct FName& Cmd, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Party");

	UBioCheatManager_Party_Params params;
	params.Cmd = Cmd;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetVehicleCamRadiusPoint
// (Exec, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          fDegVal                        (Parm)
// float                          fScaleVal                      (Parm)

void UBioCheatManager::SetVehicleCamRadiusPoint(int nIndex, float fDegVal, float fScaleVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetVehicleCamRadiusPoint");

	UBioCheatManager_SetVehicleCamRadiusPoint_Params params;
	params.nIndex = nIndex;
	params.fDegVal = fDegVal;
	params.fScaleVal = fScaleVal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.BioClearCrossLevelReferences
// (Exec, Native, Public)
// Parameters:
// class ULevel*                  pLevel                         (Parm)

void UBioCheatManager::BioClearCrossLevelReferences(class ULevel* pLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.BioClearCrossLevelReferences");

	UBioCheatManager_BioClearCrossLevelReferences_Params params;
	params.pLevel = pLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ForceEnableCCD
// (Exec, Native, Public)
// Parameters:
// bool                           bValue                         (Parm)

void UBioCheatManager::ForceEnableCCD(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ForceEnableCCD");

	UBioCheatManager_ForceEnableCCD_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetGCDebugPackage
// (Exec, Native, Public)
// Parameters:
// struct FString                 sPackageName                   (Parm, NeedCtorLink)

void UBioCheatManager::SetGCDebugPackage(const struct FString& sPackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetGCDebugPackage");

	UBioCheatManager_SetGCDebugPackage_Params params;
	params.sPackageName = sPackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetLocation
// (Exec, Native, Public)
// Parameters:
// struct FString                 sDestination                   (Parm, NeedCtorLink)

void UBioCheatManager::SetLocation(const struct FString& sDestination)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetLocation");

	UBioCheatManager_SetLocation_Params params;
	params.sDestination = sDestination;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetLocation
// (Defined, Exec, Public)

void UBioCheatManager::GetLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetLocation");

	UBioCheatManager_GetLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.warpforward
// (Defined, Exec, Public, HasDefaults)
// Parameters:
// float                          fDist                          (Parm)

void UBioCheatManager::warpforward(float fDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.warpforward");

	UBioCheatManager_warpforward_Params params;
	params.fDist = fDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.Suicide
// (Defined, Exec, Public, HasDefaults)

void UBioCheatManager::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.Suicide");

	UBioCheatManager_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.KillCurrentTarget
// (Defined, Exec, Public, HasDefaults)

void UBioCheatManager::KillCurrentTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.KillCurrentTarget");

	UBioCheatManager_KillCurrentTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SuperSpeed
// (Defined, Exec, Public)

void UBioCheatManager::SuperSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SuperSpeed");

	UBioCheatManager_SuperSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetGroundSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioCheatManager::SetGroundSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetGroundSpeed");

	UBioCheatManager_SetGroundSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleAnimDebug
// (Defined, Exec, Public)

void UBioCheatManager::ToggleAnimDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleAnimDebug");

	UBioCheatManager_ToggleAnimDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowAnimationDebugInfo
// (Defined, Public, HasDefaults)
// Parameters:
// class AHUD*                    myHUD                          (Parm)

void UBioCheatManager::ShowAnimationDebugInfo(class AHUD* myHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowAnimationDebugInfo");

	UBioCheatManager_ShowAnimationDebugInfo_Params params;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowDebugMessages
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioHUD*                 myHUD                          (Parm)

void UBioCheatManager::ShowDebugMessages(class ABioHUD* myHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowDebugMessages");

	UBioCheatManager_ShowDebugMessages_Params params;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DebugMessage
// (Defined, Exec, Event, Public, HasDefaults)
// Parameters:
// struct FString                 sMessage                       (Parm, CoerceParm, NeedCtorLink)
// float                          Length                         (OptionalParm, Parm)
// bool                           Clear                          (OptionalParm, Parm)
// class AActor*                  oActor                         (OptionalParm, Parm)
// int                            nInt                           (OptionalParm, Parm)
// float                          fFloat                         (OptionalParm, Parm)
// struct FName                   nName                          (OptionalParm, Parm)

void UBioCheatManager::DebugMessage(const struct FString& sMessage, float Length, bool Clear, class AActor* oActor, int nInt, float fFloat, const struct FName& nName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DebugMessage");

	UBioCheatManager_DebugMessage_Params params;
	params.sMessage = sMessage;
	params.Length = Length;
	params.Clear = Clear;
	params.oActor = oActor;
	params.nInt = nInt;
	params.fFloat = fFloat;
	params.nName = nName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.RenderHUD
// (Defined, Public)
// Parameters:
// class ABioHUD*                 myHUD                          (Parm)

void UBioCheatManager::RenderHUD(class ABioHUD* myHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.RenderHUD");

	UBioCheatManager_RenderHUD_Params params;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CamOffset
// (Defined, Exec, Public)
// Parameters:
// struct FName                   OFFS                           (Parm)
// float                          F                              (Parm)

void UBioCheatManager::CamOffset(const struct FName& OFFS, float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CamOffset");

	UBioCheatManager_CamOffset_Params params;
	params.OFFS = OFFS;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CamHook
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Hook                           (Parm)
// struct FName                   Dir                            (Parm)
// float                          F                              (Parm)

void UBioCheatManager::CamHook(const struct FName& Hook, const struct FName& Dir, float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CamHook");

	UBioCheatManager_CamHook_Params params;
	params.Hook = Hook;
	params.Dir = Dir;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CamSetCollisionTPR
// (Defined, Exec, Public)
// Parameters:
// float                          F                              (Parm)

void UBioCheatManager::CamSetCollisionTPR(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CamSetCollisionTPR");

	UBioCheatManager_CamSetCollisionTPR_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CamToggleHook
// (Defined, Exec, Public)

void UBioCheatManager::CamToggleHook()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CamToggleHook");

	UBioCheatManager_CamToggleHook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CamToggleDebug
// (Defined, Exec, Public)

void UBioCheatManager::CamToggleDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CamToggleDebug");

	UBioCheatManager_CamToggleDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.CamLockCollision
// (Defined, Exec, Public)

void UBioCheatManager::CamLockCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.CamLockCollision");

	UBioCheatManager_CamLockCollision_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleTacSelDebug
// (Defined, Exec, Public)

void UBioCheatManager::ToggleTacSelDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleTacSelDebug");

	UBioCheatManager_ToggleTacSelDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleWalkDebug
// (Defined, Exec, Public)

void UBioCheatManager::ToggleWalkDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleWalkDebug");

	UBioCheatManager_ToggleWalkDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleHesitation
// (Defined, Exec, Public)

void UBioCheatManager::ToggleHesitation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleHesitation");

	UBioCheatManager_ToggleHesitation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleMountFallRules
// (Defined, Exec, Public)

void UBioCheatManager::ToggleMountFallRules()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleMountFallRules");

	UBioCheatManager_ToggleMountFallRules_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ToggleDifficultyScaling
// (Defined, Exec, Public)

void UBioCheatManager::ToggleDifficultyScaling()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ToggleDifficultyScaling");

	UBioCheatManager_ToggleDifficultyScaling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DrawConeReticule
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// float                          fRadius                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioCheatManager::DrawConeReticule(const struct FVector& vLocation, float fRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DrawConeReticule");

	UBioCheatManager_DrawConeReticule_Params params;
	params.vLocation = vLocation;
	params.fRadius = fRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.ReticuleWeaponRng3Mod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleWeaponRng3Mod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleWeaponRng3Mod");

	UBioCheatManager_ReticuleWeaponRng3Mod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleWeaponRng2Mod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleWeaponRng2Mod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleWeaponRng2Mod");

	UBioCheatManager_ReticuleWeaponRng2Mod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleWeaponRng1Mod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleWeaponRng1Mod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleWeaponRng1Mod");

	UBioCheatManager_ReticuleWeaponRng1Mod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleWeaponRng0Mod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleWeaponRng0Mod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleWeaponRng0Mod");

	UBioCheatManager_ReticuleWeaponRng0Mod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleWeaponCARMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleWeaponCARMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleWeaponCARMod");

	UBioCheatManager_ReticuleWeaponCARMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleWeaponTARMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleWeaponTARMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleWeaponTARMod");

	UBioCheatManager_ReticuleWeaponTARMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleMobilityMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleMobilityMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleMobilityMod");

	UBioCheatManager_ReticuleMobilityMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleArmorMoveMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleArmorMoveMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleArmorMoveMod");

	UBioCheatManager_ReticuleArmorMoveMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleWeaponMoveMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleWeaponMoveMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleWeaponMoveMod");

	UBioCheatManager_ReticuleWeaponMoveMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleSuppMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleSuppMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleSuppMod");

	UBioCheatManager_ReticuleSuppMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleIsSupp
// (Defined, Exec, Public)
// Parameters:
// bool                           bVal                           (Parm)

void UBioCheatManager::ReticuleIsSupp(bool bVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleIsSupp");

	UBioCheatManager_ReticuleIsSupp_Params params;
	params.bVal = bVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticulePlrAcc
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticulePlrAcc(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticulePlrAcc");

	UBioCheatManager_ReticulePlrAcc_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticulePlrLvl
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticulePlrLvl(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticulePlrLvl");

	UBioCheatManager_ReticulePlrLvl_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleBaseAR
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleBaseAR(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleBaseAR");

	UBioCheatManager_ReticuleBaseAR_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleCMax
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleCMax(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleCMax");

	UBioCheatManager_ReticuleCMax_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleCBase
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleCBase(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleCBase");

	UBioCheatManager_ReticuleCBase_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleTMax
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleTMax(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleTMax");

	UBioCheatManager_ReticuleTMax_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleTBase
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleTBase(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleTBase");

	UBioCheatManager_ReticuleTBase_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleDamageMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleDamageMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleDamageMod");

	UBioCheatManager_ReticuleDamageMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ReticuleKickbackMod
// (Defined, Exec, Public)
// Parameters:
// float                          fVal                           (Parm)

void UBioCheatManager::ReticuleKickbackMod(float fVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ReticuleKickbackMod");

	UBioCheatManager_ReticuleKickbackMod_Params params;
	params.fVal = fVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowReticuleDebug
// (Defined, Exec, Public)

void UBioCheatManager::ShowReticuleDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowReticuleDebug");

	UBioCheatManager_ShowReticuleDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.version
// (Defined, Exec, Public)

void UBioCheatManager::version()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.version");

	UBioCheatManager_version_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.ShowReticuleDebugInfo
// (Defined, Public, HasDefaults)
// Parameters:
// class AHUD*                    myHUD                          (Parm)

void UBioCheatManager::ShowReticuleDebugInfo(class AHUD* myHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.ShowReticuleDebugInfo");

	UBioCheatManager_ShowReticuleDebugInfo_Params params;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.LockRet
// (Defined, Exec, Public)

void UBioCheatManager::LockRet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.LockRet");

	UBioCheatManager_LockRet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.SetDebugRootLocation
// (Defined, Public)
// Parameters:
// struct FVector                 vLocation                      (Parm)

void UBioCheatManager::SetDebugRootLocation(const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.SetDebugRootLocation");

	UBioCheatManager_SetDebugRootLocation_Params params;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DebugRootPlayer
// (Defined, Exec, Public)

void UBioCheatManager::DebugRootPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DebugRootPlayer");

	UBioCheatManager_DebugRootPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.DebugAction
// (Defined, Exec, Public)
// Parameters:
// int                            nAction                        (Parm)

void UBioCheatManager::DebugAction(int nAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.DebugAction");

	UBioCheatManager_DebugAction_Params params;
	params.nAction = nAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.AddTargetToParty
// (Defined, Exec, Public)

void UBioCheatManager::AddTargetToParty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.AddTargetToParty");

	UBioCheatManager_AddTargetToParty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.AT
// (Defined, Exec, Public)
// Parameters:
// struct FName                   newArea                        (Parm)
// struct FName                   startPoint                     (OptionalParm, Parm)

void UBioCheatManager::AT(const struct FName& newArea, const struct FName& startPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.AT");

	UBioCheatManager_AT_Params params;
	params.newArea = newArea;
	params.startPoint = startPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioCheatManager.GetCameraManager
// (Defined, Public)
// Parameters:
// class ABioCameraManager*       ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioCameraManager* UBioCheatManager::GetCameraManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetCameraManager");

	UBioCheatManager_GetCameraManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.GetController
// (Defined, Public)
// Parameters:
// class ABioPlayerController*    ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPlayerController* UBioCheatManager::GetController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.GetController");

	UBioCheatManager_GetController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioCheatManager.getWorld
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioWorldInfo* UBioCheatManager::getWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioCheatManager.getWorld");

	UBioCheatManager_getWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.TakeScreenShot
// (Defined, Exec, Public)

void UBioPlayerInput::TakeScreenShot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.TakeScreenShot");

	UBioPlayerInput_TakeScreenShot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.LoadTestLevel
// (Defined, Exec, Public)

void UBioPlayerInput::LoadTestLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.LoadTestLevel");

	UBioPlayerInput_LoadTestLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.StartGame
// (Defined, Exec, Public)

void UBioPlayerInput::StartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.StartGame");

	UBioPlayerInput_StartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SprintOff
// (Defined, Exec, Public)

void UBioPlayerInput::SprintOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SprintOff");

	UBioPlayerInput_SprintOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SprintOn
// (Defined, Exec, Public)

void UBioPlayerInput::SprintOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SprintOn");

	UBioPlayerInput_SprintOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleCrouch
// (Defined, Exec, Public)

void UBioPlayerInput::ToggleCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleCrouch");

	UBioPlayerInput_ToggleCrouch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowEquipmentGui
// (Defined, Exec, Public)

void UBioPlayerInput::ShowEquipmentGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowEquipmentGui");

	UBioPlayerInput_ShowEquipmentGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowSquadGui
// (Defined, Exec, Public)

void UBioPlayerInput::ShowSquadGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowSquadGui");

	UBioPlayerInput_ShowSquadGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowCodexGui
// (Defined, Exec, Public)

void UBioPlayerInput::ShowCodexGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowCodexGui");

	UBioPlayerInput_ShowCodexGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowJournalGui
// (Defined, Exec, Public)

void UBioPlayerInput::ShowJournalGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowJournalGui");

	UBioPlayerInput_ShowJournalGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowMapGui
// (Defined, Exec, Public)

void UBioPlayerInput::ShowMapGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowMapGui");

	UBioPlayerInput_ShowMapGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.HotKeyResume
// (Defined, Exec, Public)

void UBioPlayerInput::HotKeyResume()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.HotKeyResume");

	UBioPlayerInput_HotKeyResume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.HotKeyPause
// (Defined, Exec, Public)

void UBioPlayerInput::HotKeyPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.HotKeyPause");

	UBioPlayerInput_HotKeyPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.LeaveWorld
// (Defined, Exec, Public)

void UBioPlayerInput::LeaveWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.LeaveWorld");

	UBioPlayerInput_LeaveWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ExitVehicle
// (Defined, Exec, Public)

void UBioPlayerInput::ExitVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ExitVehicle");

	UBioPlayerInput_ExitVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.EnterVehicle
// (Defined, Exec, Public)

void UBioPlayerInput::EnterVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.EnterVehicle");

	UBioPlayerInput_EnterVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_Back
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_Back()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_Back");

	UBioPlayerInput_MiniGame_Back_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_Start
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_Start()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_Start");

	UBioPlayerInput_MiniGame_Start_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Right
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_DPad_Right()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Right");

	UBioPlayerInput_MiniGame_DPad_Right_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Left
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_DPad_Left()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Left");

	UBioPlayerInput_MiniGame_DPad_Left_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Down
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_DPad_Down()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Down");

	UBioPlayerInput_MiniGame_DPad_Down_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Up
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_DPad_Up()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_DPad_Up");

	UBioPlayerInput_MiniGame_DPad_Up_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_LeftTrigger
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_LeftTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_LeftTrigger");

	UBioPlayerInput_MiniGame_LeftTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_RightTrigger
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_RightTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_RightTrigger");

	UBioPlayerInput_MiniGame_RightTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_LeftShoulder
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_LeftShoulder()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_LeftShoulder");

	UBioPlayerInput_MiniGame_LeftShoulder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_RightShoulder
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_RightShoulder()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_RightShoulder");

	UBioPlayerInput_MiniGame_RightShoulder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_Y
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_Y()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_Y");

	UBioPlayerInput_MiniGame_Y_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_X
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_X()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_X");

	UBioPlayerInput_MiniGame_X_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_B
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_B()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_B");

	UBioPlayerInput_MiniGame_B_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGame_A
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGame_A()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGame_A");

	UBioPlayerInput_MiniGame_A_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_Y
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGameGuiButton_Y()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_Y");

	UBioPlayerInput_MiniGameGuiButton_Y_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_X
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGameGuiButton_X()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_X");

	UBioPlayerInput_MiniGameGuiButton_X_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_B
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGameGuiButton_B()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_B");

	UBioPlayerInput_MiniGameGuiButton_B_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_A
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGameGuiButton_A()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGameGuiButton_A");

	UBioPlayerInput_MiniGameGuiButton_A_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGameRelease
// (Defined, Exec, Public)

void UBioPlayerInput::MiniGameRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGameRelease");

	UBioPlayerInput_MiniGameRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.DeferredShowInGameGui
// (Defined, Exec, Public)

void UBioPlayerInput::DeferredShowInGameGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.DeferredShowInGameGui");

	UBioPlayerInput_DeferredShowInGameGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GuiAxis
// (Defined, Exec, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fSpeed                         (Parm)
// float                          fDeadZone                      (Parm)

void UBioPlayerInput::GuiAxis(TEnumAsByte<EBioGuiEvents> Event, float fSpeed, float fDeadZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GuiAxis");

	UBioPlayerInput_GuiAxis_Params params;
	params.Event = Event;
	params.fSpeed = fSpeed;
	params.fDeadZone = fDeadZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GuiKey
// (Defined, Exec, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)

void UBioPlayerInput::GuiKey(TEnumAsByte<EBioGuiEvents> Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GuiKey");

	UBioPlayerInput_GuiKey_Params params;
	params.Event = Event;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGameGuiInput
// (Final, Defined, Private)
// Parameters:
// int                            nOutputLink                    (Parm)

void UBioPlayerInput::MiniGameGuiInput(int nOutputLink)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGameGuiInput");

	UBioPlayerInput_MiniGameGuiInput_Params params;
	params.nOutputLink = nOutputLink;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MiniGameInput
// (Final, Defined, Private)
// Parameters:
// int                            nOutputLink                    (Parm)

void UBioPlayerInput::MiniGameInput(int nOutputLink)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MiniGameInput");

	UBioPlayerInput_MiniGameInput_Params params;
	params.nOutputLink = nOutputLink;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorRightShoulder
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorRightShoulder()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorRightShoulder");

	UBioPlayerInput_InGamePropertyEditorRightShoulder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorLeftShoulder
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorLeftShoulder()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorLeftShoulder");

	UBioPlayerInput_InGamePropertyEditorLeftShoulder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorRightTrigger
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorRightTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorRightTrigger");

	UBioPlayerInput_InGamePropertyEditorRightTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorLeftTrigger
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorLeftTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorLeftTrigger");

	UBioPlayerInput_InGamePropertyEditorLeftTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorBack
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorBack()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorBack");

	UBioPlayerInput_InGamePropertyEditorBack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorForward
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorForward()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorForward");

	UBioPlayerInput_InGamePropertyEditorForward_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorGoToMainMenu
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorGoToMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorGoToMainMenu");

	UBioPlayerInput_InGamePropertyEditorGoToMainMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorRIGHTAction
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorRIGHTAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorRIGHTAction");

	UBioPlayerInput_InGamePropertyEditorRIGHTAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorLEFTAction
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorLEFTAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorLEFTAction");

	UBioPlayerInput_InGamePropertyEditorLEFTAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorDOWNAction
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorDOWNAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorDOWNAction");

	UBioPlayerInput_InGamePropertyEditorDOWNAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.InGamePropertyEditorUPAction
// (Defined, Exec, Public)

void UBioPlayerInput::InGamePropertyEditorUPAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.InGamePropertyEditorUPAction");

	UBioPlayerInput_InGamePropertyEditorUPAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.EndInGamePropertyEditor
// (Exec, Public)

void UBioPlayerInput::EndInGamePropertyEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.EndInGamePropertyEditor");

	UBioPlayerInput_EndInGamePropertyEditor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.StartIngamePropertyEditor
// (Exec, Public)
// Parameters:
// bool                           bNoReally                      (OptionalParm, Parm)

void UBioPlayerInput::StartIngamePropertyEditor(bool bNoReally)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.StartIngamePropertyEditor");

	UBioPlayerInput_StartIngamePropertyEditor_Params params;
	params.bNoReally = bNoReally;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.DeactivateSpectateOption
// (Defined, Event, Public)

void UBioPlayerInput::DeactivateSpectateOption()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.DeactivateSpectateOption");

	UBioPlayerInput_DeactivateSpectateOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ActivateSpectateOption
// (Defined, Event, Public)

void UBioPlayerInput::ActivateSpectateOption()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateSpectateOption");

	UBioPlayerInput_ActivateSpectateOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.NextSpectateMode
// (Defined, Event, Public)

void UBioPlayerInput::NextSpectateMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.NextSpectateMode");

	UBioPlayerInput_NextSpectateMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.PrevSpectateMode
// (Defined, Event, Public)

void UBioPlayerInput::PrevSpectateMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.PrevSpectateMode");

	UBioPlayerInput_PrevSpectateMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.NextSpectateOption
// (Defined, Event, Public)

void UBioPlayerInput::NextSpectateOption()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.NextSpectateOption");

	UBioPlayerInput_NextSpectateOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.PrevSpectateOption
// (Defined, Event, Public)

void UBioPlayerInput::PrevSpectateOption()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.PrevSpectateOption");

	UBioPlayerInput_PrevSpectateOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.UnlockSpectator
// (Defined, Event, Public)

void UBioPlayerInput::UnlockSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.UnlockSpectator");

	UBioPlayerInput_UnlockSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.PrevSpectatorTarget
// (Defined, Event, Public)

void UBioPlayerInput::PrevSpectatorTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.PrevSpectatorTarget");

	UBioPlayerInput_PrevSpectatorTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.NextSpectatorTarget
// (Defined, Event, Public)

void UBioPlayerInput::NextSpectatorTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.NextSpectatorTarget");

	UBioPlayerInput_NextSpectatorTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.LockSpectator
// (Defined, Event, Public)

void UBioPlayerInput::LockSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.LockSpectator");

	UBioPlayerInput_LockSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MessageBoxPageDown
// (Defined, Exec, Public)

void UBioPlayerInput::MessageBoxPageDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MessageBoxPageDown");

	UBioPlayerInput_MessageBoxPageDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MessageBoxPageUp
// (Defined, Exec, Public)

void UBioPlayerInput::MessageBoxPageUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MessageBoxPageUp");

	UBioPlayerInput_MessageBoxPageUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GUIScrollDown
// (Defined, Exec, Public)

void UBioPlayerInput::GUIScrollDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GUIScrollDown");

	UBioPlayerInput_GUIScrollDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GUIScrollUp
// (Defined, Exec, Public)

void UBioPlayerInput::GUIScrollUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GUIScrollUp");

	UBioPlayerInput_GUIScrollUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowDebugMenu
// (Defined, Exec, Public)

void UBioPlayerInput::ShowDebugMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowDebugMenu");

	UBioPlayerInput_ShowDebugMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowSubMenu
// (Defined, Exec, Public)
// Parameters:
// struct FString                 MenuName                       (Parm, NeedCtorLink)

void UBioPlayerInput::ShowSubMenu(const struct FString& MenuName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowSubMenu");

	UBioPlayerInput_ShowSubMenu_Params params;
	params.MenuName = MenuName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GUIAction
// (Defined, Exec, Public)

void UBioPlayerInput::GUIAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GUIAction");

	UBioPlayerInput_GUIAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.CinematicSkip
// (Defined, Exec, Public)

void UBioPlayerInput::CinematicSkip()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.CinematicSkip");

	UBioPlayerInput_CinematicSkip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.CinematicNormal
// (Exec, Public)

void UBioPlayerInput::CinematicNormal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.CinematicNormal");

	UBioPlayerInput_CinematicNormal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.CinematicAccelerate
// (Exec, Public)

void UBioPlayerInput::CinematicAccelerate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.CinematicAccelerate");

	UBioPlayerInput_CinematicAccelerate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MovieAction
// (Final, Exec, Native, Public)

void UBioPlayerInput::MovieAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MovieAction");

	UBioPlayerInput_MovieAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GhostMoveDown
// (Defined, Exec, Public)
// Parameters:
// bool                           bState                         (Parm)

void UBioPlayerInput::GhostMoveDown(bool bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GhostMoveDown");

	UBioPlayerInput_GhostMoveDown_Params params;
	params.bState = bState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GhostMoveUp
// (Defined, Exec, Public)
// Parameters:
// bool                           bState                         (Parm)

void UBioPlayerInput::GhostMoveUp(bool bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GhostMoveUp");

	UBioPlayerInput_GhostMoveUp_Params params;
	params.bState = bState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.CameraLookUpDown
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)
// float                          fDeadZone                      (Parm)

void UBioPlayerInput::CameraLookUpDown(float fSpeed, float fDeadZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.CameraLookUpDown");

	UBioPlayerInput_CameraLookUpDown_Params params;
	params.fSpeed = fSpeed;
	params.fDeadZone = fDeadZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.CameraTurnLeftRight
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)
// float                          fDeadZone                      (Parm)

void UBioPlayerInput::CameraTurnLeftRight(float fSpeed, float fDeadZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.CameraTurnLeftRight");

	UBioPlayerInput_CameraTurnLeftRight_Params params;
	params.fSpeed = fSpeed;
	params.fDeadZone = fDeadZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.StrafeLeftRightFixed
// (Defined, Exec, Public)
// Parameters:
// int                            nDirection                     (Parm)

void UBioPlayerInput::StrafeLeftRightFixed(int nDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.StrafeLeftRightFixed");

	UBioPlayerInput_StrafeLeftRightFixed_Params params;
	params.nDirection = nDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.StrafeLeftRight
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)
// float                          fDeadZone                      (Parm)

void UBioPlayerInput::StrafeLeftRight(float fSpeed, float fDeadZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.StrafeLeftRight");

	UBioPlayerInput_StrafeLeftRight_Params params;
	params.fSpeed = fSpeed;
	params.fDeadZone = fDeadZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MoveForwardBackFixed
// (Defined, Exec, Public)
// Parameters:
// int                            nDirection                     (Parm)

void UBioPlayerInput::MoveForwardBackFixed(int nDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MoveForwardBackFixed");

	UBioPlayerInput_MoveForwardBackFixed_Params params;
	params.nDirection = nDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.MoveForwardBack
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)
// float                          fDeadZone                      (Parm)

void UBioPlayerInput::MoveForwardBack(float fSpeed, float fDeadZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.MoveForwardBack");

	UBioPlayerInput_MoveForwardBack_Params params;
	params.fSpeed = fSpeed;
	params.fDeadZone = fDeadZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ActivateQuickPowerCast
// (Defined, Event, Public)

void UBioPlayerInput::ActivateQuickPowerCast()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateQuickPowerCast");

	UBioPlayerInput_ActivateQuickPowerCast_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ActivateQuickWeaponSwitch
// (Defined, Event, Public)

void UBioPlayerInput::ActivateQuickWeaponSwitch()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateQuickWeaponSwitch");

	UBioPlayerInput_ActivateQuickWeaponSwitch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.DeactivateSquadCommand
// (Defined, Event, Public)

void UBioPlayerInput::DeactivateSquadCommand()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.DeactivateSquadCommand");

	UBioPlayerInput_DeactivateSquadCommand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ActivateSquadCommand
// (Defined, Public)
// Parameters:
// TEnumAsByte<EInputModes>       nMode                          (Parm)

void UBioPlayerInput::ActivateSquadCommand(TEnumAsByte<EInputModes> nMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateSquadCommand");

	UBioPlayerInput_ActivateSquadCommand_Params params;
	params.nMode = nMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ActivateCommandWheel
// (Defined, Public)

void UBioPlayerInput::ActivateCommandWheel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateCommandWheel");

	UBioPlayerInput_ActivateCommandWheel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ActivateWeaponWheel
// (Defined, Public)

void UBioPlayerInput::ActivateWeaponWheel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateWeaponWheel");

	UBioPlayerInput_ActivateWeaponWheel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ActivatePowerWheel
// (Defined, Public)

void UBioPlayerInput::ActivatePowerWheel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivatePowerWheel");

	UBioPlayerInput_ActivatePowerWheel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SetTacticalSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void UBioPlayerInput::SetTacticalSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SetTacticalSpeed");

	UBioPlayerInput_SetTacticalSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.RestoreVehicleDriveCam
// (Native, Public)

void UBioPlayerInput::RestoreVehicleDriveCam()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.RestoreVehicleDriveCam");

	UBioPlayerInput_RestoreVehicleDriveCam_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ExitVehicleZoomMode
// (Native, Public)

void UBioPlayerInput::ExitVehicleZoomMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ExitVehicleZoomMode");

	UBioPlayerInput_ExitVehicleZoomMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.CleanupWeaponSounds
// (Final, Native, Public)

void UBioPlayerInput::CleanupWeaponSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.CleanupWeaponSounds");

	UBioPlayerInput_CleanupWeaponSounds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.IsCombatEnabled
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerInput::IsCombatEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.IsCombatEnabled");

	UBioPlayerInput_IsCombatEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.DecreaseWeaponPowerCount
// (Final, Native, Public)

void UBioPlayerInput::DecreaseWeaponPowerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.DecreaseWeaponPowerCount");

	UBioPlayerInput_DecreaseWeaponPowerCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GetWeaponPower
// (Final, Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioPlayerInput::GetWeaponPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GetWeaponPower");

	UBioPlayerInput_GetWeaponPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.GetMeleePowerName
// (Final, Native, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioPlayerInput::GetMeleePowerName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GetMeleePowerName");

	UBioPlayerInput_GetMeleePowerName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.IsMeleeAvailable
// (Final, Native, Public)
// Parameters:
// struct FName                   nmPower                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerInput::IsMeleeAvailable(const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.IsMeleeAvailable");

	UBioPlayerInput_IsMeleeAvailable_Params params;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.ActivateEquip
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> eWeapon                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerInput::ActivateEquip(TEnumAsByte<EBioItemWeaponRangedType> eWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateEquip");

	UBioPlayerInput_ActivateEquip_Params params;
	params.eWeapon = eWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.ActivatePower
// (Final, Native, Public)
// Parameters:
// struct FName                   nmPower                        (Parm)
// class AActor*                  oTarget                        (OptionalParm, Parm)
// struct FVector                 vTargetLocation                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerInput::ActivatePower(const struct FName& nmPower, class AActor* oTarget, const struct FVector& vTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivatePower");

	UBioPlayerInput_ActivatePower_Params params;
	params.nmPower = nmPower;
	params.oTarget = oTarget;
	params.vTargetLocation = vTargetLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.ActivateGrenade
// (Final, Native, Public)

void UBioPlayerInput::ActivateGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ActivateGrenade");

	UBioPlayerInput_ActivateGrenade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.UpdateCooldowns
// (Final, Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioPlayerInput::UpdateCooldowns(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.UpdateCooldowns");

	UBioPlayerInput_UpdateCooldowns_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.NextZoomLevel
// (Final, Exec, Native, Public)

void UBioPlayerInput::NextZoomLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.NextZoomLevel");

	UBioPlayerInput_NextZoomLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleWalk
// (Final, Defined, Exec, Public)

void UBioPlayerInput::ToggleWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleWalk");

	UBioPlayerInput_ToggleWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.UseAbility
// (Final, Defined, Exec, Public)
// Parameters:
// int                            Index                          (Parm)

void UBioPlayerInput::UseAbility(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.UseAbility");

	UBioPlayerInput_UseAbility_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleKeyMap
// (Final, Defined, Exec, Public)

void UBioPlayerInput::ToggleKeyMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleKeyMap");

	UBioPlayerInput_ToggleKeyMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.NextZoomMagnification
// (Final, Exec, Native, Public)

void UBioPlayerInput::NextZoomMagnification()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.NextZoomMagnification");

	UBioPlayerInput_NextZoomMagnification_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleVehicleZoom
// (Final, Exec, Native, Public)

void UBioPlayerInput::ToggleVehicleZoom()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleVehicleZoom");

	UBioPlayerInput_ToggleVehicleZoom_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleZoom
// (Final, Exec, Native, Public)

void UBioPlayerInput::ToggleZoom()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleZoom");

	UBioPlayerInput_ToggleZoom_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleCommandMenu
// (Final, Defined, Exec, Public)

void UBioPlayerInput::ToggleCommandMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleCommandMenu");

	UBioPlayerInput_ToggleCommandMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleTacticalMenu
// (Final, Defined, Exec, Public)

void UBioPlayerInput::ToggleTacticalMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleTacticalMenu");

	UBioPlayerInput_ToggleTacticalMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ToggleWeaponsMenu
// (Final, Defined, Exec, Public)

void UBioPlayerInput::ToggleWeaponsMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ToggleWeaponsMenu");

	UBioPlayerInput_ToggleWeaponsMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GetLocalizedKeyName
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   OrgKeyName                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioPlayerInput::GetLocalizedKeyName(const struct FName& OrgKeyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GetLocalizedKeyName");

	UBioPlayerInput_GetLocalizedKeyName_Params params;
	params.OrgKeyName = OrgKeyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.ShowCommandMenu
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bShow                          (Parm)

void UBioPlayerInput::ShowCommandMenu(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowCommandMenu");

	UBioPlayerInput_ShowCommandMenu_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowTacticalMenu
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bShow                          (Parm)

void UBioPlayerInput::ShowTacticalMenu(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowTacticalMenu");

	UBioPlayerInput_ShowTacticalMenu_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowWeaponsMenu
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bShow                          (Parm)

void UBioPlayerInput::ShowWeaponsMenu(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowWeaponsMenu");

	UBioPlayerInput_ShowWeaponsMenu_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ShowInGameGui
// (Final, Exec, Native, Public)

void UBioPlayerInput::ShowInGameGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ShowInGameGui");

	UBioPlayerInput_ShowInGameGui_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SquadCommandTakeCover
// (Final, Exec, Native, Public)
// Parameters:
// int                            iSquadMember                   (OptionalParm, Parm)

void UBioPlayerInput::SquadCommandTakeCover(int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SquadCommandTakeCover");

	UBioPlayerInput_SquadCommandTakeCover_Params params;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SquadCommandRally
// (Final, Exec, Native, Public)
// Parameters:
// int                            iSquadMember                   (OptionalParm, Parm)

void UBioPlayerInput::SquadCommandRally(int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SquadCommandRally");

	UBioPlayerInput_SquadCommandRally_Params params;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SquadCommandMoveTo
// (Final, Exec, Native, Public)
// Parameters:
// int                            iSquadMember                   (OptionalParm, Parm)

void UBioPlayerInput::SquadCommandMoveTo(int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SquadCommandMoveTo");

	UBioPlayerInput_SquadCommandMoveTo_Params params;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SquadCommandAttackTarget
// (Final, Exec, Native, Public)
// Parameters:
// int                            iSquadMember                   (OptionalParm, Parm)

void UBioPlayerInput::SquadCommandAttackTarget(int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SquadCommandAttackTarget");

	UBioPlayerInput_SquadCommandAttackTarget_Params params;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.HandleCancelButton
// (Final, Exec, Native, Public)

void UBioPlayerInput::HandleCancelButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.HandleCancelButton");

	UBioPlayerInput_HandleCancelButton_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.HandleUseButtonOff
// (Final, Exec, Native, Public)

void UBioPlayerInput::HandleUseButtonOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.HandleUseButtonOff");

	UBioPlayerInput_HandleUseButtonOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.HandleUseButtonOn
// (Final, Exec, Native, Public)

void UBioPlayerInput::HandleUseButtonOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.HandleUseButtonOn");

	UBioPlayerInput_HandleUseButtonOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.VehicleThrustersOff
// (Exec, Native, Public)

void UBioPlayerInput::VehicleThrustersOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.VehicleThrustersOff");

	UBioPlayerInput_VehicleThrustersOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.VehicleThrustersOn
// (Exec, Native, Public)

void UBioPlayerInput::VehicleThrustersOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.VehicleThrustersOn");

	UBioPlayerInput_VehicleThrustersOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.UseFirstAid
// (Exec, Native, Public)

void UBioPlayerInput::UseFirstAid()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.UseFirstAid");

	UBioPlayerInput_UseFirstAid_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ThrowGrenade
// (Exec, Native, Public)

void UBioPlayerInput::ThrowGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ThrowGrenade");

	UBioPlayerInput_ThrowGrenade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.FireVehicleCannon
// (Exec, Native, Public)
// Parameters:
// bool                           bFire                          (Parm)

void UBioPlayerInput::FireVehicleCannon(bool bFire)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.FireVehicleCannon");

	UBioPlayerInput_FireVehicleCannon_Params params;
	params.bFire = bFire;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.VehicleZoomOff
// (Exec, Native, Public)

void UBioPlayerInput::VehicleZoomOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.VehicleZoomOff");

	UBioPlayerInput_VehicleZoomOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.VehicleZoomOn
// (Exec, Native, Public)

void UBioPlayerInput::VehicleZoomOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.VehicleZoomOn");

	UBioPlayerInput_VehicleZoomOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ZoomOff
// (Exec, Native, Public)

void UBioPlayerInput::ZoomOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ZoomOff");

	UBioPlayerInput_ZoomOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.ZoomOn
// (Exec, Native, Public)

void UBioPlayerInput::ZoomOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ZoomOn");

	UBioPlayerInput_ZoomOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.FireWeaponOff
// (Exec, Native, Public)

void UBioPlayerInput::FireWeaponOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.FireWeaponOff");

	UBioPlayerInput_FireWeaponOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.FireWeaponOn
// (Exec, Native, Public)

void UBioPlayerInput::FireWeaponOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.FireWeaponOn");

	UBioPlayerInput_FireWeaponOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.FireWeapon
// (Exec, Native, Public)

void UBioPlayerInput::FireWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.FireWeapon");

	UBioPlayerInput_FireWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SwitchToNextWeapon
// (Exec, Native, Public)

void UBioPlayerInput::SwitchToNextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SwitchToNextWeapon");

	UBioPlayerInput_SwitchToNextWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SwitchToPrevWeapon
// (Exec, Native, Public)

void UBioPlayerInput::SwitchToPrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SwitchToPrevWeapon");

	UBioPlayerInput_SwitchToPrevWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.SwitchToWeapon
// (Exec, Native, Public)
// Parameters:
// int                            WeaponIndex                    (Parm)

void UBioPlayerInput::SwitchToWeapon(int WeaponIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.SwitchToWeapon");

	UBioPlayerInput_SwitchToWeapon_Params params;
	params.WeaponIndex = WeaponIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerInput.GetInputModeBeforeIGG
// (Final, Defined, Exec, Public)
// Parameters:
// TEnumAsByte<EInputModes>       ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EInputModes> UBioPlayerInput::GetInputModeBeforeIGG()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.GetInputModeBeforeIGG");

	UBioPlayerInput_GetInputModeBeforeIGG_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerInput.UpdateAxis
// (Native, Public, HasOutParms)
// Parameters:
// float                          aAxis                          (Parm, OutParm)
// float                          fSpeed                         (OptionalParm, Parm)
// float                          fDeadZone                      (OptionalParm, Parm)
// float                          fAbsoluteAxis                  (OptionalParm, Parm)
// bool                           bInvert                        (OptionalParm, Parm)

void UBioPlayerInput::UpdateAxis(float fSpeed, float fDeadZone, float fAbsoluteAxis, bool bInvert, float* aAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.UpdateAxis");

	UBioPlayerInput_UpdateAxis_Params params;
	params.fSpeed = fSpeed;
	params.fDeadZone = fDeadZone;
	params.fAbsoluteAxis = fAbsoluteAxis;
	params.bInvert = bInvert;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aAxis != nullptr)
		*aAxis = params.aAxis;
}


// Function BIOC_Base.BioPlayerInput.ParseStringForPCCommands
// (Final, Native, Public)
// Parameters:
// struct FString                 sMessage                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioPlayerInput::ParseStringForPCCommands(const struct FString& sMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerInput.ParseStringForPCCommands");

	UBioPlayerInput_ParseStringForPCCommands_Params params;
	params.sMessage = sMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSelection.GetSelectionAngle
// (Final, Native, Private)
// Parameters:
// class UBioEpicPawnBehavior*    pBehavior                      (Parm)
// float                          fRange                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPlayerSelection::GetSelectionAngle(class UBioEpicPawnBehavior* pBehavior, float fRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.GetSelectionAngle");

	UBioPlayerSelection_GetSelectionAngle_Params params;
	params.pBehavior = pBehavior;
	params.fRange = fRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSelection.GetSelectionRange
// (Final, Native, Private)
// Parameters:
// class UBioEpicPawnBehavior*    pBehavior                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioPlayerSelection::GetSelectionRange(class UBioEpicPawnBehavior* pBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.GetSelectionRange");

	UBioPlayerSelection_GetSelectionRange_Params params;
	params.pBehavior = pBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSelection.IsSelectable
// (Final, Native, Private)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// class UBioEpicPawnBehavior*    sourcePawnBehavior             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerSelection::IsSelectable(class AActor* oTarget, class UBioEpicPawnBehavior* sourcePawnBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.IsSelectable");

	UBioPlayerSelection_IsSelectable_Params params;
	params.oTarget = oTarget;
	params.sourcePawnBehavior = sourcePawnBehavior;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSelection.DrawSelectionReticule
// (Final, Native, Private)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// struct FColor                  ReticuleColor                  (Parm)
// float                          fOffset                        (OptionalParm, Parm)

void UBioPlayerSelection::DrawSelectionReticule(class AActor* oTarget, const struct FColor& ReticuleColor, float fOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.DrawSelectionReticule");

	UBioPlayerSelection_DrawSelectionReticule_Params params;
	params.oTarget = oTarget;
	params.ReticuleColor = ReticuleColor;
	params.fOffset = fOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSelection.IsInLineOfSightFrom
// (Native, Public)
// Parameters:
// struct FVector                 vSourceLoc                     (Parm)
// class AActor*                  oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerSelection::IsInLineOfSightFrom(const struct FVector& vSourceLoc, class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.IsInLineOfSightFrom");

	UBioPlayerSelection_IsInLineOfSightFrom_Params params;
	params.vSourceLoc = vSourceLoc;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSelection.Init
// (Final, Native, Public)

void UBioPlayerSelection::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.Init");

	UBioPlayerSelection_Init_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSelection.SetPreviousSelectionMode
// (Final, Native, Public)
// Parameters:
// bool                           bForceActive                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerSelection::SetPreviousSelectionMode(bool bForceActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.SetPreviousSelectionMode");

	UBioPlayerSelection_SetPreviousSelectionMode_Params params;
	params.bForceActive = bForceActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSelection.SetSelectionMode
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EGeneralSelectionMode> nSelectionMode                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerSelection::SetSelectionMode(TEnumAsByte<EGeneralSelectionMode> nSelectionMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.SetSelectionMode");

	UBioPlayerSelection_SetSelectionMode_Params params;
	params.nSelectionMode = nSelectionMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSelection.UpdateSelection
// (Final, Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPlayerSelection::UpdateSelection(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSelection.UpdateSelection");

	UBioPlayerSelection_UpdateSelection_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSquadAPI.DisplaySquadDebug
// (Public)

void ABioSquadAPI::DisplaySquadDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAPI.DisplaySquadDebug");

	ABioSquadAPI_DisplaySquadDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAPI.ProcessPoint
// (Public)
// Parameters:
// TEnumAsByte<EPathNodeAction>   HowPointWasReached             (Parm)
// struct FVector                 Location_                      (Parm)
// struct FRotator                Orientation                    (Parm)
// struct FName                   ActionOn                       (OptionalParm, Parm)

void ABioSquadAPI::ProcessPoint(TEnumAsByte<EPathNodeAction> HowPointWasReached, const struct FVector& Location_, const struct FRotator& Orientation, const struct FName& ActionOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAPI.ProcessPoint");

	ABioSquadAPI_ProcessPoint_Params params;
	params.HowPointWasReached = HowPointWasReached;
	params.Location_ = Location_;
	params.Orientation = Orientation;
	params.ActionOn = ActionOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAPI.Initalize
// (Public)

void ABioSquadAPI::Initalize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAPI.Initalize");

	ABioSquadAPI_Initalize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMaxHazardLevel
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::GetMaxHazardLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMaxHazardLevel");

	ABioBaseSquad_GetMaxHazardLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.NotifyMemberCoverDisabled
// (Simulated, Event, Public)
// Parameters:
// class APawn*                   oWho                           (Parm)
// class AActor*                  Link                           (Parm)
// int                            SlotIdx                        (Parm)

void ABioBaseSquad::NotifyMemberCoverDisabled(class APawn* oWho, class AActor* Link, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.NotifyMemberCoverDisabled");

	ABioBaseSquad_NotifyMemberCoverDisabled_Params params;
	params.oWho = oWho;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.Resurrect
// (Defined, Event, Public)
// Parameters:
// float                          fPercentOfHealthRegained       (Parm)
// bool                           bIsInstantaneous               (Parm)

void ABioBaseSquad::Resurrect(float fPercentOfHealthRegained, bool bIsInstantaneous)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.Resurrect");

	ABioBaseSquad_Resurrect_Params params;
	params.fPercentOfHealthRegained = fPercentOfHealthRegained;
	params.bIsInstantaneous = bIsInstantaneous;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioBaseSquad::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSaveObjectClass");

	ABioBaseSquad_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.OnThrowGrenade
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)

void ABioBaseSquad::OnThrowGrenade(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnThrowGrenade");

	ABioBaseSquad_OnThrowGrenade_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.HasGrenades
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::HasGrenades(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.HasGrenades");

	ABioBaseSquad_HasGrenades_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.MakeHackable
// (Final, Native, Public)
// Parameters:
// class ABioBaseSquad*           ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioBaseSquad* ABioBaseSquad::MakeHackable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.MakeHackable");

	ABioBaseSquad_MakeHackable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetHackedSquad
// (Event, Public)

void ABioBaseSquad::SetHackedSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetHackedSquad");

	ABioBaseSquad_SetHackedSquad_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.HasCover
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::HasCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.HasCover");

	ABioBaseSquad_HasCover_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SquadHandleChatterEvent
// (Defined, Event, Public)
// Parameters:
// unsigned char                  eSoundSet                      (Parm)
// int                            nFlags                         (OptionalParm, Parm)

void ABioBaseSquad::SquadHandleChatterEvent(unsigned char eSoundSet, int nFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SquadHandleChatterEvent");

	ABioBaseSquad_SquadHandleChatterEvent_Params params;
	params.eSoundSet = eSoundSet;
	params.nFlags = nFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnUntargetedByHostile
// (Event, Public)
// Parameters:
// class AActor*                  oHostile                       (Parm)
// bool                           bHostileAboutToRetargetSquad   (Parm)

void ABioBaseSquad::OnUntargetedByHostile(class AActor* oHostile, bool bHostileAboutToRetargetSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnUntargetedByHostile");

	ABioBaseSquad_OnUntargetedByHostile_Params params;
	params.oHostile = oHostile;
	params.bHostileAboutToRetargetSquad = bHostileAboutToRetargetSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnTargetedByHostile
// (Event, Public)
// Parameters:
// class AActor*                  oHostile                       (Parm)

void ABioBaseSquad::OnTargetedByHostile(class AActor* oHostile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnTargetedByHostile");

	ABioBaseSquad_OnTargetedByHostile_Params params;
	params.oHostile = oHostile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.UseCapability
// (Defined, Public)
// Parameters:
// class ABioAiController*        oMember                        (Parm)
// class UBioCapability*          oCap                           (Parm)
// TEnumAsByte<EeATTACK_TYPE>     eAttackType                    (OptionalParm, Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// bool                           bIgnoreWounds                  (OptionalParm, Parm)
// bool                           bSprayCloseRange               (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::UseCapability(class ABioAiController* oMember, class UBioCapability* oCap, TEnumAsByte<EeATTACK_TYPE> eAttackType, class APawn* oTarget, bool bIgnoreWounds, bool bSprayCloseRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.UseCapability");

	ABioBaseSquad_UseCapability_Params params;
	params.oMember = oMember;
	params.oCap = oCap;
	params.eAttackType = eAttackType;
	params.oTarget = oTarget;
	params.bIgnoreWounds = bIgnoreWounds;
	params.bSprayCloseRange = bSprayCloseRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestAttack
// (Defined, Public, HasOutParms)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class AActor*                  oTarget                        (Parm)
// TEnumAsByte<EeATTACK_TYPE>     eAttackType                    (Parm, OutParm)
// bool                           bAllowWeaponSwitch             (OptionalParm, Parm)
// float                          fPowerUsePercent               (OptionalParm, Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestAttack(class ABioPawn* oMemberPawn, class AActor* oTarget, bool bAllowWeaponSwitch, float fPowerUsePercent, TEnumAsByte<EeATTACK_TYPE>* eAttackType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestAttack");

	ABioBaseSquad_GetBestAttack_Params params;
	params.oMemberPawn = oMemberPawn;
	params.oTarget = oTarget;
	params.bAllowWeaponSwitch = bAllowWeaponSwitch;
	params.fPowerUsePercent = fPowerUsePercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (eAttackType != nullptr)
		*eAttackType = params.eAttackType;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestDefense
// (Defined, Public, HasOutParms)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// TEnumAsByte<EeATTACK_TYPE>     eAttackType                    (Parm, OutParm)
// bool                           bAlwaysAllowDefense            (OptionalParm, Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestDefense(class ABioPawn* oMemberPawn, bool bAlwaysAllowDefense, TEnumAsByte<EeATTACK_TYPE>* eAttackType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestDefense");

	ABioBaseSquad_GetBestDefense_Params params;
	params.oMemberPawn = oMemberPawn;
	params.bAlwaysAllowDefense = bAlwaysAllowDefense;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (eAttackType != nullptr)
		*eAttackType = params.eAttackType;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestWeapon
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class AActor*                  oTarget                        (Parm)
// bool                           bAllowWeaponSwitch             (OptionalParm, Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestWeapon(class ABioPawn* oMemberPawn, class AActor* oTarget, bool bAllowWeaponSwitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestWeapon");

	ABioBaseSquad_GetBestWeapon_Params params;
	params.oMemberPawn = oMemberPawn;
	params.oTarget = oTarget;
	params.bAllowWeaponSwitch = bAllowWeaponSwitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestAttackPower
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class AActor*                  oTarget                        (Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestAttackPower(class ABioPawn* oMemberPawn, class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestAttackPower");

	ABioBaseSquad_GetBestAttackPower_Params params;
	params.oMemberPawn = oMemberPawn;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestDisableDebuffPower
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class AActor*                  oTarget                        (Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestDisableDebuffPower(class ABioPawn* oMemberPawn, class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestDisableDebuffPower");

	ABioBaseSquad_GetBestDisableDebuffPower_Params params;
	params.oMemberPawn = oMemberPawn;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetSuicidePower
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class AActor*                  oTarget                        (Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetSuicidePower(class ABioPawn* oMemberPawn, class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSuicidePower");

	ABioBaseSquad_GetSuicidePower_Params params;
	params.oMemberPawn = oMemberPawn;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestHealingPower
// (Defined, Public, HasOutParms)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class ABioPawn*                oTargetSquadMember             (Parm, OutParm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestHealingPower(class ABioPawn* oMemberPawn, class ABioPawn** oTargetSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestHealingPower");

	ABioBaseSquad_GetBestHealingPower_Params params;
	params.oMemberPawn = oMemberPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oTargetSquadMember != nullptr)
		*oTargetSquadMember = params.oTargetSquadMember;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestTargetForHeal
// (Defined, Public, HasOutParms)
// Parameters:
// class ABioPawn*                oCaster                        (Parm)
// class UBioCapability*          oHealPower                     (Parm)
// float                          fRangeToTarget                 (Parm, OutParm)
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* ABioBaseSquad::GetBestTargetForHeal(class ABioPawn* oCaster, class UBioCapability* oHealPower, float* fRangeToTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestTargetForHeal");

	ABioBaseSquad_GetBestTargetForHeal_Params params;
	params.oCaster = oCaster;
	params.oHealPower = oHealPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fRangeToTarget != nullptr)
		*fRangeToTarget = params.fRangeToTarget;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsPawnHealthBelowThreshold
// (Defined, Public)
// Parameters:
// class ABioPawn*                oTestPawn                      (Parm)
// float                          fThreshold                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsPawnHealthBelowThreshold(class ABioPawn* oTestPawn, float fThreshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsPawnHealthBelowThreshold");

	ABioBaseSquad_IsPawnHealthBelowThreshold_Params params;
	params.oTestPawn = oTestPawn;
	params.fThreshold = fThreshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetPawnShieldPct
// (Defined, Public)
// Parameters:
// class ABioPawn*                oTestPawn                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioBaseSquad::GetPawnShieldPct(class ABioPawn* oTestPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetPawnShieldPct");

	ABioBaseSquad_GetPawnShieldPct_Params params;
	params.oTestPawn = oTestPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetPawnHealthPct
// (Defined, Public)
// Parameters:
// class ABioPawn*                oTestPawn                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioBaseSquad::GetPawnHealthPct(class ABioPawn* oTestPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetPawnHealthPct");

	ABioBaseSquad_GetPawnHealthPct_Params params;
	params.oTestPawn = oTestPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestDefensivePower
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestDefensivePower(class ABioPawn* oMemberPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestDefensivePower");

	ABioBaseSquad_GetBestDefensivePower_Params params;
	params.oMemberPawn = oMemberPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestBuffPower
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestBuffPower(class ABioPawn* oMemberPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestBuffPower");

	ABioBaseSquad_GetBestBuffPower_Params params;
	params.oMemberPawn = oMemberPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsRequiredWeaponEquipped
// (Defined, Public)
// Parameters:
// class UBioPawnBehavior*        oCasterBehavior                (Parm)
// class UBioCapability*          oCap                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsRequiredWeaponEquipped(class UBioPawnBehavior* oCasterBehavior, class UBioCapability* oCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsRequiredWeaponEquipped");

	ABioBaseSquad_IsRequiredWeaponEquipped_Params params;
	params.oCasterBehavior = oCasterBehavior;
	params.oCap = oCap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetAoEAttackValue
// (Defined, Public, HasOutParms)
// Parameters:
// struct FVector                 vTarget                        (Parm)
// float                          fRadius                        (Parm)
// int                            nEnemyCount                    (Parm, OutParm)
// int                            nSquadCount                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetAoEAttackValue(const struct FVector& vTarget, float fRadius, int* nEnemyCount, int* nSquadCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetAoEAttackValue");

	ABioBaseSquad_GetAoEAttackValue_Params params;
	params.vTarget = vTarget;
	params.fRadius = fRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nEnemyCount != nullptr)
		*nEnemyCount = params.nEnemyCount;
	if (nSquadCount != nullptr)
		*nSquadCount = params.nSquadCount;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetActiveWeaponType
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// TEnumAsByte<EBioItemWeaponRangedType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioItemWeaponRangedType> ABioBaseSquad::GetActiveWeaponType(class ABioPawn* oMemberPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetActiveWeaponType");

	ABioBaseSquad_GetActiveWeaponType_Params params;
	params.oMemberPawn = oMemberPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsSquadCastingSpell
// (Defined, Public)
// Parameters:
// struct FName                   nmSpell                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsSquadCastingSpell(const struct FName& nmSpell)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsSquadCastingSpell");

	ABioBaseSquad_IsSquadCastingSpell_Params params;
	params.nmSpell = nmSpell;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetNearestSquadMember
// (Defined, Public, HasOutParms)
// Parameters:
// struct FVector                 vTarget                        (Parm)
// TArray<class ABioAiController*> aoIgnoreMembers                (OptionalParm, Parm, NeedCtorLink)
// float                          fBestDistToTargetSq            (OptionalParm, Parm, OutParm)
// class ABioAiController*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioAiController* ABioBaseSquad::GetNearestSquadMember(const struct FVector& vTarget, TArray<class ABioAiController*> aoIgnoreMembers, float* fBestDistToTargetSq)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNearestSquadMember");

	ABioBaseSquad_GetNearestSquadMember_Params params;
	params.vTarget = vTarget;
	params.aoIgnoreMembers = aoIgnoreMembers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fBestDistToTargetSq != nullptr)
		*fBestDistToTargetSq = params.fBestDistToTargetSq;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetNearestSquadMemberToObject
// (Defined, Public, HasOutParms)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// TArray<class ABioAiController*> aoIgnoreMembers                (OptionalParm, Parm, NeedCtorLink)
// float                          fBestDistToTargetSq            (OptionalParm, Parm, OutParm)
// class ABioAiController*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioAiController* ABioBaseSquad::GetNearestSquadMemberToObject(class AActor* oTarget, TArray<class ABioAiController*> aoIgnoreMembers, float* fBestDistToTargetSq)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNearestSquadMemberToObject");

	ABioBaseSquad_GetNearestSquadMemberToObject_Params params;
	params.oTarget = oTarget;
	params.aoIgnoreMembers = aoIgnoreMembers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fBestDistToTargetSq != nullptr)
		*fBestDistToTargetSq = params.fBestDistToTargetSq;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.CalculateThreat
// (Defined, Public)
// Parameters:
// class ABioAiController*        oMember                        (Parm)
// class APawn*                   oEnemy                         (Parm)
// bool                           bAttackedMe                    (OptionalParm, Parm)
// bool                           bCastAtMe                      (OptionalParm, Parm)
// bool                           bLOSRequired                   (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioBaseSquad::CalculateThreat(class ABioAiController* oMember, class APawn* oEnemy, bool bAttackedMe, bool bCastAtMe, bool bLOSRequired)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.CalculateThreat");

	ABioBaseSquad_CalculateThreat_Params params;
	params.oMember = oMember;
	params.oEnemy = oEnemy;
	params.bAttackedMe = bAttackedMe;
	params.bCastAtMe = bCastAtMe;
	params.bLOSRequired = bLOSRequired;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindBestTarget
// (Defined, Public)
// Parameters:
// class ABioAiController*        oMember                        (Parm)
// class APawn*                   oIgnoreTarget                  (OptionalParm, Parm)
// bool                           bLOSRequired                   (OptionalParm, Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::FindBestTarget(class ABioAiController* oMember, class APawn* oIgnoreTarget, bool bLOSRequired)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindBestTarget");

	ABioBaseSquad_FindBestTarget_Params params;
	params.oMember = oMember;
	params.oIgnoreTarget = oIgnoreTarget;
	params.bLOSRequired = bLOSRequired;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsBioPawnHostile
// (Defined, Public)
// Parameters:
// class AActor*                  oTestActor                     (Parm)
// bool                           bRequiresTargetFlag            (OptionalParm, Parm)
// TEnumAsByte<EePawnValidType>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EePawnValidType> ABioBaseSquad::IsBioPawnHostile(class AActor* oTestActor, bool bRequiresTargetFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsBioPawnHostile");

	ABioBaseSquad_IsBioPawnHostile_Params params;
	params.oTestActor = oTestActor;
	params.bRequiresTargetFlag = bRequiresTargetFlag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsBioPawnValid
// (Defined, Public)
// Parameters:
// class AActor*                  oTestActor                     (Parm)
// bool                           bRequiresTargetFlag            (OptionalParm, Parm)
// TEnumAsByte<EePawnValidType>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EePawnValidType> ABioBaseSquad::IsBioPawnValid(class AActor* oTestActor, bool bRequiresTargetFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsBioPawnValid");

	ABioBaseSquad_IsBioPawnValid_Params params;
	params.oTestActor = oTestActor;
	params.bRequiresTargetFlag = bRequiresTargetFlag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.onMemberArrivedAtTarget
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)

void ABioBaseSquad::onMemberArrivedAtTarget(class APawn* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.onMemberArrivedAtTarget");

	ABioBaseSquad_onMemberArrivedAtTarget_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnMemberCasting
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oTarget                        (Parm)
// struct FName                   nmPower                        (Parm)

void ABioBaseSquad::OnMemberCasting(class APawn* oMember, class APawn* oTarget, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnMemberCasting");

	ABioBaseSquad_OnMemberCasting_Params params;
	params.oMember = oMember;
	params.oTarget = oTarget;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnMemberAttacking
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oTarget                        (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioBaseSquad::OnMemberAttacking(class APawn* oMember, class APawn* oTarget, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnMemberAttacking");

	ABioBaseSquad_OnMemberAttacking_Params params;
	params.oMember = oMember;
	params.oTarget = oTarget;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnMemberShieldsDown
// (Public)
// Parameters:
// class APawn*                   oWho                           (Parm)

void ABioBaseSquad::OnMemberShieldsDown(class APawn* oWho)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnMemberShieldsDown");

	ABioBaseSquad_OnMemberShieldsDown_Params params;
	params.oWho = oWho;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.HearNoise
// (Event, Public)
// Parameters:
// class APawn*                   Who                            (Parm)
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FVector                 vNoiseLocation                 (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void ABioBaseSquad::HearNoise(class APawn* Who, float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.HearNoise");

	ABioBaseSquad_HearNoise_Params params;
	params.Who = Who;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.vNoiseLocation = vNoiseLocation;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnMemberLeftPlayPen
// (Event, Public)
// Parameters:
// class ABioPawn*                oWho                           (Parm)
// class ANavigationPoint*        oNavPoint                      (Parm)

void ABioBaseSquad::OnMemberLeftPlayPen(class ABioPawn* oWho, class ANavigationPoint* oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnMemberLeftPlayPen");

	ABioBaseSquad_OnMemberLeftPlayPen_Params params;
	params.oWho = oWho;
	params.oNavPoint = oNavPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetNewSpawnLocation
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioBaseSquad::GetNewSpawnLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNewSpawnLocation");

	ABioBaseSquad_GetNewSpawnLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.OnDamageDone
// (Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// class AActor*                  pDamageCausingActor            (Parm)

void ABioBaseSquad::OnDamageDone(class APawn* oTarget, class AActor* pDamageCausingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnDamageDone");

	ABioBaseSquad_OnDamageDone_Params params;
	params.oTarget = oTarget;
	params.pDamageCausingActor = pDamageCausingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateAbilityDisabledEvent
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioBaseSquad::GenerateAbilityDisabledEvent(class APawn* oMember, int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateAbilityDisabledEvent");

	ABioBaseSquad_GenerateAbilityDisabledEvent_Params params;
	params.oMember = oMember;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateAbilityEnabledEvent
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioBaseSquad::GenerateAbilityEnabledEvent(class APawn* oMember, int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateAbilityEnabledEvent");

	ABioBaseSquad_GenerateAbilityEnabledEvent_Params params;
	params.oMember = oMember;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateCastAtEvent
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmPower                        (Parm)

void ABioBaseSquad::GenerateCastAtEvent(class APawn* oMember, class APawn* oAttacker, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateCastAtEvent");

	ABioBaseSquad_GenerateCastAtEvent_Params params;
	params.oMember = oMember;
	params.oAttacker = oAttacker;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateAttackedEvent
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioBaseSquad::GenerateAttackedEvent(class APawn* oMember, class APawn* oAttacker, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateAttackedEvent");

	ABioBaseSquad_GenerateAttackedEvent_Params params;
	params.oMember = oMember;
	params.oAttacker = oAttacker;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateDeathEvent
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class AController*             oKiller                        (Parm)

void ABioBaseSquad::GenerateDeathEvent(class APawn* oMember, class AController* oKiller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateDeathEvent");

	ABioBaseSquad_GenerateDeathEvent_Params params;
	params.oMember = oMember;
	params.oKiller = oKiller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateProximityAlarmEvent
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioBaseSquad::GenerateProximityAlarmEvent(class APawn* oMember, class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateProximityAlarmEvent");

	ABioBaseSquad_GenerateProximityAlarmEvent_Params params;
	params.oMember = oMember;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateTakeDamageEvent
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// float                          fPreMitigationDamage           (Parm)
// float                          Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// class UClass*                  DamageType                     (Parm)

void ABioBaseSquad::GenerateTakeDamageEvent(class APawn* oTarget, float fPreMitigationDamage, float Damage, class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateTakeDamageEvent");

	ABioBaseSquad_GenerateTakeDamageEvent_Params params;
	params.oTarget = oTarget;
	params.fPreMitigationDamage = fPreMitigationDamage;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetFaction
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioFactionTypes>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioFactionTypes> ABioBaseSquad::GetFaction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetFaction");

	ABioBaseSquad_GetFaction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetRelationTo
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioFactionTypes>  nType                          (Parm)
// TEnumAsByte<EBioFactionRelationship> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioFactionRelationship> ABioBaseSquad::GetRelationTo(TEnumAsByte<EBioFactionTypes> nType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetRelationTo");

	ABioBaseSquad_GetRelationTo_Params params;
	params.nType = nType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FactionRelationship
// (Native, Public)
// Parameters:
// class ABioBaseSquad*           oOtherSquad                    (Parm)
// TEnumAsByte<EBioFactionRelationship> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioFactionRelationship> ABioBaseSquad::FactionRelationship(class ABioBaseSquad* oOtherSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FactionRelationship");

	ABioBaseSquad_FactionRelationship_Params params;
	params.oOtherSquad = oOtherSquad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.MemberActionComplete_None
// (Event, Public)
// Parameters:
// class ABioPawn*                Who                            (Parm)
// struct FName                   Action                         (Parm)
// int                            nReason                        (Parm)

void ABioBaseSquad::MemberActionComplete_None(class ABioPawn* Who, const struct FName& Action, int nReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.MemberActionComplete_None");

	ABioBaseSquad_MemberActionComplete_None_Params params;
	params.Who = Who;
	params.Action = Action;
	params.nReason = nReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.ReportStats
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioBaseSquad::ReportStats(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ReportStats");

	ABioBaseSquad_ReportStats_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.SetFollowDistance
// (Defined, Public)
// Parameters:
// int                            Value                          (Parm)

void ABioBaseSquad::SetFollowDistance(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetFollowDistance");

	ABioBaseSquad_SetFollowDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetFollowDistance
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::GetFollowDistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetFollowDistance");

	ABioBaseSquad_GetFollowDistance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.DumpPathandpoints
// (Defined, Public)

void ABioBaseSquad::DumpPathandpoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.DumpPathandpoints");

	ABioBaseSquad_DumpPathandpoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.DisplaySquadDebug
// (Public)

void ABioBaseSquad::DisplaySquadDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.DisplaySquadDebug");

	ABioBaseSquad_DisplaySquadDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.Rotstr
// (Defined, Public)
// Parameters:
// struct FRotator                R                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioBaseSquad::Rotstr(const struct FRotator& R)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.Rotstr");

	ABioBaseSquad_Rotstr_Params params;
	params.R = R;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.LocStrSegment
// (Defined, Public)
// Parameters:
// struct FSLocation              Num                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioBaseSquad::LocStrSegment(const struct FSLocation& Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.LocStrSegment");

	ABioBaseSquad_LocStrSegment_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.LocStr2
// (Defined, Public)
// Parameters:
// struct FSLocation              Num                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioBaseSquad::LocStr2(const struct FSLocation& Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.LocStr2");

	ABioBaseSquad_LocStr2_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.LocStr
// (Defined, Public)
// Parameters:
// struct FSLocation              Num                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioBaseSquad::LocStr(const struct FSLocation& Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.LocStr");

	ABioBaseSquad_LocStr_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.NodeLoc
// (Defined, Public, HasDefaults)
// Parameters:
// struct FSLocation              Num                            (Parm)
// struct FSLocation              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FSLocation ABioBaseSquad::NodeLoc(const struct FSLocation& Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.NodeLoc");

	ABioBaseSquad_NodeLoc_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.DecLoc
// (Defined, Public, HasDefaults)
// Parameters:
// struct FSLocation              Num                            (Parm)
// struct FSLocation              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FSLocation ABioBaseSquad::DecLoc(const struct FSLocation& Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.DecLoc");

	ABioBaseSquad_DecLoc_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IncLoc
// (Defined, Public, HasDefaults)
// Parameters:
// struct FSLocation              Num                            (Parm)
// struct FSLocation              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FSLocation ABioBaseSquad::IncLoc(const struct FSLocation& Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IncLoc");

	ABioBaseSquad_IncLoc_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.DetectLedgeToOffset
// (Defined, Public, HasDefaults)
// Parameters:
// int                            SquadId                        (Parm)
// struct FVector                 EscapeLoc                      (Parm)
// struct FVector                 OffsetLoc                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::DetectLedgeToOffset(int SquadId, const struct FVector& EscapeLoc, const struct FVector& OffsetLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.DetectLedgeToOffset");

	ABioBaseSquad_DetectLedgeToOffset_Params params;
	params.SquadId = SquadId;
	params.EscapeLoc = EscapeLoc;
	params.OffsetLoc = OffsetLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetNodePoint
// (Defined, Public)
// Parameters:
// struct FSLocation              nLoc                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioBaseSquad::GetNodePoint(const struct FSLocation& nLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNodePoint");

	ABioBaseSquad_GetNodePoint_Params params;
	params.nLoc = nLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetNodeRotation
// (Defined, Public)
// Parameters:
// struct FSLocation              nLoc                           (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ABioBaseSquad::GetNodeRotation(const struct FSLocation& nLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNodeRotation");

	ABioBaseSquad_GetNodeRotation_Params params;
	params.nLoc = nLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.WithinRangeOfFollowMarker
// (Defined, Public)
// Parameters:
// float                          Dist                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::WithinRangeOfFollowMarker(float Dist)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.WithinRangeOfFollowMarker");

	ABioBaseSquad_WithinRangeOfFollowMarker_Params params;
	params.Dist = Dist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.MembersAtFollowMark
// (Final, Native, Public)
// Parameters:
// int                            SquadId                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::MembersAtFollowMark(int SquadId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.MembersAtFollowMark");

	ABioBaseSquad_MembersAtFollowMark_Params params;
	params.SquadId = SquadId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.AllMembersAtFollowMark
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::AllMembersAtFollowMark()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AllMembersAtFollowMark");

	ABioBaseSquad_AllMembersAtFollowMark_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetPathLength
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::GetPathLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetPathLength");

	ABioBaseSquad_GetPathLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.OffsetPointOnPath
// (Defined, Public, HasDefaults)
// Parameters:
// int                            nFormationPosition             (Parm)
// struct FSLocation              nLoc                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioBaseSquad::OffsetPointOnPath(int nFormationPosition, const struct FSLocation& nLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OffsetPointOnPath");

	ABioBaseSquad_OffsetPointOnPath_Params params;
	params.nFormationPosition = nFormationPosition;
	params.nLoc = nLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindLocationBackFromLocation
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// float                          fUnrealUnits                   (Parm)
// struct FSLocation              StartLoc                       (Parm)
// struct FSLocation              TrailLoc                       (Parm, OutParm)
// int                            nPartyMember                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::FindLocationBackFromLocation(float fUnrealUnits, const struct FSLocation& StartLoc, int nPartyMember, struct FSLocation* TrailLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindLocationBackFromLocation");

	ABioBaseSquad_FindLocationBackFromLocation_Params params;
	params.fUnrealUnits = fUnrealUnits;
	params.StartLoc = StartLoc;
	params.nPartyMember = nPartyMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TrailLoc != nullptr)
		*TrailLoc = params.TrailLoc;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetLocationFromHead
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// float                          fUnrealUnits                   (Parm)
// struct FSLocation              TrailLoc                       (Parm, OutParm)
// int                            nPartyMember                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetLocationFromHead(float fUnrealUnits, int nPartyMember, struct FSLocation* TrailLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetLocationFromHead");

	ABioBaseSquad_GetLocationFromHead_Params params;
	params.fUnrealUnits = fUnrealUnits;
	params.nPartyMember = nPartyMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TrailLoc != nullptr)
		*TrailLoc = params.TrailLoc;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetLocationFromHeadForMember
// (Defined, Public, HasOutParms)
// Parameters:
// int                            nPartyMember                   (Parm)
// struct FSLocation              TrailLoc                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetLocationFromHeadForMember(int nPartyMember, struct FSLocation* TrailLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetLocationFromHeadForMember");

	ABioBaseSquad_GetLocationFromHeadForMember_Params params;
	params.nPartyMember = nPartyMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TrailLoc != nullptr)
		*TrailLoc = params.TrailLoc;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.ComputeEscapeLocation
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// int                            idx                            (Parm)
// struct FSLocation              NewLoc                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::ComputeEscapeLocation(int idx, struct FSLocation* NewLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ComputeEscapeLocation");

	ABioBaseSquad_ComputeEscapeLocation_Params params;
	params.idx = idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewLoc != nullptr)
		*NewLoc = params.NewLoc;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetMemberRotation
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioPawn*                P                              (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator ABioBaseSquad::GetMemberRotation(class ABioPawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberRotation");

	ABioBaseSquad_GetMemberRotation_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.ResetFollowing
// (Public)
// Parameters:
// class ABioPawn*                P                              (Parm)

void ABioBaseSquad::ResetFollowing(class ABioPawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ResetFollowing");

	ABioBaseSquad_ResetFollowing_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.TestPathSegments
// (Defined, Public, HasDefaults)
// Parameters:
// struct FSLocation              StartLoc                       (Parm)
// struct FSLocation              EndLoc                         (Parm)
// struct FSLocation              NewEndLoc                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::TestPathSegments(const struct FSLocation& StartLoc, const struct FSLocation& EndLoc, const struct FSLocation& NewEndLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.TestPathSegments");

	ABioBaseSquad_TestPathSegments_Params params;
	params.StartLoc = StartLoc;
	params.EndLoc = EndLoc;
	params.NewEndLoc = NewEndLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetEscapeLocation
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FSLocation              Loc                            (Parm)

void ABioBaseSquad::SetEscapeLocation(int Index, const struct FSLocation& Loc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetEscapeLocation");

	ABioBaseSquad_SetEscapeLocation_Params params;
	params.Index = Index;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetEscapeLocation
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FSLocation              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FSLocation ABioBaseSquad::GetEscapeLocation(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetEscapeLocation");

	ABioBaseSquad_GetEscapeLocation_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.EnterRestFormation
// (Event, Public)

void ABioBaseSquad::EnterRestFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.EnterRestFormation");

	ABioBaseSquad_EnterRestFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.EnterFollowFormation
// (Event, Public)

void ABioBaseSquad::EnterFollowFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.EnterFollowFormation");

	ABioBaseSquad_EnterFollowFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.ProcessLeaderStopped
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioBaseSquad::ProcessLeaderStopped(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ProcessLeaderStopped");

	ABioBaseSquad_ProcessLeaderStopped_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.InFollowFormation
// (Defined, Event, Public)

void ABioBaseSquad::InFollowFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.InFollowFormation");

	ABioBaseSquad_InFollowFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.InRestFormation
// (Defined, Event, Public)

void ABioBaseSquad::InRestFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.InRestFormation");

	ABioBaseSquad_InRestFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.ProcessPoint_UpdatePartyMemberData
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioBaseSquad::ProcessPoint_UpdatePartyMemberData(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ProcessPoint_UpdatePartyMemberData");

	ABioBaseSquad_ProcessPoint_UpdatePartyMemberData_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.UpDateFollowMarker
// (Public)

void ABioBaseSquad::UpDateFollowMarker()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.UpDateFollowMarker");

	ABioBaseSquad_UpDateFollowMarker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.ProcessLeadersPosition_State
// (Public)
// Parameters:
// TEnumAsByte<EPathNodeAction>   HowPointWasReached             (Parm)
// struct FVector                 Location_                      (Parm)
// struct FRotator                Orientation                    (Parm)
// struct FRotator                DirectionOfTravel              (Parm)
// struct FName                   ActionOn                       (OptionalParm, Parm)

void ABioBaseSquad::ProcessLeadersPosition_State(TEnumAsByte<EPathNodeAction> HowPointWasReached, const struct FVector& Location_, const struct FRotator& Orientation, const struct FRotator& DirectionOfTravel, const struct FName& ActionOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ProcessLeadersPosition_State");

	ABioBaseSquad_ProcessLeadersPosition_State_Params params;
	params.HowPointWasReached = HowPointWasReached;
	params.Location_ = Location_;
	params.Orientation = Orientation;
	params.DirectionOfTravel = DirectionOfTravel;
	params.ActionOn = ActionOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.TestAndInvertFormation
// (Defined, Public, HasDefaults)
// Parameters:
// int                            Node1                          (Parm)
// int                            Node2                          (Parm)

void ABioBaseSquad::TestAndInvertFormation(int Node1, int Node2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.TestAndInvertFormation");

	ABioBaseSquad_TestAndInvertFormation_Params params;
	params.Node1 = Node1;
	params.Node2 = Node2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.AddPathNode
// (Defined, Public)
// Parameters:
// TEnumAsByte<EPathNodeAction>   HowPointWasReached             (Parm)
// struct FVector                 Location_                      (Parm)
// struct FRotator                Orientation                    (Parm)
// struct FRotator                DirectionOfTravel              (Parm)
// struct FName                   ActionOn                       (OptionalParm, Parm)

void ABioBaseSquad::AddPathNode(TEnumAsByte<EPathNodeAction> HowPointWasReached, const struct FVector& Location_, const struct FRotator& Orientation, const struct FRotator& DirectionOfTravel, const struct FName& ActionOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AddPathNode");

	ABioBaseSquad_AddPathNode_Params params;
	params.HowPointWasReached = HowPointWasReached;
	params.Location_ = Location_;
	params.Orientation = Orientation;
	params.DirectionOfTravel = DirectionOfTravel;
	params.ActionOn = ActionOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.Tick_Follow
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioBaseSquad::Tick_Follow(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.Tick_Follow");

	ABioBaseSquad_Tick_Follow_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.Leader_Changed
// (Defined, Event, Public)
// Parameters:
// class APawn*                   OldLeader                      (Parm)
// class APawn*                   NewLeader                      (Parm)

void ABioBaseSquad::Leader_Changed(class APawn* OldLeader, class APawn* NewLeader)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.Leader_Changed");

	ABioBaseSquad_Leader_Changed_Params params;
	params.OldLeader = OldLeader;
	params.NewLeader = NewLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.ClearPathHistory
// (Defined, Event, Public)

void ABioBaseSquad::ClearPathHistory()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ClearPathHistory");

	ABioBaseSquad_ClearPathHistory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.RotateSquad
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<ESquadRotation>    eRotationDirection             (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::RotateSquad(TEnumAsByte<ESquadRotation> eRotationDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.RotateSquad");

	ABioBaseSquad_RotateSquad_Params params;
	params.eRotationDirection = eRotationDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetNextMemberInDirection
// (Final, Defined, Private)
// Parameters:
// int                            CurrentIndex                   (Parm)
// TEnumAsByte<ESquadRotation>    eRotationDirection             (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::GetNextMemberInDirection(int CurrentIndex, TEnumAsByte<ESquadRotation> eRotationDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNextMemberInDirection");

	ABioBaseSquad_GetNextMemberInDirection_Params params;
	params.CurrentIndex = CurrentIndex;
	params.eRotationDirection = eRotationDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetPrevMember
// (Defined, Public)
// Parameters:
// int                            CurrentIndex                   (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::GetPrevMember(int CurrentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetPrevMember");

	ABioBaseSquad_GetPrevMember_Params params;
	params.CurrentIndex = CurrentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetNextMember
// (Defined, Public)
// Parameters:
// int                            CurrentIndex                   (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::GetNextMember(int CurrentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNextMember");

	ABioBaseSquad_GetNextMember_Params params;
	params.CurrentIndex = CurrentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.MemberRemoved
// (Event, Public)
// Parameters:
// class APawn*                   oPawn                          (Parm)

void ABioBaseSquad::MemberRemoved(class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.MemberRemoved");

	ABioBaseSquad_MemberRemoved_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.MemberAdded
// (Event, Public)
// Parameters:
// int                            nIndex                         (Parm)

void ABioBaseSquad::MemberAdded(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.MemberAdded");

	ABioBaseSquad_MemberAdded_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.AddMemberInternal
// (Defined, Protected, HasDefaults)
// Parameters:
// class APawn*                   Pawn                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::AddMemberInternal(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AddMemberInternal");

	ABioBaseSquad_AddMemberInternal_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.AddMember
// (Defined, Public)
// Parameters:
// class APawn*                   Pawn                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::AddMember(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AddMember");

	ABioBaseSquad_AddMember_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetInRestFormation
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetInRestFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetInRestFormation");

	ABioBaseSquad_GetInRestFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetRestOrientationType
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EOrientationType>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOrientationType> ABioBaseSquad::GetRestOrientationType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetRestOrientationType");

	ABioBaseSquad_GetRestOrientationType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetFollowOrientationType
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EOrientationType>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOrientationType> ABioBaseSquad::GetFollowOrientationType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetFollowOrientationType");

	ABioBaseSquad_GetFollowOrientationType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetOrientationType
// (Defined, Public)
// Parameters:
// TEnumAsByte<EOrientationType>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOrientationType> ABioBaseSquad::GetOrientationType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetOrientationType");

	ABioBaseSquad_GetOrientationType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetRestFormation
// (Defined, Event, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioBaseSquad::GetRestFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetRestFormation");

	ABioBaseSquad_GetRestFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetFollowFormation
// (Defined, Event, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioBaseSquad::GetFollowFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetFollowFormation");

	ABioBaseSquad_GetFollowFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetCanUseOffsetPositions
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetCanUseOffsetPositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetCanUseOffsetPositions");

	ABioBaseSquad_GetCanUseOffsetPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetFormation
// (Defined, Event, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioBaseSquad::GetFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetFormation");

	ABioBaseSquad_GetFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.BioBeginPlay
// (Defined, Event, Public)

void ABioBaseSquad::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.BioBeginPlay");

	ABioBaseSquad_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.Initalize
// (Defined, Event, Public)

void ABioBaseSquad::Initalize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.Initalize");

	ABioBaseSquad_Initalize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnFactionChanged
// (Event, Public)
// Parameters:
// class UClass*                  oOldFaction                    (Parm)
// class UClass*                  oNewFaction                    (Parm)

void ABioBaseSquad::OnFactionChanged(class UClass* oOldFaction, class UClass* oNewFaction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnFactionChanged");

	ABioBaseSquad_OnFactionChanged_Params params;
	params.oOldFaction = oOldFaction;
	params.oNewFaction = oNewFaction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetNumberOfLiveMembers
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::GetNumberOfLiveMembers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNumberOfLiveMembers");

	ABioBaseSquad_GetNumberOfLiveMembers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetFaction
// (Final, Native, Public)
// Parameters:
// class UClass*                  oNewFaction                    (Parm)

void ABioBaseSquad::SetFaction(class UClass* oNewFaction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetFaction");

	ABioBaseSquad_SetFaction_Params params;
	params.oNewFaction = oNewFaction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.DebugDisplay
// (Native, Public)

void ABioBaseSquad::DebugDisplay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.DebugDisplay");

	ABioBaseSquad_DebugDisplay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetPawnBehavior
// (Native, Public)
// Parameters:
// class AActor*                  oActor                         (Parm)
// class UBioEpicPawnBehavior*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioEpicPawnBehavior* ABioBaseSquad::GetPawnBehavior(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetPawnBehavior");

	ABioBaseSquad_GetPawnBehavior_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetSquad
// (Native, Public)
// Parameters:
// class AActor*                  oActor                         (Parm)
// class ABioBaseSquad*           ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioBaseSquad* ABioBaseSquad::GetSquad(class AActor* oActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSquad");

	ABioBaseSquad_GetSquad_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.CancelCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)

void ABioBaseSquad::CancelCapability(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.CancelCapability");

	ABioBaseSquad_CancelCapability_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetCapabilityPowerBuildUp
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioBaseSquad::GetCapabilityPowerBuildUp(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetCapabilityPowerBuildUp");

	ABioBaseSquad_GetCapabilityPowerBuildUp_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetCapabilityImpactRadius
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioBaseSquad::GetCapabilityImpactRadius(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetCapabilityImpactRadius");

	ABioBaseSquad_GetCapabilityImpactRadius_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetCapabilityIsEnabled
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetCapabilityIsEnabled(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetCapabilityIsEnabled");

	ABioBaseSquad_GetCapabilityIsEnabled_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetCapabilityCoolDownTimeRemaining
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioBaseSquad::GetCapabilityCoolDownTimeRemaining(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetCapabilityCoolDownTimeRemaining");

	ABioBaseSquad_GetCapabilityCoolDownTimeRemaining_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.AddCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          fReqStabilityRatio             (Parm)
// float                          fAbortStabilityRatio           (Parm)
// float                          fTimeOut                       (Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioBaseSquad::AddCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AddCapability");

	ABioBaseSquad_AddCapability_Params params;
	params.oCapability = oCapability;
	params.fReqStabilityRatio = fReqStabilityRatio;
	params.fAbortStabilityRatio = fAbortStabilityRatio;
	params.fTimeOut = fTimeOut;
	params.oTarget = oTarget;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.DoCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          fReqStabilityRatio             (Parm)
// float                          fAbortStabilityRatio           (Parm)
// float                          fTimeOut                       (Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioBaseSquad::DoCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.DoCapability");

	ABioBaseSquad_DoCapability_Params params;
	params.oCapability = oCapability;
	params.fReqStabilityRatio = fReqStabilityRatio;
	params.fAbortStabilityRatio = fAbortStabilityRatio;
	params.fTimeOut = fTimeOut;
	params.oTarget = oTarget;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetBestFor
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapMode>       nMode                          (Parm)
// struct FName                   nmTechnique                    (Parm)
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class APawn*>           aoIgnore                       (OptionalParm, Parm, NeedCtorLink)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioBaseSquad::GetBestFor(TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetBestFor");

	ABioBaseSquad_GetBestFor_Params params;
	params.nMode = nMode;
	params.nmTechnique = nmTechnique;
	params.aoIgnore = aoIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FilterByMapped
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::FilterByMapped(TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByMapped");

	ABioBaseSquad_FilterByMapped_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FilterByDeliveredPowerPendingActivation
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)

void ABioBaseSquad::FilterByDeliveredPowerPendingActivation(TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByDeliveredPowerPendingActivation");

	ABioBaseSquad_FilterByDeliveredPowerPendingActivation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.FilterByDeliverablePower
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)

void ABioBaseSquad::FilterByDeliverablePower(TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByDeliverablePower");

	ABioBaseSquad_FilterByDeliverablePower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.FilterByMember
// (Native, Public, HasOutParms)
// Parameters:
// class APawn*                   oMember                        (Parm)
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)

void ABioBaseSquad::FilterByMember(class APawn* oMember, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByMember");

	ABioBaseSquad_FilterByMember_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.FilterByRange
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vTarget                        (Parm)
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// TArray<class APawn*>           aoIgnore                       (OptionalParm, Parm, NeedCtorLink)

void ABioBaseSquad::FilterByRange(const struct FVector& vTarget, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByRange");

	ABioBaseSquad_FilterByRange_Params params;
	params.vTarget = vTarget;
	params.aoIgnore = aoIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.FilterByIgnorelist
// (Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// TArray<class APawn*>           aoIgnore                       (Parm, NeedCtorLink)

void ABioBaseSquad::FilterByIgnorelist(TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByIgnorelist");

	ABioBaseSquad_FilterByIgnorelist_Params params;
	params.aoIgnore = aoIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.FilterByTechnique
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapMode>       nMode                          (Parm)
// struct FName                   nmTechnique                    (Parm)
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// TArray<class APawn*>           aoIgnore                       (OptionalParm, Parm, NeedCtorLink)

void ABioBaseSquad::FilterByTechnique(TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByTechnique");

	ABioBaseSquad_FilterByTechnique_Params params;
	params.nMode = nMode;
	params.nmTechnique = nmTechnique;
	params.aoIgnore = aoIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.FilterByCapType
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapMode>       nMode                          (Parm)
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// TArray<class APawn*>           aoIgnore                       (OptionalParm, Parm, NeedCtorLink)

void ABioBaseSquad::FilterByCapType(TEnumAsByte<EBioCapMode> nMode, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByCapType");

	ABioBaseSquad_FilterByCapType_Params params;
	params.nMode = nMode;
	params.aoIgnore = aoIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.FilterByCapability
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapabilityTypes> CapType                        (Parm)
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// TArray<class APawn*>           aoIgnore                       (OptionalParm, Parm, NeedCtorLink)

void ABioBaseSquad::FilterByCapability(TEnumAsByte<EBioCapabilityTypes> CapType, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FilterByCapability");

	ABioBaseSquad_FilterByCapability_Params params;
	params.CapType = CapType;
	params.aoIgnore = aoIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.GetSquadMembersCapabilities
// (Native, Public, HasOutParms)
// Parameters:
// class APawn*                   oMember                        (Parm)
// TEnumAsByte<EBioCapabilityTypes> CapType                        (Parm)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// bool                           bFilter                        (OptionalParm, Parm)

void ABioBaseSquad::GetSquadMembersCapabilities(class APawn* oMember, TEnumAsByte<EBioCapabilityTypes> CapType, bool bFilter, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSquadMembersCapabilities");

	ABioBaseSquad_GetSquadMembersCapabilities_Params params;
	params.oMember = oMember;
	params.CapType = CapType;
	params.bFilter = bFilter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.GetSquadCapabilities
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapabilityTypes> CapType                        (Parm)
// TArray<class UBioCapability*>  aoOutCaps                      (Parm, OutParm, NeedCtorLink)
// bool                           bFilter                        (OptionalParm, Parm)

void ABioBaseSquad::GetSquadCapabilities(TEnumAsByte<EBioCapabilityTypes> CapType, bool bFilter, TArray<class UBioCapability*>* aoOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSquadCapabilities");

	ABioBaseSquad_GetSquadCapabilities_Params params;
	params.CapType = CapType;
	params.bFilter = bFilter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoOutCaps != nullptr)
		*aoOutCaps = params.aoOutCaps;
}


// Function BIOC_Base.BioBaseSquad.RecomputeCapabilities
// (Native, Public)

void ABioBaseSquad::RecomputeCapabilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.RecomputeCapabilities");

	ABioBaseSquad_RecomputeCapabilities_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.BySortedBestRange
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// class UBioCapability*          oCap                           (Parm, OutParm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)

void ABioBaseSquad::BySortedBestRange(class APawn* oTarget, const struct FVector& vTarget, TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.BySortedBestRange");

	ABioBaseSquad_BySortedBestRange_Params params;
	params.oTarget = oTarget;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (oCap != nullptr)
		*oCap = params.oCap;
}


// Function BIOC_Base.BioBaseSquad.BySortedRank
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// class UBioCapability*          oCap                           (Parm, OutParm)

void ABioBaseSquad::BySortedRank(TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.BySortedRank");

	ABioBaseSquad_BySortedRank_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (oCap != nullptr)
		*oCap = params.oCap;
}


// Function BIOC_Base.BioBaseSquad.ByTechnique
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// class UBioCapability*          oCap                           (Parm, OutParm)
// TEnumAsByte<EBioCapabilityTypes> nCapType                       (OptionalParm, Parm)
// TEnumAsByte<EBioCapMode>       nMode                          (OptionalParm, Parm)
// struct FName                   nmTechnique                    (OptionalParm, Parm)

void ABioBaseSquad::ByTechnique(TEnumAsByte<EBioCapabilityTypes> nCapType, TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ByTechnique");

	ABioBaseSquad_ByTechnique_Params params;
	params.nCapType = nCapType;
	params.nMode = nMode;
	params.nmTechnique = nmTechnique;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (oCap != nullptr)
		*oCap = params.oCap;
}


// Function BIOC_Base.BioBaseSquad.ByCapabilitys
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// class UBioCapability*          oCap                           (Parm, OutParm)

void ABioBaseSquad::ByCapabilitys(TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ByCapabilitys");

	ABioBaseSquad_ByCapabilitys_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;
	if (oCap != nullptr)
		*oCap = params.oCap;
}


// Function BIOC_Base.BioBaseSquad.IsCapabilityValid
// (Native, Public)
// Parameters:
// class UBioCapability*          oCap                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsCapabilityValid(class UBioCapability* oCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsCapabilityValid");

	ABioBaseSquad_IsCapabilityValid_Params params;
	params.oCap = oCap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsInRange
// (Native, Public)
// Parameters:
// class UBioCapability*          oCap                           (Parm)
// class APawn*                   oPawn                          (OptionalParm, Parm)
// struct FVector                 vLocation                      (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::IsInRange(class UBioCapability* oCap, class APawn* oPawn, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsInRange");

	ABioBaseSquad_IsInRange_Params params;
	params.oCap = oCap;
	params.oPawn = oPawn;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.CountOfMembers
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapMode>       nMode                          (Parm)
// struct FName                   nmTechnique                    (Parm)
// TArray<class UBioCapability*>  aoInCaps                       (Const, Parm, OutParm, NeedCtorLink)
// TArray<class APawn*>           aoIgnore                       (OptionalParm, Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::CountOfMembers(TEnumAsByte<EBioCapMode> nMode, const struct FName& nmTechnique, TArray<class APawn*> aoIgnore, TArray<class UBioCapability*>* aoInCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.CountOfMembers");

	ABioBaseSquad_CountOfMembers_Params params;
	params.nMode = nMode;
	params.nmTechnique = nmTechnique;
	params.aoIgnore = aoIgnore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aoInCaps != nullptr)
		*aoInCaps = params.aoInCaps;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetStrategyList
// (Public)
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FName> ABioBaseSquad::GetStrategyList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetStrategyList");

	ABioBaseSquad_GetStrategyList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.StopFollowerHoldPosition
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::StopFollowerHoldPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.StopFollowerHoldPosition");

	ABioBaseSquad_StopFollowerHoldPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.StartFollowerHoldPosition
// (Native, Public)
// Parameters:
// TArray<class ABioSquadHoldMarker*> aoHoldPositions                (Parm, NeedCtorLink)
// bool                           bLeaderHoldPosition            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::StartFollowerHoldPosition(TArray<class ABioSquadHoldMarker*> aoHoldPositions, bool bLeaderHoldPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.StartFollowerHoldPosition");

	ABioBaseSquad_StartFollowerHoldPosition_Params params;
	params.aoHoldPositions = aoHoldPositions;
	params.bLeaderHoldPosition = bLeaderHoldPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindSquadMemberByTag
// (Native, Public)
// Parameters:
// struct FName                   nmTag                          (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::FindSquadMemberByTag(const struct FName& nmTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindSquadMemberByTag");

	ABioBaseSquad_FindSquadMemberByTag_Params params;
	params.nmTag = nmTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FreeCoverSpots
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::FreeCoverSpots()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FreeCoverSpots");

	ABioBaseSquad_FreeCoverSpots_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.OnSpawnOrLevelLoad
// (Defined, Event, Public)
// Parameters:
// bool                           bCalledFromSpawn               (Parm)

void ABioBaseSquad::OnSpawnOrLevelLoad(bool bCalledFromSpawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnSpawnOrLevelLoad");

	ABioBaseSquad_OnSpawnOrLevelLoad_Params params;
	params.bCalledFromSpawn = bCalledFromSpawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnProximityAlarm
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioBaseSquad::OnProximityAlarm(class APawn* oMember, class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnProximityAlarm");

	ABioBaseSquad_OnProximityAlarm_Params params;
	params.oMember = oMember;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnSquadSeen
// (Defined, Event, Public)
// Parameters:
// class ABioBaseSquad*           oSquad                         (Parm)

void ABioBaseSquad::OnSquadSeen(class ABioBaseSquad* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnSquadSeen");

	ABioBaseSquad_OnSquadSeen_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnActionComplete_Movement
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// struct FName                   nmAction                       (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oTarget                        (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioBaseSquad::OnActionComplete_Movement(class APawn* oMember, const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnActionComplete_Movement");

	ABioBaseSquad_OnActionComplete_Movement_Params params;
	params.oMember = oMember;
	params.nmAction = nmAction;
	params.nReason = nReason;
	params.oTarget = oTarget;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnActionComplete_Combat
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// struct FName                   nmAction                       (Parm)
// struct FName                   nmTechnique                    (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oLastTarget                    (Parm)

void ABioBaseSquad::OnActionComplete_Combat(class APawn* oMember, const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnActionComplete_Combat");

	ABioBaseSquad_OnActionComplete_Combat_Params params;
	params.oMember = oMember;
	params.nmAction = nmAction;
	params.nmTechnique = nmTechnique;
	params.nReason = nReason;
	params.oLastTarget = oLastTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnDamaged
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioBaseSquad::OnDamaged(class APawn* oMember, class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnDamaged");

	ABioBaseSquad_OnDamaged_Params params;
	params.oMember = oMember;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnCastAt
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmPower                        (Parm)

void ABioBaseSquad::OnCastAt(class APawn* oMember, class APawn* oAttacker, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnCastAt");

	ABioBaseSquad_OnCastAt_Params params;
	params.oMember = oMember;
	params.oAttacker = oAttacker;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnAttacked
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioBaseSquad::OnAttacked(class APawn* oMember, class APawn* oAttacker, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnAttacked");

	ABioBaseSquad_OnAttacked_Params params;
	params.oMember = oMember;
	params.oAttacker = oAttacker;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnAbilityDisabled
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioBaseSquad::OnAbilityDisabled(class APawn* oMember, int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnAbilityDisabled");

	ABioBaseSquad_OnAbilityDisabled_Params params;
	params.oMember = oMember;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnAbilityEnabled
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioBaseSquad::OnAbilityEnabled(class APawn* oMember, int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnAbilityEnabled");

	ABioBaseSquad_OnAbilityEnabled_Params params;
	params.oMember = oMember;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnNoCombatAction
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)

void ABioBaseSquad::OnNoCombatAction(class APawn* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnNoCombatAction");

	ABioBaseSquad_OnNoCombatAction_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnDeath
// (Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class AController*             oKiller                        (Parm)

void ABioBaseSquad::OnDeath(class APawn* oMember, class AController* oKiller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnDeath");

	ABioBaseSquad_OnDeath_Params params;
	params.oMember = oMember;
	params.oKiller = oKiller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.PushMoveWithLocking
// (Public)
// Parameters:
// class ABioAiController*        oMember                        (Parm)
// class AActor*                  oTarget                        (Parm)
// float                          fTolerance                     (OptionalParm, Parm)
// bool                           bWalking                       (OptionalParm, Parm)
// float                          fMovementDelay                 (OptionalParm, Parm)
// bool                           bCrouch                        (OptionalParm, Parm)

void ABioBaseSquad::PushMoveWithLocking(class ABioAiController* oMember, class AActor* oTarget, float fTolerance, bool bWalking, float fMovementDelay, bool bCrouch)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.PushMoveWithLocking");

	ABioBaseSquad_PushMoveWithLocking_Params params;
	params.oMember = oMember;
	params.oTarget = oTarget;
	params.fTolerance = fTolerance;
	params.bWalking = bWalking;
	params.fMovementDelay = fMovementDelay;
	params.bCrouch = bCrouch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.onSquadCoverEvaluate
// (Event, Public)
// Parameters:
// class APawn*                   oWho                           (Parm)
// class UBioCoverInterface*      oCover                         (Parm)
// int                            nSlot                          (Parm)

void ABioBaseSquad::onSquadCoverEvaluate(class APawn* oWho, class UBioCoverInterface* oCover, int nSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.onSquadCoverEvaluate");

	ABioBaseSquad_onSquadCoverEvaluate_Params params;
	params.oWho = oWho;
	params.oCover = oCover;
	params.nSlot = nSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetNearestCoverInRangeOfPoint
// (Native, Public, HasOutParms)
// Parameters:
// class APawn*                   pSquadPawn                     (Parm)
// struct FVector                 vPosition                      (Parm)
// float                          fSearchRange                   (Parm)
// struct FCoverRecord            stCoverRecord                  (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetNearestCoverInRangeOfPoint(class APawn* pSquadPawn, const struct FVector& vPosition, float fSearchRange, struct FCoverRecord* stCoverRecord)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetNearestCoverInRangeOfPoint");

	ABioBaseSquad_GetNearestCoverInRangeOfPoint_Params params;
	params.pSquadPawn = pSquadPawn;
	params.vPosition = vPosition;
	params.fSearchRange = fSearchRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stCoverRecord != nullptr)
		*stCoverRecord = params.stCoverRecord;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindSquadCoverNearobject
// (Native, Public)
// Parameters:
// class AActor*                  oObject                        (Parm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fMaxRange                      (Parm)
// class APawn*                   oWhoSeeksCover                 (Parm)
// class AActor*                  NoCoverAgainst                 (OptionalParm, Parm)
// int                            nMinRank                       (OptionalParm, Parm)
// struct FCoverRecord            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoverRecord ABioBaseSquad::FindSquadCoverNearobject(class AActor* oObject, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindSquadCoverNearobject");

	ABioBaseSquad_FindSquadCoverNearobject_Params params;
	params.oObject = oObject;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fMaxRange = fMaxRange;
	params.oWhoSeeksCover = oWhoSeeksCover;
	params.NoCoverAgainst = NoCoverAgainst;
	params.nMinRank = nMinRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindSquadCoverNearPoint
// (Native, Public)
// Parameters:
// struct FVector                 vPoint                         (Parm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fMaxRange                      (Parm)
// class APawn*                   oWhoSeeksCover                 (Parm)
// class AActor*                  NoCoverAgainst                 (OptionalParm, Parm)
// int                            nMinRank                       (OptionalParm, Parm)
// struct FCoverRecord            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoverRecord ABioBaseSquad::FindSquadCoverNearPoint(const struct FVector& vPoint, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindSquadCoverNearPoint");

	ABioBaseSquad_FindSquadCoverNearPoint_Params params;
	params.vPoint = vPoint;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fMaxRange = fMaxRange;
	params.oWhoSeeksCover = oWhoSeeksCover;
	params.NoCoverAgainst = NoCoverAgainst;
	params.nMinRank = nMinRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindCoverNearobject
// (Native, Public)
// Parameters:
// class AActor*                  oObject                        (Parm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fMaxRange                      (Parm)
// class APawn*                   oWhoSeeksCover                 (Parm)
// class AActor*                  NoCoverAgainst                 (OptionalParm, Parm)
// int                            nMinRank                       (OptionalParm, Parm)
// struct FCoverRecord            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoverRecord ABioBaseSquad::FindCoverNearobject(class AActor* oObject, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindCoverNearobject");

	ABioBaseSquad_FindCoverNearobject_Params params;
	params.oObject = oObject;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fMaxRange = fMaxRange;
	params.oWhoSeeksCover = oWhoSeeksCover;
	params.NoCoverAgainst = NoCoverAgainst;
	params.nMinRank = nMinRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindCoverNearPoint
// (Native, Public)
// Parameters:
// struct FVector                 vPoint                         (Parm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fMaxRange                      (Parm)
// class APawn*                   oWhoSeeksCover                 (Parm)
// class AActor*                  NoCoverAgainst                 (OptionalParm, Parm)
// int                            nMinRank                       (OptionalParm, Parm)
// struct FCoverRecord            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoverRecord ABioBaseSquad::FindCoverNearPoint(const struct FVector& vPoint, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindCoverNearPoint");

	ABioBaseSquad_FindCoverNearPoint_Params params;
	params.vPoint = vPoint;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fMaxRange = fMaxRange;
	params.oWhoSeeksCover = oWhoSeeksCover;
	params.NoCoverAgainst = NoCoverAgainst;
	params.nMinRank = nMinRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.AllPlaypen
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class ANavigationPoint*        oNavPoint                      (Parm, OutParm)
// class UClass*                  NavClass                       (OptionalParm, Parm)

void ABioBaseSquad::AllPlaypen(class UClass* NavClass, class ANavigationPoint** oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AllPlaypen");

	ABioBaseSquad_AllPlaypen_Params params;
	params.NavClass = NavClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oNavPoint != nullptr)
		*oNavPoint = params.oNavPoint;
}


// Function BIOC_Base.BioBaseSquad.ListNavNodesNearWithLOS
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// class ANavigationPoint*        oNavPoint                      (Parm, OutParm)
// class AActor*                  oNear                          (OptionalParm, Parm)
// struct FVector                 vNear                          (OptionalParm, Parm)
// TArray<class ANavigationPoint*> aoIgnore                       (OptionalParm, Parm, NeedCtorLink)
// class UClass*                  NavClass                       (OptionalParm, Parm)

void ABioBaseSquad::ListNavNodesNearWithLOS(class AActor* oTarget, class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, class ANavigationPoint** oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ListNavNodesNearWithLOS");

	ABioBaseSquad_ListNavNodesNearWithLOS_Params params;
	params.oTarget = oTarget;
	params.oNear = oNear;
	params.vNear = vNear;
	params.aoIgnore = aoIgnore;
	params.NavClass = NavClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oNavPoint != nullptr)
		*oNavPoint = params.oNavPoint;
}


// Function BIOC_Base.BioBaseSquad.ListNavNodesNear
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class ANavigationPoint*        oNavPoint                      (Parm, OutParm)
// class AActor*                  oNear                          (OptionalParm, Parm)
// struct FVector                 vNear                          (OptionalParm, Parm)
// TArray<class ANavigationPoint*> aoIgnore                       (OptionalParm, Parm, NeedCtorLink)
// class UClass*                  NavClass                       (OptionalParm, Parm)

void ABioBaseSquad::ListNavNodesNear(class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, class ANavigationPoint** oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ListNavNodesNear");

	ABioBaseSquad_ListNavNodesNear_Params params;
	params.oNear = oNear;
	params.vNear = vNear;
	params.aoIgnore = aoIgnore;
	params.NavClass = NavClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oNavPoint != nullptr)
		*oNavPoint = params.oNavPoint;
}


// Function BIOC_Base.BioBaseSquad.FindNavNodeNearWithLOS
// (Final, Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// class AActor*                  oNear                          (OptionalParm, Parm)
// struct FVector                 vNear                          (OptionalParm, Parm)
// TArray<class ANavigationPoint*> aoIgnore                       (OptionalParm, Parm, NeedCtorLink)
// class UClass*                  NavClass                       (OptionalParm, Parm)
// float                          fMaxRange                      (OptionalParm, Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ABioBaseSquad::FindNavNodeNearWithLOS(class AActor* oTarget, class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, float fMaxRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindNavNodeNearWithLOS");

	ABioBaseSquad_FindNavNodeNearWithLOS_Params params;
	params.oTarget = oTarget;
	params.oNear = oNear;
	params.vNear = vNear;
	params.aoIgnore = aoIgnore;
	params.NavClass = NavClass;
	params.fMaxRange = fMaxRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.FindNavNodeNear
// (Final, Native, Public)
// Parameters:
// class AActor*                  oNear                          (OptionalParm, Parm)
// struct FVector                 vNear                          (OptionalParm, Parm)
// TArray<class ANavigationPoint*> aoIgnore                       (OptionalParm, Parm, NeedCtorLink)
// class UClass*                  NavClass                       (OptionalParm, Parm)
// float                          fMaxRange                      (OptionalParm, Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ABioBaseSquad::FindNavNodeNear(class AActor* oNear, const struct FVector& vNear, TArray<class ANavigationPoint*> aoIgnore, class UClass* NavClass, float fMaxRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.FindNavNodeNear");

	ABioBaseSquad_FindNavNodeNear_Params params;
	params.oNear = oNear;
	params.vNear = vNear;
	params.aoIgnore = aoIgnore;
	params.NavClass = NavClass;
	params.fMaxRange = fMaxRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.ReevaluateRankOfCover
// (Native, Public)
// Parameters:
// class UBioCoverInterface*      oCover                         (Parm)
// struct FVector                 vUserLocation                  (Parm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fPawnHeight                    (Parm)
// class APawn*                   oWhoSeeksCover                 (Parm)
// class AActor*                  NoCoverAgainst                 (Parm)
// class AController*             oCtrl                          (OptionalParm, Parm)
// float                          fMaxDist                       (OptionalParm, Parm)
// int                            nMinRank                       (OptionalParm, Parm)
// struct FCoverRecord            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoverRecord ABioBaseSquad::ReevaluateRankOfCover(class UBioCoverInterface* oCover, const struct FVector& vUserLocation, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, class AController* oCtrl, float fMaxDist, int nMinRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ReevaluateRankOfCover");

	ABioBaseSquad_ReevaluateRankOfCover_Params params;
	params.oCover = oCover;
	params.vUserLocation = vUserLocation;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fPawnHeight = fPawnHeight;
	params.oWhoSeeksCover = oWhoSeeksCover;
	params.NoCoverAgainst = NoCoverAgainst;
	params.oCtrl = oCtrl;
	params.fMaxDist = fMaxDist;
	params.nMinRank = nMinRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SelectBestCover
// (Native, Public)
// Parameters:
// class APawn*                   oWhoSeeksCover                 (Parm)
// class AActor*                  NoCoverAgainst                 (Parm)
// TArray<struct FCoverRecord>    aoCoverSlots                   (Parm, NeedCtorLink)
// int                            nMinRank                       (OptionalParm, Parm)
// struct FCoverRecord            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoverRecord ABioBaseSquad::SelectBestCover(class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, TArray<struct FCoverRecord> aoCoverSlots, int nMinRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SelectBestCover");

	ABioBaseSquad_SelectBestCover_Params params;
	params.oWhoSeeksCover = oWhoSeeksCover;
	params.NoCoverAgainst = NoCoverAgainst;
	params.aoCoverSlots = aoCoverSlots;
	params.nMinRank = nMinRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetAllCoverSlots
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vPoint                         (Parm)
// float                          fMaxDist                       (Parm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fPawnHeight                    (Parm)
// TArray<class AActor*>          aoCoverObjects                 (Parm, NeedCtorLink)
// class AController*             oClaimingCover                 (Parm)
// TArray<struct FCoverRecord>    out_aoCoverSlots               (Parm, OutParm, NeedCtorLink)

void ABioBaseSquad::GetAllCoverSlots(const struct FVector& vPoint, float fMaxDist, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, TArray<class AActor*> aoCoverObjects, class AController* oClaimingCover, TArray<struct FCoverRecord>* out_aoCoverSlots)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetAllCoverSlots");

	ABioBaseSquad_GetAllCoverSlots_Params params;
	params.vPoint = vPoint;
	params.fMaxDist = fMaxDist;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fPawnHeight = fPawnHeight;
	params.aoCoverObjects = aoCoverObjects;
	params.oClaimingCover = oClaimingCover;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_aoCoverSlots != nullptr)
		*out_aoCoverSlots = params.out_aoCoverSlots;
}


// Function BIOC_Base.BioBaseSquad.GetRankOfSlot
// (Native, Public, HasOutParms)
// Parameters:
// class UBioCoverInterface*      oCover                         (Parm)
// struct FCoverRecord            oRec                           (Parm, OutParm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fPawnHeight                    (Parm)
// class AController*             oCtrl                          (OptionalParm, Parm)

void ABioBaseSquad::GetRankOfSlot(class UBioCoverInterface* oCover, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, class AController* oCtrl, struct FCoverRecord* oRec)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetRankOfSlot");

	ABioBaseSquad_GetRankOfSlot_Params params;
	params.oCover = oCover;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fPawnHeight = fPawnHeight;
	params.oCtrl = oCtrl;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oRec != nullptr)
		*oRec = params.oRec;
}


// Function BIOC_Base.BioBaseSquad.GetRankedCover
// (Native, Public, HasOutParms)
// Parameters:
// class UBioCoverInterface*      oCover                         (Parm)
// struct FVector                 vUserLocation                  (Parm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// TArray<struct FCoverRecord>    out_aoCoverSlots               (Parm, OutParm, NeedCtorLink)
// float                          fPawnHeight                    (Parm)
// bool                           bSort                          (OptionalParm, Parm)
// class AController*             oCtrl                          (OptionalParm, Parm)
// float                          fMaxDist                       (OptionalParm, Parm)

void ABioBaseSquad::GetRankedCover(class UBioCoverInterface* oCover, const struct FVector& vUserLocation, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, bool bSort, class AController* oCtrl, float fMaxDist, TArray<struct FCoverRecord>* out_aoCoverSlots)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetRankedCover");

	ABioBaseSquad_GetRankedCover_Params params;
	params.oCover = oCover;
	params.vUserLocation = vUserLocation;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fPawnHeight = fPawnHeight;
	params.bSort = bSort;
	params.oCtrl = oCtrl;
	params.fMaxDist = fMaxDist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_aoCoverSlots != nullptr)
		*out_aoCoverSlots = params.out_aoCoverSlots;
}


// Function BIOC_Base.BioBaseSquad.AllActionsComplete
// (Event, Public)
// Parameters:
// class APawn*                   Who                            (Parm)

void ABioBaseSquad::AllActionsComplete(class APawn* Who)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AllActionsComplete");

	ABioBaseSquad_AllActionsComplete_Params params;
	params.Who = Who;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GenerateAllActionsComplete
// (Final, Native, Public)
// Parameters:
// class APawn*                   oPawn                          (Parm)

void ABioBaseSquad::GenerateAllActionsComplete(class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GenerateAllActionsComplete");

	ABioBaseSquad_GenerateAllActionsComplete_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.IsPositionInPlaypen
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vPos                           (Const, Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsPositionInPlaypen(struct FVector* vPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsPositionInPlaypen");

	ABioBaseSquad_IsPositionInPlaypen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vPos != nullptr)
		*vPos = params.vPos;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.HasPlaypen
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::HasPlaypen()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.HasPlaypen");

	ABioBaseSquad_HasPlaypen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsNavigationPointInPlaypen
// (Native, Public)
// Parameters:
// class ANavigationPoint*        oNav                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsNavigationPointInPlaypen(class ANavigationPoint* oNav)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsNavigationPointInPlaypen");

	ABioBaseSquad_IsNavigationPointInPlaypen_Params params;
	params.oNav = oNav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsNavReferenceInPlaypen
// (Native, Public)
// Parameters:
// struct FNavReference           oNav                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsNavReferenceInPlaypen(const struct FNavReference& oNav)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsNavReferenceInPlaypen");

	ABioBaseSquad_IsNavReferenceInPlaypen_Params params;
	params.oNav = oNav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsCoverInPlaypen
// (Native, Public)
// Parameters:
// class AActor*                  oCover                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsCoverInPlaypen(class AActor* oCover)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsCoverInPlaypen");

	ABioBaseSquad_IsCoverInPlaypen_Params params;
	params.oCover = oCover;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.ValidatePlayPen
// (Final, Native, Public)

void ABioBaseSquad::ValidatePlayPen()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ValidatePlayPen");

	ABioBaseSquad_ValidatePlayPen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.PerceivedPawnsOfRelation
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class APawn*                   oPawn                          (Parm, OutParm)
// TEnumAsByte<EBioFactionRelationship> nRelation                      (Parm)

void ABioBaseSquad::PerceivedPawnsOfRelation(TEnumAsByte<EBioFactionRelationship> nRelation, class APawn** oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.PerceivedPawnsOfRelation");

	ABioBaseSquad_PerceivedPawnsOfRelation_Params params;
	params.nRelation = nRelation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oPawn != nullptr)
		*oPawn = params.oPawn;
}


// Function BIOC_Base.BioBaseSquad.PerceivedPawns
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class APawn*                   oPawn                          (Parm, OutParm)

void ABioBaseSquad::PerceivedPawns(class APawn** oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.PerceivedPawns");

	ABioBaseSquad_PerceivedPawns_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oPawn != nullptr)
		*oPawn = params.oPawn;
}


// Function BIOC_Base.BioBaseSquad.SquadMembers
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class ABioAiController*        oController                    (Parm, OutParm)

void ABioBaseSquad::SquadMembers(class ABioAiController** oController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SquadMembers");

	ABioBaseSquad_SquadMembers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oController != nullptr)
		*oController = params.oController;
}


// Function BIOC_Base.BioBaseSquad.TargetingMe
// (Final, Iterator, Native, Public, HasOutParms)
// Parameters:
// class APawn*                   oTargetingWho                  (Parm)
// class APawn*                   oPawn                          (Parm, OutParm)

void ABioBaseSquad::TargetingMe(class APawn* oTargetingWho, class APawn** oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.TargetingMe");

	ABioBaseSquad_TargetingMe_Params params;
	params.oTargetingWho = oTargetingWho;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oPawn != nullptr)
		*oPawn = params.oPawn;
}


// Function BIOC_Base.BioBaseSquad.CanShoot
// (Final, Native, Public)
// Parameters:
// class APawn*                   oSource                        (Parm)
// class APawn*                   oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::CanShoot(class APawn* oSource, class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.CanShoot");

	ABioBaseSquad_CanShoot_Params params;
	params.oSource = oSource;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.CanShootExposed
// (Final, Native, Public, HasOutParms)
// Parameters:
// class APawn*                   oSource                        (Parm)
// class APawn*                   oTarget                        (Parm)
// int                            bExposed                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::CanShootExposed(class APawn* oSource, class APawn* oTarget, int* bExposed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.CanShootExposed");

	ABioBaseSquad_CanShootExposed_Params params;
	params.oSource = oSource;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bExposed != nullptr)
		*bExposed = params.bExposed;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.RemoveSquadFromPerception
// (Native, Public)
// Parameters:
// class ABioBaseSquad*           pSquad                         (Parm)

void ABioBaseSquad::RemoveSquadFromPerception(class ABioBaseSquad* pSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.RemoveSquadFromPerception");

	ABioBaseSquad_RemoveSquadFromPerception_Params params;
	params.pSquad = pSquad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.IsPawnPerceived
// (Final, Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsPawnPerceived(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsPawnPerceived");

	ABioBaseSquad_IsPawnPerceived_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsSquadPerceived
// (Final, Native, Public)
// Parameters:
// class ABioBaseSquad*           pSquad                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsSquadPerceived(class ABioBaseSquad* pSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsSquadPerceived");

	ABioBaseSquad_IsSquadPerceived_Params params;
	params.pSquad = pSquad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.AddSquadToPerception
// (Final, Native, Public)
// Parameters:
// class ABioBaseSquad*           pSquad                         (Parm)
// class APawn*                   pSource                        (OptionalParm, Parm)
// class APawn*                   pTarget                        (OptionalParm, Parm)

void ABioBaseSquad::AddSquadToPerception(class ABioBaseSquad* pSquad, class APawn* pSource, class APawn* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.AddSquadToPerception");

	ABioBaseSquad_AddSquadToPerception_Params params;
	params.pSquad = pSquad;
	params.pSource = pSource;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.ClearMovementOrders
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)

void ABioBaseSquad::ClearMovementOrders(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ClearMovementOrders");

	ABioBaseSquad_ClearMovementOrders_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.ClearTacticalOrders
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)

void ABioBaseSquad::ClearTacticalOrders(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ClearTacticalOrders");

	ABioBaseSquad_ClearTacticalOrders_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetSquadFollowFormation
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EFollowFormation>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFollowFormation> ABioBaseSquad::GetSquadFollowFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSquadFollowFormation");

	ABioBaseSquad_GetSquadFollowFormation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetSquadFollowFormation
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EFollowFormation>  eFormation                     (Parm)
// bool                           bForceFormation                (OptionalParm, Parm)
// int                            iSquadMember                   (OptionalParm, Parm)

void ABioBaseSquad::SetSquadFollowFormation(TEnumAsByte<EFollowFormation> eFormation, bool bForceFormation, int iSquadMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetSquadFollowFormation");

	ABioBaseSquad_SetSquadFollowFormation_Params params;
	params.eFormation = eFormation;
	params.bForceFormation = bForceFormation;
	params.iSquadMember = iSquadMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.SetMemberAttackTarget
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class APawn*                   oAttackTarget                  (Parm)

void ABioBaseSquad::SetMemberAttackTarget(int nIndex, class APawn* oAttackTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberAttackTarget");

	ABioBaseSquad_SetMemberAttackTarget_Params params;
	params.nIndex = nIndex;
	params.oAttackTarget = oAttackTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberAttackTarget
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::GetMemberAttackTarget(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberAttackTarget");

	ABioBaseSquad_GetMemberAttackTarget_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberHoldPosition
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 vPosition                      (Parm)

void ABioBaseSquad::SetMemberHoldPosition(int nIndex, const struct FVector& vPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberHoldPosition");

	ABioBaseSquad_SetMemberHoldPosition_Params params;
	params.nIndex = nIndex;
	params.vPosition = vPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberHoldPosition
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioBaseSquad::GetMemberHoldPosition(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberHoldPosition");

	ABioBaseSquad_GetMemberHoldPosition_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetMemberActionOrderAssigned
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetMemberActionOrderAssigned(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberActionOrderAssigned");

	ABioBaseSquad_GetMemberActionOrderAssigned_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetMemberDelayedSwitchWeapon
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EBioItemWeaponRangedType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioItemWeaponRangedType> ABioBaseSquad::GetMemberDelayedSwitchWeapon(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberDelayedSwitchWeapon");

	ABioBaseSquad_GetMemberDelayedSwitchWeapon_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberSwitchWeapon
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EBioItemWeaponRangedType> eWeapon                        (Parm)

void ABioBaseSquad::SetMemberSwitchWeapon(int nIndex, TEnumAsByte<EBioItemWeaponRangedType> eWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberSwitchWeapon");

	ABioBaseSquad_SetMemberSwitchWeapon_Params params;
	params.nIndex = nIndex;
	params.eWeapon = eWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberSwitchWeapon
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EBioItemWeaponRangedType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioItemWeaponRangedType> ABioBaseSquad::GetMemberSwitchWeapon(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberSwitchWeapon");

	ABioBaseSquad_GetMemberSwitchWeapon_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberMoveOrderAssigned
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           bOrderAssigned                 (Parm)

void ABioBaseSquad::SetMemberMoveOrderAssigned(int nIndex, bool bOrderAssigned)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberMoveOrderAssigned");

	ABioBaseSquad_SetMemberMoveOrderAssigned_Params params;
	params.nIndex = nIndex;
	params.bOrderAssigned = bOrderAssigned;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberMoveOrderAssigned
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetMemberMoveOrderAssigned(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberMoveOrderAssigned");

	ABioBaseSquad_GetMemberMoveOrderAssigned_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberCurrentlyMoving
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           bMoving                        (Parm)

void ABioBaseSquad::SetMemberCurrentlyMoving(int nIndex, bool bMoving)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberCurrentlyMoving");

	ABioBaseSquad_SetMemberCurrentlyMoving_Params params;
	params.nIndex = nIndex;
	params.bMoving = bMoving;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberCurrentlyMoving
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetMemberCurrentlyMoving(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberCurrentlyMoving");

	ABioBaseSquad_GetMemberCurrentlyMoving_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberFormation
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EFollowFormation>  eFormation                     (Parm)

void ABioBaseSquad::SetMemberFormation(int nIndex, TEnumAsByte<EFollowFormation> eFormation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberFormation");

	ABioBaseSquad_SetMemberFormation_Params params;
	params.nIndex = nIndex;
	params.eFormation = eFormation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberFormation
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EFollowFormation>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFollowFormation> ABioBaseSquad::GetMemberFormation(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberFormation");

	ABioBaseSquad_GetMemberFormation_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberTargetLocation
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioBaseSquad::SetMemberTargetLocation(int nIndex, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberTargetLocation");

	ABioBaseSquad_SetMemberTargetLocation_Params params;
	params.nIndex = nIndex;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberTargetLocation
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioBaseSquad::GetMemberTargetLocation(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberTargetLocation");

	ABioBaseSquad_GetMemberTargetLocation_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberTacticalPower
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FName                   nmTacticalPower                (Parm)

void ABioBaseSquad::SetMemberTacticalPower(int nIndex, const struct FName& nmTacticalPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberTacticalPower");

	ABioBaseSquad_SetMemberTacticalPower_Params params;
	params.nIndex = nIndex;
	params.nmTacticalPower = nmTacticalPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberTacticalPower
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName ABioBaseSquad::GetMemberTacticalPower(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberTacticalPower");

	ABioBaseSquad_GetMemberTacticalPower_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberTacticalAction
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EBioTacticalAction> eTacticalAction                (Parm)

void ABioBaseSquad::SetMemberTacticalAction(int nIndex, TEnumAsByte<EBioTacticalAction> eTacticalAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberTacticalAction");

	ABioBaseSquad_SetMemberTacticalAction_Params params;
	params.nIndex = nIndex;
	params.eTacticalAction = eTacticalAction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberTacticalAction
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// TEnumAsByte<EBioTacticalAction> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioTacticalAction> ABioBaseSquad::GetMemberTacticalAction(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberTacticalAction");

	ABioBaseSquad_GetMemberTacticalAction_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberCoverAssigned
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           bCoverAssigned                 (Parm)

void ABioBaseSquad::SetMemberCoverAssigned(int nIndex, bool bCoverAssigned)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberCoverAssigned");

	ABioBaseSquad_SetMemberCoverAssigned_Params params;
	params.nIndex = nIndex;
	params.bCoverAssigned = bCoverAssigned;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberCoverAssigned
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetMemberCoverAssigned(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberCoverAssigned");

	ABioBaseSquad_GetMemberCoverAssigned_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberCoverRecord
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FCoverRecord            stCoverRecord                  (Parm)

void ABioBaseSquad::SetMemberCoverRecord(int nIndex, const struct FCoverRecord& stCoverRecord)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberCoverRecord");

	ABioBaseSquad_SetMemberCoverRecord_Params params;
	params.nIndex = nIndex;
	params.stCoverRecord = stCoverRecord;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberCoverRecord
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// struct FCoverRecord            out_stCoverRecord              (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::GetMemberCoverRecord(int nIndex, struct FCoverRecord* out_stCoverRecord)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberCoverRecord");

	ABioBaseSquad_GetMemberCoverRecord_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_stCoverRecord != nullptr)
		*out_stCoverRecord = params.out_stCoverRecord;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberMoveDelayTime
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          fMoveDelayTime                 (Parm)

void ABioBaseSquad::SetMemberMoveDelayTime(int nIndex, float fMoveDelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberMoveDelayTime");

	ABioBaseSquad_SetMemberMoveDelayTime_Params params;
	params.nIndex = nIndex;
	params.fMoveDelayTime = fMoveDelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberMoveDelayTime
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioBaseSquad::GetMemberMoveDelayTime(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberMoveDelayTime");

	ABioBaseSquad_GetMemberMoveDelayTime_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberMoveLocation
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioBaseSquad::SetMemberMoveLocation(int nIndex, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberMoveLocation");

	ABioBaseSquad_SetMemberMoveLocation_Params params;
	params.nIndex = nIndex;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberMoveLocation
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioBaseSquad::GetMemberMoveLocation(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberMoveLocation");

	ABioBaseSquad_GetMemberMoveLocation_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetMemberMoveIndicator
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class ABioTacticalMoveToIndicator* oIndicator                     (Parm)

void ABioBaseSquad::SetMemberMoveIndicator(int nIndex, class ABioTacticalMoveToIndicator* oIndicator)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetMemberMoveIndicator");

	ABioBaseSquad_SetMemberMoveIndicator_Params params;
	params.nIndex = nIndex;
	params.oIndicator = oIndicator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberMoveIndicator
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class ABioTacticalMoveToIndicator* ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioTacticalMoveToIndicator* ABioBaseSquad::GetMemberMoveIndicator(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberMoveIndicator");

	ABioBaseSquad_GetMemberMoveIndicator_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.RemoveMemberByIndex
// (Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::RemoveMemberByIndex(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.RemoveMemberByIndex");

	ABioBaseSquad_RemoveMemberByIndex_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.RemoveMember
// (Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::RemoveMember(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.RemoveMember");

	ABioBaseSquad_RemoveMember_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.ClearSquad
// (Native, Public)

void ABioBaseSquad::ClearSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ClearSquad");

	ABioBaseSquad_ClearSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.GetMemberIndex
// (Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::GetMemberIndex(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMemberIndex");

	ABioBaseSquad_GetMemberIndex_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetMember
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::GetMember(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetMember");

	ABioBaseSquad_GetMember_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetSquadLeader
// (Native, Public)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioBaseSquad::GetSquadLeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSquadLeader");

	ABioBaseSquad_GetSquadLeader_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.SetSquadLeader
// (Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::SetSquadLeader(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.SetSquadLeader");

	ABioBaseSquad_SetSquadLeader_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetHackedSquadSize
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::GetHackedSquadSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetHackedSquadSize");

	ABioBaseSquad_GetHackedSquadSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.GetSquadSize
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioBaseSquad::GetSquadSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.GetSquadSize");

	ABioBaseSquad_GetSquadSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.IsInSquad
// (Final, Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioBaseSquad::IsInSquad(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.IsInSquad");

	ABioBaseSquad_IsInSquad_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioBaseSquad.ApplyTacticalOrders
// (Native, Public)
// Parameters:
// class AActor*                  oMember                        (Parm)

void ABioBaseSquad::ApplyTacticalOrders(class AActor* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.ApplyTacticalOrders");

	ABioBaseSquad_ApplyTacticalOrders_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquad.OnSetSquadFollowFormation
// (Event, Public)
// Parameters:
// TEnumAsByte<EFollowFormation>  eFormation                     (Parm)

void ABioBaseSquad::OnSetSquadFollowFormation(TEnumAsByte<EFollowFormation> eFormation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquad.OnSetSquadFollowFormation");

	ABioBaseSquad_OnSetSquadFollowFormation_Params params;
	params.eFormation = eFormation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioFaction.GetRelationTo
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EBioFactionTypes>  nType                          (Parm)
// TEnumAsByte<EBioFactionRelationship> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioFactionRelationship> UBioFaction::STATIC_GetRelationTo(TEnumAsByte<EBioFactionTypes> nType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFaction.GetRelationTo");

	UBioFaction_GetRelationTo_Params params;
	params.nType = nType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFormations.GetEscapeDistance
// (Defined, Static, Public)
// Parameters:
// int                            idx                            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioFormations::STATIC_GetEscapeDistance(int idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFormations.GetEscapeDistance");

	UBioFormations_GetEscapeDistance_Params params;
	params.idx = idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFormations.GetFormationFacing
// (Defined, Static, Public)
// Parameters:
// int                            idx                            (Parm)
// bool                           InvertFormation                (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UBioFormations::STATIC_GetFormationFacing(int idx, bool InvertFormation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFormations.GetFormationFacing");

	UBioFormations_GetFormationFacing_Params params;
	params.idx = idx;
	params.InvertFormation = InvertFormation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioFormations.GetFormationOffset
// (Defined, Static, Public)
// Parameters:
// int                            idx                            (Parm)
// bool                           InvertFormation                (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioFormations::STATIC_GetFormationOffset(int idx, bool InvertFormation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioFormations.GetFormationOffset");

	UBioFormations_GetFormationOffset_Params params;
	params.idx = idx;
	params.InvertFormation = InvertFormation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetPercentHealthOnResurrection
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerSquad::GetPercentHealthOnResurrection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetPercentHealthOnResurrection");

	ABioPlayerSquad_GetPercentHealthOnResurrection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetCombatCooldownTime
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerSquad::GetCombatCooldownTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetCombatCooldownTime");

	ABioPlayerSquad_GetCombatCooldownTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.OnSetAttackTarget
// (Event, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// class AActor*                  pTarget                        (Parm)

void ABioPlayerSquad::OnSetAttackTarget(class APawn* pPawn, class AActor* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnSetAttackTarget");

	ABioPlayerSquad_OnSetAttackTarget_Params params;
	params.pPawn = pPawn;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnSetSquadFollowFormation
// (Event, Public)
// Parameters:
// TEnumAsByte<EFollowFormation>  eFormation                     (Parm)

void ABioPlayerSquad::OnSetSquadFollowFormation(TEnumAsByte<EFollowFormation> eFormation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnSetSquadFollowFormation");

	ABioPlayerSquad_OnSetSquadFollowFormation_Params params;
	params.eFormation = eFormation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.UpdateCombatTimer
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void ABioPlayerSquad::UpdateCombatTimer(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.UpdateCombatTimer");

	ABioPlayerSquad_UpdateCombatTimer_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.ResetCombatTimer
// (Native, Public)
// Parameters:
// bool                           bTriggerEvents                 (OptionalParm, Parm)

void ABioPlayerSquad::ResetCombatTimer(bool bTriggerEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.ResetCombatTimer");

	ABioPlayerSquad_ResetCombatTimer_Params params;
	params.bTriggerEvents = bTriggerEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.ClearMemberMovementCommand
// (Native, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)

void ABioPlayerSquad::ClearMemberMovementCommand(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.ClearMemberMovementCommand");

	ABioPlayerSquad_ClearMemberMovementCommand_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.GetSquadLeader
// (Native, Public)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioPlayerSquad::GetSquadLeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetSquadLeader");

	ABioPlayerSquad_GetSquadLeader_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.SetSquadLeader
// (Native, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::SetSquadLeader(class APawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.SetSquadLeader");

	ABioPlayerSquad_SetSquadLeader_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetInventory
// (Native, Public)
// Parameters:
// class UBioInventory*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioInventory* ABioPlayerSquad::GetInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetInventory");

	ABioPlayerSquad_GetInventory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.SquadExitCombatMode
// (Defined, Public)

void ABioPlayerSquad::SquadExitCombatMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.SquadExitCombatMode");

	ABioPlayerSquad_SquadExitCombatMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.SquadEnterCombatMode
// (Defined, Public)
// Parameters:
// bool                           bEngageEnemy                   (OptionalParm, Parm)

void ABioPlayerSquad::SquadEnterCombatMode(bool bEngageEnemy)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.SquadEnterCombatMode");

	ABioPlayerSquad_SquadEnterCombatMode_Params params;
	params.bEngageEnemy = bEngageEnemy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.NotifyMemberCoverDisabled
// (Simulated, Event, Public)
// Parameters:
// class APawn*                   oWho                           (Parm)
// class AActor*                  Link                           (Parm)
// int                            SlotIdx                        (Parm)

void ABioPlayerSquad::NotifyMemberCoverDisabled(class APawn* oWho, class AActor* Link, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.NotifyMemberCoverDisabled");

	ABioPlayerSquad_NotifyMemberCoverDisabled_Params params;
	params.oWho = oWho;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioPlayerSquad::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetSaveObjectClass");

	ABioPlayerSquad_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.OnThrowGrenade
// (Defined, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)

void ABioPlayerSquad::OnThrowGrenade(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnThrowGrenade");

	ABioPlayerSquad_OnThrowGrenade_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.HasGrenades
// (Defined, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::HasGrenades(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.HasGrenades");

	ABioPlayerSquad_HasGrenades_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetReadyActivationPower
// (Defined, Public)
// Parameters:
// class ABioPawn*                oMemberPawn                    (Parm)
// class UBioCapability*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioCapability* ABioPlayerSquad::GetReadyActivationPower(class ABioPawn* oMemberPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetReadyActivationPower");

	ABioPlayerSquad_GetReadyActivationPower_Params params;
	params.oMemberPawn = oMemberPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetSquadScanAbility
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::GetSquadScanAbility()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetSquadScanAbility");

	ABioPlayerSquad_GetSquadScanAbility_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.ProxyGetContextSensitiveOffset
// (Defined, Event, Public)
// Parameters:
// int                            nIndex                         (Parm)
// struct FRotator                rRotation                      (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPlayerSquad::ProxyGetContextSensitiveOffset(int nIndex, const struct FRotator& rRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.ProxyGetContextSensitiveOffset");

	ABioPlayerSquad_ProxyGetContextSensitiveOffset_Params params;
	params.nIndex = nIndex;
	params.rRotation = rRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.ProbeCombatStop
// (Native, Public)

void ABioPlayerSquad::ProbeCombatStop()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.ProbeCombatStop");

	ABioPlayerSquad_ProbeCombatStop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.ProbeOnCombatEnd
// (Native, Public)

void ABioPlayerSquad::ProbeOnCombatEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.ProbeOnCombatEnd");

	ABioPlayerSquad_ProbeOnCombatEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.ProbeOnCombatBegin
// (Native, Public)

void ABioPlayerSquad::ProbeOnCombatBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.ProbeOnCombatBegin");

	ABioPlayerSquad_ProbeOnCombatBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnCombatEnd
// (Defined, Event, Public)

void ABioPlayerSquad::OnCombatEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnCombatEnd");

	ABioPlayerSquad_OnCombatEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnCombatBegin
// (Defined, Event, Public)

void ABioPlayerSquad::OnCombatBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnCombatBegin");

	ABioPlayerSquad_OnCombatBegin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.IsInCombat
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::IsInCombat()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.IsInCombat");

	ABioPlayerSquad_IsInCombat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.OnDeath
// (Defined, Public)
// Parameters:
// class APawn*                   pPawn                          (Parm)
// class AController*             pKiller                        (Parm)

void ABioPlayerSquad::OnDeath(class APawn* pPawn, class AController* pKiller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnDeath");

	ABioPlayerSquad_OnDeath_Params params;
	params.pPawn = pPawn;
	params.pKiller = pKiller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.AddMemberInternal
// (Defined, Protected)
// Parameters:
// class APawn*                   Pawn                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::AddMemberInternal(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.AddMemberInternal");

	ABioPlayerSquad_AddMemberInternal_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioPlayerSquad::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.Tick");

	ABioPlayerSquad_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.DrawSquadHUD
// (Public)
// Parameters:
// class ABioHUD*                 oHud                           (Parm)
// float                          fGuiAlpha                      (Parm)

void ABioPlayerSquad::DrawSquadHUD(class ABioHUD* oHud, float fGuiAlpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.DrawSquadHUD");

	ABioPlayerSquad_DrawSquadHUD_Params params;
	params.oHud = oHud;
	params.fGuiAlpha = fGuiAlpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.MemberRemoved
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oPawn                          (Parm)

void ABioPlayerSquad::MemberRemoved(class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.MemberRemoved");

	ABioPlayerSquad_MemberRemoved_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.MemberAdded
// (Defined, Event, Public, HasDefaults)
// Parameters:
// int                            nIndex                         (Parm)

void ABioPlayerSquad::MemberAdded(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.MemberAdded");

	ABioPlayerSquad_MemberAdded_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.GetInventoryResourceFloat
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerSquad::GetInventoryResourceFloat(TEnumAsByte<EInventoryResourceTypes> eInvResType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetInventoryResourceFloat");

	ABioPlayerSquad_GetInventoryResourceFloat_Params params;
	params.eInvResType = eInvResType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetInventoryResourceInt
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> eInvResType                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::GetInventoryResourceInt(TEnumAsByte<EInventoryResourceTypes> eInvResType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetInventoryResourceInt");

	ABioPlayerSquad_GetInventoryResourceInt_Params params;
	params.eInvResType = eInvResType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.XPTrack
// (Native, Public)
// Parameters:
// int                            nXPGrant                       (Parm)
// struct FString                 sXPSourceType                  (Parm, NeedCtorLink)
// int                            nSquadLevel                    (Parm)

void ABioPlayerSquad::XPTrack(int nXPGrant, const struct FString& sXPSourceType, int nSquadLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.XPTrack");

	ABioPlayerSquad_XPTrack_Params params;
	params.nXPGrant = nXPGrant;
	params.sXPSourceType = sXPSourceType;
	params.nSquadLevel = nSquadLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.MinionKillsNeededForLevelUp
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::MinionKillsNeededForLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.MinionKillsNeededForLevelUp");

	ABioPlayerSquad_MinionKillsNeededForLevelUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GrantExperience
// (Defined, Public)
// Parameters:
// int                            nXPGrant                       (Parm)
// TEnumAsByte<EExperienceSourceType> eXPSourceType                  (Parm)

void ABioPlayerSquad::GrantExperience(int nXPGrant, TEnumAsByte<EExperienceSourceType> eXPSourceType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GrantExperience");

	ABioPlayerSquad_GrantExperience_Params params;
	params.nXPGrant = nXPGrant;
	params.eXPSourceType = eXPSourceType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.LookupCredits
// (Defined, Event, Public, HasOutParms)
// Parameters:
// int                            nPlayerSquadLevel              (Parm)
// struct FName                   nmCREDClass                    (Parm)
// int                            nCredits                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::LookupCredits(int nPlayerSquadLevel, const struct FName& nmCREDClass, int* nCredits)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.LookupCredits");

	ABioPlayerSquad_LookupCredits_Params params;
	params.nPlayerSquadLevel = nPlayerSquadLevel;
	params.nmCREDClass = nmCREDClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nCredits != nullptr)
		*nCredits = params.nCredits;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.LookupXP
// (Defined, Public, HasOutParms)
// Parameters:
// int                            nPlayerSquadLevel              (Parm)
// struct FName                   nmXPClass                      (Parm)
// int                            nXP                            (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::LookupXP(int nPlayerSquadLevel, const struct FName& nmXPClass, int* nXP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.LookupXP");

	ABioPlayerSquad_LookupXP_Params params;
	params.nPlayerSquadLevel = nPlayerSquadLevel;
	params.nmXPClass = nmXPClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nXP != nullptr)
		*nXP = params.nXP;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetPlayerSquadExperience
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::GetPlayerSquadExperience()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetPlayerSquadExperience");

	ABioPlayerSquad_GetPlayerSquadExperience_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetPlayerSquadLevel
// (Defined, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::GetPlayerSquadLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetPlayerSquadLevel");

	ABioPlayerSquad_GetPlayerSquadLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetMinSquadLevel
// (Defined, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::GetMinSquadLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetMinSquadLevel");

	ABioPlayerSquad_GetMinSquadLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetMaxSquadLevel
// (Defined, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPlayerSquad::GetMaxSquadLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetMaxSquadLevel");

	ABioPlayerSquad_GetMaxSquadLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.OnMemberCasting
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oTarget                        (Parm)
// struct FName                   nmPower                        (Parm)

void ABioPlayerSquad::OnMemberCasting(class APawn* oMember, class APawn* oTarget, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnMemberCasting");

	ABioPlayerSquad_OnMemberCasting_Params params;
	params.oMember = oMember;
	params.oTarget = oTarget;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnMemberAttacking
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oTarget                        (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioPlayerSquad::OnMemberAttacking(class APawn* oMember, class APawn* oTarget, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnMemberAttacking");

	ABioPlayerSquad_OnMemberAttacking_Params params;
	params.oMember = oMember;
	params.oTarget = oTarget;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnDamageDone
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// class AActor*                  pDamageCausingActor            (Parm)

void ABioPlayerSquad::OnDamageDone(class APawn* oTarget, class AActor* pDamageCausingActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnDamageDone");

	ABioPlayerSquad_OnDamageDone_Params params;
	params.oTarget = oTarget;
	params.pDamageCausingActor = pDamageCausingActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioPlayerSquad::OnDamaged(class APawn* oMember, class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnDamaged");

	ABioPlayerSquad_OnDamaged_Params params;
	params.oMember = oMember;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnCastAt
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmPower                        (Parm)

void ABioPlayerSquad::OnCastAt(class APawn* oMember, class APawn* oAttacker, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnCastAt");

	ABioPlayerSquad_OnCastAt_Params params;
	params.oMember = oMember;
	params.oAttacker = oAttacker;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnAttacked
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioPlayerSquad::OnAttacked(class APawn* oMember, class APawn* oAttacker, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnAttacked");

	ABioPlayerSquad_OnAttacked_Params params;
	params.oMember = oMember;
	params.oAttacker = oAttacker;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.onPlayerEnterCover
// (Event, Public)

void ABioPlayerSquad::onPlayerEnterCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.onPlayerEnterCover");

	ABioPlayerSquad_onPlayerEnterCover_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.OnPlayerSwitchStance
// (Defined, Event, Public)
// Parameters:
// unsigned char                  FromState                      (Parm)
// unsigned char                  ToState                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::OnPlayerSwitchStance(unsigned char FromState, unsigned char ToState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.OnPlayerSwitchStance");

	ABioPlayerSquad_OnPlayerSwitchStance_Params params;
	params.FromState = FromState;
	params.ToState = ToState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetActionString
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioTacticalAction> eAction                        (Parm)
// class ABioPawn*                oPawn                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABioPlayerSquad::GetActionString(TEnumAsByte<EBioTacticalAction> eAction, class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetActionString");

	ABioPlayerSquad_GetActionString_Params params;
	params.eAction = eAction;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.DrawDebugHUD
// (Defined, Public)
// Parameters:
// class ABioHUD*                 HUD                            (Parm)
// float                          fGuiAlpha                      (Parm)

void ABioPlayerSquad::DrawDebugHUD(class ABioHUD* HUD, float fGuiAlpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.DrawDebugHUD");

	ABioPlayerSquad_DrawDebugHUD_Params params;
	params.HUD = HUD;
	params.fGuiAlpha = fGuiAlpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.DrawHUD
// (Defined, Public)
// Parameters:
// class ABioHUD*                 HUD                            (Parm)
// float                          fGuiAlpha                      (Parm)

void ABioPlayerSquad::DrawHUD(class ABioHUD* HUD, float fGuiAlpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.DrawHUD");

	ABioPlayerSquad_DrawHUD_Params params;
	params.HUD = HUD;
	params.fGuiAlpha = fGuiAlpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.DrawHud_SquadDebug
// (Public)
// Parameters:
// int                            I                              (Parm)
// int                            nPos                           (Parm)
// class ABioHUD*                 HUD                            (Parm)

void ABioPlayerSquad::DrawHud_SquadDebug(int I, int nPos, class ABioHUD* HUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.DrawHud_SquadDebug");

	ABioPlayerSquad_DrawHud_SquadDebug_Params params;
	params.I = I;
	params.nPos = nPos;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.SwapSpareController
// (Defined, Public)
// Parameters:
// class APawn*                   oPawn                          (Parm)

void ABioPlayerSquad::SwapSpareController(class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.SwapSpareController");

	ABioPlayerSquad_SwapSpareController_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.SetSpareController
// (Defined, Public)
// Parameters:
// class AController*             newCtrl                        (Parm)

void ABioPlayerSquad::SetSpareController(class AController* newCtrl)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.SetSpareController");

	ABioPlayerSquad_SetSpareController_Params params;
	params.newCtrl = newCtrl;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.GetSpareController
// (Defined, Public)
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* ABioPlayerSquad::GetSpareController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetSpareController");

	ABioPlayerSquad_GetSpareController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetWeaponfiringValues_RequiredRadius
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oMember                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerSquad::GetWeaponfiringValues_RequiredRadius(class ABioPawn* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetWeaponfiringValues_RequiredRadius");

	ABioPlayerSquad_GetWeaponfiringValues_RequiredRadius_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetWeaponfiringValues_StoppingThreshold
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oMember                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerSquad::GetWeaponfiringValues_StoppingThreshold(class ABioPawn* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetWeaponfiringValues_StoppingThreshold");

	ABioPlayerSquad_GetWeaponfiringValues_StoppingThreshold_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetWeaponfiringValues_StartThreshold
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oMember                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPlayerSquad::GetWeaponfiringValues_StartThreshold(class ABioPawn* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetWeaponfiringValues_StartThreshold");

	ABioPlayerSquad_GetWeaponfiringValues_StartThreshold_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetCurrentWeaponType
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oMember                        (Parm)
// TEnumAsByte<EBioItemWeaponRangedType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioItemWeaponRangedType> ABioPlayerSquad::GetCurrentWeaponType(class ABioPawn* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetCurrentWeaponType");

	ABioPlayerSquad_GetCurrentWeaponType_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.Leader_Changed
// (Defined, Event, Public)
// Parameters:
// class APawn*                   OldLeader                      (Parm)
// class APawn*                   NewLeader                      (Parm)

void ABioPlayerSquad::Leader_Changed(class APawn* OldLeader, class APawn* NewLeader)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.Leader_Changed");

	ABioPlayerSquad_Leader_Changed_Params params;
	params.OldLeader = OldLeader;
	params.NewLeader = NewLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.GetOrientationType
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EOrientationType>  ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EOrientationType> ABioPlayerSquad::GetOrientationType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetOrientationType");

	ABioPlayerSquad_GetOrientationType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetRestFormation
// (Defined, Event, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioPlayerSquad::GetRestFormation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetRestFormation");

	ABioPlayerSquad_GetRestFormation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.InitPlayerSquadLevel
// (Defined, Public)
// Parameters:
// int                            nInitLevel                     (Parm)

void ABioPlayerSquad::InitPlayerSquadLevel(int nInitLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.InitPlayerSquadLevel");

	ABioPlayerSquad_InitPlayerSquadLevel_Params params;
	params.nInitLevel = nInitLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.InitPlayerSquadExperience
// (Defined, Public)
// Parameters:
// int                            nInitXP                        (Parm)

void ABioPlayerSquad::InitPlayerSquadExperience(int nInitXP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.InitPlayerSquadExperience");

	ABioPlayerSquad_InitPlayerSquadExperience_Params params;
	params.nInitXP = nInitXP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.Initialize
// (Defined, Event, Public)

void ABioPlayerSquad::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.Initialize");

	ABioPlayerSquad_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.IsInventoryThresholdReached
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::IsInventoryThresholdReached()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.IsInventoryThresholdReached");

	ABioPlayerSquad_IsInventoryThresholdReached_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.IsInventoryFull
// (Native, Public, HasOutParms)
// Parameters:
// int                            o_nOverBy                      (Parm, OutParm)
// int                            i_nItemsToAdd                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPlayerSquad::IsInventoryFull(int i_nItemsToAdd, int* o_nOverBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.IsInventoryFull");

	ABioPlayerSquad_IsInventoryFull_Params params;
	params.i_nItemsToAdd = i_nItemsToAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (o_nOverBy != nullptr)
		*o_nOverBy = params.o_nOverBy;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerSquad.GetRankOfSlot
// (Native, Public, HasOutParms)
// Parameters:
// class UBioCoverInterface*      oCover                         (Parm)
// struct FCoverRecord            oRec                           (Parm, OutParm)
// TArray<class AActor*>          aoCoverFrom                    (Parm, NeedCtorLink)
// TArray<int>                    aoCoverFromRanks               (Parm, NeedCtorLink)
// float                          fPawnHeight                    (Parm)
// class AController*             oCtrl                          (OptionalParm, Parm)

void ABioPlayerSquad::GetRankOfSlot(class UBioCoverInterface* oCover, TArray<class AActor*> aoCoverFrom, TArray<int> aoCoverFromRanks, float fPawnHeight, class AController* oCtrl, struct FCoverRecord* oRec)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.GetRankOfSlot");

	ABioPlayerSquad_GetRankOfSlot_Params params;
	params.oCover = oCover;
	params.aoCoverFrom = aoCoverFrom;
	params.aoCoverFromRanks = aoCoverFromRanks;
	params.fPawnHeight = fPawnHeight;
	params.oCtrl = oCtrl;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oRec != nullptr)
		*oRec = params.oRec;
}


// Function BIOC_Base.BioPlayerSquad.ApplyTacticalOrders
// (Native, Public)
// Parameters:
// class AActor*                  oMember                        (Parm)

void ABioPlayerSquad::ApplyTacticalOrders(class AActor* oMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.ApplyTacticalOrders");

	ABioPlayerSquad_ApplyTacticalOrders_Params params;
	params.oMember = oMember;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerSquad.BioVINCE_MapName_PartyDeath
// (Native, Public)

void ABioPlayerSquad::BioVINCE_MapName_PartyDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerSquad.BioVINCE_MapName_PartyDeath");

	ABioPlayerSquad_BioVINCE_MapName_PartyDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAI.OnSquadSeen
// (Defined, Event, Public)
// Parameters:
// class ABioBaseSquad*           oSquad                         (Parm)

void ABioSquadAI::OnSquadSeen(class ABioBaseSquad* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAI.OnSquadSeen");

	ABioSquadAI_OnSquadSeen_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAI.OnDeath
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oMember                        (Parm)
// class AController*             oKiller                        (Parm)

void ABioSquadAI::OnDeath(class APawn* oMember, class AController* oKiller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAI.OnDeath");

	ABioSquadAI_OnDeath_Params params;
	params.oMember = oMember;
	params.oKiller = oKiller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAI.OnThrowGrenade
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)

void ABioSquadAI::OnThrowGrenade(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAI.OnThrowGrenade");

	ABioSquadAI_OnThrowGrenade_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAI.HasGrenades
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioSquadAI::HasGrenades(class ABioPawn* pPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAI.HasGrenades");

	ABioSquadAI_HasGrenades_Params params;
	params.pPawn = pPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSquadAI.MemberRemoved
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oPawn                          (Parm)

void ABioSquadAI::MemberRemoved(class APawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAI.MemberRemoved");

	ABioSquadAI_MemberRemoved_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAI.ProbeCombatStop
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioProbeCombatResult> CombatResult                   (Parm)

void ABioSquadAI::ProbeCombatStop(TEnumAsByte<EBioProbeCombatResult> CombatResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAI.ProbeCombatStop");

	ABioSquadAI_ProbeCombatStop_Params params;
	params.CombatResult = CombatResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadAI.ProbeCombatStart
// (Native, Public)

void ABioSquadAI::ProbeCombatStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadAI.ProbeCombatStart");

	ABioSquadAI_ProbeCombatStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadHoldMarker.BioBeginPlay
// (Defined, Public)

void ABioSquadHoldMarker::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadHoldMarker.BioBeginPlay");

	ABioSquadHoldMarker_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSquadHoldMarker.SetBaseByTag
// (Native, Public)

void ABioSquadHoldMarker::SetBaseByTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSquadHoldMarker.SetBaseByTag");

	ABioSquadHoldMarker_SetBaseByTag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.UnsuppressChatter
// (Final, Defined, Public)

void ABioPawn::UnsuppressChatter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UnsuppressChatter");

	ABioPawn_UnsuppressChatter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.HandleChatterEvent
// (Final, Defined, Event, Public)
// Parameters:
// TEnumAsByte<EBioSoundSetType>  eSoundSet                      (Parm)
// bool                           bForceChatter                  (OptionalParm, Parm)

void ABioPawn::HandleChatterEvent(TEnumAsByte<EBioSoundSetType> eSoundSet, bool bForceChatter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.HandleChatterEvent");

	ABioPawn_HandleChatterEvent_Params params;
	params.eSoundSet = eSoundSet;
	params.bForceChatter = bForceChatter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioPawn::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetSaveObjectClass");

	ABioPawn_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.IsCombatActionState
// (Final, Native, Static, Public)
// Parameters:
// TEnumAsByte<EActionStateVariable> eActionState                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::STATIC_IsCombatActionState(TEnumAsByte<EActionStateVariable> eActionState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsCombatActionState");

	ABioPawn_IsCombatActionState_Params params;
	params.eActionState = eActionState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetSpeedRatio
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetSpeedRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetSpeedRatio");

	ABioPawn_GetSpeedRatio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetMaxSpeed
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetMaxSpeed");

	ABioPawn_GetMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetSpeed
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetSpeed");

	ABioPawn_GetSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.MakeVulnerable
// (Final, Defined, Public)

void ABioPawn::MakeVulnerable()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.MakeVulnerable");

	ABioPawn_MakeVulnerable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CorpseCleanupTimer
// (Defined, Event, Public)

void ABioPawn::CorpseCleanupTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CorpseCleanupTimer");

	ABioPawn_CorpseCleanupTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SpawnDefaultController
// (Defined, Public)

void ABioPawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SpawnDefaultController");

	ABioPawn_SpawnDefaultController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PostBeginPlay
// (Defined, Public)

void ABioPawn::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PostBeginPlay");

	ABioPawn_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.Resurrect
// (Final, Native, Public)
// Parameters:
// float                          fPercentOfHealthRegained       (Parm)
// bool                           bIsInstantaneous               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::Resurrect(float fPercentOfHealthRegained, bool bIsInstantaneous)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.Resurrect");

	ABioPawn_Resurrect_Params params;
	params.fPercentOfHealthRegained = fPercentOfHealthRegained;
	params.bIsInstantaneous = bIsInstantaneous;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.KillAttachedVFX
// (Native, Public)

void ABioPawn::KillAttachedVFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.KillAttachedVFX");

	ABioPawn_KillAttachedVFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeLifeCrust
// (Native, Public)

void ABioPawn::FadeLifeCrust()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeLifeCrust");

	ABioPawn_FadeLifeCrust_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetXLASTClassContextID
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPawn::GetXLASTClassContextID()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetXLASTClassContextID");

	ABioPawn_GetXLASTClassContextID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.SetRichPresence
// (Defined, Event, Public, HasDefaults)

void ABioPawn::SetRichPresence()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetRichPresence");

	ABioPawn_SetRichPresence_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.Died
// (Defined, Event, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.Died");

	ABioPawn_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.PostTeleport
// (Defined, Public)
// Parameters:
// class ATeleporter*             OutTeleporter                  (Parm)

void ABioPawn::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PostTeleport");

	ABioPawn_PostTeleport_Params params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PreTeleport
// (Defined, Public)
// Parameters:
// class ATeleporter*             InTeleporter                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::PreTeleport(class ATeleporter* InTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PreTeleport");

	ABioPawn_PreTeleport_Params params;
	params.InTeleporter = InTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.MoveWeaponToRightHand
// (Defined, Event, Public)

void ABioPawn::MoveWeaponToRightHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.MoveWeaponToRightHand");

	ABioPawn_MoveWeaponToRightHand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.MoveWeaponToLeftHand
// (Defined, Event, Public)

void ABioPawn::MoveWeaponToLeftHand()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.MoveWeaponToLeftHand");

	ABioPawn_MoveWeaponToLeftHand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetFaceFXAudioComponent
// (Defined, Simulated, Event, Public)
// Parameters:
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* ABioPawn::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetFaceFXAudioComponent");

	ABioPawn_GetFaceFXAudioComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.KillSoundSet
// (Native, Public)

void ABioPawn::KillSoundSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.KillSoundSet");

	ABioPawn_KillSoundSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PlaySoundSet
// (Native, Public)
// Parameters:
// unsigned char                  eType                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::PlaySoundSet(unsigned char eType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PlaySoundSet");

	ABioPawn_PlaySoundSet_Params params;
	params.eType = eType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.gibbedBy
// (Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioPawn::gibbedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.gibbedBy");

	ABioPawn_gibbedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.OnTeleportArrived
// (Defined, Public)

void ABioPawn::OnTeleportArrived()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.OnTeleportArrived");

	ABioPawn_OnTeleportArrived_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ReleasePowersCamera
// (Defined, Public)

void ABioPawn::ReleasePowersCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ReleasePowersCamera");

	ABioPawn_ReleasePowersCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RigidBodyCollision
// (Defined, Simulated, Event, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, EditInline)
// class UPrimitiveComponent*     OtherComponent                 (Parm, EditInline)
// struct FCollisionImpactData    RigidCollisionData             (Const, Parm, OutParm, NeedCtorLink)
// int                            ContactIndex                   (Parm)

void ABioPawn::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RigidBodyCollision");

	ABioPawn_RigidBodyCollision_Params params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function BIOC_Base.BioPawn.OnTeleport
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Teleport*        Action                         (Parm)

void ABioPawn::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.OnTeleport");

	ABioPawn_OnTeleport_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PlayFootStepSound
// (Native, Event, Public)
// Parameters:
// int                            FootDown                       (Parm)

void ABioPawn::PlayFootStepSound(int FootDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PlayFootStepSound");

	ABioPawn_PlayFootStepSound_Params params;
	params.FootDown = FootDown;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.setHeadFaceFX
// (Native, Event, Public)

void ABioPawn::setHeadFaceFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.setHeadFaceFX");

	ABioPawn_setHeadFaceFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.OnPlayFaceFXAnim
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_PlayFaceFXAnim*  inAction                       (Parm)

void ABioPawn::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.OnPlayFaceFXAnim");

	ABioPawn_OnPlayFaceFXAnim_Params params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetScale
// (Defined, Public)
// Parameters:
// float                          fScale                         (Parm)

void ABioPawn::SetScale(float fScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetScale");

	ABioPawn_SetScale_Params params;
	params.fScale = fScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.OnEffectsMaterial
// (Defined, Public)
// Parameters:
// class UBioSeqAct_EffectsMaterial* Action                         (Parm)

void ABioPawn::OnEffectsMaterial(class UBioSeqAct_EffectsMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.OnEffectsMaterial");

	ABioPawn_OnEffectsMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ReleasePower
// (Defined, Public)

void ABioPawn::ReleasePower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ReleasePower");

	ABioPawn_ReleasePower_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CanMount
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CanMount()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CanMount");

	ABioPawn_CanMount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.FactionRelationship
// (Native, Public)
// Parameters:
// class APawn*                   oOtherPawn                     (Parm)
// TEnumAsByte<EBioFactionRelationship> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioFactionRelationship> ABioPawn::FactionRelationship(class APawn* oOtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FactionRelationship");

	ABioPawn_FactionRelationship_Params params;
	params.oOtherPawn = oOtherPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GenerateTakeDamageEvent
// (Defined, Public)
// Parameters:
// float                          fPreMitigationDamage           (Parm)
// float                          Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// class UClass*                  DamageType                     (Parm)

void ABioPawn::GenerateTakeDamageEvent(float fPreMitigationDamage, float Damage, class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GenerateTakeDamageEvent");

	ABioPawn_GenerateTakeDamageEvent_Params params;
	params.fPreMitigationDamage = fPreMitigationDamage;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.DoReachedWaypointEvent
// (Defined, Public)
// Parameters:
// class ABioPathPoint*           oPoint                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::DoReachedWaypointEvent(class ABioPathPoint* oPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.DoReachedWaypointEvent");

	ABioPawn_DoReachedWaypointEvent_Params params;
	params.oPoint = oPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.FinishAnimControl
// (Defined, Event, Public)

void ABioPawn::FinishAnimControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FinishAnimControl");

	ABioPawn_FinishAnimControl_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetAnimPosition
// (Defined, Event, Public)
// Parameters:
// struct FName                   SlotName                       (Parm)
// int                            ChannelIndex                   (Parm)
// struct FName                   InAnimSeqName                  (Parm)
// float                          InPosition                     (Parm)
// bool                           bFireNotifies                  (Parm)
// bool                           bLooping                       (Parm)

void ABioPawn::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetAnimPosition");

	ABioPawn_SetAnimPosition_Params params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.BeginAnimControl
// (Defined, Event, Public)
// Parameters:
// TArray<class UAnimSet*>        InAnimSets                     (Parm, NeedCtorLink)

void ABioPawn::BeginAnimControl(TArray<class UAnimSet*> InAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.BeginAnimControl");

	ABioPawn_BeginAnimControl_Params params;
	params.InAnimSets = InAnimSets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.OnToggle
// (Defined, Simulated, Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (Parm)

void ABioPawn::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.OnToggle");

	ABioPawn_OnToggle_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ClearUnregisteredAnimsets
// (Native, Public)

void ABioPawn::ClearUnregisteredAnimsets()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ClearUnregisteredAnimsets");

	ABioPawn_ClearUnregisteredAnimsets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ClearRegisteredCustomAnimsets
// (Native, Public)
// Parameters:
// struct FName                   nmSetGroupName                 (Parm)

void ABioPawn::ClearRegisteredCustomAnimsets(const struct FName& nmSetGroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ClearRegisteredCustomAnimsets");

	ABioPawn_ClearRegisteredCustomAnimsets_Params params;
	params.nmSetGroupName = nmSetGroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RegisterCustomAnimset
// (Native, Public)
// Parameters:
// struct FName                   nmSetGroupName                 (Parm)
// class UAnimSet*                oAnim                          (Parm)

void ABioPawn::RegisterCustomAnimset(const struct FName& nmSetGroupName, class UAnimSet* oAnim)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RegisterCustomAnimset");

	ABioPawn_RegisterCustomAnimset_Params params;
	params.nmSetGroupName = nmSetGroupName;
	params.oAnim = oAnim;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CustomAnimFinished
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAnimName                     (Parm)
// bool                           bIsLooping                     (Parm)

void ABioPawn::CustomAnimFinished(const struct FName& nmAnimName, bool bIsLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CustomAnimFinished");

	ABioPawn_CustomAnimFinished_Params params;
	params.nmAnimName = nmAnimName;
	params.bIsLooping = bIsLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PlayCustomAnimOneShotAnim
// (Defined, Public)
// Parameters:
// struct FName                   nmAnimName                     (Parm)

void ABioPawn::PlayCustomAnimOneShotAnim(const struct FName& nmAnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PlayCustomAnimOneShotAnim");

	ABioPawn_PlayCustomAnimOneShotAnim_Params params;
	params.nmAnimName = nmAnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PlayCustomAnimLoopAnim
// (Defined, Public)
// Parameters:
// struct FName                   nmAnimName                     (Parm)

void ABioPawn::PlayCustomAnimLoopAnim(const struct FName& nmAnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PlayCustomAnimLoopAnim");

	ABioPawn_PlayCustomAnimLoopAnim_Params params;
	params.nmAnimName = nmAnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetCustomAnimState
// (Defined, Public)
// Parameters:
// bool                           bState                         (Parm)

void ABioPawn::SetCustomAnimState(bool bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetCustomAnimState");

	ABioPawn_SetCustomAnimState_Params params;
	params.bState = bState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.EncroachedBy
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioPawn::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.EncroachedBy");

	ABioPawn_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RanInto
// (Defined, Event, Public, HasDefaults)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioPawn::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RanInto");

	ABioPawn_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioPawn::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.Touch");

	ABioPawn_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FireOff
// (Defined, Event, Public)
// Parameters:
// bool                           bAuto                          (Parm)

void ABioPawn::FireOff(bool bAuto)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FireOff");

	ABioPawn_FireOff_Params params;
	params.bAuto = bAuto;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FireOn
// (Defined, Event, Public)
// Parameters:
// bool                           bAuto                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::FireOn(bool bAuto)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FireOn");

	ABioPawn_FireOn_Params params;
	params.bAuto = bAuto;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.StartCrouch
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// float                          HeightAdjust                   (Parm)

void ABioPawn::StartCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.StartCrouch");

	ABioPawn_StartCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.EndCrouch
// (Defined, Simulated, Event, Public, HasDefaults)
// Parameters:
// float                          HeightAdjust                   (Parm)

void ABioPawn::EndCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.EndCrouch");

	ABioPawn_EndCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetPlayerPawnConversationCloseupCameraHook
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetPlayerPawnConversationCloseupCameraHook()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetPlayerPawnConversationCloseupCameraHook");

	ABioPawn_GetPlayerPawnConversationCloseupCameraHook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetPlayerPawnTacSelCameraHook
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetPlayerPawnTacSelCameraHook()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetPlayerPawnTacSelCameraHook");

	ABioPawn_GetPlayerPawnTacSelCameraHook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetPlayerPawnSniperCameraHook
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetPlayerPawnSniperCameraHook()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetPlayerPawnSniperCameraHook");

	ABioPawn_GetPlayerPawnSniperCameraHook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetPlayerPawnCombatCameraHookNormal
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetPlayerPawnCombatCameraHookNormal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetPlayerPawnCombatCameraHookNormal");

	ABioPawn_GetPlayerPawnCombatCameraHookNormal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetPlayerPawnCombatCameraHook
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioSide>          Side                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetPlayerPawnCombatCameraHook(TEnumAsByte<EBioSide> Side)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetPlayerPawnCombatCameraHook");

	ABioPawn_GetPlayerPawnCombatCameraHook_Params params;
	params.Side = Side;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetPlayerPawnCollisionCameraHook
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FVector                 V                              (Parm, OutParm)

void ABioPawn::GetPlayerPawnCollisionCameraHook(struct FVector* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetPlayerPawnCollisionCameraHook");

	ABioPawn_GetPlayerPawnCollisionCameraHook_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (V != nullptr)
		*V = params.V;
}


// Function BIOC_Base.BioPawn.GetPlayerPawnCameraHook
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetPlayerPawnCameraHook()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetPlayerPawnCameraHook");

	ABioPawn_GetPlayerPawnCameraHook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CalculateOffsetHook
// (Native, Public)
// Parameters:
// float                          updown                         (Parm)
// float                          frontback                      (Parm)
// float                          leftright                      (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::CalculateOffsetHook(float updown, float frontback, float leftright)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CalculateOffsetHook");

	ABioPawn_CalculateOffsetHook_Params params;
	params.updown = updown;
	params.frontback = frontback;
	params.leftright = leftright;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetCameraHook
// (Defined, Event, Public)
// Parameters:
// struct FName                   Hook                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetCameraHook(const struct FName& Hook)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetCameraHook");

	ABioPawn_GetCameraHook_Params params;
	params.Hook = Hook;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.HopperAnimLand
// (Defined, Public)

void ABioPawn::HopperAnimLand()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.HopperAnimLand");

	ABioPawn_HopperAnimLand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.HopperAnimJump
// (Defined, Public)

void ABioPawn::HopperAnimJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.HopperAnimJump");

	ABioPawn_HopperAnimJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.HopperAnimRotateForJump
// (Public)

void ABioPawn::HopperAnimRotateForJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.HopperAnimRotateForJump");

	ABioPawn_HopperAnimRotateForJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.StopThrowGrenade
// (Defined, Public)

void ABioPawn::StopThrowGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.StopThrowGrenade");

	ABioPawn_StopThrowGrenade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ThrowGrenade
// (Defined, Public)

void ABioPawn::ThrowGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ThrowGrenade");

	ABioPawn_ThrowGrenade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CreateGrenade
// (Defined, Public)

void ABioPawn::CreateGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CreateGrenade");

	ABioPawn_CreateGrenade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.StartThrowGrenade
// (Defined, Public)

void ABioPawn::StartThrowGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.StartThrowGrenade");

	ABioPawn_StartThrowGrenade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FinishDrawAnim
// (Defined, Event, Public)

void ABioPawn::FinishDrawAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FinishDrawAnim");

	ABioPawn_FinishDrawAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeOutDrawAnim
// (Defined, Event, Public)

void ABioPawn::FadeOutDrawAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeOutDrawAnim");

	ABioPawn_FadeOutDrawAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SwapDrawAnim
// (Defined, Event, Public)

void ABioPawn::SwapDrawAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SwapDrawAnim");

	ABioPawn_SwapDrawAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FinishHolsterAnim
// (Defined, Event, Public)

void ABioPawn::FinishHolsterAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FinishHolsterAnim");

	ABioPawn_FinishHolsterAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeOutHolsterAnim
// (Defined, Event, Public)

void ABioPawn::FadeOutHolsterAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeOutHolsterAnim");

	ABioPawn_FadeOutHolsterAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SwapHolsterAnim
// (Defined, Event, Public)

void ABioPawn::SwapHolsterAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SwapHolsterAnim");

	ABioPawn_SwapHolsterAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeOutExitCombatAnim
// (Defined, Event, Public)

void ABioPawn::FadeOutExitCombatAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeOutExitCombatAnim");

	ABioPawn_FadeOutExitCombatAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeOutEnterCombatAnim
// (Defined, Event, Public)

void ABioPawn::FadeOutEnterCombatAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeOutEnterCombatAnim");

	ABioPawn_FadeOutEnterCombatAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeOutStopAnim
// (Defined, Event, Public)

void ABioPawn::FadeOutStopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeOutStopAnim");

	ABioPawn_FadeOutStopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeOutSkidAnim
// (Defined, Event, Public)

void ABioPawn::FadeOutSkidAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeOutSkidAnim");

	ABioPawn_FadeOutSkidAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FadeOutStartAnim
// (Defined, Event, Public)

void ABioPawn::FadeOutStartAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FadeOutStartAnim");

	ABioPawn_FadeOutStartAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.UnlockAnimRotation
// (Defined, Event, Public)

void ABioPawn::UnlockAnimRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UnlockAnimRotation");

	ABioPawn_UnlockAnimRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetCombatState
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EBioAnimCombatState> eState                         (Parm)

void ABioPawn::SetCombatState(TEnumAsByte<EBioAnimCombatState> eState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetCombatState");

	ABioPawn_SetCombatState_Params params;
	params.eState = eState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RagdollRecoverTimer
// (Defined, Public)

void ABioPawn::RagdollRecoverTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RagdollRecoverTimer");

	ABioPawn_RagdollRecoverTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PostInitAnimTree
// (Defined, Event, Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (Parm, EditInline)

void ABioPawn::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PostInitAnimTree");

	ABioPawn_PostInitAnimTree_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.IncrmentSTAT_AbortedMoveTowards
// (Defined, Public)

void ABioPawn::IncrmentSTAT_AbortedMoveTowards()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IncrmentSTAT_AbortedMoveTowards");

	ABioPawn_IncrmentSTAT_AbortedMoveTowards_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ReportFollowStats
// (Defined, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         Data                           (Parm, OutParm, NeedCtorLink)
// float                          DeltaTime                      (Parm)

void ABioPawn::ReportFollowStats(float DeltaTime, TArray<struct FString>* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ReportFollowStats");

	ABioPawn_ReportFollowStats_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function BIOC_Base.BioPawn.StandardDeviation
// (Defined, Public)
// Parameters:
// TArray<float>                  Data                           (Parm, NeedCtorLink)
// float                          M                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::StandardDeviation(TArray<float> Data, float M)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.StandardDeviation");

	ABioPawn_StandardDeviation_Params params;
	params.Data = Data;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CollectFollowStats
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 DesiredPosition                (Parm)

void ABioPawn::CollectFollowStats(float DeltaTime, const struct FVector& DesiredPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CollectFollowStats");

	ABioPawn_CollectFollowStats_Params params;
	params.DeltaTime = DeltaTime;
	params.DesiredPosition = DesiredPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.UpdateDefaultSpeeds
// (Native, Public)

void ABioPawn::UpdateDefaultSpeeds()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UpdateDefaultSpeeds");

	ABioPawn_UpdateDefaultSpeeds_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetSpeed
// (Defined, Public)
// Parameters:
// float                          NewSpeed                       (Parm)

void ABioPawn::SetSpeed(float NewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetSpeed");

	ABioPawn_SetSpeed_Params params;
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetBaseSpeed
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetBaseSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetBaseSpeed");

	ABioPawn_GetBaseSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.InPlayerParty
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::InPlayerParty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.InPlayerParty");

	ABioPawn_InPlayerParty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CalcCamera
// (Defined, Simulated, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FVector                 out_CamLoc                     (Parm, OutParm)
// struct FRotator                out_CamRot                     (Parm, OutParm)
// float                          out_FOV                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CalcCamera");

	ABioPawn_CalcCamera_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.ClearAllActions
// (Defined, Event, Public)
// Parameters:
// struct FString                 sClearLabel                    (OptionalParm, Parm, NeedCtorLink)

void ABioPawn::ClearAllActions(const struct FString& sClearLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ClearAllActions");

	ABioPawn_ClearAllActions_Params params;
	params.sClearLabel = sClearLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.FindWaypointPathLength
// (Defined, Public)
// Parameters:
// struct FName                   List                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioPawn::FindWaypointPathLength(const struct FName& List)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FindWaypointPathLength");

	ABioPawn_FindWaypointPathLength_Params params;
	params.List = List;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.FindWaypointName
// (Defined, Public)
// Parameters:
// struct FName                   List                           (Parm)
// int                            Index                          (Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ABioPawn::FindWaypointName(const struct FName& List, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.FindWaypointName");

	ABioPawn_FindWaypointName_Params params;
	params.List = List;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CacheWayPointSet
// (Defined, Public)
// Parameters:
// struct FName                   WaypointSetTag                 (Parm)

void ABioPawn::CacheWayPointSet(const struct FName& WaypointSetTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CacheWayPointSet");

	ABioPawn_CacheWayPointSet_Params params;
	params.WaypointSetTag = WaypointSetTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PlayDying
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLoc                         (Parm)

void ABioPawn::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PlayDying");

	ABioPawn_PlayDying_Params params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetAdjustedCollisionCylinderOffset
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetAdjustedCollisionCylinderOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetAdjustedCollisionCylinderOffset");

	ABioPawn_GetAdjustedCollisionCylinderOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetAdjustedCollisionCylinder
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioPawn::GetAdjustedCollisionCylinder()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetAdjustedCollisionCylinder");

	ABioPawn_GetAdjustedCollisionCylinder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.ShouldCrouch
// (Defined, Event, Public)
// Parameters:
// bool                           bCrouch                        (Parm)

void ABioPawn::ShouldCrouch(bool bCrouch)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ShouldCrouch");

	ABioPawn_ShouldCrouch_Params params;
	params.bCrouch = bCrouch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.IsMetaActionInProgress
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsMetaActionInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsMetaActionInProgress");

	ABioPawn_IsMetaActionInProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.Destroyed
// (Defined, Simulated, Public)

void ABioPawn::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.Destroyed");

	ABioPawn_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.BioBeginPlay
// (Defined, Simulated, Public)

void ABioPawn::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.BioBeginPlay");

	ABioPawn_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.Restart
// (Defined, Public)

void ABioPawn::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.Restart");

	ABioPawn_Restart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetCurrentMoveTarget
// (Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oMoveTarget                    (Parm, OutParm)
// struct FVector                 vTarget                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::GetCurrentMoveTarget(class AActor** oMoveTarget, struct FVector* vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetCurrentMoveTarget");

	ABioPawn_GetCurrentMoveTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oMoveTarget != nullptr)
		*oMoveTarget = params.oMoveTarget;
	if (vTarget != nullptr)
		*vTarget = params.vTarget;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.BioProcessDamageIndicator
// (Native, Public)
// Parameters:
// class AController*             InstigatedBy                   (Parm)

void ABioPawn::BioProcessDamageIndicator(class AController* InstigatedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.BioProcessDamageIndicator");

	ABioPawn_BioProcessDamageIndicator_Params params;
	params.InstigatedBy = InstigatedBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetClassification
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioPawnClassification> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioPawnClassification> ABioPawn::GetClassification()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetClassification");

	ABioPawn_GetClassification_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.SetClassification
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioPawnClassification> a_eClassification              (Parm)
// bool                           a_bAsDefault                   (OptionalParm, Parm)

void ABioPawn::SetClassification(TEnumAsByte<EBioPawnClassification> a_eClassification, bool a_bAsDefault)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetClassification");

	ABioPawn_SetClassification_Params params;
	params.a_eClassification = a_eClassification;
	params.a_bAsDefault = a_bAsDefault;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.DroneStartLanding
// (Native, Public)

void ABioPawn::DroneStartLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.DroneStartLanding");

	ABioPawn_DroneStartLanding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.DroneFinishedTakingOff
// (Native, Public)

void ABioPawn::DroneFinishedTakingOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.DroneFinishedTakingOff");

	ABioPawn_DroneFinishedTakingOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RecordBulletsFired
// (Native, Public)
// Parameters:
// struct FString                 sWeaponType                    (Parm, NeedCtorLink)
// bool                           bHitPawn                       (Parm)
// bool                           bHitShield                     (Parm)
// bool                           bHitScenery                    (Parm)
// bool                           bReachedEndOfRange             (Parm)
// class ABioPawn*                PawnHit                        (Parm)
// int                            nSophistication                (Parm)
// float                          fFiringRate                    (Parm)
// float                          fMinDrift                      (Parm)
// float                          fMaxDrift                      (Parm)
// float                          fRange                         (Parm)

void ABioPawn::RecordBulletsFired(const struct FString& sWeaponType, bool bHitPawn, bool bHitShield, bool bHitScenery, bool bReachedEndOfRange, class ABioPawn* PawnHit, int nSophistication, float fFiringRate, float fMinDrift, float fMaxDrift, float fRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RecordBulletsFired");

	ABioPawn_RecordBulletsFired_Params params;
	params.sWeaponType = sWeaponType;
	params.bHitPawn = bHitPawn;
	params.bHitShield = bHitShield;
	params.bHitScenery = bHitScenery;
	params.bReachedEndOfRange = bReachedEndOfRange;
	params.PawnHit = PawnHit;
	params.nSophistication = nSophistication;
	params.fFiringRate = fFiringRate;
	params.fMinDrift = fMinDrift;
	params.fMaxDrift = fMaxDrift;
	params.fRange = fRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.UpdateGrimeGrimeLevel
// (Native, Public)
// Parameters:
// float                          a_fGrimeValue                  (Parm)

void ABioPawn::UpdateGrimeGrimeLevel(float a_fGrimeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UpdateGrimeGrimeLevel");

	ABioPawn_UpdateGrimeGrimeLevel_Params params;
	params.a_fGrimeValue = a_fGrimeValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.UpdateGrimeDirtLevel
// (Native, Public)
// Parameters:
// float                          a_fDirtValue                   (Parm)

void ABioPawn::UpdateGrimeDirtLevel(float a_fDirtValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UpdateGrimeDirtLevel");

	ABioPawn_UpdateGrimeDirtLevel_Params params;
	params.a_fDirtValue = a_fDirtValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.UpdateGrimeCombatLevel
// (Native, Public)
// Parameters:
// float                          a_fCombatValue                 (Parm)

void ABioPawn::UpdateGrimeCombatLevel(float a_fCombatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UpdateGrimeCombatLevel");

	ABioPawn_UpdateGrimeCombatLevel_Params params;
	params.a_fCombatValue = a_fCombatValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.IsShowingHelmet
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsShowingHelmet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsShowingHelmet");

	ABioPawn_IsShowingHelmet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.IsShowingFacePlate
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsShowingFacePlate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsShowingFacePlate");

	ABioPawn_IsShowingFacePlate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.IsShowingVisor
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsShowingVisor()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsShowingVisor");

	ABioPawn_IsShowingVisor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.RequestHelmetVisible
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void ABioPawn::RequestHelmetVisible(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RequestHelmetVisible");

	ABioPawn_RequestHelmetVisible_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RequestFacePlateVisible
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void ABioPawn::RequestFacePlateVisible(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RequestFacePlateVisible");

	ABioPawn_RequestFacePlateVisible_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RequestVisorVisible
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void ABioPawn::RequestVisorVisible(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RequestVisorVisible");

	ABioPawn_RequestVisorVisible_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.OverrideHeadGearVisibility
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void ABioPawn::OverrideHeadGearVisibility(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.OverrideHeadGearVisibility");

	ABioPawn_OverrideHeadGearVisibility_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.IsHeadGearVisiblePreferenceRelevant
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsHeadGearVisiblePreferenceRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsHeadGearVisiblePreferenceRelevant");

	ABioPawn_IsHeadGearVisiblePreferenceRelevant_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetHeadGearVisiblePreference
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::GetHeadGearVisiblePreference()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetHeadGearVisiblePreference");

	ABioPawn_GetHeadGearVisiblePreference_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.SetHeadGearVisiblePreference
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void ABioPawn::SetHeadGearVisiblePreference(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetHeadGearVisiblePreference");

	ABioPawn_SetHeadGearVisiblePreference_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.RestoreCachedHeadGearVisibilityOverride
// (Final, Native, Public)

void ABioPawn::RestoreCachedHeadGearVisibilityOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RestoreCachedHeadGearVisibilityOverride");

	ABioPawn_RestoreCachedHeadGearVisibilityOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CacheHeadGearVisibilityOverride
// (Final, Native, Public)

void ABioPawn::CacheHeadGearVisibilityOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CacheHeadGearVisibilityOverride");

	ABioPawn_CacheHeadGearVisibilityOverride_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CleanUpHopState
// (Native, Public)

void ABioPawn::CleanUpHopState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CleanUpHopState");

	ABioPawn_CleanUpHopState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetPhysHopState
// (Native, Public)
// Parameters:
// TEnumAsByte<EHopPhysicsStates> eNewPhysHopState               (Parm)

void ABioPawn::SetPhysHopState(TEnumAsByte<EHopPhysicsStates> eNewPhysHopState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetPhysHopState");

	ABioPawn_SetPhysHopState_Params params;
	params.eNewPhysHopState = eNewPhysHopState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SafeSetLocation
// (Native, Public)
// Parameters:
// struct FVector                 vDest                          (Parm)

void ABioPawn::SafeSetLocation(const struct FVector& vDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SafeSetLocation");

	ABioPawn_SafeSetLocation_Params params;
	params.vDest = vDest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.PlayFaceFX
// (Native, Public)
// Parameters:
// struct FString                 AnimGroup                      (Parm, NeedCtorLink)
// struct FString                 AnimSeq                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::PlayFaceFX(const struct FString& AnimGroup, const struct FString& AnimSeq)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.PlayFaceFX");

	ABioPawn_PlayFaceFX_Params params;
	params.AnimGroup = AnimGroup;
	params.AnimSeq = AnimSeq;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.SetDefaultFaceFXAsset
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::SetDefaultFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetDefaultFaceFXAsset");

	ABioPawn_SetDefaultFaceFXAsset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.RequestHidden
// (Native, Public)
// Parameters:
// bool                           B                              (Const, Parm)

void ABioPawn::RequestHidden(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RequestHidden");

	ABioPawn_RequestHidden_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetLookAtTarget
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// TEnumAsByte<ELookAtTransitionType> a_eTransition                  (OptionalParm, Parm)
// int                            nRank                          (OptionalParm, Parm)

void ABioPawn::SetLookAtTarget(class AActor* oTarget, TEnumAsByte<ELookAtTransitionType> a_eTransition, int nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetLookAtTarget");

	ABioPawn_SetLookAtTarget_Params params;
	params.oTarget = oTarget;
	params.a_eTransition = a_eTransition;
	params.nRank = nRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetAmbientLookAtTarget
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// int                            nRank                          (OptionalParm, Parm)

void ABioPawn::SetAmbientLookAtTarget(class AActor* oTarget, int nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetAmbientLookAtTarget");

	ABioPawn_SetAmbientLookAtTarget_Params params;
	params.oTarget = oTarget;
	params.nRank = nRank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ExploreMode
// (Native, Public)
// Parameters:
// float                          fDelaySeconds                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::ExploreMode(float fDelaySeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ExploreMode");

	ABioPawn_ExploreMode_Params params;
	params.fDelaySeconds = fDelaySeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.ReadyMode
// (Native, Public)
// Parameters:
// float                          fDelaySeconds                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::ReadyMode(float fDelaySeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ReadyMode");

	ABioPawn_ReadyMode_Params params;
	params.fDelaySeconds = fDelaySeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.UnlockTarget
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::UnlockTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UnlockTarget");

	ABioPawn_UnlockTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.LockTarget
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::LockTarget(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.LockTarget");

	ABioPawn_LockTarget_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetFractionOfEffectsMaterialEnabled
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetFractionOfEffectsMaterialEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetFractionOfEffectsMaterialEnabled");

	ABioPawn_GetFractionOfEffectsMaterialEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.SetFractionOfEffectsMaterialEnabled
// (Native, Public)
// Parameters:
// float                          FractionEnabled                (Parm)

void ABioPawn::SetFractionOfEffectsMaterialEnabled(float FractionEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetFractionOfEffectsMaterialEnabled");

	ABioPawn_SetFractionOfEffectsMaterialEnabled_Params params;
	params.FractionEnabled = FractionEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetEffectsMaterialType
// (Native, Public)
// Parameters:
// TEnumAsByte<EEffectsMaterialType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EEffectsMaterialType> ABioPawn::GetEffectsMaterialType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetEffectsMaterialType");

	ABioPawn_GetEffectsMaterialType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.SetEffectsMaterialType
// (Native, Public)
// Parameters:
// TEnumAsByte<EEffectsMaterialType> EffectsMaterialType            (Parm)

void ABioPawn::SetEffectsMaterialType(TEnumAsByte<EEffectsMaterialType> EffectsMaterialType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetEffectsMaterialType");

	ABioPawn_SetEffectsMaterialType_Params params;
	params.EffectsMaterialType = EffectsMaterialType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.InitializeForPlay
// (Final, Native, Private)

void ABioPawn::InitializeForPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.InitializeForPlay");

	ABioPawn_InitializeForPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CancelCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)

void ABioPawn::CancelCapability(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CancelCapability");

	ABioPawn_CancelCapability_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetCapabilityPowerBuildUp
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetCapabilityPowerBuildUp(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetCapabilityPowerBuildUp");

	ABioPawn_GetCapabilityPowerBuildUp_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetCapabilityImpactRadius
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetCapabilityImpactRadius(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetCapabilityImpactRadius");

	ABioPawn_GetCapabilityImpactRadius_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetCapabilityIsEnabled
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::GetCapabilityIsEnabled(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetCapabilityIsEnabled");

	ABioPawn_GetCapabilityIsEnabled_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetCapabilityCoolDownTimeRemaining
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetCapabilityCoolDownTimeRemaining(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetCapabilityCoolDownTimeRemaining");

	ABioPawn_GetCapabilityCoolDownTimeRemaining_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.HasCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::HasCapability(class UBioCapability* oCapability)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.HasCapability");

	ABioPawn_HasCapability_Params params;
	params.oCapability = oCapability;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.AddCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          fReqStabilityRatio             (Parm)
// float                          fAbortStabilityRatio           (Parm)
// float                          fTimeOut                       (Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioPawn::AddCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.AddCapability");

	ABioPawn_AddCapability_Params params;
	params.oCapability = oCapability;
	params.fReqStabilityRatio = fReqStabilityRatio;
	params.fAbortStabilityRatio = fAbortStabilityRatio;
	params.fTimeOut = fTimeOut;
	params.oTarget = oTarget;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.DoCapability
// (Final, Native, Public)
// Parameters:
// class UBioCapability*          oCapability                    (Parm)
// float                          fReqStabilityRatio             (Parm)
// float                          fAbortStabilityRatio           (Parm)
// float                          fTimeOut                       (Parm)
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 vTarget                        (OptionalParm, Parm)
// class UBioSeqData*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSeqData* ABioPawn::DoCapability(class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.DoCapability");

	ABioPawn_DoCapability_Params params;
	params.oCapability = oCapability;
	params.fReqStabilityRatio = fReqStabilityRatio;
	params.fAbortStabilityRatio = fAbortStabilityRatio;
	params.fTimeOut = fTimeOut;
	params.oTarget = oTarget;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.AppendPawnCapabilitiesToList
// (Final, Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioCapabilityTypes> nCapType                       (Parm)
// TArray<class UBioCapability*>  oOutCaps                       (Parm, OutParm, NeedCtorLink)

void ABioPawn::AppendPawnCapabilitiesToList(TEnumAsByte<EBioCapabilityTypes> nCapType, TArray<class UBioCapability*>* oOutCaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.AppendPawnCapabilitiesToList");

	ABioPawn_AppendPawnCapabilitiesToList_Params params;
	params.nCapType = nCapType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oOutCaps != nullptr)
		*oOutCaps = params.oOutCaps;
}


// Function BIOC_Base.BioPawn.RecomputeCapabilities
// (Final, Native, Public)

void ABioPawn::RecomputeCapabilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RecomputeCapabilities");

	ABioPawn_RecomputeCapabilities_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.IsCurrentWeaponProficient
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsCurrentWeaponProficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsCurrentWeaponProficient");

	ABioPawn_IsCurrentWeaponProficient_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.IsWeaponProficient
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> eWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsWeaponProficient(TEnumAsByte<EBioItemWeaponRangedType> eWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsWeaponProficient");

	ABioPawn_IsWeaponProficient_Params params;
	params.eWeaponType = eWeaponType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.IsDead
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsDead");

	ABioPawn_IsDead_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.AnimNodeBlendComplete
// (Final, Native, Public)
// Parameters:
// struct FName                   sBlendName                     (Parm)
// int                            nChild                         (Parm)

void ABioPawn::AnimNodeBlendComplete(const struct FName& sBlendName, int nChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.AnimNodeBlendComplete");

	ABioPawn_AnimNodeBlendComplete_Params params;
	params.sBlendName = sBlendName;
	params.nChild = nChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.AnimNodePlayFinished
// (Final, Native, Public)
// Parameters:
// struct FName                   sBlendName                     (Parm)

void ABioPawn::AnimNodePlayFinished(const struct FName& sBlendName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.AnimNodePlayFinished");

	ABioPawn_AnimNodePlayFinished_Params params;
	params.sBlendName = sBlendName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CanPlayAnimNode
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   sBlendName                     (Parm)
// int                            nFlags                         (Parm)
// float                          fWeight                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CanPlayAnimNode(const struct FName& sBlendName, int nFlags, float* fWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CanPlayAnimNode");

	ABioPawn_CanPlayAnimNode_Params params;
	params.sBlendName = sBlendName;
	params.nFlags = nFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fWeight != nullptr)
		*fWeight = params.fWeight;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetAnimLengthAndPos
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   sAnimName                      (Parm)
// float                          fAnimLength                    (Parm, OutParm)
// float                          fAnimPos                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::GetAnimLengthAndPos(const struct FName& sAnimName, float* fAnimLength, float* fAnimPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetAnimLengthAndPos");

	ABioPawn_GetAnimLengthAndPos_Params params;
	params.sAnimName = sAnimName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fAnimLength != nullptr)
		*fAnimLength = params.fAnimLength;
	if (fAnimPos != nullptr)
		*fAnimPos = params.fAnimPos;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.IsAnimOnRightFoot
// (Final, Native, Public)
// Parameters:
// bool                           bCycle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsAnimOnRightFoot(bool bCycle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsAnimOnRightFoot");

	ABioPawn_IsAnimOnRightFoot_Params params;
	params.bCycle = bCycle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.RequestTurnInPlace
// (Final, Native, Public)
// Parameters:
// struct FRotator                rDesDir                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::RequestTurnInPlace(const struct FRotator& rDesDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.RequestTurnInPlace");

	ABioPawn_RequestTurnInPlace_Params params;
	params.rDesDir = rDesDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.StartAnimStartMove
// (Final, Native, Public)

void ABioPawn::StartAnimStartMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.StartAnimStartMove");

	ABioPawn_StartAnimStartMove_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CanAnimMoveStop
// (Final, Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CanAnimMoveStop(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CanAnimMoveStop");

	ABioPawn_CanAnimMoveStop_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CanAnimSkidTurn
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CanAnimSkidTurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CanAnimSkidTurn");

	ABioPawn_CanAnimSkidTurn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CanAnimMoveStart
// (Final, Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)
// bool                           bIgnoreSpeedAndTime            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CanAnimMoveStart(float fDeltaTime, bool bIgnoreSpeedAndTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CanAnimMoveStart");

	ABioPawn_CanAnimMoveStart_Params params;
	params.fDeltaTime = fDeltaTime;
	params.bIgnoreSpeedAndTime = bIgnoreSpeedAndTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.TickMoveControl
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void ABioPawn::TickMoveControl(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.TickMoveControl");

	ABioPawn_TickMoveControl_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CalcYawDifference
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FRotator                rDesDir                        (Parm)
// float                          fDir                           (Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::CalcYawDifference(const struct FRotator& rDesDir, float* fDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CalcYawDifference");

	ABioPawn_CalcYawDifference_Params params;
	params.rDesDir = rDesDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fDir != nullptr)
		*fDir = params.fDir;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CalcYawInterpolation
// (Final, Native, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FRotator                rDesDir                        (Parm)
// float                          fDegPerSec                     (Parm)
// float                          fDeltaYaw                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CalcYawInterpolation(float fDeltaTime, const struct FRotator& rDesDir, float fDegPerSec, float* fDeltaYaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CalcYawInterpolation");

	ABioPawn_CalcYawInterpolation_Params params;
	params.fDeltaTime = fDeltaTime;
	params.rDesDir = rDesDir;
	params.fDegPerSec = fDegPerSec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fDeltaYaw != nullptr)
		*fDeltaYaw = params.fDeltaYaw;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.CalcSpeedInterpolation
// (Native, Public, HasOutParms)
// Parameters:
// float                          fDeltaTime                     (Parm)
// float                          fDesiredSpeed                  (Parm)
// float                          fDeltaSpeed                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CalcSpeedInterpolation(float fDeltaTime, float fDesiredSpeed, float* fDeltaSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CalcSpeedInterpolation");

	ABioPawn_CalcSpeedInterpolation_Params params;
	params.fDeltaTime = fDeltaTime;
	params.fDesiredSpeed = fDesiredSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fDeltaSpeed != nullptr)
		*fDeltaSpeed = params.fDeltaSpeed;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.GetRotationRate
// (Native, Public, HasOutParms)
// Parameters:
// int                            nPitch                         (Parm, OutParm)
// int                            nYaw                           (Parm, OutParm)
// int                            nRoll                          (Parm, OutParm)

void ABioPawn::GetRotationRate(int* nPitch, int* nYaw, int* nRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetRotationRate");

	ABioPawn_GetRotationRate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nPitch != nullptr)
		*nPitch = params.nPitch;
	if (nYaw != nullptr)
		*nYaw = params.nYaw;
	if (nRoll != nullptr)
		*nRoll = params.nRoll;
}


// Function BIOC_Base.BioPawn.SetDesiredRotation
// (Native, Public)
// Parameters:
// struct FRotator                rDesiredRotation               (Parm)
// bool                           bForce                         (OptionalParm, Parm)

void ABioPawn::SetDesiredRotation(const struct FRotator& rDesiredRotation, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetDesiredRotation");

	ABioPawn_SetDesiredRotation_Params params;
	params.rDesiredRotation = rDesiredRotation;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.GetDesiredSpeed
// (Native, Public)
// Parameters:
// TEnumAsByte<EGetDesiredSpeedMode> eMode                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioPawn::GetDesiredSpeed(TEnumAsByte<EGetDesiredSpeedMode> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.GetDesiredSpeed");

	ABioPawn_GetDesiredSpeed_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.SetDesiredSpeed
// (Native, Public)
// Parameters:
// float                          fDesiredSpeed                  (Parm)
// bool                           bForce                         (Parm)

void ABioPawn::SetDesiredSpeed(float fDesiredSpeed, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetDesiredSpeed");

	ABioPawn_SetDesiredSpeed_Params params;
	params.fDesiredSpeed = fDesiredSpeed;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.CanRagdoll
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::CanRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.CanRagdoll");

	ABioPawn_CanRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.TermRagdoll
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.TermRagdoll");

	ABioPawn_TermRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.InitRagdoll
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.InitRagdoll");

	ABioPawn_InitRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.IsFalling
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioPawn::IsFalling()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.IsFalling");

	ABioPawn_IsFalling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawn.UnapplyMaterialParameters
// (Final, Native, Public)
// Parameters:
// class UBioMaterialOverride*    pMaterialParameters            (Parm)

void ABioPawn::UnapplyMaterialParameters(class UBioMaterialOverride* pMaterialParameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.UnapplyMaterialParameters");

	ABioPawn_UnapplyMaterialParameters_Params params;
	params.pMaterialParameters = pMaterialParameters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.ApplyMaterialParameters
// (Final, Native, Public)
// Parameters:
// class UBioMaterialOverride*    pMaterialParameters            (Parm)

void ABioPawn::ApplyMaterialParameters(class UBioMaterialOverride* pMaterialParameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ApplyMaterialParameters");

	ABioPawn_ApplyMaterialParameters_Params params;
	params.pMaterialParameters = pMaterialParameters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetTextureParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// class UTexture*                Value                          (Parm)

void ABioPawn::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetTextureParameterValue");

	ABioPawn_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetScalarParameterValue
// (Native, Public)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// float                          Value                          (Parm)

void ABioPawn::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetScalarParameterValue");

	ABioPawn_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawn.SetVectorParameterValue
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (Parm)
// struct FColor                  Value                          (Const, Parm, OutParm)

void ABioPawn::SetVectorParameterValue(const struct FName& ParameterName, struct FColor* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.SetVectorParameterValue");

	ABioPawn_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function BIOC_Base.BioPawn.ClearCoverState
// (Native, Public)

void ABioPawn::ClearCoverState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawn.ClearCoverState");

	ABioPawn_ClearCoverState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnItemInterface.PrevQuickSlot
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::PrevQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.PrevQuickSlot");

	UBioPawnItemInterface_PrevQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.NextQuickSlot
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::NextQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.NextQuickSlot");

	UBioPawnItemInterface_NextQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.ChangeToQuickSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> eSlot                          (Parm)

void UBioPawnItemInterface::ChangeToQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> eSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.ChangeToQuickSlot");

	UBioPawnItemInterface_ChangeToQuickSlot_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnItemInterface.DeactivateCurrentQuickSlot
// (Native, Public)

void UBioPawnItemInterface::DeactivateCurrentQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.DeactivateCurrentQuickSlot");

	UBioPawnItemInterface_DeactivateCurrentQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnItemInterface.ActivateCurrentQuickSlot
// (Native, Public)

void UBioPawnItemInterface::ActivateCurrentQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.ActivateCurrentQuickSlot");

	UBioPawnItemInterface_ActivateCurrentQuickSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnItemInterface.ClearQuickSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Type                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnItemInterface::ClearQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.ClearQuickSlot");

	UBioPawnItemInterface_ClearQuickSlot_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.SetQuickSlot
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> Type                           (Parm)
// int                            nInvItem                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnItemInterface::SetQuickSlot(TEnumAsByte<EBioItemWeaponRangedType> Type, int nInvItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.SetQuickSlot");

	UBioPawnItemInterface_SetQuickSlot_Params params;
	params.Type = Type;
	params.nInvItem = nInvItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.UpdatePawnAppearance
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioEquipmentSlot> eSlot                          (Parm)
// class ABioPawn*                Pawn                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::UpdatePawnAppearance(TEnumAsByte<EBioEquipmentSlot> eSlot, class ABioPawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.UpdatePawnAppearance");

	UBioPawnItemInterface_UpdatePawnAppearance_Params params;
	params.eSlot = eSlot;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.Unequip
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioEquipmentSlot> eSlot                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnItemInterface::Unequip(TEnumAsByte<EBioEquipmentSlot> eSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.Unequip");

	UBioPawnItemInterface_Unequip_Params params;
	params.eSlot = eSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.Equip
// (Native, Public)
// Parameters:
// int                            nItemIndex                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioPawnItemInterface::Equip(int nItemIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.Equip");

	UBioPawnItemInterface_Equip_Params params;
	params.nItemIndex = nItemIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.CreateClassFromString
// (Native, Public)
// Parameters:
// class UClass*                  clsBase                        (Parm)
// struct FString                 sClass                         (Parm, NeedCtorLink)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioPawnItemInterface::CreateClassFromString(class UClass* clsBase, const struct FString& sClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.CreateClassFromString");

	UBioPawnItemInterface_CreateClassFromString_Params params;
	params.clsBase = clsBase;
	params.sClass = sClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.GetStringEntryIN
// (Native, Static, Public, HasOutParms)
// Parameters:
// class UBio2DA*                 tbl                            (Parm)
// int                            nRow                           (Parm)
// struct FName                   nmColumn                       (Parm)
// struct FString                 S                              (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::STATIC_GetStringEntryIN(class UBio2DA* tbl, int nRow, const struct FName& nmColumn, struct FString* S)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.GetStringEntryIN");

	UBioPawnItemInterface_GetStringEntryIN_Params params;
	params.tbl = tbl;
	params.nRow = nRow;
	params.nmColumn = nmColumn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (S != nullptr)
		*S = params.S;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.GetIntEntryIN
// (Native, Static, Public, HasOutParms)
// Parameters:
// class UBio2DA*                 tbl                            (Parm)
// int                            nRow                           (Parm)
// struct FName                   nmColumn                       (Parm)
// int                            N                              (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::STATIC_GetIntEntryIN(class UBio2DA* tbl, int nRow, const struct FName& nmColumn, int* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.GetIntEntryIN");

	UBioPawnItemInterface_GetIntEntryIN_Params params;
	params.tbl = tbl;
	params.nRow = nRow;
	params.nmColumn = nmColumn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.GetNameEntryIN
// (Native, Static, Public, HasOutParms)
// Parameters:
// class UBio2DA*                 tbl                            (Parm)
// int                            nRow                           (Parm)
// struct FName                   nmColumn                       (Parm)
// struct FName                   nm                             (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::STATIC_GetNameEntryIN(class UBio2DA* tbl, int nRow, const struct FName& nmColumn, struct FName* nm)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.GetNameEntryIN");

	UBioPawnItemInterface_GetNameEntryIN_Params params;
	params.tbl = tbl;
	params.nRow = nRow;
	params.nmColumn = nmColumn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nm != nullptr)
		*nm = params.nm;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.IsArmored
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::IsArmored()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.IsArmored");

	UBioPawnItemInterface_IsArmored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.EBioWeaponTypeOp
// (Public, Delegate, HasOutParms)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> eSlot                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::EBioWeaponTypeOp(TEnumAsByte<EBioItemWeaponRangedType>* eSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.EBioWeaponTypeOp");

	UBioPawnItemInterface_EBioWeaponTypeOp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (eSlot != nullptr)
		*eSlot = params.eSlot;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPawnItemInterface.QuickSlotIter
// (Public, Delegate)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPawnItemInterface::QuickSlotIter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnItemInterface.QuickSlotIter");

	UBioPawnItemInterface_QuickSlotIter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.GetLaunchPoint
// (Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioGrenade::GetLaunchPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.GetLaunchPoint");

	ABioGrenade_GetLaunchPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.GetItem
// (Final, Defined, Event, Public)
// Parameters:
// class UBioItemGrenade*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemGrenade* ABioGrenade::GetItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.GetItem");

	ABioGrenade_GetItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.ClearItem
// (Final, Defined, Public)

void ABioGrenade::ClearItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.ClearItem");

	ABioGrenade_ClearItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenade.SetItem
// (Final, Defined, Public)
// Parameters:
// class UBioItemGrenade*         pItem                          (Parm)

void ABioGrenade::SetItem(class UBioItemGrenade* pItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.SetItem");

	ABioGrenade_SetItem_Params params;
	params.pItem = pItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenade.LaunchGrenade
// (Defined, Event, Public)
// Parameters:
// struct FVector                 vVelocity                      (Parm)
// class ABioGrenadeProjectile*   ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioGrenadeProjectile* ABioGrenade::LaunchGrenade(const struct FVector& vVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.LaunchGrenade");

	ABioGrenade_LaunchGrenade_Params params;
	params.vVelocity = vVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.LaunchGrenadeAtPoint
// (Defined, Event, Public)
// Parameters:
// struct FVector                 vTarget                        (Parm)
// class ABioGrenadeProjectile*   ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioGrenadeProjectile* ABioGrenade::LaunchGrenadeAtPoint(const struct FVector& vTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.LaunchGrenadeAtPoint");

	ABioGrenade_LaunchGrenadeAtPoint_Params params;
	params.vTarget = vTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.LaunchGrenadeAtActor
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// class ABioGrenadeProjectile*   ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioGrenadeProjectile* ABioGrenade::LaunchGrenadeAtActor(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.LaunchGrenadeAtActor");

	ABioGrenade_LaunchGrenadeAtActor_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.MakeProjectile
// (Final, Defined, Private)
// Parameters:
// class ABioGrenadeProjectile*   ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioGrenadeProjectile* ABioGrenade::MakeProjectile()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.MakeProjectile");

	ABioGrenade_MakeProjectile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.GetProjectileClass
// (Defined, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioGrenade::GetProjectileClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.GetProjectileClass");

	ABioGrenade_GetProjectileClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.GetPhysicalFireStartLoc
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 AimDir                         (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioGrenade::GetPhysicalFireStartLoc(const struct FVector& AimDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.GetPhysicalFireStartLoc");

	ABioGrenade_GetPhysicalFireStartLoc_Params params;
	params.AimDir = AimDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGrenade.DetachWeaponFromMesh
// (Defined, Simulated, Public)
// Parameters:
// class USkeletalMeshComponent*  MeshCpnt                       (Parm, EditInline)

void ABioGrenade::DetachWeaponFromMesh(class USkeletalMeshComponent* MeshCpnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.DetachWeaponFromMesh");

	ABioGrenade_DetachWeaponFromMesh_Params params;
	params.MeshCpnt = MeshCpnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGrenade.AttachWeaponTo
// (Defined, Simulated, Public)
// Parameters:
// class USkeletalMeshComponent*  MeshCpnt                       (Parm, EditInline)
// struct FName                   BoneName                       (Parm)

void ABioGrenade::AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGrenade.AttachWeaponTo");

	ABioGrenade_AttachWeaponTo_Params params;
	params.MeshCpnt = MeshCpnt;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeapon.Deactivate
// (Native, Public)
// Parameters:
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* ABioWeapon::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.Deactivate");

	ABioWeapon_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeapon.Activate
// (Native, Public)
// Parameters:
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* ABioWeapon::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.Activate");

	ABioWeapon_Activate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeapon.GetFractionOfEffectsMaterialEnabled
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioWeapon::GetFractionOfEffectsMaterialEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.GetFractionOfEffectsMaterialEnabled");

	ABioWeapon_GetFractionOfEffectsMaterialEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeapon.SetFractionOfEffectsMaterialEnabled
// (Native, Public)
// Parameters:
// float                          FractionEnabled                (Parm)

void ABioWeapon::SetFractionOfEffectsMaterialEnabled(float FractionEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.SetFractionOfEffectsMaterialEnabled");

	ABioWeapon_SetFractionOfEffectsMaterialEnabled_Params params;
	params.FractionEnabled = FractionEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeapon.GetEffectsMaterialType
// (Native, Public)
// Parameters:
// TEnumAsByte<EEffectsMaterialType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EEffectsMaterialType> ABioWeapon::GetEffectsMaterialType()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.GetEffectsMaterialType");

	ABioWeapon_GetEffectsMaterialType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeapon.SetEffectsMaterialType
// (Native, Public)
// Parameters:
// TEnumAsByte<EEffectsMaterialType> EffectsMaterialType            (Parm)

void ABioWeapon::SetEffectsMaterialType(TEnumAsByte<EEffectsMaterialType> EffectsMaterialType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.SetEffectsMaterialType");

	ABioWeapon_SetEffectsMaterialType_Params params;
	params.EffectsMaterialType = EffectsMaterialType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeapon.UpdateAppearance
// (Native, Public)

void ABioWeapon::UpdateAppearance()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.UpdateAppearance");

	ABioWeapon_UpdateAppearance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeapon.DetachFromPawn
// (Native, Public)
// Parameters:
// bool                           bCinematicsMode                (OptionalParm, Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioWeapon::DetachFromPawn(bool bCinematicsMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.DetachFromPawn");

	ABioWeapon_DetachFromPawn_Params params;
	params.bCinematicsMode = bCinematicsMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeapon.ClearItem
// (Native, Public)
// Parameters:
// class UBioItemWeapon*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemWeapon* ABioWeapon::ClearItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.ClearItem");

	ABioWeapon_ClearItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeapon.SetItem
// (Native, Public)
// Parameters:
// class UBioItemWeapon*          oItem                          (Parm)
// class UBioItemWeapon*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemWeapon* ABioWeapon::SetItem(class UBioItemWeapon* oItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.SetItem");

	ABioWeapon_SetItem_Params params;
	params.oItem = oItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeapon.OnEffectsMaterial
// (Defined, Public)
// Parameters:
// class UBioSeqAct_EffectsMaterial* Action                         (Parm)

void ABioWeapon::OnEffectsMaterial(class UBioSeqAct_EffectsMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.OnEffectsMaterial");

	ABioWeapon_OnEffectsMaterial_Params params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeapon.ProxyPlaySound
// (Defined, Event, Public)
// Parameters:
// class USoundCue*               SoundCue                       (Parm)

void ABioWeapon::ProxyPlaySound(class USoundCue* SoundCue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.ProxyPlaySound");

	ABioWeapon_ProxyPlaySound_Params params;
	params.SoundCue = SoundCue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeapon.AttachToMesh
// (Native, Event, Public)
// Parameters:
// class USkeletalMeshComponent*  MeshComponent                  (Parm, EditInline)
// struct FName                   SocketName                     (OptionalParm, Parm)
// bool                           bCinematicsMode                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWeapon::AttachToMesh(class USkeletalMeshComponent* MeshComponent, const struct FName& SocketName, bool bCinematicsMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeapon.AttachToMesh");

	ABioWeapon_AttachToMesh_Params params;
	params.MeshComponent = MeshComponent;
	params.SocketName = SocketName;
	params.bCinematicsMode = bCinematicsMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.PlayWeaponSound
// (Native, Public)
// Parameters:
// struct FName                   nmSound                        (Parm)

void ABioWeaponRanged::PlayWeaponSound(const struct FName& nmSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.PlayWeaponSound");

	ABioWeaponRanged_PlayWeaponSound_Params params;
	params.nmSound = nmSound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.PlayShootingWhileOverheatedSound
// (Native, Public)

void ABioWeaponRanged::PlayShootingWhileOverheatedSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.PlayShootingWhileOverheatedSound");

	ABioWeaponRanged_PlayShootingWhileOverheatedSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.PlayOverheatSound
// (Native, Public)

void ABioWeaponRanged::PlayOverheatSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.PlayOverheatSound");

	ABioWeaponRanged_PlayOverheatSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.OnHide
// (Final, Native, Public)
// Parameters:
// bool                           bHide                          (Parm)

void ABioWeaponRanged::OnHide(bool bHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.OnHide");

	ABioWeaponRanged_OnHide_Params params;
	params.bHide = bHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.TickHeat
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void ABioWeaponRanged::TickHeat(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.TickHeat");

	ABioWeaponRanged_TickHeat_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.GetVisualExplosionSet
// (Native, Public)
// Parameters:
// class UBioVISGrenade*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioVISGrenade* ABioWeaponRanged::GetVisualExplosionSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.GetVisualExplosionSet");

	ABioWeaponRanged_GetVisualExplosionSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.GetVisualImpactSet
// (Native, Public)
// Parameters:
// class UBioVISWeapon*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioVISWeapon* ABioWeaponRanged::GetVisualImpactSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.GetVisualImpactSet");

	ABioWeaponRanged_GetVisualImpactSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.ReleaseVisualEffect
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioWeaponVisualEffect> Effect                         (Parm)

void ABioWeaponRanged::ReleaseVisualEffect(TEnumAsByte<EBioWeaponVisualEffect> Effect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.ReleaseVisualEffect");

	ABioWeaponRanged_ReleaseVisualEffect_Params params;
	params.Effect = Effect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.GetVisualEffect
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioWeaponVisualEffect> Effect                         (Parm)
// bool                           bCacheEffect                   (OptionalParm, Parm)
// class ABioVisualEffect*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioVisualEffect* ABioWeaponRanged::GetVisualEffect(TEnumAsByte<EBioWeaponVisualEffect> Effect, bool bCacheEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.GetVisualEffect");

	ABioWeaponRanged_GetVisualEffect_Params params;
	params.Effect = Effect;
	params.bCacheEffect = bCacheEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.TickFire
// (Native, Public)
// Parameters:
// float                          TimeDelta                      (Parm)

void ABioWeaponRanged::TickFire(float TimeDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.TickFire");

	ABioWeaponRanged_TickFire_Params params;
	params.TimeDelta = TimeDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.WeaponRanges
// (Native, Public, HasOutParms)
// Parameters:
// float                          MinRange                       (Parm, OutParm)
// float                          BestRange                      (Parm, OutParm)
// float                          MaxRange                       (Parm, OutParm)

void ABioWeaponRanged::WeaponRanges(float* MinRange, float* BestRange, float* MaxRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.WeaponRanges");

	ABioWeaponRanged_WeaponRanges_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinRange != nullptr)
		*MinRange = params.MinRange;
	if (BestRange != nullptr)
		*BestRange = params.BestRange;
	if (MaxRange != nullptr)
		*MaxRange = params.MaxRange;
}


// Function BIOC_Base.BioWeaponRanged.GetAttributes
// (Native, Public)
// Parameters:
// class UBioAttributesItemWeaponRanged* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioAttributesItemWeaponRanged* ABioWeaponRanged::GetAttributes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.GetAttributes");

	ABioWeaponRanged_GetAttributes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.IsPenetratedByInstantFire
// (Native, Public)
// Parameters:
// class AActor*                  oHitActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWeaponRanged::IsPenetratedByInstantFire(class AActor* oHitActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.IsPenetratedByInstantFire");

	ABioWeaponRanged_IsPenetratedByInstantFire_Params params;
	params.oHitActor = oHitActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.DoCoolDownEffect
// (Defined, Event, Public)

void ABioWeaponRanged::DoCoolDownEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.DoCoolDownEffect");

	ABioWeaponRanged_DoCoolDownEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.DoBulletTraceEffect
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vHitPoint                      (Const, Parm, OutParm)

void ABioWeaponRanged::DoBulletTraceEffect(struct FVector* vHitPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.DoBulletTraceEffect");

	ABioWeaponRanged_DoBulletTraceEffect_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vHitPoint != nullptr)
		*vHitPoint = params.vHitPoint;
}


// Function BIOC_Base.BioWeaponRanged.FireOff
// (Defined, Event, Public)

void ABioWeaponRanged::FireOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.FireOff");

	ABioWeaponRanged_FireOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.FireOn
// (Defined, Event, Public)

void ABioWeaponRanged::FireOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.FireOn");

	ABioWeaponRanged_FireOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.SetMuzzleFlashState
// (Native, Public)
// Parameters:
// bool                           bState                         (Parm)

void ABioWeaponRanged::SetMuzzleFlashState(bool bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.SetMuzzleFlashState");

	ABioWeaponRanged_SetMuzzleFlashState_Params params;
	params.bState = bState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWeaponRanged.Deactivate
// (Native, Public)
// Parameters:
// class ABioPawn*                ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPawn* ABioWeaponRanged::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.Deactivate");

	ABioWeaponRanged_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.AttachToMesh
// (Native, Event, Public)
// Parameters:
// class USkeletalMeshComponent*  MeshComponent                  (Parm, EditInline)
// struct FName                   SocketName                     (OptionalParm, Parm)
// bool                           bCinematicsMode                (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWeaponRanged::AttachToMesh(class USkeletalMeshComponent* MeshComponent, const struct FName& SocketName, bool bCinematicsMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.AttachToMesh");

	ABioWeaponRanged_AttachToMesh_Params params;
	params.MeshComponent = MeshComponent;
	params.SocketName = SocketName;
	params.bCinematicsMode = bCinematicsMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWeaponRanged.SetItem
// (Native, Public)
// Parameters:
// class UBioItemWeapon*          oItem                          (Parm)
// class UBioItemWeapon*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItemWeapon* ABioWeaponRanged::SetItem(class UBioItemWeapon* oItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWeaponRanged.SetItem");

	ABioWeaponRanged_SetItem_Params params;
	params.oItem = oItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActive.ValidSuperMode
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eMode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActive::STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActive.ValidSuperMode");

	UBioActive_ValidSuperMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActive.GetEventTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioActive::GetEventTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActive.GetEventTypeName");

	UBioActive_GetEventTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActive.Initialize
// (Native, Public)
// Parameters:
// class AActor*                  oOwner                         (Parm)

void UBioActive::Initialize(class AActor* oOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActive.Initialize");

	UBioActive_Initialize_Params params;
	params.oOwner = oOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActive.InitializeInternal
// (Final, Native, Private)

void UBioActive::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActive.InitializeInternal");

	UBioActive_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveFall.ValidSuperMode
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eMode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActiveFall::STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveFall.ValidSuperMode");

	UBioActiveFall_ValidSuperMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveFall.InitializeInternal
// (Final, Native, Private)

void UBioActiveFall::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveFall.InitializeInternal");

	UBioActiveFall_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveGrenade.GUIState
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGrenadeActiveState> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioGrenadeActiveState> UBioActiveGrenade::GUIState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveGrenade.GUIState");

	UBioActiveGrenade_GUIState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveGrenade.GetEventTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioActiveGrenade::GetEventTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveGrenade.GetEventTypeName");

	UBioActiveGrenade_GetEventTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveGrenade.ValidSuperMode
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eMode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActiveGrenade::STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveGrenade.ValidSuperMode");

	UBioActiveGrenade_ValidSuperMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveGrenade.InitializeInternal
// (Final, Native, Private)

void UBioActiveGrenade::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveGrenade.InitializeInternal");

	UBioActiveGrenade_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveMount.ValidSuperMode
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eMode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActiveMount::STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveMount.ValidSuperMode");

	UBioActiveMount_ValidSuperMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveMount.InitializeInternal
// (Final, Native, Private)

void UBioActiveMount::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveMount.InitializeInternal");

	UBioActiveMount_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.RecordDebugAimingInfo
// (Final, Native, Private)
// Parameters:
// struct FVector                 vStartLocation1                (Parm)
// struct FVector                 vEndLocation1                  (Parm)
// struct FVector                 vStartLocation2                (OptionalParm, Parm)
// struct FVector                 vEndLocation2                  (OptionalParm, Parm)

void UBioActivePower::RecordDebugAimingInfo(const struct FVector& vStartLocation1, const struct FVector& vEndLocation1, const struct FVector& vStartLocation2, const struct FVector& vEndLocation2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.RecordDebugAimingInfo");

	UBioActivePower_RecordDebugAimingInfo_Params params;
	params.vStartLocation1 = vStartLocation1;
	params.vEndLocation1 = vEndLocation1;
	params.vStartLocation2 = vStartLocation2;
	params.vEndLocation2 = vEndLocation2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.RecordDebugInfo
// (Final, Native, Private)

void UBioActivePower::RecordDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.RecordDebugInfo");

	UBioActivePower_RecordDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.GetImpactLocation
// (Final, Native, Private, HasOutParms)
// Parameters:
// class AActor*                  oActor                         (Parm)
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vNormal                        (Parm, OutParm)
// struct FName                   nmBoneName                     (Parm, OutParm)

void UBioActivePower::GetImpactLocation(class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal, struct FName* nmBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetImpactLocation");

	UBioActivePower_GetImpactLocation_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vNormal != nullptr)
		*vNormal = params.vNormal;
	if (nmBoneName != nullptr)
		*nmBoneName = params.nmBoneName;
}


// Function BIOC_Base.BioActivePower.GetConeLocationForAI
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FRotator                rRotation                      (Parm, OutParm)

void UBioActivePower::GetConeLocationForAI(struct FVector* vLocation, struct FRotator* rRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetConeLocationForAI");

	UBioActivePower_GetConeLocationForAI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (rRotation != nullptr)
		*rRotation = params.rRotation;
}


// Function BIOC_Base.BioActivePower.GetConeLocationForPlayer
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FRotator                rRotation                      (Parm, OutParm)

void UBioActivePower::GetConeLocationForPlayer(struct FVector* vLocation, struct FRotator* rRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetConeLocationForPlayer");

	UBioActivePower_GetConeLocationForPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (rRotation != nullptr)
		*rRotation = params.rRotation;
}


// Function BIOC_Base.BioActivePower.GetConeLocation
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FRotator                rRotation                      (Parm, OutParm)

void UBioActivePower::GetConeLocation(struct FVector* vLocation, struct FRotator* rRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetConeLocation");

	UBioActivePower_GetConeLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (rRotation != nullptr)
		*rRotation = params.rRotation;
}


// Function BIOC_Base.BioActivePower.GetReleaseLocationForAI
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vNormal                        (Parm, OutParm)
// class AActor*                  oActorAtReleaseLocation        (Parm, OutParm)
// bool                           bUseBeamSpecialHandling        (OptionalParm, Parm)

void UBioActivePower::GetReleaseLocationForAI(bool bUseBeamSpecialHandling, struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetReleaseLocationForAI");

	UBioActivePower_GetReleaseLocationForAI_Params params;
	params.bUseBeamSpecialHandling = bUseBeamSpecialHandling;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vNormal != nullptr)
		*vNormal = params.vNormal;
	if (oActorAtReleaseLocation != nullptr)
		*oActorAtReleaseLocation = params.oActorAtReleaseLocation;
}


// Function BIOC_Base.BioActivePower.GetReleaseLocationForPlayer
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vNormal                        (Parm, OutParm)
// class AActor*                  oActorAtReleaseLocation        (Parm, OutParm)

void UBioActivePower::GetReleaseLocationForPlayer(struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetReleaseLocationForPlayer");

	UBioActivePower_GetReleaseLocationForPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vNormal != nullptr)
		*vNormal = params.vNormal;
	if (oActorAtReleaseLocation != nullptr)
		*oActorAtReleaseLocation = params.oActorAtReleaseLocation;
}


// Function BIOC_Base.BioActivePower.GetReleaseLocation
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vNormal                        (Parm, OutParm)
// class AActor*                  oActorAtReleaseLocation        (Parm, OutParm)
// bool                           bUseBeamSpecialHandling        (OptionalParm, Parm)

void UBioActivePower::GetReleaseLocation(bool bUseBeamSpecialHandling, struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetReleaseLocation");

	UBioActivePower_GetReleaseLocation_Params params;
	params.bUseBeamSpecialHandling = bUseBeamSpecialHandling;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vNormal != nullptr)
		*vNormal = params.vNormal;
	if (oActorAtReleaseLocation != nullptr)
		*oActorAtReleaseLocation = params.oActorAtReleaseLocation;
}


// Function BIOC_Base.BioActivePower.GetProjectileLocation
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm, OutParm)
// struct FVector                 vTargetLocation                (Parm, OutParm)

void UBioActivePower::GetProjectileLocation(struct FVector* vLocation, struct FVector* vTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetProjectileLocation");

	UBioActivePower_GetProjectileLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vLocation != nullptr)
		*vLocation = params.vLocation;
	if (vTargetLocation != nullptr)
		*vTargetLocation = params.vTargetLocation;
}


// Function BIOC_Base.BioActivePower.CreatePowerScript
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::CreatePowerScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.CreatePowerScript");

	UBioActivePower_CreatePowerScript_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.UpdateBeamVFX
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)
// float                          fDeltaTime                     (Parm)

void UBioActivePower::UpdateBeamVFX(TEnumAsByte<EBioPowerResource> eResource, float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.UpdateBeamVFX");

	UBioActivePower_UpdateBeamVFX_Params params;
	params.eResource = eResource;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.DisplayBeamVFX
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)
// struct FVector                 vStartLocation                 (Parm)
// struct FVector                 vDestination                   (Parm)

void UBioActivePower::DisplayBeamVFX(TEnumAsByte<EBioPowerResource> eResource, const struct FVector& vStartLocation, const struct FVector& vDestination)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.DisplayBeamVFX");

	UBioActivePower_DisplayBeamVFX_Params params;
	params.eResource = eResource;
	params.vStartLocation = vStartLocation;
	params.vDestination = vDestination;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.StopPowerVFX
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)
// bool                           bAllowVFXToFinish              (OptionalParm, Parm)

void UBioActivePower::StopPowerVFX(TEnumAsByte<EBioPowerResource> eResource, bool bAllowVFXToFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.StopPowerVFX");

	UBioActivePower_StopPowerVFX_Params params;
	params.eResource = eResource;
	params.bAllowVFXToFinish = bAllowVFXToFinish;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.DisplayPowerVFX
// (Final, Native, Private)
// Parameters:
// TEnumAsByte<EBioPowerResource> eResource                      (Parm)

void UBioActivePower::DisplayPowerVFX(TEnumAsByte<EBioPowerResource> eResource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.DisplayPowerVFX");

	UBioActivePower_DisplayPowerVFX_Params params;
	params.eResource = eResource;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.GetAnimationAvailability
// (Final, Native, Private)

void UBioActivePower::GetAnimationAvailability()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.GetAnimationAvailability");

	UBioActivePower_GetAnimationAvailability_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.UnloadAnimSet
// (Final, Native, Private)

void UBioActivePower::UnloadAnimSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.UnloadAnimSet");

	UBioActivePower_UnloadAnimSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.LoadAnimSet
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::LoadAnimSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.LoadAnimSet");

	UBioActivePower_LoadAnimSet_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.DoImpact
// (Final, Native, Private, HasOutParms)
// Parameters:
// class AActor*                  oActor                         (Parm)
// int                            nImpactedCount                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::DoImpact(class AActor* oActor, int* nImpactedCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.DoImpact");

	UBioActivePower_DoImpact_Params params;
	params.oActor = oActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nImpactedCount != nullptr)
		*nImpactedCount = params.nImpactedCount;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.ReleaseDualPower
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::ReleaseDualPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.ReleaseDualPower");

	UBioActivePower_ReleaseDualPower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.ReleaseVerticalCylinderPower
// (Final, Native, Private)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FVector                 vNormal                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::ReleaseVerticalCylinderPower(const struct FVector& vLocation, const struct FVector& vNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.ReleaseVerticalCylinderPower");

	UBioActivePower_ReleaseVerticalCylinderPower_Params params;
	params.vLocation = vLocation;
	params.vNormal = vNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.ReleaseConePower
// (Final, Native, Private)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FRotator                rRotation                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::ReleaseConePower(const struct FVector& vLocation, const struct FRotator& rRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.ReleaseConePower");

	UBioActivePower_ReleaseConePower_Params params;
	params.vLocation = vLocation;
	params.rRotation = rRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.ReleaseImpactVolumePower
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::ReleaseImpactVolumePower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.ReleaseImpactVolumePower");

	UBioActivePower_ReleaseImpactVolumePower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.ReleaseRadiusPower
// (Final, Native, Private)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FVector                 vNormal                        (Parm)
// class AActor*                  oActorAtReleaseLocation        (Parm)
// bool                           bIncludeCaster                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::ReleaseRadiusPower(const struct FVector& vLocation, const struct FVector& vNormal, class AActor* oActorAtReleaseLocation, bool bIncludeCaster)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.ReleaseRadiusPower");

	UBioActivePower_ReleaseRadiusPower_Params params;
	params.vLocation = vLocation;
	params.vNormal = vNormal;
	params.oActorAtReleaseLocation = oActorAtReleaseLocation;
	params.bIncludeCaster = bIncludeCaster;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.ReleaseProjectilePower
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::ReleaseProjectilePower()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.ReleaseProjectilePower");

	UBioActivePower_ReleaseProjectilePower_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.EndUsingPhase
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::EndUsingPhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.EndUsingPhase");

	UBioActivePower_EndUsingPhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.StartUsingPhase
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::StartUsingPhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.StartUsingPhase");

	UBioActivePower_StartUsingPhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.EndReleasePhase
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::EndReleasePhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.EndReleasePhase");

	UBioActivePower_EndReleasePhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.StartReleasePhase
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::StartReleasePhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.StartReleasePhase");

	UBioActivePower_StartReleasePhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.EndCastingPhase
// (Final, Native, Private)
// Parameters:
// bool                           bAllowVFXToFinish              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::EndCastingPhase(bool bAllowVFXToFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.EndCastingPhase");

	UBioActivePower_EndCastingPhase_Params params;
	params.bAllowVFXToFinish = bAllowVFXToFinish;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.StartCastingPhase
// (Final, Native, Private)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::StartCastingPhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.StartCastingPhase");

	UBioActivePower_StartCastingPhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.InitializeInternal
// (Final, Native, Private)

void UBioActivePower::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.InitializeInternal");

	UBioActivePower_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.SetTargetLocation
// (Native, Public)
// Parameters:
// struct FVector                 vLocation                      (Parm)

void UBioActivePower::SetTargetLocation(const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.SetTargetLocation");

	UBioActivePower_SetTargetLocation_Params params;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.SetTargetActor
// (Native, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)

void UBioActivePower::SetTargetActor(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.SetTargetActor");

	UBioActivePower_SetTargetActor_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActivePower.CancelPower
// (Native, Public)
// Parameters:
// bool                           bOnlyCancelIfCasting           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActivePower::CancelPower(bool bOnlyCancelIfCasting)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.CancelPower");

	UBioActivePower_CancelPower_Params params;
	params.bOnlyCancelIfCasting = bOnlyCancelIfCasting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActivePower.AnimationReadyForPowerRelease
// (Native, Public)

void UBioActivePower::AnimationReadyForPowerRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActivePower.AnimationReadyForPowerRelease");

	UBioActivePower_AnimationReadyForPowerRelease_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveSelectWeapon.FinishDrawAnim
// (Native, Public)

void UBioActiveSelectWeapon::FinishDrawAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveSelectWeapon.FinishDrawAnim");

	UBioActiveSelectWeapon_FinishDrawAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveSelectWeapon.FadeOutDrawAnim
// (Native, Public)

void UBioActiveSelectWeapon::FadeOutDrawAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveSelectWeapon.FadeOutDrawAnim");

	UBioActiveSelectWeapon_FadeOutDrawAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveSelectWeapon.SwapDrawAnim
// (Native, Public)

void UBioActiveSelectWeapon::SwapDrawAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveSelectWeapon.SwapDrawAnim");

	UBioActiveSelectWeapon_SwapDrawAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveSelectWeapon.FinishHolsterAnim
// (Native, Public)

void UBioActiveSelectWeapon::FinishHolsterAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveSelectWeapon.FinishHolsterAnim");

	UBioActiveSelectWeapon_FinishHolsterAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveSelectWeapon.FadeOutHolsterAnim
// (Native, Public)

void UBioActiveSelectWeapon::FadeOutHolsterAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveSelectWeapon.FadeOutHolsterAnim");

	UBioActiveSelectWeapon_FadeOutHolsterAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveSelectWeapon.SwapHolsterAnim
// (Native, Public)

void UBioActiveSelectWeapon::SwapHolsterAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveSelectWeapon.SwapHolsterAnim");

	UBioActiveSelectWeapon_SwapHolsterAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveSelectWeapon.ValidSuperMode
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eMode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActiveSelectWeapon::STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveSelectWeapon.ValidSuperMode");

	UBioActiveSelectWeapon_ValidSuperMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveShoot.GetEventTypeName
// (Defined, Event, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioActiveShoot::GetEventTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveShoot.GetEventTypeName");

	UBioActiveShoot_GetEventTypeName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveShoot.ValidSuperMode
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eMode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActiveShoot::STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveShoot.ValidSuperMode");

	UBioActiveShoot_ValidSuperMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveShoot.InitializeInternal
// (Final, Native, Private)

void UBioActiveShoot::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveShoot.InitializeInternal");

	UBioActiveShoot_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveShootVehicle.InitializeInternal
// (Final, Native, Private)

void UBioActiveShootVehicle::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveShootVehicle.InitializeInternal");

	UBioActiveShootVehicle_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveShootVehicleCannon.InitializeInternal
// (Final, Native, Private)

void UBioActiveShootVehicleCannon::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveShootVehicleCannon.InitializeInternal");

	UBioActiveShootVehicleCannon_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveShootVehicleMachineGun.InitializeInternal
// (Final, Native, Private)

void UBioActiveShootVehicleMachineGun::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveShootVehicleMachineGun.InitializeInternal");

	UBioActiveShootVehicleMachineGun_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActiveUseArtPlaceable.DisplayProgress
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActiveUseArtPlaceable::DisplayProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveUseArtPlaceable.DisplayProgress");

	UBioActiveUseArtPlaceable_DisplayProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveUseArtPlaceable.GetProgress
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioActiveUseArtPlaceable::GetProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveUseArtPlaceable.GetProgress");

	UBioActiveUseArtPlaceable_GetProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveUseArtPlaceable.ValidSuperMode
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioSuperModes>    eMode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioActiveUseArtPlaceable::STATIC_ValidSuperMode(TEnumAsByte<EBioSuperModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveUseArtPlaceable.ValidSuperMode");

	UBioActiveUseArtPlaceable_ValidSuperMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioActiveUseArtPlaceable.InitializeInternal
// (Final, Native, Private)

void UBioActiveUseArtPlaceable::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActiveUseArtPlaceable.InitializeInternal");

	UBioActiveUseArtPlaceable_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioReactive.Initialize
// (Native, Public)
// Parameters:
// class AActor*                  oOwner                         (Parm)
// class AActor*                  oInstigator                    (Parm)

void UBioReactive::Initialize(class AActor* oOwner, class AActor* oInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioReactive.Initialize");

	UBioReactive_Initialize_Params params;
	params.oOwner = oOwner;
	params.oInstigator = oInstigator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioReactive.InitializeInternal
// (Final, Native, Private)

void UBioReactive::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioReactive.InitializeInternal");

	UBioReactive_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioReactiveUseArtPlaceable.InitializeInternal
// (Final, Native, Private)

void UBioReactiveUseArtPlaceable::InitializeInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioReactiveUseArtPlaceable.InitializeInternal");

	UBioReactiveUseArtPlaceable_InitializeInternal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSuperMode.OnFiredWeapon
// (Native, Public)
// Parameters:
// class UBioItemWeapon*          oWeapon                        (Parm)

void UBioSuperMode::OnFiredWeapon(class UBioItemWeapon* oWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSuperMode.OnFiredWeapon");

	UBioSuperMode_OnFiredWeapon_Params params;
	params.oWeapon = oWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.HasEffect
// (Final, Native, Public)
// Parameters:
// class UClass*                  GameEffectClass                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGameProperty::HasEffect(class UClass* GameEffectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.HasEffect");

	UBioGameProperty_HasEffect_Params params;
	params.GameEffectClass = GameEffectClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameProperty.Unapply
// (Final, Native, Public)
// Parameters:
// class UObject*                 pTargetObject                  (Parm)

void UBioGameProperty::Unapply(class UObject* pTargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.Unapply");

	UBioGameProperty_Unapply_Params params;
	params.pTargetObject = pTargetObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.Apply
// (Final, Native, Public)
// Parameters:
// class UObject*                 pTargetObject                  (Parm)

void UBioGameProperty::Apply(class UObject* pTargetObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.Apply");

	UBioGameProperty_Apply_Params params;
	params.pTargetObject = pTargetObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.ToLine
// (Defined, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGameProperty::ToLine()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.ToLine");

	UBioGameProperty_ToLine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameProperty.ToString
// (Defined, Event, Public)
// Parameters:
// struct FString                 sIndent                        (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGameProperty::ToString(const struct FString& sIndent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.ToString");

	UBioGameProperty_ToString_Params params;
	params.sIndent = sIndent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameProperty.CreateInstant
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGameProperty*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGameProperty* UBioGameProperty::STATIC_CreateInstant()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.CreateInstant");

	UBioGameProperty_CreateInstant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameProperty.CreateGameProperty
// (Defined, Event, Static, Public)
// Parameters:
// class UBioGamePropertyContainer* oGPContainer                   (Parm)
// class UObject*                 oOwner                         (Parm)
// TEnumAsByte<EBioGamePropertyType> ePropertyType                  (Parm)
// float                          fTimedDuration                 (Parm)
// float                          fCoolDownTime                  (Parm)
// bool                           bTicked                        (Parm)
// float                          fTickInterval                  (Parm)
// int                            nGamePropertyGroup             (Parm)
// float                          fPower                         (Parm)
// bool                           bFireAndForget                 (Parm)
// class UBioGameProperty*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGameProperty* UBioGameProperty::STATIC_CreateGameProperty(class UBioGamePropertyContainer* oGPContainer, class UObject* oOwner, TEnumAsByte<EBioGamePropertyType> ePropertyType, float fTimedDuration, float fCoolDownTime, bool bTicked, float fTickInterval, int nGamePropertyGroup, float fPower, bool bFireAndForget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.CreateGameProperty");

	UBioGameProperty_CreateGameProperty_Params params;
	params.oGPContainer = oGPContainer;
	params.oOwner = oOwner;
	params.ePropertyType = ePropertyType;
	params.fTimedDuration = fTimedDuration;
	params.fCoolDownTime = fCoolDownTime;
	params.bTicked = bTicked;
	params.fTickInterval = fTickInterval;
	params.nGamePropertyGroup = nGamePropertyGroup;
	params.fPower = fPower;
	params.bFireAndForget = bFireAndForget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameProperty.RunTests
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)

void UBioGameProperty::STATIC_RunTests(class ABioPawn* oPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.RunTests");

	UBioGameProperty_RunTests_Params params;
	params.oPawn = oPawn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.ScaleToLevel
// (Native, Public)
// Parameters:
// int                            nPowerLevel                    (Parm)

void UBioGameProperty::ScaleToLevel(int nPowerLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.ScaleToLevel");

	UBioGameProperty_ScaleToLevel_Params params;
	params.nPowerLevel = nPowerLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.RemoveEffects
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)

void UBioGameProperty::RemoveEffects(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.RemoveEffects");

	UBioGameProperty_RemoveEffects_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.ApplyEffects
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// bool                           bIsInstant                     (OptionalParm, Parm)

void UBioGameProperty::ApplyEffects(class UObject* oTarget, bool bIsInstant)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.ApplyEffects");

	UBioGameProperty_ApplyEffects_Params params;
	params.oTarget = oTarget;
	params.bIsInstant = bIsInstant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.TickEffects
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioGameProperty::TickEffects(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.TickEffects");

	UBioGameProperty_TickEffects_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.TestConditionals
// (Native, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGameProperty::TestConditionals(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.TestConditionals");

	UBioGameProperty_TestConditionals_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGameProperty.AddConditionalToProperty
// (Defined, Event, Public)
// Parameters:
// class UBioGamePropertyConditional* oConditional                   (Parm)

void UBioGameProperty::AddConditionalToProperty(class UBioGamePropertyConditional* oConditional)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.AddConditionalToProperty");

	UBioGameProperty_AddConditionalToProperty_Params params;
	params.oConditional = oConditional;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameProperty.AddGameEffectToProperty
// (Native, Public)
// Parameters:
// class UBioGameEffect*          oEffect                        (Parm)

void UBioGameProperty::AddGameEffectToProperty(class UBioGameEffect* oEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameProperty.AddGameEffectToProperty");

	UBioGameProperty_AddGameEffectToProperty_Params params;
	params.oEffect = oEffect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyConditional.Uninitialize
// (Public)

void UBioGamePropertyConditional::Uninitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyConditional.Uninitialize");

	UBioGamePropertyConditional_Uninitialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyConditional.Initialize
// (Public)

void UBioGamePropertyConditional::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyConditional.Initialize");

	UBioGamePropertyConditional_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyConditionalImporter.LoadGamePropertyConditional
// (Native, Static, Public)
// Parameters:
// class UBio2DA*                 o2DA                           (Parm)
// int                            nConditionalId                 (Parm)
// class UBioGameProperty*        oOwner                         (Parm)
// class UBioGamePropertyConditional* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamePropertyConditional* UBioGamePropertyConditionalImporter::STATIC_LoadGamePropertyConditional(class UBio2DA* o2DA, int nConditionalId, class UBioGameProperty* oOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyConditionalImporter.LoadGamePropertyConditional");

	UBioGamePropertyConditionalImporter_LoadGamePropertyConditional_Params params;
	params.o2DA = o2DA;
	params.nConditionalId = nConditionalId;
	params.oOwner = oOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyConditionalIsActorType.SetActorType
// (Final, Defined, Public)
// Parameters:
// struct FName                   nmActorType                    (Parm)

void UBioGamePropertyConditionalIsActorType::SetActorType(const struct FName& nmActorType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyConditionalIsActorType.SetActorType");

	UBioGamePropertyConditionalIsActorType_SetActorType_Params params;
	params.nmActorType = nmActorType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyConditionalWeapon.TestRangedWeapon
// (Native, Public)
// Parameters:
// class UBioItemWeapon*          pWeaponItem                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyConditionalWeapon::TestRangedWeapon(class UBioItemWeapon* pWeaponItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyConditionalWeapon.TestRangedWeapon");

	UBioGamePropertyConditionalWeapon_TestRangedWeapon_Params params;
	params.pWeaponItem = pWeaponItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyConditionalWeapon.TestMeleeWeapon
// (Native, Public)
// Parameters:
// class UBioItemWeapon*          pWeaponItem                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyConditionalWeapon::TestMeleeWeapon(class UBioItemWeapon* pWeaponItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyConditionalWeapon.TestMeleeWeapon");

	UBioGamePropertyConditionalWeapon_TestMeleeWeapon_Params params;
	params.pWeaponItem = pWeaponItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyConditionalWeapon.TestWeapon
// (Native, Public)
// Parameters:
// class UBioItemWeapon*          pWeaponItem                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyConditionalWeapon::TestWeapon(class UBioItemWeapon* pWeaponItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyConditionalWeapon.TestWeapon");

	UBioGamePropertyConditionalWeapon_TestWeapon_Params params;
	params.pWeaponItem = pWeaponItem;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyContainer.ToString
// (Defined, Event, Public)
// Parameters:
// struct FString                 sIndent                        (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGamePropertyContainer::ToString(const struct FString& sIndent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyContainer.ToString");

	UBioGamePropertyContainer_ToString_Params params;
	params.sIndent = sIndent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyContainer.OnGPEvent
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioGamePropertyContainer::OnGPEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyContainer.OnGPEvent");

	UBioGamePropertyContainer_OnGPEvent_Params params;
	params.eEvent = eEvent;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyContainer.ScaleToLevel
// (Defined, Event, Public)
// Parameters:
// int                            nLevel                         (Parm)

void UBioGamePropertyContainer::ScaleToLevel(int nLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyContainer.ScaleToLevel");

	UBioGamePropertyContainer_ScaleToLevel_Params params;
	params.nLevel = nLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyContainer.ProcessCooldown
// (Final, Defined, Event, Private)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioGamePropertyContainer::ProcessCooldown(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyContainer.ProcessCooldown");

	UBioGamePropertyContainer_ProcessCooldown_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyContainer.Tick
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void UBioGamePropertyContainer::Tick(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyContainer.Tick");

	UBioGamePropertyContainer_Tick_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyContainer.OnGamePropCooldownEnd
// (Defined, Public)
// Parameters:
// class UBioGameProperty*        pGameProperty                  (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// float                          fDeltaTimeRemaining            (Parm)

void UBioGamePropertyContainer::OnGamePropCooldownEnd(class UBioGameProperty* pGameProperty, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyContainer.OnGamePropCooldownEnd");

	UBioGamePropertyContainer_OnGamePropCooldownEnd_Params params;
	params.pGameProperty = pGameProperty;
	params.eTimingType = eTimingType;
	params.fDeltaTimeRemaining = fDeltaTimeRemaining;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyContainer.AddGamePropertyToCountdown
// (Defined, Event, Public)
// Parameters:
// class UBioGameProperty*        oGameProp                      (Parm)
// float                          fCountdown                     (Parm)

void UBioGamePropertyContainer::AddGamePropertyToCountdown(class UBioGameProperty* oGameProp, float fCountdown)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyContainer.AddGamePropertyToCountdown");

	UBioGamePropertyContainer_AddGamePropertyToCountdown_Params params;
	params.oGameProp = oGameProp;
	params.fCountdown = fCountdown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEffectLevelIterator.Initialize
// (Native, Public)
// Parameters:
// class UBio2DA*                 o2DA                           (Parm)
// int                            nKeyColumn                     (Parm)
// int                            nKey                           (Parm)

void UBioGamePropertyEffectLevelIterator::Initialize(class UBio2DA* o2DA, int nKeyColumn, int nKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEffectLevelIterator.Initialize");

	UBioGamePropertyEffectLevelIterator_Initialize_Params params;
	params.o2DA = o2DA;
	params.nKeyColumn = nKeyColumn;
	params.nKey = nKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventDispatcher.ProcessQueue
// (Native, Public)

void UBioGamePropertyEventDispatcher::ProcessQueue()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventDispatcher.ProcessQueue");

	UBioGamePropertyEventDispatcher_ProcessQueue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventDispatcher.UnregisterGameProperty
// (Native, Public)
// Parameters:
// class UBioGameProperty*        oGameProp                      (Parm)

void UBioGamePropertyEventDispatcher::UnregisterGameProperty(class UBioGameProperty* oGameProp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventDispatcher.UnregisterGameProperty");

	UBioGamePropertyEventDispatcher_UnregisterGameProperty_Params params;
	params.oGameProp = oGameProp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventDispatcher.RegisterGameProperty
// (Native, Public)
// Parameters:
// class UBioGameProperty*        oGameProp                      (Parm)

void UBioGamePropertyEventDispatcher::RegisterGameProperty(class UBioGameProperty* oGameProp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventDispatcher.RegisterGameProperty");

	UBioGamePropertyEventDispatcher_RegisterGameProperty_Params params;
	params.oGameProp = oGameProp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventDispatcher.OnEvent
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioGamePropertyEventDispatcher::OnEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventDispatcher.OnEvent");

	UBioGamePropertyEventDispatcher_OnEvent_Params params;
	params.eEvent = eEvent;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventDispatcher.LogDebugInfo
// (Final, Native, Private)
// Parameters:
// class UBioGamePropertyEventSet* pEvents                        (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioGamePropertyEventDispatcher::LogDebugInfo(class UBioGamePropertyEventSet* pEvents, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventDispatcher.LogDebugInfo");

	UBioGamePropertyEventDispatcher_LogDebugInfo_Params params;
	params.pEvents = pEvents;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventSet.Create3
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent1                        (Parm)
// TEnumAsByte<EBioGamePropertyEvent> eEvent2                        (Parm)
// TEnumAsByte<EBioGamePropertyEvent> eEvent3                        (Parm)
// class UObject*                 oSource                        (OptionalParm, Parm)
// class UBioGamePropertyEventSet* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamePropertyEventSet* UBioGamePropertyEventSet::STATIC_Create3(TEnumAsByte<EBioGamePropertyEvent> eEvent1, TEnumAsByte<EBioGamePropertyEvent> eEvent2, TEnumAsByte<EBioGamePropertyEvent> eEvent3, class UObject* oSource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.Create3");

	UBioGamePropertyEventSet_Create3_Params params;
	params.eEvent1 = eEvent1;
	params.eEvent2 = eEvent2;
	params.eEvent3 = eEvent3;
	params.oSource = oSource;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyEventSet.Create2
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent1                        (Parm)
// TEnumAsByte<EBioGamePropertyEvent> eEvent2                        (Parm)
// class UObject*                 oSource                        (OptionalParm, Parm)
// class UBioGamePropertyEventSet* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamePropertyEventSet* UBioGamePropertyEventSet::STATIC_Create2(TEnumAsByte<EBioGamePropertyEvent> eEvent1, TEnumAsByte<EBioGamePropertyEvent> eEvent2, class UObject* oSource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.Create2");

	UBioGamePropertyEventSet_Create2_Params params;
	params.eEvent1 = eEvent1;
	params.eEvent2 = eEvent2;
	params.oSource = oSource;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyEventSet.Create1
// (Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent1                        (Parm)
// class UObject*                 oSource                        (OptionalParm, Parm)
// class UBioGamePropertyEventSet* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamePropertyEventSet* UBioGamePropertyEventSet::STATIC_Create1(TEnumAsByte<EBioGamePropertyEvent> eEvent1, class UObject* oSource)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.Create1");

	UBioGamePropertyEventSet_Create1_Params params;
	params.eEvent1 = eEvent1;
	params.oSource = oSource;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyEventSet.CheckForAnyEvents
// (Native, Public)
// Parameters:
// class UBioGamePropertyEventSet* oEvents                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyEventSet::CheckForAnyEvents(class UBioGamePropertyEventSet* oEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.CheckForAnyEvents");

	UBioGamePropertyEventSet_CheckForAnyEvents_Params params;
	params.oEvents = oEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyEventSet.CheckForAllEvents
// (Native, Public)
// Parameters:
// class UBioGamePropertyEventSet* oEvents                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyEventSet::CheckForAllEvents(class UBioGamePropertyEventSet* oEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.CheckForAllEvents");

	UBioGamePropertyEventSet_CheckForAllEvents_Params params;
	params.oEvents = oEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyEventSet.CheckForEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyEventSet::CheckForEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.CheckForEvent");

	UBioGamePropertyEventSet_CheckForEvent_Params params;
	params.eEvent = eEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyEventSet.RemoveEventSet
// (Native, Public)
// Parameters:
// class UBioGamePropertyEventSet* oEvents                        (Parm)

void UBioGamePropertyEventSet::RemoveEventSet(class UBioGamePropertyEventSet* oEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.RemoveEventSet");

	UBioGamePropertyEventSet_RemoveEventSet_Params params;
	params.oEvents = oEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventSet.RemoveEvents
// (Native, Public)
// Parameters:
// TArray<TEnumAsByte<EBioGamePropertyEvent>> aEvents                        (Parm, NeedCtorLink)

void UBioGamePropertyEventSet::RemoveEvents(TArray<TEnumAsByte<EBioGamePropertyEvent>> aEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.RemoveEvents");

	UBioGamePropertyEventSet_RemoveEvents_Params params;
	params.aEvents = aEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventSet.RemoveEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)

void UBioGamePropertyEventSet::RemoveEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.RemoveEvent");

	UBioGamePropertyEventSet_RemoveEvent_Params params;
	params.eEvent = eEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventSet.AddEventSet
// (Native, Public)
// Parameters:
// class UBioGamePropertyEventSet* oEvents                        (Parm)

void UBioGamePropertyEventSet::AddEventSet(class UBioGamePropertyEventSet* oEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.AddEventSet");

	UBioGamePropertyEventSet_AddEventSet_Params params;
	params.oEvents = oEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventSet.AddEvents
// (Native, Public)
// Parameters:
// TArray<TEnumAsByte<EBioGamePropertyEvent>> aEvents                        (Parm, NeedCtorLink)

void UBioGamePropertyEventSet::AddEvents(TArray<TEnumAsByte<EBioGamePropertyEvent>> aEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.AddEvents");

	UBioGamePropertyEventSet_AddEvents_Params params;
	params.aEvents = aEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventSet.AddEvent
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioGamePropertyEvent> eEvent                         (Parm)

void UBioGamePropertyEventSet::AddEvent(TEnumAsByte<EBioGamePropertyEvent> eEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.AddEvent");

	UBioGamePropertyEventSet_AddEvent_Params params;
	params.eEvent = eEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyEventSet.Clear
// (Defined, Public)

void UBioGamePropertyEventSet::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyEventSet.Clear");

	UBioGamePropertyEventSet_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyHolderTraits.GetGPContainer
// (Final, Defined, Event, Static, Public)
// Parameters:
// class UObject*                 pObject                        (Parm)
// class UBioGamePropertyContainer* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamePropertyContainer* UBioGamePropertyHolderTraits::STATIC_GetGPContainer(class UObject* pObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyHolderTraits.GetGPContainer");

	UBioGamePropertyHolderTraits_GetGPContainer_Params params;
	params.pObject = pObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyHolderTraits.GetGPManager
// (Final, Defined, Event, Static, Public)
// Parameters:
// class UObject*                 oTarget                        (Parm)
// class UBioGamePropertyManager* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamePropertyManager* UBioGamePropertyHolderTraits::STATIC_GetGPManager(class UObject* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyHolderTraits.GetGPManager");

	UBioGamePropertyHolderTraits_GetGPManager_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyImporter.LoadGameProperty
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FBioGPLoadData          oGPData                        (Const, Parm, OutParm, NeedCtorLink)
// class UBioGameProperty*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGameProperty* UBioGamePropertyImporter::STATIC_LoadGameProperty(struct FBioGPLoadData* oGPData)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyImporter.LoadGameProperty");

	UBioGamePropertyImporter_LoadGameProperty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oGPData != nullptr)
		*oGPData = params.oGPData;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.ToString
// (Defined, Event, Public)
// Parameters:
// struct FString                 sIndent                        (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGamePropertyManager::ToString(const struct FString& sIndent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.ToString");

	UBioGamePropertyManager_ToString_Params params;
	params.sIndent = sIndent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.IsGameEffectApplied
// (Final, Native, Public)
// Parameters:
// class UClass*                  GameEffectClass                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyManager::IsGameEffectApplied(class UClass* GameEffectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.IsGameEffectApplied");

	UBioGamePropertyManager_IsGameEffectApplied_Params params;
	params.GameEffectClass = GameEffectClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByEffectType
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UClass*                  GameEffectClass                (Parm)
// int                            nGamePropertyGroup             (Parm)
// TArray<class UBioGameProperty*> aProperties                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyManager::FindGamePropertyByEffectType(class UClass* GameEffectClass, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByEffectType");

	UBioGamePropertyManager_FindGamePropertyByEffectType_Params params;
	params.GameEffectClass = GameEffectClass;
	params.nGamePropertyGroup = nGamePropertyGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aProperties != nullptr)
		*aProperties = params.aProperties;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByGroup
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            nGamePropertyGroup             (Parm)
// TArray<class UBioGameProperty*> aProperties                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyManager::FindGamePropertyByGroup(int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByGroup");

	UBioGamePropertyManager_FindGamePropertyByGroup_Params params;
	params.nGamePropertyGroup = nGamePropertyGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aProperties != nullptr)
		*aProperties = params.aProperties;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByOwner
// (Final, Native, Public, HasOutParms)
// Parameters:
// class AActor*                  oOwner                         (Parm)
// int                            nGamePropertyGroup             (Parm)
// TArray<class UBioGameProperty*> aProperties                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyManager::FindGamePropertyByOwner(class AActor* oOwner, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByOwner");

	UBioGamePropertyManager_FindGamePropertyByOwner_Params params;
	params.oOwner = oOwner;
	params.nGamePropertyGroup = nGamePropertyGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aProperties != nullptr)
		*aProperties = params.aProperties;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByName
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FName                   nmName                         (Parm)
// int                            nGamePropertyGroup             (Parm)
// TArray<class UBioGameProperty*> aProperties                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyManager::FindGamePropertyByName(const struct FName& nmName, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.FindGamePropertyByName");

	UBioGamePropertyManager_FindGamePropertyByName_Params params;
	params.nmName = nmName;
	params.nGamePropertyGroup = nGamePropertyGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (aProperties != nullptr)
		*aProperties = params.aProperties;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.GetOwnerObject
// (Final, Native, Public)
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UBioGamePropertyManager::GetOwnerObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.GetOwnerObject");

	UBioGamePropertyManager_GetOwnerObject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyManager.Tick
// (Native, Public)
// Parameters:
// float                          fDelta                         (Parm)

void UBioGamePropertyManager::Tick(float fDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.Tick");

	UBioGamePropertyManager_Tick_Params params;
	params.fDelta = fDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyManager.TickInternal
// (Final, Defined, Event, Private)
// Parameters:
// float                          fDelta                         (Parm)

void UBioGamePropertyManager::TickInternal(float fDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.TickInternal");

	UBioGamePropertyManager_TickInternal_Params params;
	params.fDelta = fDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyManager.OnGPTimeOut
// (Final, Defined, Private)
// Parameters:
// class UBioGameProperty*        pGameProperty                  (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// float                          fDeltaTimeRemaining            (Parm)

void UBioGamePropertyManager::OnGPTimeOut(class UBioGameProperty* pGameProperty, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.OnGPTimeOut");

	UBioGamePropertyManager_OnGPTimeOut_Params params;
	params.pGameProperty = pGameProperty;
	params.eTimingType = eTimingType;
	params.fDeltaTimeRemaining = fDeltaTimeRemaining;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyManager.UnapplyGameProperty
// (Final, Native, Private)
// Parameters:
// class UBioGameProperty*        pGP                            (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioGamePropertyManager::UnapplyGameProperty(class UBioGameProperty* pGP, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.UnapplyGameProperty");

	UBioGamePropertyManager_UnapplyGameProperty_Params params;
	params.pGP = pGP;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyManager.ApplyGameProperty
// (Final, Native, Private)
// Parameters:
// class UBioGameProperty*        pGP                            (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioGamePropertyManager::ApplyGameProperty(class UBioGameProperty* pGP, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.ApplyGameProperty");

	UBioGamePropertyManager_ApplyGameProperty_Params params;
	params.pGP = pGP;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyManager.EvaluateGameProperty
// (Final, Native, Public)
// Parameters:
// class UBioGameProperty*        pGP                            (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioGamePropertyManager::EvaluateGameProperty(class UBioGameProperty* pGP, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyManager.EvaluateGameProperty");

	UBioGamePropertyManager_EvaluateGameProperty_Params params;
	params.pGP = pGP;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyScalingData.ScaleProperties
// (Native, Public)
// Parameters:
// int                            nLevel                         (Parm)

void UBioGamePropertyScalingData::ScaleProperties(int nLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyScalingData.ScaleProperties");

	UBioGamePropertyScalingData_ScaleProperties_Params params;
	params.nLevel = nLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyTimer.ToString
// (Defined, Event, Public)
// Parameters:
// struct FString                 sIndent                        (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioGamePropertyTimer::ToString(const struct FString& sIndent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.ToString");

	UBioGamePropertyTimer_ToString_Params params;
	params.sIndent = sIndent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyTimer.InvokeDelegate
// (Final, Defined, Event, Private)
// Parameters:
// struct FScriptDelegate         pDelegate                      (Parm, NeedCtorLink)
// class UBioGameProperty*        pGP                            (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// float                          fDeltaTimeRemaining            (Parm)

void UBioGamePropertyTimer::InvokeDelegate(const struct FScriptDelegate& pDelegate, class UBioGameProperty* pGP, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.InvokeDelegate");

	UBioGamePropertyTimer_InvokeDelegate_Params params;
	params.pDelegate = pDelegate;
	params.pGP = pGP;
	params.eTimingType = eTimingType;
	params.fDeltaTimeRemaining = fDeltaTimeRemaining;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyTimer.RemoveAllNonStatic
// (Native, Public)
// Parameters:
// struct FScriptDelegate         pDelegate                      (Parm, NeedCtorLink)

void UBioGamePropertyTimer::RemoveAllNonStatic(const struct FScriptDelegate& pDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.RemoveAllNonStatic");

	UBioGamePropertyTimer_RemoveAllNonStatic_Params params;
	params.pDelegate = pDelegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyTimer.GetTimeForGamePropertyByName
// (Native, Public, HasOutParms)
// Parameters:
// struct FName                   nmGamePropertyName             (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// class UBioGameProperty*        oGameProperty                  (Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioGamePropertyTimer::GetTimeForGamePropertyByName(const struct FName& nmGamePropertyName, TEnumAsByte<EBioGPTimingType> eTimingType, class UBioGameProperty** oGameProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.GetTimeForGamePropertyByName");

	UBioGamePropertyTimer_GetTimeForGamePropertyByName_Params params;
	params.nmGamePropertyName = nmGamePropertyName;
	params.eTimingType = eTimingType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oGameProperty != nullptr)
		*oGameProperty = params.oGameProperty;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyTimer.GetTimeForGameProperty
// (Native, Public)
// Parameters:
// class UBioGameProperty*        oGameProp                      (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioGamePropertyTimer::GetTimeForGameProperty(class UBioGameProperty* oGameProp, TEnumAsByte<EBioGPTimingType> eTimingType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.GetTimeForGameProperty");

	UBioGamePropertyTimer_GetTimeForGameProperty_Params params;
	params.oGameProp = oGameProp;
	params.eTimingType = eTimingType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyTimer.Tick
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)
// struct FScriptDelegate         oOnRemoveGameProperty          (Parm, NeedCtorLink)

void UBioGamePropertyTimer::Tick(float fDeltaTime, const struct FScriptDelegate& oOnRemoveGameProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.Tick");

	UBioGamePropertyTimer_Tick_Params params;
	params.fDeltaTime = fDeltaTime;
	params.oOnRemoveGameProperty = oOnRemoveGameProperty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyTimer.AppendStaticGameProperty
// (Final, Native, Public)
// Parameters:
// class UBioGameProperty*        oGP                            (Parm)

void UBioGamePropertyTimer::AppendStaticGameProperty(class UBioGameProperty* oGP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.AppendStaticGameProperty");

	UBioGamePropertyTimer_AppendStaticGameProperty_Params params;
	params.oGP = oGP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyTimer.FindGamePropertyIndex
// (Final, Native, Public)
// Parameters:
// class UBioGameProperty*        oGP                            (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioGamePropertyTimer::FindGamePropertyIndex(class UBioGameProperty* oGP, TEnumAsByte<EBioGPTimingType> eTimingType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.FindGamePropertyIndex");

	UBioGamePropertyTimer_FindGamePropertyIndex_Params params;
	params.oGP = oGP;
	params.eTimingType = eTimingType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyTimer.RemoveGamePropertyAtIndex
// (Final, Native, Public)
// Parameters:
// int                            nIndex                         (Parm)

void UBioGamePropertyTimer::RemoveGamePropertyAtIndex(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.RemoveGamePropertyAtIndex");

	UBioGamePropertyTimer_RemoveGamePropertyAtIndex_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyTimer.RemoveGameProperty
// (Final, Native, Public)
// Parameters:
// class UBioGameProperty*        oGP                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioGamePropertyTimer::RemoveGameProperty(class UBioGameProperty* oGP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.RemoveGameProperty");

	UBioGamePropertyTimer_RemoveGameProperty_Params params;
	params.oGP = oGP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioGamePropertyTimer.InsertGameProperty
// (Final, Native, Public)
// Parameters:
// class UBioGameProperty*        oGP                            (Parm)
// float                          fTime                          (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// bool                           bFrameTicked                   (OptionalParm, Parm)

void UBioGamePropertyTimer::InsertGameProperty(class UBioGameProperty* oGP, float fTime, TEnumAsByte<EBioGPTimingType> eTimingType, bool bFrameTicked)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.InsertGameProperty");

	UBioGamePropertyTimer_InsertGameProperty_Params params;
	params.oGP = oGP;
	params.fTime = fTime;
	params.eTimingType = eTimingType;
	params.bFrameTicked = bFrameTicked;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGamePropertyTimer.OnRemoveGameProperty
// (Public, Delegate)
// Parameters:
// class UBioGameProperty*        pGP                            (Parm)
// TEnumAsByte<EBioGPTimingType>  eTimingType                    (Parm)
// float                          fDeltaTimeRemaining            (Parm)

void UBioGamePropertyTimer::OnRemoveGameProperty(class UBioGameProperty* pGP, TEnumAsByte<EBioGPTimingType> eTimingType, float fDeltaTimeRemaining)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGamePropertyTimer.OnRemoveGameProperty");

	UBioGamePropertyTimer_OnRemoveGameProperty_Params params;
	params.pGP = pGP;
	params.eTimingType = eTimingType;
	params.fDeltaTimeRemaining = fDeltaTimeRemaining;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInterpolator.InterpolateFloat
// (Native, Static, Public, HasOutParms)
// Parameters:
// float                          output                         (Parm, OutParm)
// TEnumAsByte<EBioInterpolationMethod> InterpolationMethod            (Parm)
// float                          Source                         (Parm)
// float                          Target                         (Parm)
// float                          normalizedDisplacement         (Parm)

void UBioInterpolator::STATIC_InterpolateFloat(TEnumAsByte<EBioInterpolationMethod> InterpolationMethod, float Source, float Target, float normalizedDisplacement, float* output)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterpolator.InterpolateFloat");

	UBioInterpolator_InterpolateFloat_Params params;
	params.InterpolationMethod = InterpolationMethod;
	params.Source = Source;
	params.Target = Target;
	params.normalizedDisplacement = normalizedDisplacement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (output != nullptr)
		*output = params.output;
}


// Function BIOC_Base.BioInterpolator.InterpolateVector
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FVector                 output                         (Parm, OutParm)
// TEnumAsByte<EBioInterpolationMethod> InterpolationMethod            (Parm)
// struct FVector                 Source                         (Parm)
// struct FVector                 Target                         (Parm)
// float                          normalizedDisplacement         (Parm)

void UBioInterpolator::STATIC_InterpolateVector(TEnumAsByte<EBioInterpolationMethod> InterpolationMethod, const struct FVector& Source, const struct FVector& Target, float normalizedDisplacement, struct FVector* output)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterpolator.InterpolateVector");

	UBioInterpolator_InterpolateVector_Params params;
	params.InterpolationMethod = InterpolationMethod;
	params.Source = Source;
	params.Target = Target;
	params.normalizedDisplacement = normalizedDisplacement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (output != nullptr)
		*output = params.output;
}


// Function BIOC_Base.BioInterpolator.InterpolateRotator
// (Native, Static, Public, HasOutParms)
// Parameters:
// struct FRotator                output                         (Parm, OutParm)
// TEnumAsByte<EBioInterpolationMethod> InterpolationMethod            (Parm)
// struct FRotator                Source                         (Parm)
// struct FRotator                Target                         (Parm)
// float                          normalizedDisplacement         (Parm)

void UBioInterpolator::STATIC_InterpolateRotator(TEnumAsByte<EBioInterpolationMethod> InterpolationMethod, const struct FRotator& Source, const struct FRotator& Target, float normalizedDisplacement, struct FRotator* output)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterpolator.InterpolateRotator");

	UBioInterpolator_InterpolateRotator_Params params;
	params.InterpolationMethod = InterpolationMethod;
	params.Source = Source;
	params.Target = Target;
	params.normalizedDisplacement = normalizedDisplacement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (output != nullptr)
		*output = params.output;
}


// Function BIOC_Base.BioMorphFace.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UBioMorphFace::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFace.GetSaveObjectClass");

	UBioMorphFace_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFace.SetPosition
// (Native, Public)
// Parameters:
// int                            buffer                         (Parm)
// int                            vert                           (Parm)
// struct FVector                 V                              (Parm)

void UBioMorphFace::SetPosition(int buffer, int vert, const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFace.SetPosition");

	UBioMorphFace_SetPosition_Params params;
	params.buffer = buffer;
	params.vert = vert;
	params.V = V;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFace.GetPosition
// (Native, Public)
// Parameters:
// int                            buffer                         (Parm)
// int                            vert                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioMorphFace::GetPosition(int buffer, int vert)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFace.GetPosition");

	UBioMorphFace_GetPosition_Params params;
	params.buffer = buffer;
	params.vert = vert;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFace.GetNumVerts
// (Native, Public)
// Parameters:
// int                            buffer                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFace::GetNumVerts(int buffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFace.GetNumVerts");

	UBioMorphFace_GetNumVerts_Params params;
	params.buffer = buffer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFace.GetNumVertexBuffers
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFace::GetNumVertexBuffers()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFace.GetNumVertexBuffers");

	UBioMorphFace_GetNumVertexBuffers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFace.ScriptUpdateMorph
// (Native, Public)

void UBioMorphFace::ScriptUpdateMorph()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFace.ScriptUpdateMorph");

	UBioMorphFace_ScriptUpdateMorph_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.SelectPreviousBaseHead
// (Native, Public)

void UBioMorphFaceFrontEnd::SelectPreviousBaseHead()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.SelectPreviousBaseHead");

	UBioMorphFaceFrontEnd_SelectPreviousBaseHead_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.SelectNextBaseHead
// (Native, Public)

void UBioMorphFaceFrontEnd::SelectNextBaseHead()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.SelectNextBaseHead");

	UBioMorphFaceFrontEnd_SelectNextBaseHead_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.SetPlayerName
// (Native, Public)
// Parameters:
// struct FString                 sPlayerName                    (Parm, NeedCtorLink)

void UBioMorphFaceFrontEnd::SetPlayerName(const struct FString& sPlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.SetPlayerName");

	UBioMorphFaceFrontEnd_SetPlayerName_Params params;
	params.sPlayerName = sPlayerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.CheckEverythingPreloaded
// (Native, Public)

void UBioMorphFaceFrontEnd::CheckEverythingPreloaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.CheckEverythingPreloaded");

	UBioMorphFaceFrontEnd_CheckEverythingPreloaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.Preload2DAPackage
// (Native, Public)
// Parameters:
// bool                           bPlayerIsMale                  (Parm)

void UBioMorphFaceFrontEnd::Preload2DAPackage(bool bPlayerIsMale)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.Preload2DAPackage");

	UBioMorphFaceFrontEnd_Preload2DAPackage_Params params;
	params.bPlayerIsMale = bPlayerIsMale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.CleanUp
// (Native, Public)

void UBioMorphFaceFrontEnd::CleanUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.CleanUp");

	UBioMorphFaceFrontEnd_CleanUp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.HandleSliderChange
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// int                            SliderValue                    (Parm)
// bool                           bUpdate                        (OptionalParm, Parm)

void UBioMorphFaceFrontEnd::HandleSliderChange(int categoryIndex, int sliderIndex, int SliderValue, bool bUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.HandleSliderChange");

	UBioMorphFaceFrontEnd_HandleSliderChange_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;
	params.SliderValue = SliderValue;
	params.bUpdate = bUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderNotched
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioMorphFaceFrontEnd::GetSliderNotched(int categoryIndex, int sliderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderNotched");

	UBioMorphFaceFrontEnd_GetSliderNotched_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderValue
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetSliderValue(int categoryIndex, int sliderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderValue");

	UBioMorphFaceFrontEnd_GetSliderValue_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderStep
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetSliderStep(int categoryIndex, int sliderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderStep");

	UBioMorphFaceFrontEnd_GetSliderStep_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderMax
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetSliderMax(int categoryIndex, int sliderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderMax");

	UBioMorphFaceFrontEnd_GetSliderMax_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderMin
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetSliderMin(int categoryIndex, int sliderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderMin");

	UBioMorphFaceFrontEnd_GetSliderMin_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderDesc
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetSliderDesc(int categoryIndex, int sliderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderDesc");

	UBioMorphFaceFrontEnd_GetSliderDesc_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderLabel
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            sliderIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetSliderLabel(int categoryIndex, int sliderIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetSliderLabel");

	UBioMorphFaceFrontEnd_GetSliderLabel_Params params;
	params.categoryIndex = categoryIndex;
	params.sliderIndex = sliderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetNumSlidersInCategory
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetNumSlidersInCategory(int categoryIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetNumSlidersInCategory");

	UBioMorphFaceFrontEnd_GetNumSlidersInCategory_Params params;
	params.categoryIndex = categoryIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetCategoryDescription
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetCategoryDescription(int categoryIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetCategoryDescription");

	UBioMorphFaceFrontEnd_GetCategoryDescription_Params params;
	params.categoryIndex = categoryIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetCategoryString
// (Native, Public)
// Parameters:
// int                            categoryIndex                  (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetCategoryString(int categoryIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetCategoryString");

	UBioMorphFaceFrontEnd_GetCategoryString_Params params;
	params.categoryIndex = categoryIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.GetNumberOfFeatureCategories
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioMorphFaceFrontEnd::GetNumberOfFeatureCategories()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.GetNumberOfFeatureCategories");

	UBioMorphFaceFrontEnd_GetNumberOfFeatureCategories_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.ResetCategory
// (Native, Public)
// Parameters:
// int                            nCategory                      (Parm)
// bool                           bUpdate                        (OptionalParm, Parm)

void UBioMorphFaceFrontEnd::ResetCategory(int nCategory, bool bUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.ResetCategory");

	UBioMorphFaceFrontEnd_ResetCategory_Params params;
	params.nCategory = nCategory;
	params.bUpdate = bUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.ResetAll
// (Native, Public)

void UBioMorphFaceFrontEnd::ResetAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.ResetAll");

	UBioMorphFaceFrontEnd_ResetAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.Load2DAs
// (Native, Public)
// Parameters:
// bool                           bPlayerIsMale                  (Parm)
// struct FString                 sPlayerName                    (Parm, NeedCtorLink)

void UBioMorphFaceFrontEnd::Load2DAs(bool bPlayerIsMale, const struct FString& sPlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.Load2DAs");

	UBioMorphFaceFrontEnd_Load2DAs_Params params;
	params.bPlayerIsMale = bPlayerIsMale;
	params.sPlayerName = sPlayerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.RandomizeCategory
// (Native, Public)
// Parameters:
// int                            nCategory                      (Parm)
// bool                           bUpdate                        (OptionalParm, Parm)

void UBioMorphFaceFrontEnd::RandomizeCategory(int nCategory, bool bUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.RandomizeCategory");

	UBioMorphFaceFrontEnd_RandomizeCategory_Params params;
	params.nCategory = nCategory;
	params.bUpdate = bUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.RandomizeAll
// (Native, Public)

void UBioMorphFaceFrontEnd::RandomizeAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.RandomizeAll");

	UBioMorphFaceFrontEnd_RandomizeAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceFrontEnd.Initialize
// (Native, Public)
// Parameters:
// class ABioPawn*                pThePlayer                     (Parm)
// bool                           bPlayerIsMale                  (Parm)
// bool                           bReset                         (OptionalParm, Parm)

void UBioMorphFaceFrontEnd::Initialize(class ABioPawn* pThePlayer, bool bPlayerIsMale, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceFrontEnd.Initialize");

	UBioMorphFaceFrontEnd_Initialize_Params params;
	params.pThePlayer = pThePlayer;
	params.bPlayerIsMale = bPlayerIsMale;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPhysicsActor.TakeDamage
// (Defined, Event, Public)
// Parameters:
// float                          Damage                         (Parm)
// class AController*             InstigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FTraceHitInfo           HitInfo                        (OptionalParm, Parm)
// class AActor*                  DamageCauser                   (OptionalParm, Parm)
// class UDamageType*             pDamage                        (OptionalParm, Parm)

void ABioPhysicsActor::TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, class UDamageType* pDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPhysicsActor.TakeDamage");

	ABioPhysicsActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;
	params.pDamage = pDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPhysicsActor.ChangeMaterialParameters
// (Native, Public)

void ABioPhysicsActor::ChangeMaterialParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPhysicsActor.ChangeMaterialParameters");

	ABioPhysicsActor_ChangeMaterialParameters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVFXInterface.CreateDeathEffects
// (Native, Public)
// Parameters:
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVFXInterface::CreateDeathEffects(class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVFXInterface.CreateDeathEffects");

	UBioVFXInterface_CreateDeathEffects_Params params;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_AreaMap.RTNConfirm
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_AreaMap::RTNConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_AreaMap.RTNConfirm");

	UBioSFHandler_AreaMap_RTNConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_BrowserWheel::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.OnPanelRemoved");

	UBioSFHandler_BrowserWheel_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_BrowserWheel::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.OnPanelAdded");

	UBioSFHandler_BrowserWheel_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.InitializeBrowser
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_BrowserWheel::InitializeBrowser()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.InitializeBrowser");

	UBioSFHandler_BrowserWheel_InitializeBrowser_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.DetermineJournalCodexUpdateStatus
// (Final, Native, Public)

void UBioSFHandler_BrowserWheel::DetermineJournalCodexUpdateStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.DetermineJournalCodexUpdateStatus");

	UBioSFHandler_BrowserWheel_DetermineJournalCodexUpdateStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.DetermineSquadUpdateStatus
// (Final, Defined, Public)

void UBioSFHandler_BrowserWheel::DetermineSquadUpdateStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.DetermineSquadUpdateStatus");

	UBioSFHandler_BrowserWheel_DetermineSquadUpdateStatus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_BrowserWheel::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.Update");

	UBioSFHandler_BrowserWheel_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_BrowserWheel::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.HandleInputEvent");

	UBioSFHandler_BrowserWheel_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_BrowserWheel::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.HandleEvent");

	UBioSFHandler_BrowserWheel_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.UpdateCachedItemCategory
// (Final, Defined, Public)
// Parameters:
// class UBioSFPanel*             oLastPanel                     (Parm)

void UBioSFHandler_BrowserWheel::UpdateCachedItemCategory(class UBioSFPanel* oLastPanel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.UpdateCachedItemCategory");

	UBioSFHandler_BrowserWheel_UpdateCachedItemCategory_Params params;
	params.oLastPanel = oLastPanel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BrowserWheel.ShowSelectedPanel
// (Final, Defined, Event, Public)
// Parameters:
// int                            nPanel                         (Parm)
// class UBioSFManager*           oManager                       (OptionalParm, Parm)

void UBioSFHandler_BrowserWheel::ShowSelectedPanel(int nPanel, class UBioSFManager* oManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BrowserWheel.ShowSelectedPanel");

	UBioSFHandler_BrowserWheel_ShowSelectedPanel_Params params;
	params.nPanel = nPanel;
	params.oManager = oManager;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_Credits::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.OnPanelRemoved");

	UBioSFHandler_Credits_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.SetFromAdditionalContent
// (Defined, Event, Public)

void UBioSFHandler_Credits::SetFromAdditionalContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.SetFromAdditionalContent");

	UBioSFHandler_Credits_SetFromAdditionalContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.SetFromMainMenu
// (Defined, Public)

void UBioSFHandler_Credits::SetFromMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.SetFromMainMenu");

	UBioSFHandler_Credits_SetFromMainMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.PopulateScrollingCredits
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Credits::PopulateScrollingCredits()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.PopulateScrollingCredits");

	UBioSFHandler_Credits_PopulateScrollingCredits_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.SendFlashingCredit
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Credits::SendFlashingCredit()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.SendFlashingCredit");

	UBioSFHandler_Credits_SendFlashingCredit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.SetupCreditDetails
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Credits::SetupCreditDetails()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.SetupCreditDetails");

	UBioSFHandler_Credits_SetupCreditDetails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_Credits::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.HandleInputEvent");

	UBioSFHandler_Credits_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Credits.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Credits::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.HandleEvent");

	UBioSFHandler_Credits_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_Credits.SetDataFromIniFile
// (Native, Public)
// Parameters:
// struct FString                 m_sFileName                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Credits::SetDataFromIniFile(const struct FString& m_sFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Credits.SetDataFromIniFile");

	UBioSFHandler_Credits_SetDataFromIniFile_Params params;
	params.m_sFileName = m_sFileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetDisableDefaultEsc
// (Defined, Public)
// Parameters:
// bool                           bDisable                       (Parm)

void UBioSFHandler_DesignerUI::SetDisableDefaultEsc(bool bDisable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetDisableDefaultEsc");

	UBioSFHandler_DesignerUI_SetDisableDefaultEsc_Params params;
	params.bDisable = bDisable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.Update
// (Defined, Event, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_DesignerUI::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.Update");

	UBioSFHandler_DesignerUI_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_DesignerUI::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.OnPanelAdded");

	UBioSFHandler_DesignerUI_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.GetTimerValue
// (Native, Public)
// Parameters:
// bool                           bModalTimer                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBioSFHandler_DesignerUI::GetTimerValue(bool bModalTimer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.GetTimerValue");

	UBioSFHandler_DesignerUI_GetTimerValue_Params params;
	params.bModalTimer = bModalTimer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetTimerDetails
// (Native, Public)
// Parameters:
// bool                           bModalTimer                    (Parm)
// float                          fStartTime                     (Parm)
// float                          fEndTime                       (Parm)
// float                          fInterval                      (Parm)

void UBioSFHandler_DesignerUI::SetTimerDetails(bool bModalTimer, float fStartTime, float fEndTime, float fInterval)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetTimerDetails");

	UBioSFHandler_DesignerUI_SetTimerDetails_Params params;
	params.bModalTimer = bModalTimer;
	params.fStartTime = fStartTime;
	params.fEndTime = fEndTime;
	params.fInterval = fInterval;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.FlashLaserCenter
// (Native, Public)
// Parameters:
// bool                           bSuccess                       (Parm)

void UBioSFHandler_DesignerUI::FlashLaserCenter(bool bSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.FlashLaserCenter");

	UBioSFHandler_DesignerUI_FlashLaserCenter_Params params;
	params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetLaserCircle
// (Native, Public)
// Parameters:
// int                            nCircle                        (Parm)

void UBioSFHandler_DesignerUI::SetLaserCircle(int nCircle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetLaserCircle");

	UBioSFHandler_DesignerUI_SetLaserCircle_Params params;
	params.nCircle = nCircle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetLaserLayout
// (Native, Public)
// Parameters:
// bool                           bShow                          (Parm)

void UBioSFHandler_DesignerUI::SetLaserLayout(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetLaserLayout");

	UBioSFHandler_DesignerUI_SetLaserLayout_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.IsQuasarLayout
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_DesignerUI::IsQuasarLayout()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.IsQuasarLayout");

	UBioSFHandler_DesignerUI_IsQuasarLayout_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetQuasarLayout
// (Native, Public)
// Parameters:
// bool                           bShow                          (Parm)

void UBioSFHandler_DesignerUI::SetQuasarLayout(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetQuasarLayout");

	UBioSFHandler_DesignerUI_SetQuasarLayout_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetBarFillDirection
// (Native, Public)
// Parameters:
// bool                           bModalBar                      (Parm)
// bool                           bLeftToRight                   (Parm)

void UBioSFHandler_DesignerUI::SetBarFillDirection(bool bModalBar, bool bLeftToRight)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetBarFillDirection");

	UBioSFHandler_DesignerUI_SetBarFillDirection_Params params;
	params.bModalBar = bModalBar;
	params.bLeftToRight = bLeftToRight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetBarFillPercent
// (Native, Public)
// Parameters:
// bool                           bModalBar                      (Parm)
// int                            nPercent                       (Parm)

void UBioSFHandler_DesignerUI::SetBarFillPercent(bool bModalBar, int nPercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetBarFillPercent");

	UBioSFHandler_DesignerUI_SetBarFillPercent_Params params;
	params.bModalBar = bModalBar;
	params.nPercent = nPercent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetBarMarkerPoints
// (Native, Public)
// Parameters:
// bool                           bModalBar                      (Parm)
// int                            nMarker1                       (Parm)
// int                            nMarker2                       (Parm)

void UBioSFHandler_DesignerUI::SetBarMarkerPoints(bool bModalBar, int nMarker1, int nMarker2)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetBarMarkerPoints");

	UBioSFHandler_DesignerUI_SetBarMarkerPoints_Params params;
	params.bModalBar = bModalBar;
	params.nMarker1 = nMarker1;
	params.nMarker2 = nMarker2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetCounterValue
// (Native, Public)
// Parameters:
// bool                           bModalCounter                  (Parm)
// int                            nValue                         (Parm)

void UBioSFHandler_DesignerUI::SetCounterValue(bool bModalCounter, int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetCounterValue");

	UBioSFHandler_DesignerUI_SetCounterValue_Params params;
	params.bModalCounter = bModalCounter;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetElementText
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioDUIElements>   nElement                       (Parm)
// struct FString                 sText                          (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_DesignerUI::SetElementText(TEnumAsByte<EBioDUIElements> nElement, struct FString* sText)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetElementText");

	UBioSFHandler_DesignerUI_SetElementText_Params params;
	params.nElement = nElement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sText != nullptr)
		*sText = params.sText;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetTextStringRef
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioDUIElements>   nElement                       (Parm)

void UBioSFHandler_DesignerUI::SetTextStringRef(TEnumAsByte<EBioDUIElements> nElement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetTextStringRef");

	UBioSFHandler_DesignerUI_SetTextStringRef_Params params;
	params.nElement = nElement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.ClearElementPulse
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioDUIElements>   nElement                       (Parm)

void UBioSFHandler_DesignerUI::ClearElementPulse(TEnumAsByte<EBioDUIElements> nElement)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.ClearElementPulse");

	UBioSFHandler_DesignerUI_ClearElementPulse_Params params;
	params.nElement = nElement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetupElementPulse
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioDUIElements>   nElement                       (Parm)
// float                          fMinAlpha                      (Parm)
// float                          fCycleTime                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_DesignerUI::SetupElementPulse(TEnumAsByte<EBioDUIElements> nElement, float fMinAlpha, float fCycleTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetupElementPulse");

	UBioSFHandler_DesignerUI_SetupElementPulse_Params params;
	params.nElement = nElement;
	params.fMinAlpha = fMinAlpha;
	params.fCycleTime = fCycleTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetElementAlpha
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioDUIElements>   nElement                       (Parm)
// float                          fAlpha                         (Parm)

void UBioSFHandler_DesignerUI::SetElementAlpha(TEnumAsByte<EBioDUIElements> nElement, float fAlpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetElementAlpha");

	UBioSFHandler_DesignerUI_SetElementAlpha_Params params;
	params.nElement = nElement;
	params.fAlpha = fAlpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetElementColor
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioDUIElements>   nElement                       (Parm)
// struct FColor                  stColor                        (Const, Parm, OutParm)

void UBioSFHandler_DesignerUI::SetElementColor(TEnumAsByte<EBioDUIElements> nElement, struct FColor* stColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetElementColor");

	UBioSFHandler_DesignerUI_SetElementColor_Params params;
	params.nElement = nElement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stColor != nullptr)
		*stColor = params.stColor;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.SetElementVisible
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioDUIElements>   nElement                       (Parm)
// bool                           bVisible                       (Parm)
// float                          fFadeTime                      (OptionalParm, Parm)

void UBioSFHandler_DesignerUI::SetElementVisible(TEnumAsByte<EBioDUIElements> nElement, bool bVisible, float fFadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.SetElementVisible");

	UBioSFHandler_DesignerUI_SetElementVisible_Params params;
	params.nElement = nElement;
	params.bVisible = bVisible;
	params.fFadeTime = fFadeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.IsActive
// (Native, Public)
// Parameters:
// bool                           bModal                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_DesignerUI::IsActive(bool bModal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.IsActive");

	UBioSFHandler_DesignerUI_IsActive_Params params;
	params.bModal = bModal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_DesignerUI.ClearAll
// (Native, Public)
// Parameters:
// bool                           bModal                         (Parm)

void UBioSFHandler_DesignerUI::ClearAll(bool bModal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DesignerUI.ClearAll");

	UBioSFHandler_DesignerUI_ClearAll_Params params;
	params.bModal = bModal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DeviceSelection.SetCancelDelegateEx
// (Final, Native, Public)
// Parameters:
// struct FName                   nmFunction                     (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioSFHandler_DeviceSelection::SetCancelDelegateEx(const struct FName& nmFunction, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DeviceSelection.SetCancelDelegateEx");

	UBioSFHandler_DeviceSelection_SetCancelDelegateEx_Params params;
	params.nmFunction = nmFunction;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DeviceSelection.SetCancelDelegate
// (Final, Native, Public)
// Parameters:
// struct FScriptDelegate         pDelegate                      (Parm, NeedCtorLink)

void UBioSFHandler_DeviceSelection::SetCancelDelegate(const struct FScriptDelegate& pDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DeviceSelection.SetCancelDelegate");

	UBioSFHandler_DeviceSelection_SetCancelDelegate_Params params;
	params.pDelegate = pDelegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DeviceSelection.SetCompletionDelegateEx
// (Final, Native, Public)
// Parameters:
// struct FName                   nmFunction                     (Parm)
// class UObject*                 pTarget                        (Parm)

void UBioSFHandler_DeviceSelection::SetCompletionDelegateEx(const struct FName& nmFunction, class UObject* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DeviceSelection.SetCompletionDelegateEx");

	UBioSFHandler_DeviceSelection_SetCompletionDelegateEx_Params params;
	params.nmFunction = nmFunction;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DeviceSelection.SetCompletionDelegate
// (Final, Native, Public)
// Parameters:
// struct FScriptDelegate         pDelegate                      (Parm, NeedCtorLink)

void UBioSFHandler_DeviceSelection::SetCompletionDelegate(const struct FScriptDelegate& pDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DeviceSelection.SetCompletionDelegate");

	UBioSFHandler_DeviceSelection_SetCompletionDelegate_Params params;
	params.pDelegate = pDelegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DeviceSelection.DisplayDeviceSelection
// (Final, Native, Public)
// Parameters:
// unsigned char                  LocalUserNum                   (Parm)
// int                            SizeNeeded                     (Parm)
// bool                           bForceShowUI                   (Parm)

void UBioSFHandler_DeviceSelection::DisplayDeviceSelection(unsigned char LocalUserNum, int SizeNeeded, bool bForceShowUI)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DeviceSelection.DisplayDeviceSelection");

	UBioSFHandler_DeviceSelection_DisplayDeviceSelection_Params params;
	params.LocalUserNum = LocalUserNum;
	params.SizeNeeded = SizeNeeded;
	params.bForceShowUI = bForceShowUI;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DeviceSelection.CancelCallback
// (Public, Delegate)
// Parameters:
// int                            i_dwDeviceSelectionId          (Parm)

void UBioSFHandler_DeviceSelection::CancelCallback(int i_dwDeviceSelectionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DeviceSelection.CancelCallback");

	UBioSFHandler_DeviceSelection_CancelCallback_Params params;
	params.i_dwDeviceSelectionId = i_dwDeviceSelectionId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_DeviceSelection.CompletionCallback
// (Public, Delegate)
// Parameters:
// int                            i_dwDeviceSelectionId          (Parm)

void UBioSFHandler_DeviceSelection::CompletionCallback(int i_dwDeviceSelectionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_DeviceSelection.CompletionCallback");

	UBioSFHandler_DeviceSelection_CompletionCallback_Params params;
	params.i_dwDeviceSelectionId = i_dwDeviceSelectionId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_GalaxyMap.TravelConfirm
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_GalaxyMap::TravelConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_GalaxyMap.TravelConfirm");

	UBioSFHandler_GalaxyMap_TravelConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_GameOver.OnPanelRemoved
// (Defined, Event, Public)

void UBioSFHandler_GameOver::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_GameOver.OnPanelRemoved");

	UBioSFHandler_GameOver_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_GameOver.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_GameOver::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_GameOver.OnPanelAdded");

	UBioSFHandler_GameOver_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_GameOver.GotoMainMenu
// (Native, Public)

void UBioSFHandler_GameOver::GotoMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_GameOver.GotoMainMenu");

	UBioSFHandler_GameOver_GotoMainMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_GameOver.SetupGameOver
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_GameOver::SetupGameOver()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_GameOver.SetupGameOver");

	UBioSFHandler_GameOver_SetupGameOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_GameOver.HandleEvent
// (Defined, Public)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Parm, NeedCtorLink)

void UBioSFHandler_GameOver::HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_GameOver.HandleEvent");

	UBioSFHandler_GameOver_HandleEvent_Params params;
	params.nCommand = nCommand;
	params.lstArguments = lstArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_HUD::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.OnPanelAdded");

	UBioSFHandler_HUD_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateStormWidget
// (Native, Public)
// Parameters:
// class UBioPlayerInput*         oPlayerInput                   (Parm)
// class ABioPlayerController*    oCtrl                          (Parm)

void UBioSFHandler_HUD::UpdateStormWidget(class UBioPlayerInput* oPlayerInput, class ABioPlayerController* oCtrl)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateStormWidget");

	UBioSFHandler_HUD_UpdateStormWidget_Params params;
	params.oPlayerInput = oPlayerInput;
	params.oCtrl = oCtrl;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateXPTotalWidget
// (Native, Public)
// Parameters:
// int                            nDelta                         (Parm)
// int                            nNewTotal                      (Parm)

void UBioSFHandler_HUD::UpdateXPTotalWidget(int nDelta, int nNewTotal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateXPTotalWidget");

	UBioSFHandler_HUD_UpdateXPTotalWidget_Params params;
	params.nDelta = nDelta;
	params.nNewTotal = nNewTotal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateIconDumpWidget
// (Native, Public)
// Parameters:
// class UBioEventNotifier*       oEventNotifier                 (Parm)

void UBioSFHandler_HUD::UpdateIconDumpWidget(class UBioEventNotifier* oEventNotifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateIconDumpWidget");

	UBioSFHandler_HUD_UpdateIconDumpWidget_Params params;
	params.oEventNotifier = oEventNotifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.DerivePowerBarPercentage
// (Native, Public)
// Parameters:
// TEnumAsByte<EHUDPowerBehaviorTypes> eBehaviorType                  (Parm)
// class UBioPower*               oPower                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_HUD::DerivePowerBarPercentage(TEnumAsByte<EHUDPowerBehaviorTypes> eBehaviorType, class UBioPower* oPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.DerivePowerBarPercentage");

	UBioSFHandler_HUD_DerivePowerBarPercentage_Params params;
	params.eBehaviorType = eBehaviorType;
	params.oPower = oPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_HUD.DeriveComplexPowerBehaviorType
// (Native, Public)
// Parameters:
// class UBioPower*               oPower                         (Parm)
// TEnumAsByte<EHUDPowerBehaviorTypes> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EHUDPowerBehaviorTypes> UBioSFHandler_HUD::DeriveComplexPowerBehaviorType(class UBioPower* oPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.DeriveComplexPowerBehaviorType");

	UBioSFHandler_HUD_DeriveComplexPowerBehaviorType_Params params;
	params.oPower = oPower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateCustomMappingWidget
// (Native, Public)
// Parameters:
// TEnumAsByte<EHUDDPadSlots>     eMapSlot                       (Parm)
// class ABioPlayerController*    oPlayerCtrl                    (Parm)
// class ABioPawn*                oTarget                        (OptionalParm, Parm)

void UBioSFHandler_HUD::UpdateCustomMappingWidget(TEnumAsByte<EHUDDPadSlots> eMapSlot, class ABioPlayerController* oPlayerCtrl, class ABioPawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateCustomMappingWidget");

	UBioSFHandler_HUD_UpdateCustomMappingWidget_Params params;
	params.eMapSlot = eMapSlot;
	params.oPlayerCtrl = oPlayerCtrl;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateAllCustomMappingWidgets
// (Native, Public)
// Parameters:
// class UBioPlayerInput*         pPlayerInput                   (Parm)
// class ABioPlayerController*    oPlayerCtrl                    (Parm)
// class ABioPawn*                oTarget                        (OptionalParm, Parm)

void UBioSFHandler_HUD::UpdateAllCustomMappingWidgets(class UBioPlayerInput* pPlayerInput, class ABioPlayerController* oPlayerCtrl, class ABioPawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateAllCustomMappingWidgets");

	UBioSFHandler_HUD_UpdateAllCustomMappingWidgets_Params params;
	params.pPlayerInput = pPlayerInput;
	params.oPlayerCtrl = oPlayerCtrl;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PopulateCommandsFromPawn
// (Native, Public)
// Parameters:
// class ABioPawn*                oPlayer                        (Parm)
// int                            nPawnIndex                     (Parm)

void UBioSFHandler_HUD::PopulateCommandsFromPawn(class ABioPawn* oPlayer, int nPawnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PopulateCommandsFromPawn");

	UBioSFHandler_HUD_PopulateCommandsFromPawn_Params params;
	params.oPlayer = oPlayer;
	params.nPawnIndex = nPawnIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PopulatePowersFromPawn
// (Native, Public)
// Parameters:
// class ABioPawn*                oPlayer                        (Parm)
// int                            nPawnIndex                     (Parm)

void UBioSFHandler_HUD::PopulatePowersFromPawn(class ABioPawn* oPlayer, int nPawnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PopulatePowersFromPawn");

	UBioSFHandler_HUD_PopulatePowersFromPawn_Params params;
	params.oPlayer = oPlayer;
	params.nPawnIndex = nPawnIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PopulatePowerFromPawn
// (Native, Public)
// Parameters:
// class ABioPawn*                oPlayer                        (Parm)
// int                            nPawnIndex                     (Parm)
// int                            nPowerIndex                    (Parm)

void UBioSFHandler_HUD::PopulatePowerFromPawn(class ABioPawn* oPlayer, int nPawnIndex, int nPowerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PopulatePowerFromPawn");

	UBioSFHandler_HUD_PopulatePowerFromPawn_Params params;
	params.oPlayer = oPlayer;
	params.nPawnIndex = nPawnIndex;
	params.nPowerIndex = nPowerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PopulateArmorEmitterPower
// (Native, Public)
// Parameters:
// class ABioPawn*                oPlayer                        (Parm)
// int                            nPawnIndex                     (Parm)

void UBioSFHandler_HUD::PopulateArmorEmitterPower(class ABioPawn* oPlayer, int nPawnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PopulateArmorEmitterPower");

	UBioSFHandler_HUD_PopulateArmorEmitterPower_Params params;
	params.oPlayer = oPlayer;
	params.nPawnIndex = nPawnIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PopulateWeaponAltPower
// (Native, Public)
// Parameters:
// class ABioPawn*                oPlayer                        (Parm)
// int                            nPawnIndex                     (Parm)

void UBioSFHandler_HUD::PopulateWeaponAltPower(class ABioPawn* oPlayer, int nPawnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PopulateWeaponAltPower");

	UBioSFHandler_HUD_PopulateWeaponAltPower_Params params;
	params.oPlayer = oPlayer;
	params.nPawnIndex = nPawnIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PopulateHealPower
// (Native, Public)
// Parameters:
// class ABioPawn*                oPlayer                        (Parm)
// int                            nPawnIndex                     (Parm)

void UBioSFHandler_HUD::PopulateHealPower(class ABioPawn* oPlayer, int nPawnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PopulateHealPower");

	UBioSFHandler_HUD_PopulateHealPower_Params params;
	params.oPlayer = oPlayer;
	params.nPawnIndex = nPawnIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PopulateGrenadePower
// (Native, Public)
// Parameters:
// class ABioPawn*                oPlayer                        (Parm)
// int                            nPawnIndex                     (Parm)

void UBioSFHandler_HUD::PopulateGrenadePower(class ABioPawn* oPlayer, int nPawnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PopulateGrenadePower");

	UBioSFHandler_HUD_PopulateGrenadePower_Params params;
	params.oPlayer = oPlayer;
	params.nPawnIndex = nPawnIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.SetPowerPadMode
// (Native, Public)
// Parameters:
// TEnumAsByte<EHudPowerPadModes> eMode                          (Parm)

void UBioSFHandler_HUD::SetPowerPadMode(TEnumAsByte<EHudPowerPadModes> eMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.SetPowerPadMode");

	UBioSFHandler_HUD_SetPowerPadMode_Params params;
	params.eMode = eMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateMinimapWidget
// (Defined, Public)

void UBioSFHandler_HUD::UpdateMinimapWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateMinimapWidget");

	UBioSFHandler_HUD_UpdateMinimapWidget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.SetSquadStatusWidgetInvisible
// (Native, Public)

void UBioSFHandler_HUD::SetSquadStatusWidgetInvisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.SetSquadStatusWidgetInvisible");

	UBioSFHandler_HUD_SetSquadStatusWidgetInvisible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.SetSquadStatusWidgetVisible
// (Native, Public)

void UBioSFHandler_HUD::SetSquadStatusWidgetVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.SetSquadStatusWidgetVisible");

	UBioSFHandler_HUD_SetSquadStatusWidgetVisible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.DeriveNameIconRef
// (Native, Public)
// Parameters:
// int                            nSourceRef                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_HUD::DeriveNameIconRef(int nSourceRef)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.DeriveNameIconRef");

	UBioSFHandler_HUD_DeriveNameIconRef_Params params;
	params.nSourceRef = nSourceRef;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateSquadFormationWidget
// (Native, Public)

void UBioSFHandler_HUD::UpdateSquadFormationWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateSquadFormationWidget");

	UBioSFHandler_HUD_UpdateSquadFormationWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.GetHenchmanFormation
// (Final, Native, Private)
// Parameters:
// int                            nSquadIndex                    (Parm)
// TEnumAsByte<ESquadIcons>       ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ESquadIcons> UBioSFHandler_HUD::GetHenchmanFormation(int nSquadIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.GetHenchmanFormation");

	UBioSFHandler_HUD_GetHenchmanFormation_Params params;
	params.nSquadIndex = nSquadIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateSquadFormationSwitchWidget
// (Native, Public)
// Parameters:
// class UBioPawnBehavior*        oBehavior                      (Parm)
// class UBioPlayerInput*         oPlayerInput                   (Parm)

void UBioSFHandler_HUD::UpdateSquadFormationSwitchWidget(class UBioPawnBehavior* oBehavior, class UBioPlayerInput* oPlayerInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateSquadFormationSwitchWidget");

	UBioSFHandler_HUD_UpdateSquadFormationSwitchWidget_Params params;
	params.oBehavior = oBehavior;
	params.oPlayerInput = oPlayerInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateSquadStatusWidgets
// (Native, Public)

void UBioSFHandler_HUD::UpdateSquadStatusWidgets()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateSquadStatusWidgets");

	UBioSFHandler_HUD_UpdateSquadStatusWidgets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.SiftPlayerSquad
// (Native, Public)

void UBioSFHandler_HUD::SiftPlayerSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.SiftPlayerSquad");

	UBioSFHandler_HUD_SiftPlayerSquad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.SetVehicleStatusWidgetVisible
// (Native, Public)

void UBioSFHandler_HUD::SetVehicleStatusWidgetVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.SetVehicleStatusWidgetVisible");

	UBioSFHandler_HUD_SetVehicleStatusWidgetVisible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateVehicleStatusWidget
// (Native, Public)
// Parameters:
// class ABioVehicleBase*         oVehicle                       (Parm)

void UBioSFHandler_HUD::UpdateVehicleStatusWidget(class ABioVehicleBase* oVehicle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateVehicleStatusWidget");

	UBioSFHandler_HUD_UpdateVehicleStatusWidget_Params params;
	params.oVehicle = oVehicle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateCurrentWeaponWidget
// (Native, Public)
// Parameters:
// int                            nWeaponSlot                    (Parm)
// class ABioWeaponRanged*        oRangedWeapon                  (Parm)
// bool                           bUsageSituationAmenable        (Parm)

void UBioSFHandler_HUD::UpdateCurrentWeaponWidget(int nWeaponSlot, class ABioWeaponRanged* oRangedWeapon, bool bUsageSituationAmenable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateCurrentWeaponWidget");

	UBioSFHandler_HUD_UpdateCurrentWeaponWidget_Params params;
	params.nWeaponSlot = nWeaponSlot;
	params.oRangedWeapon = oRangedWeapon;
	params.bUsageSituationAmenable = bUsageSituationAmenable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateWeaponSwitchWidget
// (Native, Public)
// Parameters:
// class ABioPawn*                oPawn                          (Parm)
// int                            nPawnIndex                     (Parm)

void UBioSFHandler_HUD::UpdateWeaponSwitchWidget(class ABioPawn* oPawn, int nPawnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateWeaponSwitchWidget");

	UBioSFHandler_HUD_UpdateWeaponSwitchWidget_Params params;
	params.oPawn = oPawn;
	params.nPawnIndex = nPawnIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.DeriveSlotFromWeapon
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioItemWeaponRangedType> eWeapon                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_HUD::DeriveSlotFromWeapon(TEnumAsByte<EBioItemWeaponRangedType> eWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.DeriveSlotFromWeapon");

	UBioSFHandler_HUD_DeriveSlotFromWeapon_Params params;
	params.eWeapon = eWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_HUD.HideTargetStatusWidget
// (Native, Public)

void UBioSFHandler_HUD::HideTargetStatusWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.HideTargetStatusWidget");

	UBioSFHandler_HUD_HideTargetStatusWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateTargetStatusWidget
// (Native, Public)
// Parameters:
// class AActor*                  pTarget                        (Parm)
// class APawn*                   pPlayer                        (Parm)
// bool                           bIsTargetCombattant            (Parm)
// bool                           bPlayerInVehicle               (Parm)

void UBioSFHandler_HUD::UpdateTargetStatusWidget(class AActor* pTarget, class APawn* pPlayer, bool bIsTargetCombattant, bool bPlayerInVehicle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateTargetStatusWidget");

	UBioSFHandler_HUD_UpdateTargetStatusWidget_Params params;
	params.pTarget = pTarget;
	params.pPlayer = pPlayer;
	params.bIsTargetCombattant = bIsTargetCombattant;
	params.bPlayerInVehicle = bPlayerInVehicle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.UpdateHUDModes
// (Native, Public)
// Parameters:
// int                            eInputMode                     (Parm)
// int                            eActionState                   (Parm)

void UBioSFHandler_HUD::UpdateHUDModes(int eInputMode, int eActionState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.UpdateHUDModes");

	UBioSFHandler_HUD_UpdateHUDModes_Params params;
	params.eInputMode = eInputMode;
	params.eActionState = eActionState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.PreReleaseHUD
// (Final, Native, Public)

void UBioSFHandler_HUD::PreReleaseHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.PreReleaseHUD");

	UBioSFHandler_HUD_PreReleaseHUD_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.InitializeEverything
// (Defined, Public, HasDefaults)

void UBioSFHandler_HUD::InitializeEverything()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.InitializeEverything");

	UBioSFHandler_HUD_InitializeEverything_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.assignKeyMaps
// (Native, Public)

void UBioSFHandler_HUD::assignKeyMaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.assignKeyMaps");

	UBioSFHandler_HUD_assignKeyMaps_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.assignHotKeys
// (Native, Public)

void UBioSFHandler_HUD::assignHotKeys()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.assignHotKeys");

	UBioSFHandler_HUD_assignHotKeys_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.getSquadUniqueIndex
// (Native, Public)
// Parameters:
// int                            HUDMemberIndex                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_HUD::getSquadUniqueIndex(int HUDMemberIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.getSquadUniqueIndex");

	UBioSFHandler_HUD_getSquadUniqueIndex_Params params;
	params.HUDMemberIndex = HUDMemberIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_HUD.doHotKey
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)

void UBioSFHandler_HUD::doHotKey(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.doHotKey");

	UBioSFHandler_HUD_doHotKey_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_HUD::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.HandleEvent");

	UBioSFHandler_HUD_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_HUD.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_HUD::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.HandleInputEvent");

	UBioSFHandler_HUD_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_HUD.ToggleKeyMap
// (Defined, Public)

void UBioSFHandler_HUD::ToggleKeyMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_HUD.ToggleKeyMap");

	UBioSFHandler_HUD_ToggleKeyMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Journal.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_Journal::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Journal.Update");

	UBioSFHandler_Journal_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Journal.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_Journal::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Journal.HandleInputEvent");

	UBioSFHandler_Journal_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Keyboard.DisplayKeyboard
// (Final, Native, Public)
// Parameters:
// int                            nMaxLength                     (Parm)
// struct FString                 sDefault                       (OptionalParm, Parm, NeedCtorLink)

void UBioSFHandler_Keyboard::DisplayKeyboard(int nMaxLength, const struct FString& sDefault)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Keyboard.DisplayKeyboard");

	UBioSFHandler_Keyboard_DisplayKeyboard_Params params;
	params.nMaxLength = nMaxLength;
	params.sDefault = sDefault;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveLoadBase.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_SaveLoadBase::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveLoadBase.OnPanelRemoved");

	UBioSFHandler_SaveLoadBase_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveLoadBase.DeviceSelectionCancel
// (Native, Public)
// Parameters:
// int                            i_dwDeviceSelectionId          (Parm)

void UBioSFHandler_SaveLoadBase::DeviceSelectionCancel(int i_dwDeviceSelectionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveLoadBase.DeviceSelectionCancel");

	UBioSFHandler_SaveLoadBase_DeviceSelectionCancel_Params params;
	params.i_dwDeviceSelectionId = i_dwDeviceSelectionId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveLoadBase.DeviceSelectionCompletion
// (Native, Public)
// Parameters:
// int                            i_dwDeviceSelectionId          (Parm)

void UBioSFHandler_SaveLoadBase::DeviceSelectionCompletion(int i_dwDeviceSelectionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveLoadBase.DeviceSelectionCompletion");

	UBioSFHandler_SaveLoadBase_DeviceSelectionCompletion_Params params;
	params.i_dwDeviceSelectionId = i_dwDeviceSelectionId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveLoadBase.DeleteGameConfirm
// (Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_SaveLoadBase::DeleteGameConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveLoadBase.DeleteGameConfirm");

	UBioSFHandler_SaveLoadBase_DeleteGameConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_LoadGame.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_LoadGame::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_LoadGame.OnPanelRemoved");

	UBioSFHandler_LoadGame_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_LoadGame.DeleteGameConfirm
// (Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_LoadGame::DeleteGameConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_LoadGame.DeleteGameConfirm");

	UBioSFHandler_LoadGame_DeleteGameConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_LoadGame.DeleteCharacterConfirm
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_LoadGame::DeleteCharacterConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_LoadGame.DeleteCharacterConfirm");

	UBioSFHandler_LoadGame_DeleteCharacterConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_LoadGame.LoadGameConfirm
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_LoadGame::LoadGameConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_LoadGame.LoadGameConfirm");

	UBioSFHandler_LoadGame_LoadGameConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.DisplayLootMaxed
// (Defined, Public, HasDefaults)
// Parameters:
// int                            i_nNumberToSlavage             (Parm)
// int                            i_nMaxItems                    (Parm)

void UBioSFHandler_Loot::DisplayLootMaxed(int i_nNumberToSlavage, int i_nMaxItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.DisplayLootMaxed");

	UBioSFHandler_Loot_DisplayLootMaxed_Params params;
	params.i_nNumberToSlavage = i_nNumberToSlavage;
	params.i_nMaxItems = i_nMaxItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.DisplayLootLimitWarning
// (Defined, Public, HasDefaults)
// Parameters:
// int                            i_nCurrentInventoryNum         (Parm)
// int                            i_nMaxItems                    (Parm)

void UBioSFHandler_Loot::DisplayLootLimitWarning(int i_nCurrentInventoryNum, int i_nMaxItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.DisplayLootLimitWarning");

	UBioSFHandler_Loot_DisplayLootLimitWarning_Params params;
	params.i_nCurrentInventoryNum = i_nCurrentInventoryNum;
	params.i_nMaxItems = i_nMaxItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.DetermineLootConstraints
// (Defined, Public, HasDefaults)

void UBioSFHandler_Loot::DetermineLootConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.DetermineLootConstraints");

	UBioSFHandler_Loot_DetermineLootConstraints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.GameSessionEnded
// (Defined, Public)

void UBioSFHandler_Loot::GameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.GameSessionEnded");

	UBioSFHandler_Loot_GameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.OnPanelRemoved
// (Defined, Event, Public)

void UBioSFHandler_Loot::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.OnPanelRemoved");

	UBioSFHandler_Loot_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.OnPanelAdded
// (Defined, Event, Public)

void UBioSFHandler_Loot::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.OnPanelAdded");

	UBioSFHandler_Loot_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.LootSalvageItemProcessDoubleCheck
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bConfirmedSalvageAttempt       (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Loot::LootSalvageItemProcessDoubleCheck(bool bConfirmedSalvageAttempt, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.LootSalvageItemProcessDoubleCheck");

	UBioSFHandler_Loot_LootSalvageItemProcessDoubleCheck_Params params;
	params.bConfirmedSalvageAttempt = bConfirmedSalvageAttempt;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.PopulateLootItemListEntry
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            nDisplayIndex                  (Parm)

void UBioSFHandler_Loot::PopulateLootItemListEntry(int nDisplayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.PopulateLootItemListEntry");

	UBioSFHandler_Loot_PopulateLootItemListEntry_Params params;
	params.nDisplayIndex = nDisplayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.PopulateLootItemList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Loot::PopulateLootItemList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.PopulateLootItemList");

	UBioSFHandler_Loot_PopulateLootItemList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.PopulateResourceList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Loot::PopulateResourceList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.PopulateResourceList");

	UBioSFHandler_Loot_PopulateResourceList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.SetGlobalVars
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Loot::SetGlobalVars()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.SetGlobalVars");

	UBioSFHandler_Loot_SetGlobalVars_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.HandleEvent
// (Defined, Public, HasDefaults)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Parm, NeedCtorLink)

void UBioSFHandler_Loot::HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.HandleEvent");

	UBioSFHandler_Loot_HandleEvent_Params params;
	params.nCommand = nCommand;
	params.lstArguments = lstArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Loot.GetInventoryThresholdWarning
// (Native, Public)
// Parameters:
// int                            i_nCurrentInvNum               (Parm)
// int                            i_nMaxItems                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSFHandler_Loot::GetInventoryThresholdWarning(int i_nCurrentInvNum, int i_nMaxItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.GetInventoryThresholdWarning");

	UBioSFHandler_Loot_GetInventoryThresholdWarning_Params params;
	params.i_nCurrentInvNum = i_nCurrentInvNum;
	params.i_nMaxItems = i_nMaxItems;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Loot.GetInventoryMaxedMessage
// (Native, Public)
// Parameters:
// int                            i_nNumberOver                  (Parm)
// int                            i_nMaxItems                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSFHandler_Loot::GetInventoryMaxedMessage(int i_nNumberOver, int i_nMaxItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Loot.GetInventoryMaxedMessage");

	UBioSFHandler_Loot_GetInventoryMaxedMessage_Params params;
	params.i_nNumberOver = i_nNumberOver;
	params.i_nMaxItems = i_nMaxItems;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_MainMenu.StartAchievementEnumeration
// (Final, Native, Public)

void UBioSFHandler_MainMenu::StartAchievementEnumeration()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.StartAchievementEnumeration");

	UBioSFHandler_MainMenu_StartAchievementEnumeration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MainMenu.SetupExtrasMenu
// (Public)

void UBioSFHandler_MainMenu::SetupExtrasMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.SetupExtrasMenu");

	UBioSFHandler_MainMenu_SetupExtrasMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MainMenu.DoCharactersExist
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_MainMenu::DoCharactersExist()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.DoCharactersExist");

	UBioSFHandler_MainMenu_DoCharactersExist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_MainMenu.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_MainMenu::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.HandleInputEvent");

	UBioSFHandler_MainMenu_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MainMenu.OnQueryAvailableDownloadsComplete
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bWasSuccessful                 (Parm)

void UBioSFHandler_MainMenu::OnQueryAvailableDownloadsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.OnQueryAvailableDownloadsComplete");

	UBioSFHandler_MainMenu_OnQueryAvailableDownloadsComplete_Params params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MainMenu.SetupMainMenu
// (Defined, Event, Public, HasDefaults)

void UBioSFHandler_MainMenu::SetupMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.SetupMainMenu");

	UBioSFHandler_MainMenu_SetupMainMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MainMenu.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_MainMenu::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.OnPanelAdded");

	UBioSFHandler_MainMenu_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MainMenu.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_MainMenu::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.HandleEvent");

	UBioSFHandler_MainMenu_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_MainMenu.Update2
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_MainMenu::Update2(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MainMenu.Update2");

	UBioSFHandler_MainMenu_Update2_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MessageBox.HideMessageBox
// (Final, Native, Public)
// Parameters:
// bool                           bRemove                        (OptionalParm, Parm)

void UBioSFHandler_MessageBox::HideMessageBox(bool bRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.HideMessageBox");

	UBioSFHandler_MessageBox_HideMessageBox_Params params;
	params.bRemove = bRemove;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MessageBox.DisplayQuickMessageBoxEx
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FString                 sMessage                       (Parm, NeedCtorLink)
// struct FBioMessageBoxOptionalParams stParams                       (Const, Parm, OutParm)

void UBioSFHandler_MessageBox::DisplayQuickMessageBoxEx(const struct FString& sMessage, struct FBioMessageBoxOptionalParams* stParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.DisplayQuickMessageBoxEx");

	UBioSFHandler_MessageBox_DisplayQuickMessageBoxEx_Params params;
	params.sMessage = sMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stParams != nullptr)
		*stParams = params.stParams;
}


// Function BIOC_Base.BioSFHandler_MessageBox.DisplayQuickMessageBox
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FBioMessageBoxOptionalParams stParams                       (Const, Parm, OutParm)

void UBioSFHandler_MessageBox::DisplayQuickMessageBox(struct FBioMessageBoxOptionalParams* stParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.DisplayQuickMessageBox");

	UBioSFHandler_MessageBox_DisplayQuickMessageBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stParams != nullptr)
		*stParams = params.stParams;
}


// Function BIOC_Base.BioSFHandler_MessageBox.DisplayMessageBoxEx
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FString                 sMessage                       (Parm, NeedCtorLink)
// struct FBioMessageBoxOptionalParams stParams                       (Const, Parm, OutParm)

void UBioSFHandler_MessageBox::DisplayMessageBoxEx(const struct FString& sMessage, struct FBioMessageBoxOptionalParams* stParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.DisplayMessageBoxEx");

	UBioSFHandler_MessageBox_DisplayMessageBoxEx_Params params;
	params.sMessage = sMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stParams != nullptr)
		*stParams = params.stParams;
}


// Function BIOC_Base.BioSFHandler_MessageBox.DisplayMessageBox
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FBioMessageBoxOptionalParams stParams                       (Const, Parm, OutParm)

void UBioSFHandler_MessageBox::DisplayMessageBox(struct FBioMessageBoxOptionalParams* stParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.DisplayMessageBox");

	UBioSFHandler_MessageBox_DisplayMessageBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stParams != nullptr)
		*stParams = params.stParams;
}


// Function BIOC_Base.BioSFHandler_MessageBox.SetUpdateDelegate
// (Final, Native, Public)
// Parameters:
// struct FScriptDelegate         pDelegate                      (Parm, NeedCtorLink)

void UBioSFHandler_MessageBox::SetUpdateDelegate(const struct FScriptDelegate& pDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.SetUpdateDelegate");

	UBioSFHandler_MessageBox_SetUpdateDelegate_Params params;
	params.pDelegate = pDelegate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MessageBox.SetInputDelegate
// (Final, Native, Public)
// Parameters:
// struct FScriptDelegate         pDelegate                      (Parm, NeedCtorLink)
// int                            nContext                       (OptionalParm, Parm)

void UBioSFHandler_MessageBox::SetInputDelegate(const struct FScriptDelegate& pDelegate, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.SetInputDelegate");

	UBioSFHandler_MessageBox_SetInputDelegate_Params params;
	params.pDelegate = pDelegate;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MessageBox.UpdateCallbackEx
// (Public, Delegate)
// Parameters:
// float                          fDeltaT                        (Parm)
// class UObject*                 oMsgBox                        (Parm)

void UBioSFHandler_MessageBox::UpdateCallbackEx(float fDeltaT, class UObject* oMsgBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.UpdateCallbackEx");

	UBioSFHandler_MessageBox_UpdateCallbackEx_Params params;
	params.fDeltaT = fDeltaT;
	params.oMsgBox = oMsgBox;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MessageBox.UpdateCallback
// (Public, Delegate)
// Parameters:
// float                          fDeltaT                        (Parm)
// class UBioSFHandler_MessageBox* oMsgBox                        (Parm)

void UBioSFHandler_MessageBox::UpdateCallback(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.UpdateCallback");

	UBioSFHandler_MessageBox_UpdateCallback_Params params;
	params.fDeltaT = fDeltaT;
	params.oMsgBox = oMsgBox;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_MessageBox.InputCallback
// (Public, Delegate)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_MessageBox::InputCallback(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_MessageBox.InputCallback");

	UBioSFHandler_MessageBox_InputCallback_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SelectPreviousPregeneratedHead
// (Final, Defined, Public)

void UBioSFHandler_NewCharacter::SelectPreviousPregeneratedHead()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SelectPreviousPregeneratedHead");

	UBioSFHandler_NewCharacter_SelectPreviousPregeneratedHead_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SelectNextPregeneratedHead
// (Final, Defined, Public)

void UBioSFHandler_NewCharacter::SelectNextPregeneratedHead()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SelectNextPregeneratedHead");

	UBioSFHandler_NewCharacter_SelectNextPregeneratedHead_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.ConfirmButtonPressed
// (Final, Defined, Public, HasDefaults)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_NewCharacter::ConfirmButtonPressed(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.ConfirmButtonPressed");

	UBioSFHandler_NewCharacter_ConfirmButtonPressed_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.ConfirmComplete
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_NewCharacter::ConfirmComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.ConfirmComplete");

	UBioSFHandler_NewCharacter_ConfirmComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.ClearModels
// (Final, Defined, Public)

void UBioSFHandler_NewCharacter::ClearModels()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.ClearModels");

	UBioSFHandler_NewCharacter_ClearModels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_NewCharacter::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.OnPanelRemoved");

	UBioSFHandler_NewCharacter_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_NewCharacter::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.OnPanelAdded");

	UBioSFHandler_NewCharacter_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.PopulateCustomFaceList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_NewCharacter::PopulateCustomFaceList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.PopulateCustomFaceList");

	UBioSFHandler_NewCharacter_PopulateCustomFaceList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.HandleSliderChange
// (Final, Defined, Public)
// Parameters:
// int                            nCategory                      (Parm)
// int                            nSlider                        (Parm)
// int                            nValue                         (Parm)

void UBioSFHandler_NewCharacter::HandleSliderChange(int nCategory, int nSlider, int nValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.HandleSliderChange");

	UBioSFHandler_NewCharacter_HandleSliderChange_Params params;
	params.nCategory = nCategory;
	params.nSlider = nSlider;
	params.nValue = nValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.DoCategoryReset
// (Final, Defined, Public)
// Parameters:
// int                            nCategory                      (Parm)

void UBioSFHandler_NewCharacter::DoCategoryReset(int nCategory)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.DoCategoryReset");

	UBioSFHandler_NewCharacter_DoCategoryReset_Params params;
	params.nCategory = nCategory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SetSliderPositions
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_NewCharacter::SetSliderPositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SetSliderPositions");

	UBioSFHandler_NewCharacter_SetSliderPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SetCustomModel
// (Final, Defined, Public)

void UBioSFHandler_NewCharacter::SetCustomModel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SetCustomModel");

	UBioSFHandler_NewCharacter_SetCustomModel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.Update3DModel
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EBioNewCharacterTemplates> nTemplate                      (Parm)

void UBioSFHandler_NewCharacter::Update3DModel(TEnumAsByte<EBioNewCharacterTemplates> nTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.Update3DModel");

	UBioSFHandler_NewCharacter_Update3DModel_Params params;
	params.nTemplate = nTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.Update3DModelState
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EBioNewCharacterTemplates> nTemplate                      (Parm)

void UBioSFHandler_NewCharacter::Update3DModelState(TEnumAsByte<EBioNewCharacterTemplates> nTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.Update3DModelState");

	UBioSFHandler_NewCharacter_Update3DModelState_Params params;
	params.nTemplate = nTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.StartNewGameEx
// (Final, Defined, Event, Public, HasDefaults)

void UBioSFHandler_NewCharacter::StartNewGameEx()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.StartNewGameEx");

	UBioSFHandler_NewCharacter_StartNewGameEx_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.StartNewGame
// (Final, Defined, Public)

void UBioSFHandler_NewCharacter::StartNewGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.StartNewGame");

	UBioSFHandler_NewCharacter_StartNewGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.UpdateBonusTalentList
// (Final, Defined, Public, HasDefaults)
// Parameters:
// struct FString                 sCharClass                     (Parm, NeedCtorLink)

void UBioSFHandler_NewCharacter::UpdateBonusTalentList(const struct FString& sCharClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.UpdateBonusTalentList");

	UBioSFHandler_NewCharacter_UpdateBonusTalentList_Params params;
	params.sCharClass = sCharClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SetPlayerCharacter
// (Final, Defined, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         PlayerSettings                 (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_NewCharacter::SetPlayerCharacter(TArray<struct FString>* PlayerSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SetPlayerCharacter");

	UBioSFHandler_NewCharacter_SetPlayerCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerSettings != nullptr)
		*PlayerSettings = params.PlayerSettings;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SetupIconicCharacter
// (Final, Defined, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         lstSettings                    (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_NewCharacter::SetupIconicCharacter(TArray<struct FString>* lstSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SetupIconicCharacter");

	UBioSFHandler_NewCharacter_SetupIconicCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstSettings != nullptr)
		*lstSettings = params.lstSettings;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.UpdateCustomClassChoice
// (Final, Defined, Public, HasDefaults)
// Parameters:
// class UBioCharacterImporter*   importer                       (Parm)
// int                            Row                            (Parm)

void UBioSFHandler_NewCharacter::UpdateCustomClassChoice(class UBioCharacterImporter* importer, int Row)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.UpdateCustomClassChoice");

	UBioSFHandler_NewCharacter_UpdateCustomClassChoice_Params params;
	params.importer = importer;
	params.Row = Row;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.UpdateCustomClassList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_NewCharacter::UpdateCustomClassList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.UpdateCustomClassList");

	UBioSFHandler_NewCharacter_UpdateCustomClassList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.UpdatePreviousCharacterList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_NewCharacter::UpdatePreviousCharacterList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.UpdatePreviousCharacterList");

	UBioSFHandler_NewCharacter_UpdatePreviousCharacterList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SetupSummary
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_NewCharacter::SetupSummary()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SetupSummary");

	UBioSFHandler_NewCharacter_SetupSummary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.SetCustomName
// (Defined, Public, HasDefaults)
// Parameters:
// struct FString                 sMaleName                      (Parm, NeedCtorLink)
// struct FString                 sFemaleName                    (Parm, NeedCtorLink)

void UBioSFHandler_NewCharacter::SetCustomName(const struct FString& sMaleName, const struct FString& sFemaleName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.SetCustomName");

	UBioSFHandler_NewCharacter_SetCustomName_Params params;
	params.sMaleName = sMaleName;
	params.sFemaleName = sFemaleName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_NewCharacter::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.Update");

	UBioSFHandler_NewCharacter_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.ResetLookAt
// (Defined, Public)

void UBioSFHandler_NewCharacter::ResetLookAt()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.ResetLookAt");

	UBioSFHandler_NewCharacter_ResetLookAt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.HandleLookAtLeftRight
// (Defined, Public)
// Parameters:
// float                          fValue                         (Parm)

void UBioSFHandler_NewCharacter::HandleLookAtLeftRight(float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.HandleLookAtLeftRight");

	UBioSFHandler_NewCharacter_HandleLookAtLeftRight_Params params;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.HandleLookAtUpDown
// (Defined, Public)
// Parameters:
// float                          fValue                         (Parm)

void UBioSFHandler_NewCharacter::HandleLookAtUpDown(float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.HandleLookAtUpDown");

	UBioSFHandler_NewCharacter_HandleLookAtUpDown_Params params;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.HandleRotate
// (Defined, Public)
// Parameters:
// float                          fValue                         (Parm)

void UBioSFHandler_NewCharacter::HandleRotate(float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.HandleRotate");

	UBioSFHandler_NewCharacter_HandleRotate_Params params;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_NewCharacter::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.HandleInputEvent");

	UBioSFHandler_NewCharacter_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_NewCharacter::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.HandleEvent");

	UBioSFHandler_NewCharacter_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.ClearEffects
// (Native, Public)

void UBioSFHandler_NewCharacter::ClearEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.ClearEffects");

	UBioSFHandler_NewCharacter_ClearEffects_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.Update3DModelByClass
// (Native, Public)
// Parameters:
// struct FName                   nmClass                        (Parm)
// class ABioPawn*                pTemplate                      (Parm)
// TEnumAsByte<EBioNewCharacterTemplates> nTemplate                      (Parm)
// bool                           bUpdate                        (Parm)
// bool                           bForce                         (OptionalParm, Parm)
// bool                           bAttachVFXandUpdatePose        (OptionalParm, Parm)

void UBioSFHandler_NewCharacter::Update3DModelByClass(const struct FName& nmClass, class ABioPawn* pTemplate, TEnumAsByte<EBioNewCharacterTemplates> nTemplate, bool bUpdate, bool bForce, bool bAttachVFXandUpdatePose)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.Update3DModelByClass");

	UBioSFHandler_NewCharacter_Update3DModelByClass_Params params;
	params.nmClass = nmClass;
	params.pTemplate = pTemplate;
	params.nTemplate = nTemplate;
	params.bUpdate = bUpdate;
	params.bForce = bForce;
	params.bAttachVFXandUpdatePose = bAttachVFXandUpdatePose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_NewCharacter.Setup3DModel
// (Native, Public)

void UBioSFHandler_NewCharacter::Setup3DModel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_NewCharacter.Setup3DModel");

	UBioSFHandler_NewCharacter_Setup3DModel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Options.ConfirmResetTutorials
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Options::ConfirmResetTutorials(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Options.ConfirmResetTutorials");

	UBioSFHandler_Options_ConfirmResetTutorials_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Options.ConfirmResetToDefaults
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Options::ConfirmResetToDefaults(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Options.ConfirmResetToDefaults");

	UBioSFHandler_Options_ConfirmResetToDefaults_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Options.OptionsConfirmCancel
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Options::OptionsConfirmCancel(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Options.OptionsConfirmCancel");

	UBioSFHandler_Options_OptionsConfirmCancel_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Options.CloseGui
// (Final, Native, Public)

void UBioSFHandler_Options::CloseGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Options.CloseGui");

	UBioSFHandler_Options_CloseGui_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Options.ConfirmGoToMainMenu
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Options::ConfirmGoToMainMenu(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Options.ConfirmGoToMainMenu");

	UBioSFHandler_Options_ConfirmGoToMainMenu_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Options.OptionsConfirmCommit
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)
// bool                           bDoNotClose                    (OptionalParm, Parm)

void UBioSFHandler_Options::OptionsConfirmCommit(bool bAPressed, int nContext, bool bDoNotClose)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Options.OptionsConfirmCommit");

	UBioSFHandler_Options_OptionsConfirmCommit_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;
	params.bDoNotClose = bDoNotClose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Options.SetOptionsOnGUI
// (Native, Public, HasOutParms)
// Parameters:
// struct FGameOptions            i_GameOptions                  (Parm, OutParm)

void UBioSFHandler_Options::SetOptionsOnGUI(struct FGameOptions* i_GameOptions)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Options.SetOptionsOnGUI");

	UBioSFHandler_Options_SetOptionsOnGUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (i_GameOptions != nullptr)
		*i_GameOptions = params.i_GameOptions;
}


// Function BIOC_Base.BioSFHandler_PCAdditionalContent.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCAdditionalContent::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCAdditionalContent.Update");

	UBioSFHandler_PCAdditionalContent_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCDataCodex.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCDataCodex::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCDataCodex.Update");

	UBioSFHandler_PCDataCodex_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCDesignerUI.ButtonPress
// (Defined, Public)
// Parameters:
// int                            nButtonIndex                   (Parm)

void UBioSFHandler_PCDesignerUI::ButtonPress(int nButtonIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCDesignerUI.ButtonPress");

	UBioSFHandler_PCDesignerUI_ButtonPress_Params params;
	params.nButtonIndex = nButtonIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCDesignerUI.HandleEvent
// (Defined, Public)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Parm, NeedCtorLink)

void UBioSFHandler_PCDesignerUI::HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCDesignerUI.HandleEvent");

	UBioSFHandler_PCDesignerUI_HandleEvent_Params params;
	params.nCommand = nCommand;
	params.lstArguments = lstArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCDesignerUI.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCDesignerUI::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCDesignerUI.Update");

	UBioSFHandler_PCDesignerUI_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCDesignerUI.EnableCameraMovement
// (Final, Native, Public)

void UBioSFHandler_PCDesignerUI::EnableCameraMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCDesignerUI.EnableCameraMovement");

	UBioSFHandler_PCDesignerUI_EnableCameraMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCDesignerUI.DisableCameraMovement
// (Final, Native, Public)

void UBioSFHandler_PCDesignerUI::DisableCameraMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCDesignerUI.DisableCameraMovement");

	UBioSFHandler_PCDesignerUI_DisableCameraMovement_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCJournal.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCJournal::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCJournal.Update");

	UBioSFHandler_PCJournal_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCLoadGame.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCLoadGame::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCLoadGame.Update");

	UBioSFHandler_PCLoadGame_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleLookAtLeftRightMouse
// (Defined, Public)
// Parameters:
// float                          fValue                         (Parm)

void UBioSFHandler_PCNewCharacter::HandleLookAtLeftRightMouse(float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleLookAtLeftRightMouse");

	UBioSFHandler_PCNewCharacter_HandleLookAtLeftRightMouse_Params params;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleLookAtUpDownMouse
// (Defined, Public)
// Parameters:
// float                          fValue                         (Parm)

void UBioSFHandler_PCNewCharacter::HandleLookAtUpDownMouse(float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleLookAtUpDownMouse");

	UBioSFHandler_PCNewCharacter_HandleLookAtUpDownMouse_Params params;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_PCNewCharacter::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleInputEvent");

	UBioSFHandler_PCNewCharacter_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PCNewCharacter::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCNewCharacter.HandleEvent");

	UBioSFHandler_PCNewCharacter_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_PCNewCharacter.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCNewCharacter::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCNewCharacter.Update");

	UBioSFHandler_PCNewCharacter_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCPauseMenu.HackGotoMainMenu
// (Native, Public)

void UBioSFHandler_PCPauseMenu::HackGotoMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPauseMenu.HackGotoMainMenu");

	UBioSFHandler_PCPauseMenu_HackGotoMainMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCPauseMenu.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCPauseMenu::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPauseMenu.Update");

	UBioSFHandler_PCPauseMenu_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCPauseMenu.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_PCPauseMenu::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPauseMenu.HandleInputEvent");

	UBioSFHandler_PCPauseMenu_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCPauseMenu.ExitConfirm
// (Defined, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PCPauseMenu::ExitConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPauseMenu.ExitConfirm");

	UBioSFHandler_PCPauseMenu_ExitConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCPauseMenu.MainMenuConfirm
// (Defined, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PCPauseMenu::MainMenuConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPauseMenu.MainMenuConfirm");

	UBioSFHandler_PCPauseMenu_MainMenuConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCPauseMenu.HandleEvent
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PCPauseMenu::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPauseMenu.HandleEvent");

	UBioSFHandler_PCPauseMenu_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_PCPauseMenu.OnPanelAdded
// (Defined, Event, Public)

void UBioSFHandler_PCPauseMenu::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPauseMenu.OnPanelAdded");

	UBioSFHandler_PCPauseMenu_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveGame.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_SaveGame::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveGame.OnPanelRemoved");

	UBioSFHandler_SaveGame_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveGame.SaveComplete
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// class UBioSFHandler_MessageBox* oMsgBox                        (Parm)

void UBioSFHandler_SaveGame::SaveComplete(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveGame.SaveComplete");

	UBioSFHandler_SaveGame_SaveComplete_Params params;
	params.fDeltaT = fDeltaT;
	params.oMsgBox = oMsgBox;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveGame.SaveGameConfirm
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_SaveGame::SaveGameConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveGame.SaveGameConfirm");

	UBioSFHandler_SaveGame_SaveGameConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SaveGame.DeleteGameConfirm
// (Defined, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_SaveGame::DeleteGameConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SaveGame.DeleteGameConfirm");

	UBioSFHandler_SaveGame_DeleteGameConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSaveGame.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCSaveGame::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSaveGame.Update");

	UBioSFHandler_PCSaveGame_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSaveGame.SaveComplete
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// class UBioSFHandler_MessageBox* oMsgBox                        (Parm)

void UBioSFHandler_PCSaveGame::SaveComplete(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSaveGame.SaveComplete");

	UBioSFHandler_PCSaveGame_SaveComplete_Params params;
	params.fDeltaT = fDeltaT;
	params.oMsgBox = oMsgBox;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyShadowDetail
// (Native, Public)

void UBioSFHandler_PCSettings::ApplyShadowDetail()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyShadowDetail");

	UBioSFHandler_PCSettings_ApplyShadowDetail_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyVideoChangesResolution
// (Native, Public)

void UBioSFHandler_PCSettings::ApplyVideoChangesResolution()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyVideoChangesResolution");

	UBioSFHandler_PCSettings_ApplyVideoChangesResolution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyVideoChanges
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ApplyVideoChanges()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyVideoChanges");

	UBioSFHandler_PCSettings_ApplyVideoChanges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetShadowDetailLevel
// (Final, Defined, Public)
// Parameters:
// bool                           ShadowDetailLevel              (Parm)

void UBioSFHandler_PCSettings::SetShadowDetailLevel(bool ShadowDetailLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetShadowDetailLevel");

	UBioSFHandler_PCSettings_SetShadowDetailLevel_Params params;
	params.ShadowDetailLevel = ShadowDetailLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetFilterLevel
// (Final, Defined, Public)
// Parameters:
// int                            FilterLevel                    (Parm)

void UBioSFHandler_PCSettings::SetFilterLevel(int FilterLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetFilterLevel");

	UBioSFHandler_PCSettings_SetFilterLevel_Params params;
	params.FilterLevel = FilterLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetShaderFilmLevel
// (Final, Defined, Public)
// Parameters:
// int                            FilmDetailLevel                (Parm)

void UBioSFHandler_PCSettings::SetShaderFilmLevel(int FilmDetailLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetShaderFilmLevel");

	UBioSFHandler_PCSettings_SetShaderFilmLevel_Params params;
	params.FilmDetailLevel = FilmDetailLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetShaderBlurLevel
// (Final, Defined, Public)
// Parameters:
// int                            BlurDetailLevel                (Parm)

void UBioSFHandler_PCSettings::SetShaderBlurLevel(int BlurDetailLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetShaderBlurLevel");

	UBioSFHandler_PCSettings_SetShaderBlurLevel_Params params;
	params.BlurDetailLevel = BlurDetailLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetTextureLevel
// (Final, Defined, Public)
// Parameters:
// int                            TextureLevel                   (Parm)

void UBioSFHandler_PCSettings::SetTextureLevel(int TextureLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetTextureLevel");

	UBioSFHandler_PCSettings_SetTextureLevel_Params params;
	params.TextureLevel = TextureLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetGammaValue
// (Final, Defined, Public)
// Parameters:
// int                            GammaValue                     (Parm)

void UBioSFHandler_PCSettings::SetGammaValue(int GammaValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetGammaValue");

	UBioSFHandler_PCSettings_SetGammaValue_Params params;
	params.GammaValue = GammaValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetScreenRes
// (Final, Defined, Public)
// Parameters:
// int                            NewScreenRes                   (Parm)

void UBioSFHandler_PCSettings::SetScreenRes(int NewScreenRes)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetScreenRes");

	UBioSFHandler_PCSettings_SetScreenRes_Params params;
	params.NewScreenRes = NewScreenRes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetWindow
// (Final, Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void UBioSFHandler_PCSettings::SetWindow(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetWindow");

	UBioSFHandler_PCSettings_SetWindow_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetParticleEffectsLevel
// (Final, Defined, Public)
// Parameters:
// int                            newLevel                       (Parm)

void UBioSFHandler_PCSettings::SetParticleEffectsLevel(int newLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetParticleEffectsLevel");

	UBioSFHandler_PCSettings_SetParticleEffectsLevel_Params params;
	params.newLevel = newLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetVSyncOn
// (Final, Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void UBioSFHandler_PCSettings::SetVSyncOn(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetVSyncOn");

	UBioSFHandler_PCSettings_SetVSyncOn_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyParticleEffectsLevel
// (Native, Public)

void UBioSFHandler_PCSettings::ApplyParticleEffectsLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyParticleEffectsLevel");

	UBioSFHandler_PCSettings_ApplyParticleEffectsLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyTextureLevelOfDetail
// (Native, Public)

void UBioSFHandler_PCSettings::ApplyTextureLevelOfDetail()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyTextureLevelOfDetail");

	UBioSFHandler_PCSettings_ApplyTextureLevelOfDetail_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetTextureLevelOfDetail
// (Native, Public)

void UBioSFHandler_PCSettings::GetTextureLevelOfDetail()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetTextureLevelOfDetail");

	UBioSFHandler_PCSettings_GetTextureLevelOfDetail_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.BuildResolutionList
// (Native, Public)

void UBioSFHandler_PCSettings::BuildResolutionList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.BuildResolutionList");

	UBioSFHandler_PCSettings_BuildResolutionList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.AddResolutionOptionToUI
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FBioScreenResolution    ScreenRes                      (Parm)

void UBioSFHandler_PCSettings::AddResolutionOptionToUI(const struct FBioScreenResolution& ScreenRes)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.AddResolutionOptionToUI");

	UBioSFHandler_PCSettings_AddResolutionOptionToUI_Params params;
	params.ScreenRes = ScreenRes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.UpdateResolutionSelections
// (Defined, Public)

void UBioSFHandler_PCSettings::UpdateResolutionSelections()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.UpdateResolutionSelections");

	UBioSFHandler_PCSettings_UpdateResolutionSelections_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetAnalogSens
// (Defined, Public)
// Parameters:
// int                            Percent                        (Parm)

void UBioSFHandler_PCSettings::SetAnalogSens(int Percent)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetAnalogSens");

	UBioSFHandler_PCSettings_SetAnalogSens_Params params;
	params.Percent = Percent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetRumbleToggle
// (Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void UBioSFHandler_PCSettings::SetRumbleToggle(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetRumbleToggle");

	UBioSFHandler_PCSettings_SetRumbleToggle_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ConvertLODBiasToParticleEffectsLevel
// (Native, Public)
// Parameters:
// int                            LODBias                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_PCSettings::ConvertLODBiasToParticleEffectsLevel(int LODBias)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ConvertLODBiasToParticleEffectsLevel");

	UBioSFHandler_PCSettings_ConvertLODBiasToParticleEffectsLevel_Params params;
	params.LODBias = LODBias;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ConvertParticleEffectsLevelToLODBias
// (Native, Public)
// Parameters:
// int                            ParticleEffectsLevel           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_PCSettings::ConvertParticleEffectsLevelToLODBias(int ParticleEffectsLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ConvertParticleEffectsLevelToLODBias");

	UBioSFHandler_PCSettings_ConvertParticleEffectsLevelToLODBias_Params params;
	params.ParticleEffectsLevel = ParticleEffectsLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetParticleEffectsLevel
// (Native, Public)

void UBioSFHandler_PCSettings::GetParticleEffectsLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetParticleEffectsLevel");

	UBioSFHandler_PCSettings_GetParticleEffectsLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetShadowDetailLevel
// (Native, Public)

void UBioSFHandler_PCSettings::GetShadowDetailLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetShadowDetailLevel");

	UBioSFHandler_PCSettings_GetShadowDetailLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetCurrentRes
// (Native, Public)

void UBioSFHandler_PCSettings::GetCurrentRes()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetCurrentRes");

	UBioSFHandler_PCSettings_GetCurrentRes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetFilter
// (Native, Public)

void UBioSFHandler_PCSettings::SetFilter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetFilter");

	UBioSFHandler_PCSettings_SetFilter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetFilter
// (Native, Public)

void UBioSFHandler_PCSettings::GetFilter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetFilter");

	UBioSFHandler_PCSettings_GetFilter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetVsync
// (Native, Public)

void UBioSFHandler_PCSettings::SetVsync()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetVsync");

	UBioSFHandler_PCSettings_SetVsync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetVSync
// (Native, Public)

void UBioSFHandler_PCSettings::GetVSync()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetVSync");

	UBioSFHandler_PCSettings_GetVSync_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.TestGamma
// (Native, Public)
// Parameters:
// int                            TestGammaValue                 (Parm)

void UBioSFHandler_PCSettings::TestGamma(int TestGammaValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.TestGamma");

	UBioSFHandler_PCSettings_TestGamma_Params params;
	params.TestGammaValue = TestGammaValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetGamma
// (Native, Public)

void UBioSFHandler_PCSettings::SetGamma()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetGamma");

	UBioSFHandler_PCSettings_SetGamma_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetCurrentGamma
// (Native, Public)

void UBioSFHandler_PCSettings::GetCurrentGamma()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetCurrentGamma");

	UBioSFHandler_PCSettings_GetCurrentGamma_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.InitVideoValues
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::InitVideoValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.InitVideoValues");

	UBioSFHandler_PCSettings_InitVideoValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyAudioChanges
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ApplyAudioChanges()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyAudioChanges");

	UBioSFHandler_PCSettings_ApplyAudioChanges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyAudioSettings
// (Native, Public)

void UBioSFHandler_PCSettings::ApplyAudioSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyAudioSettings");

	UBioSFHandler_PCSettings_ApplyAudioSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplySubtitleState
// (Native, Public)

void UBioSFHandler_PCSettings::ApplySubtitleState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplySubtitleState");

	UBioSFHandler_PCSettings_ApplySubtitleState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.InitSubtitleState
// (Native, Public)

void UBioSFHandler_PCSettings::InitSubtitleState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.InitSubtitleState");

	UBioSFHandler_PCSettings_InitSubtitleState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetAutoSave
// (Final, Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void UBioSFHandler_PCSettings::SetAutoSave(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetAutoSave");

	UBioSFHandler_PCSettings_SetAutoSave_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetCaptionToggle
// (Final, Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void UBioSFHandler_PCSettings::SetCaptionToggle(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetCaptionToggle");

	UBioSFHandler_PCSettings_SetCaptionToggle_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetAudioVolVoice
// (Final, Defined, Public)
// Parameters:
// int                            Value                          (Parm)

void UBioSFHandler_PCSettings::SetAudioVolVoice(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetAudioVolVoice");

	UBioSFHandler_PCSettings_SetAudioVolVoice_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetAudioVolFX
// (Final, Defined, Public)
// Parameters:
// int                            Value                          (Parm)

void UBioSFHandler_PCSettings::SetAudioVolFX(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetAudioVolFX");

	UBioSFHandler_PCSettings_SetAudioVolFX_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetAudioVolMusic
// (Final, Defined, Public)
// Parameters:
// int                            Value                          (Parm)

void UBioSFHandler_PCSettings::SetAudioVolMusic(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetAudioVolMusic");

	UBioSFHandler_PCSettings_SetAudioVolMusic_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.PlaySampleSound
// (Defined, Public)
// Parameters:
// class UAudioComponent*         Comp                           (Parm, EditInline)
// float                          Volume                         (Parm)

void UBioSFHandler_PCSettings::PlaySampleSound(class UAudioComponent* Comp, float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.PlaySampleSound");

	UBioSFHandler_PCSettings_PlaySampleSound_Params params;
	params.Comp = Comp;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.InitAudioValues
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::InitAudioValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.InitAudioValues");

	UBioSFHandler_PCSettings_InitAudioValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.DetectEAXSupport
// (Native, Public)

void UBioSFHandler_PCSettings::DetectEAXSupport()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.DetectEAXSupport");

	UBioSFHandler_PCSettings_DetectEAXSupport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetHardwareSoundOn
// (Native, Public)

void UBioSFHandler_PCSettings::GetHardwareSoundOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetHardwareSoundOn");

	UBioSFHandler_PCSettings_GetHardwareSoundOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.LoadSound
// (Defined, Public)
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)
// class USoundCue*               Cue                            (Parm)
// class UAudioComponent*         ReturnValue                    (Parm, OutParm, ReturnParm, EditInline)

class UAudioComponent* UBioSFHandler_PCSettings::LoadSound(const struct FString& Section, class USoundCue* Cue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.LoadSound");

	UBioSFHandler_PCSettings_LoadSound_Params params;
	params.Section = Section;
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetBindingFor
// (Final, Defined, Public)
// Parameters:
// int                            ActionIndex                    (Parm)
// int                            ColIndex                       (Parm)

void UBioSFHandler_PCSettings::SetBindingFor(int ActionIndex, int ColIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetBindingFor");

	UBioSFHandler_PCSettings_SetBindingFor_Params params;
	params.ActionIndex = ActionIndex;
	params.ColIndex = ColIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.GetBindingHelpText
// (Native, Public)
// Parameters:
// int                            Index                          (Parm)

void UBioSFHandler_PCSettings::GetBindingHelpText(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.GetBindingHelpText");

	UBioSFHandler_PCSettings_GetBindingHelpText_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetBindingDefaults
// (Native, Public)

void UBioSFHandler_PCSettings::ResetBindingDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetBindingDefaults");

	UBioSFHandler_PCSettings_ResetBindingDefaults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.CheckForDupeKey
// (Native, Public)
// Parameters:
// struct FName                   NewKeyName                     (Parm)
// struct FName                   OldKeyName                     (Parm)

void UBioSFHandler_PCSettings::CheckForDupeKey(const struct FName& NewKeyName, const struct FName& OldKeyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.CheckForDupeKey");

	UBioSFHandler_PCSettings_CheckForDupeKey_Params params;
	params.NewKeyName = NewKeyName;
	params.OldKeyName = OldKeyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.UpdateKeyToSF
// (Native, Public)
// Parameters:
// int                            Index                          (Parm)

void UBioSFHandler_PCSettings::UpdateKeyToSF(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.UpdateKeyToSF");

	UBioSFHandler_PCSettings_UpdateKeyToSF_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.CheckForNewKey
// (Native, Public)

void UBioSFHandler_PCSettings::CheckForNewKey()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.CheckForNewKey");

	UBioSFHandler_PCSettings_CheckForNewKey_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.UpdateTextOnButtons
// (Native, Public)

void UBioSFHandler_PCSettings::UpdateTextOnButtons()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.UpdateTextOnButtons");

	UBioSFHandler_PCSettings_UpdateTextOnButtons_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.BuildBindingList
// (Native, Public)

void UBioSFHandler_PCSettings::BuildBindingList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.BuildBindingList");

	UBioSFHandler_PCSettings_BuildBindingList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.AddClearedKey
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FName                   KeyName                        (Parm)

void UBioSFHandler_PCSettings::AddClearedKey(const struct FName& KeyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.AddClearedKey");

	UBioSFHandler_PCSettings_AddClearedKey_Params params;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyKeyboardChanges
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_PCSettings::ApplyKeyboardChanges()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyKeyboardChanges");

	UBioSFHandler_PCSettings_ApplyKeyboardChanges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.InitKeyboardValues
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::InitKeyboardValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.InitKeyboardValues");

	UBioSFHandler_PCSettings_InitKeyboardValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetBindingHelpText
// (Defined, Event, Public, HasDefaults)
// Parameters:
// struct FString                 HelpText                       (Parm, NeedCtorLink)

void UBioSFHandler_PCSettings::SetBindingHelpText(const struct FString& HelpText)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetBindingHelpText");

	UBioSFHandler_PCSettings_SetBindingHelpText_Params params;
	params.HelpText = HelpText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetBindingKeyText
// (Defined, Event, Public, HasDefaults)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 TalentText                     (Parm, NeedCtorLink)
// int                            KeyIndex                       (Parm)

void UBioSFHandler_PCSettings::SetBindingKeyText(int Index, const struct FString& TalentText, int KeyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetBindingKeyText");

	UBioSFHandler_PCSettings_SetBindingKeyText_Params params;
	params.Index = Index;
	params.TalentText = TalentText;
	params.KeyIndex = KeyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetBindingTalentText
// (Defined, Event, Public, HasDefaults)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 TalentText                     (Parm, NeedCtorLink)

void UBioSFHandler_PCSettings::SetBindingTalentText(int Index, const struct FString& TalentText)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetBindingTalentText");

	UBioSFHandler_PCSettings_SetBindingTalentText_Params params;
	params.Index = Index;
	params.TalentText = TalentText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ShowBindingRow
// (Defined, Event, Public, HasDefaults)
// Parameters:
// int                            Index                          (Parm)
// bool                           bShow                          (Parm)

void UBioSFHandler_PCSettings::ShowBindingRow(int Index, bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ShowBindingRow");

	UBioSFHandler_PCSettings_ShowBindingRow_Params params;
	params.Index = Index;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyAutos
// (Defined, Public)

void UBioSFHandler_PCSettings::ApplyAutos()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyAutos");

	UBioSFHandler_PCSettings_ApplyAutos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyGamePlay
// (Defined, Public)

void UBioSFHandler_PCSettings::ApplyGamePlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyGamePlay");

	UBioSFHandler_PCSettings_ApplyGamePlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetTutorialsMSG
// (Final, Native, Public)

void UBioSFHandler_PCSettings::ResetTutorialsMSG()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetTutorialsMSG");

	UBioSFHandler_PCSettings_ResetTutorialsMSG_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ConfirmResetTutorials
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PCSettings::ConfirmResetTutorials(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ConfirmResetTutorials");

	UBioSFHandler_PCSettings_ConfirmResetTutorials_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SaveProfile
// (Final, Native, Public)

void UBioSFHandler_PCSettings::SaveProfile()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SaveProfile");

	UBioSFHandler_PCSettings_SaveProfile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.InitAutos
// (Defined, Public)

void UBioSFHandler_PCSettings::InitAutos()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.InitAutos");

	UBioSFHandler_PCSettings_InitAutos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.InitGamePlay
// (Defined, Public)

void UBioSFHandler_PCSettings::InitGamePlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.InitGamePlay");

	UBioSFHandler_PCSettings_InitGamePlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyInput
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ApplyInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyInput");

	UBioSFHandler_PCSettings_ApplyInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetMouseSense
// (Final, Defined, Public)
// Parameters:
// int                            SliderValue                    (Parm)

void UBioSFHandler_PCSettings::SetMouseSense(int SliderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetMouseSense");

	UBioSFHandler_PCSettings_SetMouseSense_Params params;
	params.SliderValue = SliderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetHardwareMouseMouse
// (Final, Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void UBioSFHandler_PCSettings::SetHardwareMouseMouse(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetHardwareMouseMouse");

	UBioSFHandler_PCSettings_SetHardwareMouseMouse_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.InitInput
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::InitInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.InitInput");

	UBioSFHandler_PCSettings_InitInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ApplyChanges
// (Final, Defined, Public)
// Parameters:
// int                            SubPanelIndex                  (Parm)

void UBioSFHandler_PCSettings::ApplyChanges(int SubPanelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ApplyChanges");

	UBioSFHandler_PCSettings_ApplyChanges_Params params;
	params.SubPanelIndex = SubPanelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ExitMenu
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ExitMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ExitMenu");

	UBioSFHandler_PCSettings_ExitMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetAutos
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ResetAutos()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetAutos");

	UBioSFHandler_PCSettings_ResetAutos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetGameplay
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_PCSettings::ResetGameplay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetGameplay");

	UBioSFHandler_PCSettings_ResetGameplay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetControls
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ResetControls()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetControls");

	UBioSFHandler_PCSettings_ResetControls_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetInput
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetInput");

	UBioSFHandler_PCSettings_ResetInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetSound
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ResetSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetSound");

	UBioSFHandler_PCSettings_ResetSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetGraphics
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::ResetGraphics()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetGraphics");

	UBioSFHandler_PCSettings_ResetGraphics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetAllValues
// (Final, Defined, Event, Public)
// Parameters:
// int                            SubPanelIndex                  (Parm)

void UBioSFHandler_PCSettings::ResetAllValues(int SubPanelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetAllValues");

	UBioSFHandler_PCSettings_ResetAllValues_Params params;
	params.SubPanelIndex = SubPanelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtAutos
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_PCSettings::SetDefualtAutos()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtAutos");

	UBioSFHandler_PCSettings_SetDefualtAutos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtGameplay
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_PCSettings::SetDefualtGameplay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtGameplay");

	UBioSFHandler_PCSettings_SetDefualtGameplay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtControls
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::SetDefualtControls()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtControls");

	UBioSFHandler_PCSettings_SetDefualtControls_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtInput
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_PCSettings::SetDefualtInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtInput");

	UBioSFHandler_PCSettings_SetDefualtInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtSound
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::SetDefualtSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtSound");

	UBioSFHandler_PCSettings_SetDefualtSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtVideo
// (Final, Defined, Public)

void UBioSFHandler_PCSettings::SetDefualtVideo()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetDefualtVideo");

	UBioSFHandler_PCSettings_SetDefualtVideo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetDefaults
// (Defined, Event, Public)
// Parameters:
// int                            SubPanelIndex                  (Parm)

void UBioSFHandler_PCSettings::SetDefaults(int SubPanelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetDefaults");

	UBioSFHandler_PCSettings_SetDefaults_Params params;
	params.SubPanelIndex = SubPanelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.setDropdownByID
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            Id                             (Parm)
// int                            Index                          (Parm)

void UBioSFHandler_PCSettings::setDropdownByID(int Id, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.setDropdownByID");

	UBioSFHandler_PCSettings_setDropdownByID_Params params;
	params.Id = Id;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetIndexedSliderByIndex
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            Index                          (Parm)
// int                            Value                          (Parm)
// bool                           bSetLastMarker                 (Parm)

void UBioSFHandler_PCSettings::SetIndexedSliderByIndex(int Index, int Value, bool bSetLastMarker)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetIndexedSliderByIndex");

	UBioSFHandler_PCSettings_SetIndexedSliderByIndex_Params params;
	params.Index = Index;
	params.Value = Value;
	params.bSetLastMarker = bSetLastMarker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetSliderByIndex
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            Index                          (Parm)
// float                          Value                          (Parm)
// bool                           bSetLastMarker                 (Parm)

void UBioSFHandler_PCSettings::SetSliderByIndex(int Index, float Value, bool bSetLastMarker)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetSliderByIndex");

	UBioSFHandler_PCSettings_SetSliderByIndex_Params params;
	params.Index = Index;
	params.Value = Value;
	params.bSetLastMarker = bSetLastMarker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SetCheckBoxByIndex
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            Index                          (Parm)
// bool                           bOn                            (Parm)

void UBioSFHandler_PCSettings::SetCheckBoxByIndex(int Index, bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SetCheckBoxByIndex");

	UBioSFHandler_PCSettings_SetCheckBoxByIndex_Params params;
	params.Index = Index;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.WarnUnsaved
// (Defined, Public)

void UBioSFHandler_PCSettings::WarnUnsaved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.WarnUnsaved");

	UBioSFHandler_PCSettings_WarnUnsaved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ClosePanelWithOutSavingConfirm
// (Native, Public)
// Parameters:
// bool                           bConfimNoSave                  (Parm)

void UBioSFHandler_PCSettings::ClosePanelWithOutSavingConfirm(bool bConfimNoSave)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ClosePanelWithOutSavingConfirm");

	UBioSFHandler_PCSettings_ClosePanelWithOutSavingConfirm_Params params;
	params.bConfimNoSave = bConfimNoSave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ClosePanelWithOutSaving
// (Native, Public)

void UBioSFHandler_PCSettings::ClosePanelWithOutSaving()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ClosePanelWithOutSaving");

	UBioSFHandler_PCSettings_ClosePanelWithOutSaving_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PCSettings::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.HandleEvent");

	UBioSFHandler_PCSettings_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_PCSettings.Init
// (Defined, Public, HasDefaults)

void UBioSFHandler_PCSettings::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.Init");

	UBioSFHandler_PCSettings_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCSettings::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.Update");

	UBioSFHandler_PCSettings_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ScrollKeyPressed
// (Final, Native, Public)
// Parameters:
// struct FName                   Key                            (Parm)

void UBioSFHandler_PCSettings::ScrollKeyPressed(const struct FName& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ScrollKeyPressed");

	UBioSFHandler_PCSettings_ScrollKeyPressed_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ResetDefaultsMSG
// (Final, Native, Public)
// Parameters:
// int                            nContext                       (Parm)

void UBioSFHandler_PCSettings::ResetDefaultsMSG(int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ResetDefaultsMSG");

	UBioSFHandler_PCSettings_ResetDefaultsMSG_Params params;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.SavingMSG
// (Final, Native, Public)

void UBioSFHandler_PCSettings::SavingMSG()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.SavingMSG");

	UBioSFHandler_PCSettings_SavingMSG_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.ConfirmResetToDefaults
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PCSettings::ConfirmResetToDefaults(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.ConfirmResetToDefaults");

	UBioSFHandler_PCSettings_ConfirmResetToDefaults_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCSettings.OptionsConfirmCommit
// (Final, Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PCSettings::OptionsConfirmCommit(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCSettings.OptionsConfirmCommit");

	UBioSFHandler_PCSettings_OptionsConfirmCommit_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Reticule.Reset
// (Final, Native, Public)

void UBioSFHandler_Reticule::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Reticule.Reset");

	UBioSFHandler_Reticule_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Reticule.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_Reticule::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Reticule.OnPanelAdded");

	UBioSFHandler_Reticule_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SharedIGG.BackToMainMenu
// (Defined, Public)

void UBioSFHandler_SharedIGG::BackToMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SharedIGG.BackToMainMenu");

	UBioSFHandler_SharedIGG_BackToMainMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SharedIGG.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_SharedIGG::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SharedIGG.HandleEvent");

	UBioSFHandler_SharedIGG_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdatePurchaseErrorMsg
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// class UBioSFHandler_MessageBox* oMsgBox                        (Parm)

void UBioSFHandler_Shop::UpdatePurchaseErrorMsg(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdatePurchaseErrorMsg");

	UBioSFHandler_Shop_UpdatePurchaseErrorMsg_Params params;
	params.fDeltaT = fDeltaT;
	params.oMsgBox = oMsgBox;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.DisplayPurchaseErrorMsg
// (Defined, Public, HasDefaults)

void UBioSFHandler_Shop::DisplayPurchaseErrorMsg()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.DisplayPurchaseErrorMsg");

	UBioSFHandler_Shop_DisplayPurchaseErrorMsg_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_Shop::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.OnPanelAdded");

	UBioSFHandler_Shop_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.ReclaimOrCheckItemXMods
// (Final, Defined, Private)
// Parameters:
// bool                           bCheckOnly                     (Parm)
// class UBioItem*                oItem                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Shop::ReclaimOrCheckItemXMods(bool bCheckOnly, class UBioItem* oItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.ReclaimOrCheckItemXMods");

	UBioSFHandler_Shop_ReclaimOrCheckItemXMods_Params params;
	params.bCheckOnly = bCheckOnly;
	params.oItem = oItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Shop.GetCurrentItemCategory
// (Final, Defined, Private, HasOutParms)
// Parameters:
// int                            intIsXMod                      (Parm, OutParm)
// int                            intIsWeapon                    (Parm, OutParm)
// int                            intIsPlotItem                  (Parm, OutParm)
// TEnumAsByte<EBioEquipmentSlot> equipmentSlot                  (Parm, OutParm)
// TEnumAsByte<EBioItemWeaponRangedType> weaponType                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Shop::GetCurrentItemCategory(int* intIsXMod, int* intIsWeapon, int* intIsPlotItem, TEnumAsByte<EBioEquipmentSlot>* equipmentSlot, TEnumAsByte<EBioItemWeaponRangedType>* weaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.GetCurrentItemCategory");

	UBioSFHandler_Shop_GetCurrentItemCategory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (intIsXMod != nullptr)
		*intIsXMod = params.intIsXMod;
	if (intIsWeapon != nullptr)
		*intIsWeapon = params.intIsWeapon;
	if (intIsPlotItem != nullptr)
		*intIsPlotItem = params.intIsPlotItem;
	if (equipmentSlot != nullptr)
		*equipmentSlot = params.equipmentSlot;
	if (weaponType != nullptr)
		*weaponType = params.weaponType;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Shop.CalculatePurchasePriceFromBasePrice
// (Final, Defined, Private)
// Parameters:
// float                          basePrice                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_Shop::CalculatePurchasePriceFromBasePrice(float basePrice)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.CalculatePurchasePriceFromBasePrice");

	UBioSFHandler_Shop_CalculatePurchasePriceFromBasePrice_Params params;
	params.basePrice = basePrice;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Shop.CalculateSellPriceFromBasePrice
// (Final, Defined, Private)
// Parameters:
// float                          basePrice                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_Shop::CalculateSellPriceFromBasePrice(float basePrice)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.CalculateSellPriceFromBasePrice");

	UBioSFHandler_Shop_CalculateSellPriceFromBasePrice_Params params;
	params.basePrice = basePrice;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdateCompareItemAtIndex
// (Defined, Public, HasDefaults)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 squadMemberName                (Parm, NeedCtorLink)
// class UBioItem*                Item                           (Parm)
// int                            nIsXMod                        (Parm)

void UBioSFHandler_Shop::UpdateCompareItemAtIndex(int Index, const struct FString& squadMemberName, class UBioItem* Item, int nIsXMod)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdateCompareItemAtIndex");

	UBioSFHandler_Shop_UpdateCompareItemAtIndex_Params params;
	params.Index = Index;
	params.squadMemberName = squadMemberName;
	params.Item = Item;
	params.nIsXMod = nIsXMod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdateCompareItems
// (Defined, Public, HasDefaults)

void UBioSFHandler_Shop::UpdateCompareItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdateCompareItems");

	UBioSFHandler_Shop_UpdateCompareItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdatePlotItem
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            plotItemIndex                  (Parm)
// int                            indexToSendToGUI               (Parm)

void UBioSFHandler_Shop::UpdatePlotItem(int plotItemIndex, int indexToSendToGUI)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdatePlotItem");

	UBioSFHandler_Shop_UpdatePlotItem_Params params;
	params.plotItemIndex = plotItemIndex;
	params.indexToSendToGUI = indexToSendToGUI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdateListItem
// (Defined, Public, HasDefaults)
// Parameters:
// int                            ListIndex                      (Parm)
// int                            indexToSendToGUI               (Parm)

void UBioSFHandler_Shop::UpdateListItem(int ListIndex, int indexToSendToGUI)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdateListItem");

	UBioSFHandler_Shop_UpdateListItem_Params params;
	params.ListIndex = ListIndex;
	params.indexToSendToGUI = indexToSendToGUI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdateEntireShopList
// (Defined, Public, HasDefaults)

void UBioSFHandler_Shop::UpdateEntireShopList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdateEntireShopList");

	UBioSFHandler_Shop_UpdateEntireShopList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdateCurrentIndex
// (Defined, Public)
// Parameters:
// int                            nRequestedGUIIndex             (Parm)

void UBioSFHandler_Shop::UpdateCurrentIndex(int nRequestedGUIIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdateCurrentIndex");

	UBioSFHandler_Shop_UpdateCurrentIndex_Params params;
	params.nRequestedGUIIndex = nRequestedGUIIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdateShopList
// (Defined, Public, HasDefaults)
// Parameters:
// int                            nRequestedGUIIndex             (Parm)

void UBioSFHandler_Shop::UpdateShopList(int nRequestedGUIIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdateShopList");

	UBioSFHandler_Shop_UpdateShopList_Params params;
	params.nRequestedGUIIndex = nRequestedGUIIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.UpdatePartyCash
// (Defined, Public, HasDefaults)

void UBioSFHandler_Shop::UpdatePartyCash()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.UpdatePartyCash");

	UBioSFHandler_Shop_UpdatePartyCash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.BuyCurrentItem
// (Defined, Public, HasDefaults)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_Shop::BuyCurrentItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.BuyCurrentItem");

	UBioSFHandler_Shop_BuyCurrentItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Shop.SellItemDelegate
// (Defined, Public)
// Parameters:
// bool                           bConfirmedSell                 (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Shop::SellItemDelegate(bool bConfirmedSell, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.SellItemDelegate");

	UBioSFHandler_Shop_SellItemDelegate_Params params;
	params.bConfirmedSell = bConfirmedSell;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.SellCurrentItem
// (Defined, Public, HasDefaults)

void UBioSFHandler_Shop::SellCurrentItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.SellCurrentItem");

	UBioSFHandler_Shop_SellCurrentItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.RebuildAndUpdateShopInventory
// (Defined, Public)
// Parameters:
// int                            nSetGUIIndex                   (Parm)

void UBioSFHandler_Shop::RebuildAndUpdateShopInventory(int nSetGUIIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.RebuildAndUpdateShopInventory");

	UBioSFHandler_Shop_RebuildAndUpdateShopInventory_Params params;
	params.nSetGUIIndex = nSetGUIIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.SetSlotState
// (Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    newSlot                        (Parm)

void UBioSFHandler_Shop::SetSlotState(TEnumAsByte<EGuiEquipSlots> newSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.SetSlotState");

	UBioSFHandler_Shop_SetSlotState_Params params;
	params.newSlot = newSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.SetTradeState
// (Defined, Public)
// Parameters:
// bool                           isPlayerBuying                 (Parm)

void UBioSFHandler_Shop::SetTradeState(bool isPlayerBuying)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.SetTradeState");

	UBioSFHandler_Shop_SetTradeState_Params params;
	params.isPlayerBuying = isPlayerBuying;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.ShutDown
// (Defined, Public)

void UBioSFHandler_Shop::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.ShutDown");

	UBioSFHandler_Shop_ShutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.Initialize
// (Defined, Public)

void UBioSFHandler_Shop::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.Initialize");

	UBioSFHandler_Shop_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          Unused                         (Parm)

void UBioSFHandler_Shop::Update(float Unused)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.Update");

	UBioSFHandler_Shop_Update_Params params;
	params.Unused = Unused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_Shop::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.HandleInputEvent");

	UBioSFHandler_Shop_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Shop.HandleEvent
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         Parameters                     (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Shop::HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.HandleEvent");

	UBioSFHandler_Shop_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parameters != nullptr)
		*Parameters = params.Parameters;
}


// Function BIOC_Base.BioSFHandler_Shop.PreInitialization
// (Defined, Public)
// Parameters:
// class ABioShop*                Shop                           (Parm)
// class ABioWorldInfo*           WorldInfo                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Shop::PreInitialization(class ABioShop* Shop, class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.PreInitialization");

	UBioSFHandler_Shop_PreInitialization_Params params;
	params.Shop = Shop;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Shop.GetInventoryFullMessage
// (Native, Public)
// Parameters:
// int                            i_nOverItems                   (Parm)
// int                            i_nMaxItems                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSFHandler_Shop::GetInventoryFullMessage(int i_nOverItems, int i_nMaxItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Shop.GetInventoryFullMessage");

	UBioSFHandler_Shop_GetInventoryFullMessage_Params params;
	params.i_nOverItems = i_nOverItems;
	params.i_nMaxItems = i_nMaxItems;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Tutorial.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Tutorial::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Tutorial.HandleEvent");

	UBioSFHandler_Tutorial_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_Tutorial.CompletionCallback
// (Public, Delegate)

void UBioSFHandler_Tutorial::CompletionCallback()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Tutorial.CompletionCallback");

	UBioSFHandler_Tutorial_CompletionCallback_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XBoxMessageBox.DisplayMessageBox
// (Final, Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EMessageBoxIcon>   nIcon                          (OptionalParm, Parm)
// int                            nDefaultButton                 (OptionalParm, Parm)

void UBioSFHandler_XBoxMessageBox::DisplayMessageBox(TEnumAsByte<EMessageBoxIcon> nIcon, int nDefaultButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XBoxMessageBox.DisplayMessageBox");

	UBioSFHandler_XBoxMessageBox_DisplayMessageBox_Params params;
	params.nIcon = nIcon;
	params.nDefaultButton = nDefaultButton;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.OnPanelAdded
// (Defined, Public)

void UBioSkillGame_Handler::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.OnPanelAdded");

	UBioSkillGame_Handler_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.SetupGame
// (Native, Public)
// Parameters:
// int                            i_initialSalvage               (Parm)

void UBioSkillGame_Handler::SetupGame(int i_initialSalvage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.SetupGame");

	UBioSkillGame_Handler_SetupGame_Params params;
	params.i_initialSalvage = i_initialSalvage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.UpdateSalvage
// (Native, Public)
// Parameters:
// int                            i_salvage                      (Parm)

void UBioSkillGame_Handler::UpdateSalvage(int i_salvage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.UpdateSalvage");

	UBioSkillGame_Handler_UpdateSalvage_Params params;
	params.i_salvage = i_salvage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.SetButtonVisible
// (Native, Public)
// Parameters:
// int                            i_ButtonType                   (Parm)

void UBioSkillGame_Handler::SetButtonVisible(int i_ButtonType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.SetButtonVisible");

	UBioSkillGame_Handler_SetButtonVisible_Params params;
	params.i_ButtonType = i_ButtonType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.ClearAllButtons
// (Native, Public)

void UBioSkillGame_Handler::ClearAllButtons()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.ClearAllButtons");

	UBioSkillGame_Handler_ClearAllButtons_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.HandleSkillGameDisplayButton
// (Defined, Public)
// Parameters:
// class UObject*                 Params                         (Parm)

void UBioSkillGame_Handler::HandleSkillGameDisplayButton(class UObject* Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.HandleSkillGameDisplayButton");

	UBioSkillGame_Handler_HandleSkillGameDisplayButton_Params params;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.SkillGameTriggerNextButton
// (Defined, Event, Public)
// Parameters:
// float                          fButtonDelayTime               (Parm)

void UBioSkillGame_Handler::SkillGameTriggerNextButton(float fButtonDelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.SkillGameTriggerNextButton");

	UBioSkillGame_Handler_SkillGameTriggerNextButton_Params params;
	params.fButtonDelayTime = fButtonDelayTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.HandleSkillGameButtonTimeout
// (Defined, Public)
// Parameters:
// class UObject*                 Params                         (Parm)

void UBioSkillGame_Handler::HandleSkillGameButtonTimeout(class UObject* Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.HandleSkillGameButtonTimeout");

	UBioSkillGame_Handler_HandleSkillGameButtonTimeout_Params params;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.HandleSkillGameButtonPress
// (Defined, Event, Public)
// Parameters:
// int                            nButtonPressed                 (Parm)

void UBioSkillGame_Handler::HandleSkillGameButtonPress(int nButtonPressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.HandleSkillGameButtonPress");

	UBioSkillGame_Handler_HandleSkillGameButtonPress_Params params;
	params.nButtonPressed = nButtonPressed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.EndSkillGame
// (Defined, Event, Public, HasDefaults)
// Parameters:
// bool                           bCompleted                     (Parm)
// bool                           bNoSalvage                     (OptionalParm, Parm)
// bool                           bGameCanceled                  (OptionalParm, Parm)

void UBioSkillGame_Handler::EndSkillGame(bool bCompleted, bool bNoSalvage, bool bGameCanceled)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.EndSkillGame");

	UBioSkillGame_Handler_EndSkillGame_Params params;
	params.bCompleted = bCompleted;
	params.bNoSalvage = bNoSalvage;
	params.bGameCanceled = bGameCanceled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.EndSkillGameEx
// (Native, Public)
// Parameters:
// bool                           bCompleted                     (Parm)

void UBioSkillGame_Handler::EndSkillGameEx(bool bCompleted)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.EndSkillGameEx");

	UBioSkillGame_Handler_EndSkillGameEx_Params params;
	params.bCompleted = bCompleted;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.StartSkillGameEx
// (Native, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)
// class UObject*                 oPlaceable                     (Parm)
// unsigned char                  nSkillGameType                 (Parm)
// int                            nMinSalvage                    (Parm)
// int                            nMaxSalvage                    (Parm)
// int                            nTotalButtonsToDisplay         (Parm)
// float                          fButtonTimeout                 (Parm)
// float                          fButtonDelayTime               (Parm)
// unsigned char                  eGameDifficulty                (Parm)

void UBioSkillGame_Handler::StartSkillGameEx(class ABioPawn* oUsingPawn, class UObject* oPlaceable, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.StartSkillGameEx");

	UBioSkillGame_Handler_StartSkillGameEx_Params params;
	params.oUsingPawn = oUsingPawn;
	params.oPlaceable = oPlaceable;
	params.nSkillGameType = nSkillGameType;
	params.nMinSalvage = nMinSalvage;
	params.nMaxSalvage = nMaxSalvage;
	params.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	params.fButtonTimeout = fButtonTimeout;
	params.fButtonDelayTime = fButtonDelayTime;
	params.eGameDifficulty = eGameDifficulty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.InitializeStringReferences
// (Defined, Event, Public)

void UBioSkillGame_Handler::InitializeStringReferences()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.InitializeStringReferences");

	UBioSkillGame_Handler_InitializeStringReferences_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.InitializeSkillGameData
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)
// class UObject*                 oDependent                     (Parm)
// unsigned char                  nSkillGameType                 (Parm)
// int                            nMinSalvage                    (Parm)
// int                            nMaxSalvage                    (Parm)
// int                            nTotalButtonsToDisplay         (Parm)
// float                          fButtonTimeout                 (Parm)
// float                          fButtonDelayTime               (Parm)
// unsigned char                  eGameDifficulty                (Parm)

void UBioSkillGame_Handler::InitializeSkillGameData(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.InitializeSkillGameData");

	UBioSkillGame_Handler_InitializeSkillGameData_Params params;
	params.oUsingPawn = oUsingPawn;
	params.oDependent = oDependent;
	params.nSkillGameType = nSkillGameType;
	params.nMinSalvage = nMinSalvage;
	params.nMaxSalvage = nMaxSalvage;
	params.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	params.fButtonTimeout = fButtonTimeout;
	params.fButtonDelayTime = fButtonDelayTime;
	params.eGameDifficulty = eGameDifficulty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.OnCancelCallback
// (Public, Delegate)
// Parameters:
// int                            n_SalvageUsed                  (Parm)

void UBioSkillGame_Handler::OnCancelCallback(int n_SalvageUsed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.OnCancelCallback");

	UBioSkillGame_Handler_OnCancelCallback_Params params;
	params.n_SalvageUsed = n_SalvageUsed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.OnFailureCallback
// (Public, Delegate)
// Parameters:
// int                            n_SalvageUsed                  (Parm)

void UBioSkillGame_Handler::OnFailureCallback(int n_SalvageUsed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.OnFailureCallback");

	UBioSkillGame_Handler_OnFailureCallback_Params params;
	params.n_SalvageUsed = n_SalvageUsed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_Handler.OnSuccessCallback
// (Public, Delegate)
// Parameters:
// int                            n_SalvageUsed                  (Parm)

void UBioSkillGame_Handler::OnSuccessCallback(int n_SalvageUsed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_Handler.OnSuccessCallback");

	UBioSkillGame_Handler_OnSuccessCallback_Params params;
	params.n_SalvageUsed = n_SalvageUsed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_PCHandler.HandleClockUpdate
// (Defined, Public)
// Parameters:
// class UObject*                 Params                         (Parm)

void UBioSkillGame_PCHandler::HandleClockUpdate(class UObject* Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_PCHandler.HandleClockUpdate");

	UBioSkillGame_PCHandler_HandleClockUpdate_Params params;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_PCHandler.StartTimer
// (Defined, Event, Public)

void UBioSkillGame_PCHandler::StartTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_PCHandler.StartTimer");

	UBioSkillGame_PCHandler_StartTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_PCHandler.InitializeSkillGameData
// (Defined, Event, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)
// class UObject*                 oDependent                     (Parm)
// unsigned char                  nSkillGameType                 (Parm)
// int                            nMinSalvage                    (Parm)
// int                            nMaxSalvage                    (Parm)
// int                            nTotalButtonsToDisplay         (Parm)
// float                          fButtonTimeout                 (Parm)
// float                          fButtonDelayTime               (Parm)
// unsigned char                  eGameDifficulty                (Parm)

void UBioSkillGame_PCHandler::InitializeSkillGameData(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_PCHandler.InitializeSkillGameData");

	UBioSkillGame_PCHandler_InitializeSkillGameData_Params params;
	params.oUsingPawn = oUsingPawn;
	params.oDependent = oDependent;
	params.nSkillGameType = nSkillGameType;
	params.nMinSalvage = nMinSalvage;
	params.nMaxSalvage = nMaxSalvage;
	params.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	params.fButtonTimeout = fButtonTimeout;
	params.fButtonDelayTime = fButtonDelayTime;
	params.eGameDifficulty = eGameDifficulty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_PCHandler.ResetMousePos
// (Native, Public)

void UBioSkillGame_PCHandler::ResetMousePos()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_PCHandler.ResetMousePos");

	UBioSkillGame_PCHandler_ResetMousePos_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame_PCHandler.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSkillGame_PCHandler::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame_PCHandler.Update");

	UBioSkillGame_PCHandler_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideSubMenuCharacterRecord
// (Defined, Public)

void UMassEffectGuiManager::HideSubMenuCharacterRecord()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideSubMenuCharacterRecord");

	UMassEffectGuiManager_HideSubMenuCharacterRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowSubMenuCharacterRecord
// (Defined, Public)

void UMassEffectGuiManager::ShowSubMenuCharacterRecord()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowSubMenuCharacterRecord");

	UMassEffectGuiManager_ShowSubMenuCharacterRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowSubMenuInventory
// (Defined, Public)
// Parameters:
// class ABioPawn*                oChar                          (OptionalParm, Parm)

void UMassEffectGuiManager::ShowSubMenuInventory(class ABioPawn* oChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowSubMenuInventory");

	UMassEffectGuiManager_ShowSubMenuInventory_Params params;
	params.oChar = oChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowSubMenuGui
// (Final, Defined, Event, Public)
// Parameters:
// struct FName                   GuiName                        (Parm)
// class UBioSFPanel*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFPanel* UMassEffectGuiManager::ShowSubMenuGui(const struct FName& GuiName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowSubMenuGui");

	UMassEffectGuiManager_ShowSubMenuGui_Params params;
	params.GuiName = GuiName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.HidePCOptions
// (Final, Defined, Public)
// Parameters:
// bool                           bReturnToMainMenu              (Parm)
// unsigned char                  ReturnMode                     (OptionalParm, Parm)

void UMassEffectGuiManager::HidePCOptions(bool bReturnToMainMenu, unsigned char ReturnMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HidePCOptions");

	UMassEffectGuiManager_HidePCOptions_Params params;
	params.bReturnToMainMenu = bReturnToMainMenu;
	params.ReturnMode = ReturnMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.GotoMainMenu
// (Native, Public)

void UMassEffectGuiManager::GotoMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.GotoMainMenu");

	UMassEffectGuiManager_GotoMainMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowPCOptions
// (Final, Defined, Public)
// Parameters:
// bool                           bReturnToMainMenu              (Parm)
// class UBioSFPanel*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFPanel* UMassEffectGuiManager::ShowPCOptions(bool bReturnToMainMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowPCOptions");

	UMassEffectGuiManager_ShowPCOptions_Params params;
	params.bReturnToMainMenu = bReturnToMainMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.GameSessionEnded
// (Defined, Public)

void UMassEffectGuiManager::GameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.GameSessionEnded");

	UMassEffectGuiManager_GameSessionEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.CreateMessageBox
// (Native, Public)
// Parameters:
// class UBioSFHandler_MessageBox* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFHandler_MessageBox* UMassEffectGuiManager::CreateMessageBox()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.CreateMessageBox");

	UMassEffectGuiManager_CreateMessageBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.CancelTutorial
// (Final, Native, Public)
// Parameters:
// bool                           bFadeOut                       (OptionalParm, Parm)
// struct FName                   nmTutorial                     (OptionalParm, Parm)

void UMassEffectGuiManager::CancelTutorial(bool bFadeOut, const struct FName& nmTutorial)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.CancelTutorial");

	UMassEffectGuiManager_CancelTutorial_Params params;
	params.bFadeOut = bFadeOut;
	params.nmTutorial = nmTutorial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowTutorial
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FBioTutorialParams      stParams                       (Const, Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMassEffectGuiManager::ShowTutorial(struct FBioTutorialParams* stParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowTutorial");

	UMassEffectGuiManager_ShowTutorial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (stParams != nullptr)
		*stParams = params.stParams;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.GetPauseMenuHandlerEx
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            nRet                           (Parm, OutParm)

void UMassEffectGuiManager::GetPauseMenuHandlerEx(int* nRet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.GetPauseMenuHandlerEx");

	UMassEffectGuiManager_GetPauseMenuHandlerEx_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nRet != nullptr)
		*nRet = params.nRet;
}


// Function BIOC_Base.MassEffectGuiManager.GetPauseMenuHandler
// (Final, Native, Public)
// Parameters:
// class UBioSFHandler_BrowserWheel* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFHandler_BrowserWheel* UMassEffectGuiManager::GetPauseMenuHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.GetPauseMenuHandler");

	UMassEffectGuiManager_GetPauseMenuHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.InitPauseMenuDefaultHandler
// (Final, Native, Public)
// Parameters:
// int                            nRet                           (Parm)

void UMassEffectGuiManager::InitPauseMenuDefaultHandler(int nRet)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.InitPauseMenuDefaultHandler");

	UMassEffectGuiManager_InitPauseMenuDefaultHandler_Params params;
	params.nRet = nRet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.GetBrowserHandler
// (Final, Native, Public)
// Parameters:
// class UBioSFHandler_BrowserWheel* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFHandler_BrowserWheel* UMassEffectGuiManager::GetBrowserHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.GetBrowserHandler");

	UMassEffectGuiManager_GetBrowserHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.GetDUIHandler
// (Final, Native, Public)
// Parameters:
// class UBioSFHandler_PCDesignerUI* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFHandler_PCDesignerUI* UMassEffectGuiManager::GetDUIHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.GetDUIHandler");

	UMassEffectGuiManager_GetDUIHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.SetWheelState
// (Native, Public)
// Parameters:
// TEnumAsByte<EMEBrowserWheelSubPages> nPage                          (Parm)
// TEnumAsByte<EBioBrowserStates> nState                         (Parm)

void UMassEffectGuiManager::SetWheelState(TEnumAsByte<EMEBrowserWheelSubPages> nPage, TEnumAsByte<EBioBrowserStates> nState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.SetWheelState");

	UMassEffectGuiManager_SetWheelState_Params params;
	params.nPage = nPage;
	params.nState = nState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.RemoveBlackScreen
// (Final, Defined, Public)

void UMassEffectGuiManager::RemoveBlackScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.RemoveBlackScreen");

	UMassEffectGuiManager_RemoveBlackScreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.OnPlayerDeath
// (Defined, Public)

void UMassEffectGuiManager::OnPlayerDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.OnPlayerDeath");

	UMassEffectGuiManager_OnPlayerDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideDeviceSelection
// (Defined, Event, Public)

void UMassEffectGuiManager::HideDeviceSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideDeviceSelection");

	UMassEffectGuiManager_HideDeviceSelection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowDeviceSelection
// (Final, Defined, Event, Public)
// Parameters:
// struct FName                   i_nmCompletionDelegateFunction (Parm)
// struct FName                   i_nmCancelDelegateFunction     (Parm)
// int                            i_nSize                        (Parm)
// class UObject*                 i_Target                       (Parm)
// class UBioSFHandler_DeviceSelection* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFHandler_DeviceSelection* UMassEffectGuiManager::ShowDeviceSelection(const struct FName& i_nmCompletionDelegateFunction, const struct FName& i_nmCancelDelegateFunction, int i_nSize, class UObject* i_Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowDeviceSelection");

	UMassEffectGuiManager_ShowDeviceSelection_Params params;
	params.i_nmCompletionDelegateFunction = i_nmCompletionDelegateFunction;
	params.i_nmCancelDelegateFunction = i_nmCancelDelegateFunction;
	params.i_nSize = i_nSize;
	params.i_Target = i_Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.HideSkillGame
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::HideSkillGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideSkillGame");

	UMassEffectGuiManager_HideSkillGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowSkillGame
// (Final, Defined, Event, Public)
// Parameters:
// class UBioSkillGame_Handler*   ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSkillGame_Handler* UMassEffectGuiManager::ShowSkillGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowSkillGame");

	UMassEffectGuiManager_ShowSkillGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.BlackScreenFadeFinished
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMassEffectGuiManager::BlackScreenFadeFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.BlackScreenFadeFinished");

	UMassEffectGuiManager_BlackScreenFadeFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.HideBlackScreen
// (Final, Defined, Public)
// Parameters:
// bool                           bWithFade                      (Parm)

void UMassEffectGuiManager::HideBlackScreen(bool bWithFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideBlackScreen");

	UMassEffectGuiManager_HideBlackScreen_Params params;
	params.bWithFade = bWithFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowBlackScreen
// (Final, Defined, Public)
// Parameters:
// bool                           bWithFade                      (Parm)

void UMassEffectGuiManager::ShowBlackScreen(bool bWithFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowBlackScreen");

	UMassEffectGuiManager_ShowBlackScreen_Params params;
	params.bWithFade = bWithFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideGameOverGui
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::HideGameOverGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideGameOverGui");

	UMassEffectGuiManager_HideGameOverGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowGameOverGui
// (Final, Defined, Public)

void UMassEffectGuiManager::ShowGameOverGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowGameOverGui");

	UMassEffectGuiManager_ShowGameOverGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HidePartySelect
// (Final, Defined, Public)

void UMassEffectGuiManager::HidePartySelect()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HidePartySelect");

	UMassEffectGuiManager_HidePartySelect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.PlayCredits
// (Final, Defined, Public)

void UMassEffectGuiManager::PlayCredits()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.PlayCredits");

	UMassEffectGuiManager_PlayCredits_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowPartySelect
// (Final, Defined, Public)
// Parameters:
// struct FName                   nmForcedHenchman               (OptionalParm, Parm)

void UMassEffectGuiManager::ShowPartySelect(const struct FName& nmForcedHenchman)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowPartySelect");

	UMassEffectGuiManager_ShowPartySelect_Params params;
	params.nmForcedHenchman = nmForcedHenchman;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.NestedCategory
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eLeftCat                       (Parm)
// TEnumAsByte<EGuiEquipSlots>    eRightCat                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMassEffectGuiManager::NestedCategory(TEnumAsByte<EGuiEquipSlots> eLeftCat, TEnumAsByte<EGuiEquipSlots> eRightCat)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.NestedCategory");

	UMassEffectGuiManager_NestedCategory_Params params;
	params.eLeftCat = eLeftCat;
	params.eRightCat = eRightCat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.FindCompatibleCategory
// (Final, Defined, Public)
// Parameters:
// TArray<TEnumAsByte<EGuiEquipSlots>> lstSlotsOrdered                (Parm, NeedCtorLink)
// TEnumAsByte<EGuiEquipSlots>    eCategory                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMassEffectGuiManager::FindCompatibleCategory(TArray<TEnumAsByte<EGuiEquipSlots>> lstSlotsOrdered, TEnumAsByte<EGuiEquipSlots> eCategory)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.FindCompatibleCategory");

	UMassEffectGuiManager_FindCompatibleCategory_Params params;
	params.lstSlotsOrdered = lstSlotsOrdered;
	params.eCategory = eCategory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.SetSlotOrder
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiHandlers>      eHandlerID                     (Parm)
// class UBioInventoryGuiInterface* oInvLayer                      (Parm)
// TEnumAsByte<EGuiEquipSlots>    ePreferredDefault              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMassEffectGuiManager::SetSlotOrder(TEnumAsByte<EGuiHandlers> eHandlerID, class UBioInventoryGuiInterface* oInvLayer, TEnumAsByte<EGuiEquipSlots> ePreferredDefault)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.SetSlotOrder");

	UMassEffectGuiManager_SetSlotOrder_Params params;
	params.eHandlerID = eHandlerID;
	params.oInvLayer = oInvLayer;
	params.ePreferredDefault = ePreferredDefault;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.HideSpecializationGui
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::HideSpecializationGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideSpecializationGui");

	UMassEffectGuiManager_HideSpecializationGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowSpecializationGui
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::ShowSpecializationGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowSpecializationGui");

	UMassEffectGuiManager_ShowSpecializationGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideShopGui
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::HideShopGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideShopGui");

	UMassEffectGuiManager_HideShopGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowShopGui
// (Final, Defined, Event, Public)
// Parameters:
// class ABioShop*                Shop                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMassEffectGuiManager::ShowShopGui(class ABioShop* Shop)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowShopGui");

	UMassEffectGuiManager_ShowShopGui_Params params;
	params.Shop = Shop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.HideLootGui
// (Final, Defined, Public)

void UMassEffectGuiManager::HideLootGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideLootGui");

	UMassEffectGuiManager_HideLootGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideGuiByTag
// (Final, Defined, Event, Public)
// Parameters:
// struct FName                   sTag                           (Parm)

void UMassEffectGuiManager::HideGuiByTag(const struct FName& sTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideGuiByTag");

	UMassEffectGuiManager_HideGuiByTag_Params params;
	params.sTag = sTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowLootGui
// (Final, Defined, Event, Public)
// Parameters:
// class UBioInventory*           oLootInv                       (OptionalParm, Parm)

void UMassEffectGuiManager::ShowLootGui(class UBioInventory* oLootInv)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowLootGui");

	UMassEffectGuiManager_ShowLootGui_Params params;
	params.oLootInv = oLootInv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideAchievementGui
// (Defined, Public)

void UMassEffectGuiManager::HideAchievementGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideAchievementGui");

	UMassEffectGuiManager_HideAchievementGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowAchievementGui
// (Defined, Public)

void UMassEffectGuiManager::ShowAchievementGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowAchievementGui");

	UMassEffectGuiManager_ShowAchievementGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideXModsGui
// (Defined, Public)
// Parameters:
// class ABioPlayerController*    Controller                     (Parm)

void UMassEffectGuiManager::HideXModsGui(class ABioPlayerController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideXModsGui");

	UMassEffectGuiManager_HideXModsGui_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowXModsGui
// (Defined, Public)
// Parameters:
// class ABioPlayerController*    oController                    (Parm)

void UMassEffectGuiManager::ShowXModsGui(class ABioPlayerController* oController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowXModsGui");

	UMassEffectGuiManager_ShowXModsGui_Params params;
	params.oController = oController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideBrowserWheel
// (Final, Defined, Event, Public)
// Parameters:
// class UBioSFPanel*             oCurrentPanel                  (OptionalParm, Parm)

void UMassEffectGuiManager::HideBrowserWheel(class UBioSFPanel* oCurrentPanel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideBrowserWheel");

	UMassEffectGuiManager_HideBrowserWheel_Params params;
	params.oCurrentPanel = oCurrentPanel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ReturnToBrowserWheel
// (Final, Defined, Event, Public)
// Parameters:
// class UBioSFPanel*             oCurrentPanel                  (OptionalParm, Parm)

void UMassEffectGuiManager::ReturnToBrowserWheel(class UBioSFPanel* oCurrentPanel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ReturnToBrowserWheel");

	UMassEffectGuiManager_ReturnToBrowserWheel_Params params;
	params.oCurrentPanel = oCurrentPanel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowBrowserWheel
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::ShowBrowserWheel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowBrowserWheel");

	UMassEffectGuiManager_ShowBrowserWheel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.CancelLeaderActive
// (Final, Native, Public)

void UMassEffectGuiManager::CancelLeaderActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.CancelLeaderActive");

	UMassEffectGuiManager_CancelLeaderActive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.RedisplayHudElements
// (Defined, Public)

void UMassEffectGuiManager::RedisplayHudElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.RedisplayHudElements");

	UMassEffectGuiManager_RedisplayHudElements_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HidePauseMenu
// (Final, Defined, Event, Public)
// Parameters:
// class UBioSFPanel*             oCurrentPanel                  (OptionalParm, Parm)

void UMassEffectGuiManager::HidePauseMenu(class UBioSFPanel* oCurrentPanel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HidePauseMenu");

	UMassEffectGuiManager_HidePauseMenu_Params params;
	params.oCurrentPanel = oCurrentPanel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ReturnToPauseMenu
// (Final, Defined, Public)
// Parameters:
// class UBioSFPanel*             oCurrentPanel                  (OptionalParm, Parm)

void UMassEffectGuiManager::ReturnToPauseMenu(class UBioSFPanel* oCurrentPanel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ReturnToPauseMenu");

	UMassEffectGuiManager_ReturnToPauseMenu_Params params;
	params.oCurrentPanel = oCurrentPanel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowPauseMenu
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::ShowPauseMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowPauseMenu");

	UMassEffectGuiManager_ShowPauseMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.SetPauseGame
// (Defined, Event, Public)
// Parameters:
// bool                           bPause                         (Parm)

void UMassEffectGuiManager::SetPauseGame(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.SetPauseGame");

	UMassEffectGuiManager_SetPauseGame_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.HideHUD
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::HideHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideHUD");

	UMassEffectGuiManager_HideHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowHUD
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowHUD");

	UMassEffectGuiManager_ShowHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ReleaseHudCache
// (Final, Defined, Public)

void UMassEffectGuiManager::ReleaseHudCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ReleaseHudCache");

	UMassEffectGuiManager_ReleaseHudCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.RecreateHudPanel
// (Final, Defined, Public)

void UMassEffectGuiManager::RecreateHudPanel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.RecreateHudPanel");

	UMassEffectGuiManager_RecreateHudPanel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.IsInConversation
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMassEffectGuiManager::IsInConversation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.IsInConversation");

	UMassEffectGuiManager_IsInConversation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.HideConversationGui
// (Final, Defined, Event, Public)

void UMassEffectGuiManager::HideConversationGui()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.HideConversationGui");

	UMassEffectGuiManager_HideConversationGui_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowConversationGui
// (Final, Defined, Event, Public)
// Parameters:
// bool                           IsAmbient                      (Parm)

void UMassEffectGuiManager::ShowConversationGui(bool IsAmbient)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowConversationGui");

	UMassEffectGuiManager_ShowConversationGui_Params params;
	params.IsAmbient = IsAmbient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.ShowMainMenu
// (Final, Defined, Event, Public)
// Parameters:
// class UBioSFHandler_MainMenu*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioSFHandler_MainMenu* UMassEffectGuiManager::ShowMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.ShowMainMenu");

	UMassEffectGuiManager_ShowMainMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.MassEffectGuiManager.SetupBackground
// (Defined, Public)

void UMassEffectGuiManager::SetupBackground()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.SetupBackground");

	UMassEffectGuiManager_SetupBackground_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.MassEffectGuiManager.Update
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UMassEffectGuiManager::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.MassEffectGuiManager.Update");

	UMassEffectGuiManager_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStickyGrenadeInterface.TracePrecise
// (Native, Static, Public, HasOutParms)
// Parameters:
// class AActor*                  pOwner                         (Parm)
// class AProjectile*             Projectile                     (Parm)
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioStickyGrenadeInterface::STATIC_TracePrecise(class AActor* pOwner, class AProjectile* Projectile, struct FVector* HitLocation, struct FVector* HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterface.TracePrecise");

	UBioStickyGrenadeInterface_TracePrecise_Params params;
	params.pOwner = pOwner;
	params.Projectile = Projectile;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStickyGrenadeInterface.ComputePosition
// (Defined, Public)
// Parameters:
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioStickyGrenadeInterface::ComputePosition(class ABioGrenadeProjectileFrisbee* Projectile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterface.ComputePosition");

	UBioStickyGrenadeInterface_ComputePosition_Params params;
	params.Projectile = Projectile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStickyGrenadeInterface.StaticDetach
// (Defined, Static, Public)
// Parameters:
// class UBioActorBehavior*       oOwnerBehavior                 (Parm)
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)

void UBioStickyGrenadeInterface::STATIC_StaticDetach(class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterface.StaticDetach");

	UBioStickyGrenadeInterface_StaticDetach_Params params;
	params.oOwnerBehavior = oOwnerBehavior;
	params.Projectile = Projectile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStickyGrenadeInterface.Detach
// (Defined, Public)
// Parameters:
// class UBioActorBehavior*       oOwnerBehavior                 (Parm)
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)

void UBioStickyGrenadeInterface::Detach(class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterface.Detach");

	UBioStickyGrenadeInterface_Detach_Params params;
	params.oOwnerBehavior = oOwnerBehavior;
	params.Projectile = Projectile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStickyGrenadeInterface.StaticAttach
// (Defined, Static, Public)
// Parameters:
// class AActor*                  pOwner                         (Parm)
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioStickyGrenadeInterface::STATIC_StaticAttach(class AActor* pOwner, class ABioGrenadeProjectileFrisbee* Projectile, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterface.StaticAttach");

	UBioStickyGrenadeInterface_StaticAttach_Params params;
	params.pOwner = pOwner;
	params.Projectile = Projectile;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStickyGrenadeInterface.Attach
// (Defined, Public)
// Parameters:
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioStickyGrenadeInterface::Attach(class ABioGrenadeProjectileFrisbee* Projectile, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterface.Attach");

	UBioStickyGrenadeInterface_Attach_Params params;
	params.Projectile = Projectile;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStickyGrenadeInterface.SetRotationByUpVector
// (Native, Static, Protected, HasOutParms)
// Parameters:
// class AActor*                  pActor                         (Parm)
// struct FVector                 vUp                            (Const, Parm, OutParm)

void UBioStickyGrenadeInterface::STATIC_SetRotationByUpVector(class AActor* pActor, struct FVector* vUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterface.SetRotationByUpVector");

	UBioStickyGrenadeInterface_SetRotationByUpVector_Params params;
	params.pActor = pActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vUp != nullptr)
		*vUp = params.vUp;
}


// Function BIOC_Base.BioDeathVFXCore.IsValidVFXSpec
// (Final, Defined, Public)
// Parameters:
// struct FBioDeathVFXSpec        deathVFXSpec                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXCore::IsValidVFXSpec(const struct FBioDeathVFXSpec& deathVFXSpec)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXCore.IsValidVFXSpec");

	UBioDeathVFXCore_IsValidVFXSpec_Params params;
	params.deathVFXSpec = deathVFXSpec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControl.AppendConditionalVFX
// (Final, Defined, Protected)
// Parameters:
// class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper      (Parm)
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// struct FName                   nmConditionalVFX               (Const, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXControl::AppendConditionalVFX(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState, const struct FName& nmConditionalVFX)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControl.AppendConditionalVFX");

	UBioDeathVFXControl_AppendConditionalVFX_Params params;
	params.pDeathVFXSpecArrayWrapper = pDeathVFXSpecArrayWrapper;
	params.pGameState = pGameState;
	params.nmConditionalVFX = nmConditionalVFX;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControl.AppendDamageVFX
// (Final, Defined, Protected)
// Parameters:
// class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper      (Parm)
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXControl::AppendDamageVFX(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControl.AppendDamageVFX");

	UBioDeathVFXControl_AppendDamageVFX_Params params;
	params.pDeathVFXSpecArrayWrapper = pDeathVFXSpecArrayWrapper;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControl.AppendAppearanceVFX
// (Final, Defined, Protected)
// Parameters:
// class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper      (Parm)
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXControl::AppendAppearanceVFX(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControl.AppendAppearanceVFX");

	UBioDeathVFXControl_AppendAppearanceVFX_Params params;
	params.pDeathVFXSpecArrayWrapper = pDeathVFXSpecArrayWrapper;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControl.IsValidDamageVFX
// (Final, Defined, Protected)
// Parameters:
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXControl::IsValidDamageVFX(class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControl.IsValidDamageVFX");

	UBioDeathVFXControl_IsValidDamageVFX_Params params;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControl.IsValidAppearanceVFX
// (Final, Defined, Protected)
// Parameters:
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXControl::IsValidAppearanceVFX(class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControl.IsValidAppearanceVFX");

	UBioDeathVFXControl_IsValidAppearanceVFX_Params params;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControl.Evaluate
// (Event, Public)
// Parameters:
// class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper      (Parm)
// class UBioDeathVFXGameState*   pGameState                     (Parm)

void UBioDeathVFXControl::Evaluate(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControl.Evaluate");

	UBioDeathVFXControl_Evaluate_Params params;
	params.pDeathVFXSpecArrayWrapper = pDeathVFXSpecArrayWrapper;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLevelUpSystem.AutoLevelUp
// (Final, Native, Static, Public)
// Parameters:
// class UBioTalentContainer*     talents                        (Parm)
// int                            templateID                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioLevelUpSystem::STATIC_AutoLevelUp(class UBioTalentContainer* talents, int templateID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelUpSystem.AutoLevelUp");

	UBioLevelUpSystem_AutoLevelUp_Params params;
	params.talents = talents;
	params.templateID = templateID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLevelUpSystem.ImmediateAutoLevelUp
// (Final, Native, Static, Public)
// Parameters:
// class UBioPawnBehavior*        Target                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioLevelUpSystem::STATIC_ImmediateAutoLevelUp(class UBioPawnBehavior* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelUpSystem.ImmediateAutoLevelUp");

	UBioLevelUpSystem_ImmediateAutoLevelUp_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLevelUpSystem.LoadAutoLevelUpInformation
// (Final, Native, Static, Public, HasOutParms)
// Parameters:
// int                            templateID                     (Parm)
// int                            classID                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioLevelUpSystem::STATIC_LoadAutoLevelUpInformation(int templateID, int* classID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelUpSystem.LoadAutoLevelUpInformation");

	UBioLevelUpSystem_LoadAutoLevelUpInformation_Params params;
	params.templateID = templateID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (classID != nullptr)
		*classID = params.classID;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLevelUpSystem.ExperienceNeededForLevel
// (Native, Static, Public, HasOutParms)
// Parameters:
// int                            Level                          (Parm)
// int                            experience                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioLevelUpSystem::STATIC_ExperienceNeededForLevel(int Level, int* experience)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelUpSystem.ExperienceNeededForLevel");

	UBioLevelUpSystem_ExperienceNeededForLevel_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (experience != nullptr)
		*experience = params.experience;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLevelUpSystem.LevelUpPawn
// (Native, Static, Public)
// Parameters:
// class ABioPawn*                Pawn                           (Parm)
// int                            newLevel                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioLevelUpSystem::STATIC_LevelUpPawn(class ABioPawn* Pawn, int newLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelUpSystem.LevelUpPawn");

	UBioLevelUpSystem_LevelUpPawn_Params params;
	params.Pawn = Pawn;
	params.newLevel = newLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLevelUpSystem.AttemptLevelUp
// (Native, Static, Public)
// Parameters:
// class ABioPlayerSquad*         playerSquad                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioLevelUpSystem::STATIC_AttemptLevelUp(class ABioPlayerSquad* playerSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelUpSystem.AttemptLevelUp");

	UBioLevelUpSystem_AttemptLevelUp_Params params;
	params.playerSquad = playerSquad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.GetSaveObjectClass
// (Defined, Static, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ABioShop::STATIC_GetSaveObjectClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.GetSaveObjectClass");

	ABioShop_GetSaveObjectClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.ComputeSupplyOfResource
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> resourceType                   (Parm)
// TEnumAsByte<EGuiEquipSlots>    slotType                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioShop::ComputeSupplyOfResource(TEnumAsByte<EInventoryResourceTypes> resourceType, TEnumAsByte<EGuiEquipSlots> slotType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.ComputeSupplyOfResource");

	ABioShop_ComputeSupplyOfResource_Params params;
	params.resourceType = resourceType;
	params.slotType = slotType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.RemoveResource
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> Type                           (Parm)
// int                            positiveAmount                 (Parm)

void ABioShop::RemoveResource(TEnumAsByte<EInventoryResourceTypes> Type, int positiveAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.RemoveResource");

	ABioShop_RemoveResource_Params params;
	params.Type = Type;
	params.positiveAmount = positiveAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShop.AddResource
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EInventoryResourceTypes> Type                           (Parm)
// int                            positiveAmount                 (Parm)

void ABioShop::AddResource(TEnumAsByte<EInventoryResourceTypes> Type, int positiveAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.AddResource");

	ABioShop_AddResource_Params params;
	params.Type = Type;
	params.positiveAmount = positiveAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShop.AddBuybackItem
// (Final, Native, Public)
// Parameters:
// class UBioItem*                Item                           (Parm)

void ABioShop::AddBuybackItem(class UBioItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.AddBuybackItem");

	ABioShop_AddBuybackItem_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShop.ConvertMasterIndexToDoubleIndex
// (Final, Native, Public, HasOutParms)
// Parameters:
// int                            masterIndex                    (Parm)
// TEnumAsByte<EBioShopInventory> inventoryIndex                 (Parm, OutParm)
// int                            ElementIndex                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioShop::ConvertMasterIndexToDoubleIndex(int masterIndex, TEnumAsByte<EBioShopInventory>* inventoryIndex, int* ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.ConvertMasterIndexToDoubleIndex");

	ABioShop_ConvertMasterIndexToDoubleIndex_Params params;
	params.masterIndex = masterIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (inventoryIndex != nullptr)
		*inventoryIndex = params.inventoryIndex;
	if (ElementIndex != nullptr)
		*ElementIndex = params.ElementIndex;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.RemovePlotItemAtMasterIndex
// (Final, Native, Public)
// Parameters:
// int                            masterPlotItemIndex            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioShop::RemovePlotItemAtMasterIndex(int masterPlotItemIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.RemovePlotItemAtMasterIndex");

	ABioShop_RemovePlotItemAtMasterIndex_Params params;
	params.masterPlotItemIndex = masterPlotItemIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.GetItemPriceAtMasterIndex
// (Final, Native, Public)
// Parameters:
// int                            masterIndex                    (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioShop::GetItemPriceAtMasterIndex(int masterIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.GetItemPriceAtMasterIndex");

	ABioShop_GetItemPriceAtMasterIndex_Params params;
	params.masterIndex = masterIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.RemoveAtMasterIndex
// (Final, Native, Public)
// Parameters:
// int                            masterIndex                    (Parm)
// class UBioItem*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioItem* ABioShop::RemoveAtMasterIndex(int masterIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.RemoveAtMasterIndex");

	ABioShop_RemoveAtMasterIndex_Params params;
	params.masterIndex = masterIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.BuildFilteredInventory
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UBioInventory*           filteredInventory              (Parm, OutParm)
// TEnumAsByte<EGuiEquipSlots>    Filter                         (Parm)

void ABioShop::BuildFilteredInventory(TEnumAsByte<EGuiEquipSlots> Filter, class UBioInventory** filteredInventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.BuildFilteredInventory");

	ABioShop_BuildFilteredInventory_Params params;
	params.Filter = Filter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (filteredInventory != nullptr)
		*filteredInventory = params.filteredInventory;
}


// Function BIOC_Base.BioShop.ReadyShopForOpening
// (Final, Native, Public)
// Parameters:
// int                            playerLevel                    (Parm)
// float                          priceAdjustment                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioShop::ReadyShopForOpening(int playerLevel, float priceAdjustment)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.ReadyShopForOpening");

	ABioShop_ReadyShopForOpening_Params params;
	params.playerLevel = playerLevel;
	params.priceAdjustment = priceAdjustment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioShop.GetPriceAdjustmentFactor
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioShop::GetPriceAdjustmentFactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShop.GetPriceAdjustmentFactor");

	ABioShop_GetPriceAdjustmentFactor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioProbeCombat.Reset
// (Native, Public)

void UBioProbeCombat::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProbeCombat.Reset");

	UBioProbeCombat_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioProbeCombat.Stop
// (Native, Public)
// Parameters:
// TEnumAsByte<EBioProbeCombatResult> CombatResult                   (Parm)

void UBioProbeCombat::Stop(TEnumAsByte<EBioProbeCombatResult> CombatResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProbeCombat.Stop");

	UBioProbeCombat_Stop_Params params;
	params.CombatResult = CombatResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioProbeCombat.Start
// (Native, Public)

void UBioProbeCombat::Start()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProbeCombat.Start");

	UBioProbeCombat_Start_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioProbeCombat.IsRecording
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioProbeCombat::IsRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProbeCombat.IsRecording");

	UBioProbeCombat_IsRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioProbeCombat.Initialize
// (Native, Public)
// Parameters:
// struct FName                   SquadName                      (Parm)
// struct FName                   SquadTag                       (Parm)

void UBioProbeCombat::Initialize(const struct FName& SquadName, const struct FName& SquadTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioProbeCombat.Initialize");

	UBioProbeCombat_Initialize_Params params;
	params.SquadName = SquadName;
	params.SquadTag = SquadTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableSaveObject.LoadPositionAndOrientation
// (Native, Public)
// Parameters:
// class AActor*                  O                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableSaveObject::LoadPositionAndOrientation(class AActor* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableSaveObject.LoadPositionAndOrientation");

	UBioArtPlaceableSaveObject_LoadPositionAndOrientation_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableSaveObject.SavePositionAndOrientation
// (Native, Public)
// Parameters:
// class AActor*                  O                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioArtPlaceableSaveObject::SavePositionAndOrientation(class AActor* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableSaveObject.SavePositionAndOrientation");

	UBioArtPlaceableSaveObject_SavePositionAndOrientation_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioLevelSaveObject.SaveDestroyedObjects
// (Native, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioLevelSaveObject::SaveDestroyedObjects(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelSaveObject.SaveDestroyedObjects");

	UBioLevelSaveObject_SaveDestroyedObjects_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLevelSaveObject.LoadLootBagArray
// (Native, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioLevelSaveObject::LoadLootBagArray(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelSaveObject.LoadLootBagArray");

	UBioLevelSaveObject_LoadLootBagArray_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLevelSaveObject.SaveLootBagArray
// (Native, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioLevelSaveObject::SaveLootBagArray(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelSaveObject.SaveLootBagArray");

	UBioLevelSaveObject_SaveLootBagArray_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLevelSaveObject.DestroyObject
// (Native, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioLevelSaveObject::DestroyObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelSaveObject.DestroyObject");

	UBioLevelSaveObject_DestroyObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLevelSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioLevelSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelSaveObject.LoadObject");

	UBioLevelSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioLevelSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioLevelSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioLevelSaveObject.SaveObject");

	UBioLevelSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.LoadBuybackItems
// (Defined, Event, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSaveGame::LoadBuybackItems(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadBuybackItems");

	UBioSaveGame_LoadBuybackItems_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SaveBuybackItems
// (Defined, Event, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSaveGame::SaveBuybackItems(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveBuybackItems");

	UBioSaveGame_SaveBuybackItems_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.LoadAppearance
// (Defined, Public)
// Parameters:
// class UBioInterface_Appearance* playerAppearance               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::LoadAppearance(class UBioInterface_Appearance* playerAppearance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadAppearance");

	UBioSaveGame_LoadAppearance_Params params;
	params.playerAppearance = playerAppearance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.SaveAppearance
// (Defined, Event, Public)
// Parameters:
// class UBioInterface_Appearance* Appearance                     (Parm)

void UBioSaveGame::SaveAppearance(class UBioInterface_Appearance* Appearance)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveAppearance");

	UBioSaveGame_SaveAppearance_Params params;
	params.Appearance = Appearance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SavePlayerParty
// (Defined, Event, Public)
// Parameters:
// class ABioPlayerController*    PlayerController               (Parm)
// class UPackage*                savePackage                    (OptionalParm, Parm)
// bool                           bPlayerOnly                    (OptionalParm, Parm)

void UBioSaveGame::SavePlayerParty(class ABioPlayerController* PlayerController, class UPackage* savePackage, bool bPlayerOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SavePlayerParty");

	UBioSaveGame_SavePlayerParty_Params params;
	params.PlayerController = PlayerController;
	params.savePackage = savePackage;
	params.bPlayerOnly = bPlayerOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SaveEquipmentIntoInventory
// (Defined, Public)
// Parameters:
// class UBioPawnBehaviorSaveObject* oHenchie                       (Parm)
// class UBioInventorySaveObject* oInventorySave                 (Parm)

void UBioSaveGame::SaveEquipmentIntoInventory(class UBioPawnBehaviorSaveObject* oHenchie, class UBioInventorySaveObject* oInventorySave)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveEquipmentIntoInventory");

	UBioSaveGame_SaveEquipmentIntoInventory_Params params;
	params.oHenchie = oHenchie;
	params.oInventorySave = oInventorySave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.PostLoad
// (Defined, Event, Public)
// Parameters:
// class ABioPlayerController*    PlayerController               (Parm)

void UBioSaveGame::PostLoad(class ABioPlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.PostLoad");

	UBioSaveGame_PostLoad_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.LoadVehicle
// (Defined, Public)
// Parameters:
// class ABioPlayerController*    PlayerController               (Parm)

void UBioSaveGame::LoadVehicle(class ABioPlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadVehicle");

	UBioSaveGame_LoadVehicle_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SaveVehicle
// (Defined, Event, Public)
// Parameters:
// class UBioVehicleBehaviorBase* Vehicle                        (Parm)
// bool                           isDriving                      (Parm)

void UBioSaveGame::SaveVehicle(class UBioVehicleBehaviorBase* Vehicle, bool isDriving)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveVehicle");

	UBioSaveGame_SaveVehicle_Params params;
	params.Vehicle = Vehicle;
	params.isDriving = isDriving;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SaveHenchman
// (Defined, Public)
// Parameters:
// struct FName                   pawnTag                        (Parm)
// class UBioPawnBehavior*        henchBehavior                  (Parm)
// class UPackage*                savePackage                    (OptionalParm, Parm)

void UBioSaveGame::SaveHenchman(const struct FName& pawnTag, class UBioPawnBehavior* henchBehavior, class UPackage* savePackage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveHenchman");

	UBioSaveGame_SaveHenchman_Params params;
	params.pawnTag = pawnTag;
	params.henchBehavior = henchBehavior;
	params.savePackage = savePackage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.LoadHenchman
// (Defined, Public)
// Parameters:
// struct FName                   pawnTag                        (Parm)
// class UBioPawnBehavior*        henchBehavior                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::LoadHenchman(const struct FName& pawnTag, class UBioPawnBehavior* henchBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadHenchman");

	UBioSaveGame_LoadHenchman_Params params;
	params.pawnTag = pawnTag;
	params.henchBehavior = henchBehavior;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.EstablishGlobalPlotVariablesForReplayCharacter
// (Defined, Event, Public)

void UBioSaveGame::EstablishGlobalPlotVariablesForReplayCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.EstablishGlobalPlotVariablesForReplayCharacter");

	UBioSaveGame_EstablishGlobalPlotVariablesForReplayCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.LoadPlayer
// (Defined, Public)
// Parameters:
// class UBioPawnBehavior*        playerBehavior                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::LoadPlayer(class UBioPawnBehavior* playerBehavior)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadPlayer");

	UBioSaveGame_LoadPlayer_Params params;
	params.playerBehavior = playerBehavior;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.GetPlayerSpawn
// (Defined, Public, HasOutParms)
// Parameters:
// struct FVector                 SpawnLocation                  (Parm, OutParm)
// struct FRotator                SpawnRotation                  (Parm, OutParm)

void UBioSaveGame::GetPlayerSpawn(struct FVector* SpawnLocation, struct FRotator* SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetPlayerSpawn");

	UBioSaveGame_GetPlayerSpawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpawnLocation != nullptr)
		*SpawnLocation = params.SpawnLocation;
	if (SpawnRotation != nullptr)
		*SpawnRotation = params.SpawnRotation;
}


// Function BIOC_Base.BioSaveGame.LoadObjectPosition
// (Final, Defined, Private)
// Parameters:
// class UBioBaseSaveObject*      Save                           (Parm)
// class AActor*                  obj                            (Parm)

void UBioSaveGame::LoadObjectPosition(class UBioBaseSaveObject* Save, class AActor* obj)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadObjectPosition");

	UBioSaveGame_LoadObjectPosition_Params params;
	params.Save = Save;
	params.obj = obj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.GetPlayerSaveObject
// (Defined, Public)
// Parameters:
// class UBioPawnBehaviorSaveObject* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioPawnBehaviorSaveObject* UBioSaveGame::GetPlayerSaveObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetPlayerSaveObject");

	UBioSaveGame_GetPlayerSaveObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.SetHenchmanMappedPower
// (Defined, Public, HasDefaults)
// Parameters:
// struct FName                   pawnTag                        (Parm)
// struct FName                   nmMappedPower                  (Parm)

void UBioSaveGame::SetHenchmanMappedPower(const struct FName& pawnTag, const struct FName& nmMappedPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SetHenchmanMappedPower");

	UBioSaveGame_SetHenchmanMappedPower_Params params;
	params.pawnTag = pawnTag;
	params.nmMappedPower = nmMappedPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.GetHenchmanMappedPower
// (Defined, Public)
// Parameters:
// struct FName                   pawnTag                        (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioSaveGame::GetHenchmanMappedPower(const struct FName& pawnTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetHenchmanMappedPower");

	UBioSaveGame_GetHenchmanMappedPower_Params params;
	params.pawnTag = pawnTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.SetHenchmanSaveObject
// (Defined, Public, HasDefaults)
// Parameters:
// struct FName                   pawnTag                        (Parm)
// class UBioBaseSaveObject*      Save                           (Parm)

void UBioSaveGame::SetHenchmanSaveObject(const struct FName& pawnTag, class UBioBaseSaveObject* Save)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SetHenchmanSaveObject");

	UBioSaveGame_SetHenchmanSaveObject_Params params;
	params.pawnTag = pawnTag;
	params.Save = Save;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.GetHenchmanSaveObject
// (Defined, Public)
// Parameters:
// struct FName                   pawnTag                        (Parm)
// class UBioBaseSaveObject*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioBaseSaveObject* UBioSaveGame::GetHenchmanSaveObject(const struct FName& pawnTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetHenchmanSaveObject");

	UBioSaveGame_GetHenchmanSaveObject_Params params;
	params.pawnTag = pawnTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.ApplyGameOptions
// (Native, Public, HasOutParms)
// Parameters:
// struct FGameOptions            io_GameOptions                 (Parm, OutParm)

void UBioSaveGame::ApplyGameOptions(struct FGameOptions* io_GameOptions)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.ApplyGameOptions");

	UBioSaveGame_ApplyGameOptions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (io_GameOptions != nullptr)
		*io_GameOptions = params.io_GameOptions;
}


// Function BIOC_Base.BioSaveGame.SetGameOptions
// (Native, Public, HasOutParms)
// Parameters:
// struct FGameOptions            i_GameOptions                  (Parm, OutParm)

void UBioSaveGame::SetGameOptions(struct FGameOptions* i_GameOptions)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SetGameOptions");

	UBioSaveGame_SetGameOptions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (i_GameOptions != nullptr)
		*i_GameOptions = params.i_GameOptions;
}


// Function BIOC_Base.BioSaveGame.NativeReset
// (Native, Protected)

void UBioSaveGame::NativeReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.NativeReset");

	UBioSaveGame_NativeReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.ResetToDefaults
// (Defined, Public)

void UBioSaveGame::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.ResetToDefaults");

	UBioSaveGame_ResetToDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.GetTimePlayed
// (Native, Public, HasOutParms)
// Parameters:
// int                            o_Sec                          (Parm, OutParm)
// int                            o_Min                          (Parm, OutParm)
// int                            o_Hours                        (Parm, OutParm)

void UBioSaveGame::GetTimePlayed(int* o_Sec, int* o_Min, int* o_Hours)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetTimePlayed");

	UBioSaveGame_GetTimePlayed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (o_Sec != nullptr)
		*o_Sec = params.o_Sec;
	if (o_Min != nullptr)
		*o_Min = params.o_Min;
	if (o_Hours != nullptr)
		*o_Hours = params.o_Hours;
}


// Function BIOC_Base.BioSaveGame.GetStorageDevice
// (Native, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSaveGame::GetStorageDevice(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetStorageDevice");

	UBioSaveGame_GetStorageDevice_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SaveCharacter
// (Native, Public)
// Parameters:
// int                            i_nDeviceID                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::SaveCharacter(int i_nDeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveCharacter");

	UBioSaveGame_SaveCharacter_Params params;
	params.i_nDeviceID = i_nDeviceID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.ClearWorldSaveObject
// (Native, Public)
// Parameters:
// struct FString                 sMapName                       (Parm, NeedCtorLink)
// struct FString                 sChunkName                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::ClearWorldSaveObject(const struct FString& sMapName, const struct FString& sChunkName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.ClearWorldSaveObject");

	UBioSaveGame_ClearWorldSaveObject_Params params;
	params.sMapName = sMapName;
	params.sChunkName = sChunkName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.EmptySavedMaps
// (Native, Protected)

void UBioSaveGame::EmptySavedMaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.EmptySavedMaps");

	UBioSaveGame_EmptySavedMaps_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.ShowSavingMessageBox
// (Native, Public)

void UBioSaveGame::ShowSavingMessageBox()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.ShowSavingMessageBox");

	UBioSaveGame_ShowSavingMessageBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.IsAutoSaveComplete
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::IsAutoSaveComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.IsAutoSaveComplete");

	UBioSaveGame_IsAutoSaveComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.AutoSaveDelegate
// (Native, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// class UBioSFHandler_MessageBox* oMsgBox                        (Parm)

void UBioSaveGame::AutoSaveDelegate(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.AutoSaveDelegate");

	UBioSaveGame_AutoSaveDelegate_Params params;
	params.fDeltaT = fDeltaT;
	params.oMsgBox = oMsgBox;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.TryAutoSaving
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::TryAutoSaving()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.TryAutoSaving");

	UBioSaveGame_TryAutoSaving_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.AutoSave
// (Native, Public)
// Parameters:
// bool                           bForceSave                     (OptionalParm, Parm)
// bool                           bShowSavingGui                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::AutoSave(bool bForceSave, bool bShowSavingGui)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.AutoSave");

	UBioSaveGame_AutoSave_Params params;
	params.bForceSave = bForceSave;
	params.bShowSavingGui = bShowSavingGui;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.GetPlayerPackage
// (Native, Public)
// Parameters:
// class UPackage*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UPackage* UBioSaveGame::GetPlayerPackage()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetPlayerPackage");

	UBioSaveGame_GetPlayerPackage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.GetCharacterInfo
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FSaveGameRecord> Records                        (Parm, OutParm, NeedCtorLink)
// int                            o_ClassId                      (Parm, OutParm)
// int                            o_characterLevel               (Parm, OutParm)

void UBioSaveGame::GetCharacterInfo(TArray<struct FSaveGameRecord>* Records, int* o_ClassId, int* o_characterLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetCharacterInfo");

	UBioSaveGame_GetCharacterInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Records != nullptr)
		*Records = params.Records;
	if (o_ClassId != nullptr)
		*o_ClassId = params.o_ClassId;
	if (o_characterLevel != nullptr)
		*o_characterLevel = params.o_characterLevel;
}


// Function BIOC_Base.BioSaveGame.NewCharacterProfile
// (Native, Public)
// Parameters:
// struct FString                 sCharacterName                 (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSaveGame::NewCharacterProfile(const struct FString& sCharacterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.NewCharacterProfile");

	UBioSaveGame_NewCharacterProfile_Params params;
	params.sCharacterName = sCharacterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.LoadMostRecentSaveRecord
// (Native, Public)
// Parameters:
// struct FString                 sCharacterID                   (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::LoadMostRecentSaveRecord(const struct FString& sCharacterID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadMostRecentSaveRecord");

	UBioSaveGame_LoadMostRecentSaveRecord_Params params;
	params.sCharacterID = sCharacterID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.GetSaveRecords
// (Native, Public, HasOutParms)
// Parameters:
// TArray<struct FSaveGameRecord> Records                        (Parm, OutParm, NeedCtorLink)
// struct FString                 sCharacterID                   (OptionalParm, Parm, NeedCtorLink)
// bool                           i_bShowAllSaveGames            (OptionalParm, Parm)
// bool                           i_bHideAutoSave                (OptionalParm, Parm)
// int                            i_nSortById                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSaveGame::GetSaveRecords(const struct FString& sCharacterID, bool i_bShowAllSaveGames, bool i_bHideAutoSave, int i_nSortById, TArray<struct FSaveGameRecord>* Records)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.GetSaveRecords");

	UBioSaveGame_GetSaveRecords_Params params;
	params.sCharacterID = sCharacterID;
	params.i_bShowAllSaveGames = i_bShowAllSaveGames;
	params.i_bHideAutoSave = i_bHideAutoSave;
	params.i_nSortById = i_nSortById;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Records != nullptr)
		*Records = params.Records;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSaveGame.DevSelectCanceledConfirmationCallback
// (Native, Public)
// Parameters:
// int                            i_nDeviceID                    (Parm)

void UBioSaveGame::DevSelectCanceledConfirmationCallback(int i_nDeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.DevSelectCanceledConfirmationCallback");

	UBioSaveGame_DevSelectCanceledConfirmationCallback_Params params;
	params.i_nDeviceID = i_nDeviceID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.LoadGameDevSelectCanceledCallback
// (Native, Public)
// Parameters:
// int                            i_nDeviceID                    (Parm)

void UBioSaveGame::LoadGameDevSelectCanceledCallback(int i_nDeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadGameDevSelectCanceledCallback");

	UBioSaveGame_LoadGameDevSelectCanceledCallback_Params params;
	params.i_nDeviceID = i_nDeviceID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SaveGameDevSelectCanceledCallback
// (Native, Public)
// Parameters:
// int                            i_nDeviceID                    (Parm)

void UBioSaveGame::SaveGameDevSelectCanceledCallback(int i_nDeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveGameDevSelectCanceledCallback");

	UBioSaveGame_SaveGameDevSelectCanceledCallback_Params params;
	params.i_nDeviceID = i_nDeviceID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.LoadGameFromCallback
// (Native, Public)
// Parameters:
// int                            i_nDeviceID                    (Parm)

void UBioSaveGame::LoadGameFromCallback(int i_nDeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.LoadGameFromCallback");

	UBioSaveGame_LoadGameFromCallback_Params params;
	params.i_nDeviceID = i_nDeviceID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveGame.SaveGameFromCallback
// (Native, Public)
// Parameters:
// int                            i_nDeviceID                    (Parm)

void UBioSaveGame::SaveGameFromCallback(int i_nDeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveGame.SaveGameFromCallback");

	UBioSaveGame_SaveGameFromCallback_Params params;
	params.i_nDeviceID = i_nDeviceID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioVehicleSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleSaveObject.LoadObject");

	UBioVehicleSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioVehicleSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleSaveObject.SaveObject");

	UBioVehicleSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleSaveObject.LoadPositionAndOrientation
// (Native, Public)
// Parameters:
// class AActor*                  O                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleSaveObject::LoadPositionAndOrientation(class AActor* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleSaveObject.LoadPositionAndOrientation");

	UBioVehicleSaveObject_LoadPositionAndOrientation_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleSaveObject.SavePositionAndOrientation
// (Native, Public)
// Parameters:
// class AActor*                  O                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioVehicleSaveObject::SavePositionAndOrientation(class AActor* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleSaveObject.SavePositionAndOrientation");

	UBioVehicleSaveObject_SavePositionAndOrientation_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWorldInfoSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioWorldInfoSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfoSaveObject.LoadObject");

	UBioWorldInfoSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfoSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioWorldInfoSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfoSaveObject.SaveObject");

	UBioWorldInfoSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldSaveObject.GetLevelSaveObject
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FString                 LevelName                      (Const, Parm, OutParm, NeedCtorLink)
// bool                           bRemove                        (OptionalParm, Parm)
// class UBioLevelSaveObject*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioLevelSaveObject* UBioWorldSaveObject::GetLevelSaveObject(bool bRemove, struct FString* LevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldSaveObject.GetLevelSaveObject");

	UBioWorldSaveObject_GetLevelSaveObject_Params params;
	params.bRemove = bRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LevelName != nullptr)
		*LevelName = params.LevelName;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSkillGame.InitializeSkillGameStringReferences
// (Defined, Event, Public)

void UBioSkillGame::InitializeSkillGameStringReferences()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame.InitializeSkillGameStringReferences");

	UBioSkillGame_InitializeSkillGameStringReferences_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame.CallbackShowAdditonalTutorial
// (Native, Public)

void UBioSkillGame::CallbackShowAdditonalTutorial()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame.CallbackShowAdditonalTutorial");

	UBioSkillGame_CallbackShowAdditonalTutorial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame.CallbackSkillGame
// (Native, Public)

void UBioSkillGame::CallbackSkillGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame.CallbackSkillGame");

	UBioSkillGame_CallbackSkillGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillGame.InitializeSkillGameCustom
// (Native, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)
// class UObject*                 oDependent                     (Parm)
// unsigned char                  nSkillGameType                 (Parm)
// int                            nMinSalvage                    (Parm)
// int                            nMaxSalvage                    (Parm)
// int                            nTotalButtonsToDisplay         (Parm)
// float                          fButtonTimeout                 (Parm)
// float                          fButtonDelayTime               (Parm)
// struct FName                   nmFunctionSuccessCallback      (Parm)
// struct FName                   nmFunctionFailureCallback      (Parm)
// struct FName                   nmFunctionCancelCallback       (Parm)
// bool                           i_bDoNotUseSalvage             (Parm)
// unsigned char                  eGameDifficulty                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSkillGame::InitializeSkillGameCustom(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, const struct FName& nmFunctionSuccessCallback, const struct FName& nmFunctionFailureCallback, const struct FName& nmFunctionCancelCallback, bool i_bDoNotUseSalvage, unsigned char eGameDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame.InitializeSkillGameCustom");

	UBioSkillGame_InitializeSkillGameCustom_Params params;
	params.oUsingPawn = oUsingPawn;
	params.oDependent = oDependent;
	params.nSkillGameType = nSkillGameType;
	params.nMinSalvage = nMinSalvage;
	params.nMaxSalvage = nMaxSalvage;
	params.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	params.fButtonTimeout = fButtonTimeout;
	params.fButtonDelayTime = fButtonDelayTime;
	params.nmFunctionSuccessCallback = nmFunctionSuccessCallback;
	params.nmFunctionFailureCallback = nmFunctionFailureCallback;
	params.nmFunctionCancelCallback = nmFunctionCancelCallback;
	params.i_bDoNotUseSalvage = i_bDoNotUseSalvage;
	params.eGameDifficulty = eGameDifficulty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSkillGame.InitializeSkillGame
// (Native, Public)
// Parameters:
// class ABioPawn*                oUsingPawn                     (Parm)
// class UObject*                 oDependent                     (Parm)
// unsigned char                  nSkillGameType                 (Parm)
// int                            nMinSalvage                    (Parm)
// int                            nMaxSalvage                    (Parm)
// int                            nTotalButtonsToDisplay         (Parm)
// float                          fButtonTimeout                 (Parm)
// float                          fButtonDelayTime               (Parm)
// unsigned char                  eGameDifficulty                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSkillGame::InitializeSkillGame(class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame.InitializeSkillGame");

	UBioSkillGame_InitializeSkillGame_Params params;
	params.oUsingPawn = oUsingPawn;
	params.oDependent = oDependent;
	params.nSkillGameType = nSkillGameType;
	params.nMinSalvage = nMinSalvage;
	params.nMaxSalvage = nMaxSalvage;
	params.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	params.fButtonTimeout = fButtonTimeout;
	params.fButtonDelayTime = fButtonDelayTime;
	params.eGameDifficulty = eGameDifficulty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSkillGame.GetBestSkillMember
// (Native, Public, HasOutParms)
// Parameters:
// TEnumAsByte<EBioSkillGame>     eSkillGameType                 (Parm)
// class ABioBaseSquad*           oInputSquad                    (Parm)
// int                            nBestSkillLevel                (Parm, OutParm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* UBioSkillGame::GetBestSkillMember(TEnumAsByte<EBioSkillGame> eSkillGameType, class ABioBaseSquad* oInputSquad, int* nBestSkillLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame.GetBestSkillMember");

	UBioSkillGame_GetBestSkillMember_Params params;
	params.eSkillGameType = eSkillGameType;
	params.oInputSquad = oInputSquad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nBestSkillLevel != nullptr)
		*nBestSkillLevel = params.nBestSkillLevel;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSkillGame.GetSalvageLimits
// (Native, Public, HasOutParms)
// Parameters:
// int                            nSkillRank                     (Parm)
// int                            eDifficulty                    (Parm)
// int                            fSalvageMin                    (Parm, OutParm)
// int                            fSalvageMax                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSkillGame::GetSalvageLimits(int nSkillRank, int eDifficulty, int* fSalvageMin, int* fSalvageMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillGame.GetSalvageLimits");

	UBioSkillGame_GetSalvageLimits_Params params;
	params.nSkillRank = nSkillRank;
	params.eDifficulty = eDifficulty;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fSalvageMin != nullptr)
		*fSalvageMin = params.fSalvageMin;
	if (fSalvageMax != nullptr)
		*fSalvageMax = params.fSalvageMax;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAudioVolume.myTimerPop
// (Final, Native, Public)

void ABioAudioVolume::myTimerPop()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioVolume.myTimerPop");

	ABioAudioVolume_myTimerPop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioVolume.TimerPop
// (Defined, Public)
// Parameters:
// class ABioAudioVolumeTimer*    T                              (Parm)

void ABioAudioVolume::TimerPop(class ABioAudioVolumeTimer* T)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioVolume.TimerPop");

	ABioAudioVolume_TimerPop_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioVolume.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioAudioVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioVolume.UnTouch");

	ABioAudioVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioVolume.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioAudioVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioVolume.Touch");

	ABioAudioVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioVolume.PostBeginPlay
// (Defined, Public)

void ABioAudioVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioVolume.PostBeginPlay");

	ABioAudioVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.SetContainsPlayer
// (Final, Native, Public)
// Parameters:
// bool                           bContainsPlayer                (Parm)

void ABioMusicVolume::SetContainsPlayer(bool bContainsPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.SetContainsPlayer");

	ABioMusicVolume_SetContainsPlayer_Params params;
	params.bContainsPlayer = bContainsPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.GetIsMusicOverriddenByXBox
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioMusicVolume::GetIsMusicOverriddenByXBox()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.GetIsMusicOverriddenByXBox");

	ABioMusicVolume_GetIsMusicOverriddenByXBox_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMusicVolume.CheckCurrentMusicState
// (Final, Native, Public)

void ABioMusicVolume::CheckCurrentMusicState()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.CheckCurrentMusicState");

	ABioMusicVolume_CheckCurrentMusicState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.SetEnabled
// (Final, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm)

void ABioMusicVolume::SetEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.SetEnabled");

	ABioMusicVolume_SetEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.Initialise2DA
// (Final, Native, Public)

void ABioMusicVolume::Initialise2DA()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.Initialise2DA");

	ABioMusicVolume_Initialise2DA_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.StopMusic
// (Final, Native, Public)

void ABioMusicVolume::StopMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.StopMusic");

	ABioMusicVolume_StopMusic_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.StartMusic
// (Final, Native, Public)

void ABioMusicVolume::StartMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.StartMusic");

	ABioMusicVolume_StartMusic_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.CheckPriority
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioMusicVolume::CheckPriority()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.CheckPriority");

	ABioMusicVolume_CheckPriority_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMusicVolume.TimerPop
// (Final, Native, Public)
// Parameters:
// class ABioMusicVolumeTimer*    T                              (Parm)

void ABioMusicVolume::TimerPop(class ABioMusicVolumeTimer* T)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.TimerPop");

	ABioMusicVolume_TimerPop_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolume.PostBeginPlay
// (Defined, Public)

void ABioMusicVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolume.PostBeginPlay");

	ABioMusicVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolumeTimer.Timer
// (Defined, Public)

void ABioMusicVolumeTimer::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolumeTimer.Timer");

	ABioMusicVolumeTimer_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMusicVolumeTimer.PostBeginPlay
// (Defined, Public)

void ABioMusicVolumeTimer::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMusicVolumeTimer.PostBeginPlay");

	ABioMusicVolumeTimer_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Ambient.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioAI_Ambient::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Ambient.Tick");

	ABioAI_Ambient_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Ambient.HearNoise
// (Defined, Event, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FVector                 vNoiseLocation                 (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void ABioAI_Ambient::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Ambient.HearNoise");

	ABioAI_Ambient_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.vNoiseLocation = vNoiseLocation;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Ambient.Initialize
// (Defined, Public)

void ABioAI_Ambient::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Ambient.Initialize");

	ABioAI_Ambient_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Ambient.AdjustSteeringMoveSpeed
// (Native, Public)
// Parameters:
// struct FVector                 vSteering                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Ambient::AdjustSteeringMoveSpeed(const struct FVector& vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Ambient.AdjustSteeringMoveSpeed");

	ABioAI_Ambient_AdjustSteeringMoveSpeed_Params params;
	params.vSteering = vSteering;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Ambient.GetSteeringVector
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vSteering                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Ambient::GetSteeringVector(struct FVector* vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Ambient.GetSteeringVector");

	ABioAI_Ambient_GetSteeringVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vSteering != nullptr)
		*vSteering = params.vSteering;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.ReturnToPlaypen
// (Defined, Public)

void ABioAI_Core::ReturnToPlaypen()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.ReturnToPlaypen");

	ABioAI_Core_ReturnToPlaypen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.GetTargetDifficulty
// (Defined, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// TEnumAsByte<EBioPawnChallengeRank> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioPawnChallengeRank> ABioAI_Core::GetTargetDifficulty(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetTargetDifficulty");

	ABioAI_Core_GetTargetDifficulty_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.IsAttackTargetValid
// (Defined, Public)
// Parameters:
// class APawn*                   oAttackTarget                  (Parm)
// bool                           bTestShooting                  (OptionalParm, Parm)
// bool                           bTestExposed                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::IsAttackTargetValid(class APawn* oAttackTarget, bool bTestShooting, bool bTestExposed)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.IsAttackTargetValid");

	ABioAI_Core_IsAttackTargetValid_Params params;
	params.oAttackTarget = oAttackTarget;
	params.bTestShooting = bTestShooting;
	params.bTestExposed = bTestExposed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.GetHealthPercentage
// (Defined, Public)
// Parameters:
// class APawn*                   oTestPawn                      (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ABioAI_Core::GetHealthPercentage(class APawn* oTestPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetHealthPercentage");

	ABioAI_Core_GetHealthPercentage_Params params;
	params.oTestPawn = oTestPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.GetFollowTargets
// (Defined, Event, Public, HasOutParms)
// Parameters:
// class APawn*                   oFollow                        (Parm, OutParm)
// struct FVector                 vMoveTo                        (Parm, OutParm)

void ABioAI_Core::GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetFollowTargets");

	ABioAI_Core_GetFollowTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oFollow != nullptr)
		*oFollow = params.oFollow;
	if (vMoveTo != nullptr)
		*vMoveTo = params.vMoveTo;
}


// Function BIOC_Base.BioAI_Core.GetTarget
// (Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ABioAI_Core::GetTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetTarget");

	ABioAI_Core_GetTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.SetTarget
// (Defined, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)

void ABioAI_Core::SetTarget(class AActor* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.SetTarget");

	ABioAI_Core_SetTarget_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.IsCoverPositionValid
// (Defined, Event, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FRotator                rRotation                      (Parm)
// int                            nRank                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::IsCoverPositionValid(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.IsCoverPositionValid");

	ABioAI_Core_IsCoverPositionValid_Params params;
	params.vLocation = vLocation;
	params.rRotation = rRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nRank != nullptr)
		*nRank = params.nRank;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.onStopFollowerHoldPosition
// (Defined, Event, Public)

void ABioAI_Core::onStopFollowerHoldPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.onStopFollowerHoldPosition");

	ABioAI_Core_onStopFollowerHoldPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.onStartFollowerHoldPosition
// (Defined, Event, Public)
// Parameters:
// class ABioSquadHoldMarker*     oHoldMarker                    (Parm)

void ABioAI_Core::onStartFollowerHoldPosition(class ABioSquadHoldMarker* oHoldMarker)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.onStartFollowerHoldPosition");

	ABioAI_Core_onStartFollowerHoldPosition_Params params;
	params.oHoldMarker = oHoldMarker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.onLeftPlayPen
// (Defined, Event, Public)
// Parameters:
// class ANavigationPoint*        oNavPoint                      (Parm)

void ABioAI_Core::onLeftPlayPen(class ANavigationPoint* oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.onLeftPlayPen");

	ABioAI_Core_onLeftPlayPen_Params params;
	params.oNavPoint = oNavPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.Initialize
// (Defined, Public)

void ABioAI_Core::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.Initialize");

	ABioAI_Core_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnSelected
// (Event, Public)
// Parameters:
// class AActor*                  oOther                         (Parm)

void ABioAI_Core::OnSelected(class AActor* oOther)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnSelected");

	ABioAI_Core_OnSelected_Params params;
	params.oOther = oOther;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnLastManStanding
// (Event, Public)

void ABioAI_Core::OnLastManStanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnLastManStanding");

	ABioAI_Core_OnLastManStanding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnProximityAlarm
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioAI_Core::OnProximityAlarm(class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnProximityAlarm");

	ABioAI_Core_OnProximityAlarm_Params params;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnSquadSeen
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oSquad                         (Parm)

void ABioAI_Core::OnSquadSeen(class AActor* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnSquadSeen");

	ABioAI_Core_OnSquadSeen_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnActionComplete_Movement
// (Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oTarget                        (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioAI_Core::OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnActionComplete_Movement");

	ABioAI_Core_OnActionComplete_Movement_Params params;
	params.nmAction = nmAction;
	params.nReason = nReason;
	params.oTarget = oTarget;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnActionComplete_Combat
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// struct FName                   nmTechnique                    (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oLastTarget                    (Parm)

void ABioAI_Core::OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnActionComplete_Combat");

	ABioAI_Core_OnActionComplete_Combat_Params params;
	params.nmAction = nmAction;
	params.nmTechnique = nmTechnique;
	params.nReason = nReason;
	params.oLastTarget = oLastTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Core::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnDamaged");

	ABioAI_Core_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.onDamagedInCover
// (Defined, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Core::onDamagedInCover(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.onDamagedInCover");

	ABioAI_Core_onDamagedInCover_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.HearNoise
// (Defined, Event, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FVector                 vNoiseLocation                 (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void ABioAI_Core::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.HearNoise");

	ABioAI_Core_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.vNoiseLocation = vNoiseLocation;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnCastAt
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmPower                        (Parm)

void ABioAI_Core::OnCastAt(class APawn* oAttacker, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnCastAt");

	ABioAI_Core_OnCastAt_Params params;
	params.oAttacker = oAttacker;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnAttacked
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioAI_Core::OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnAttacked");

	ABioAI_Core_OnAttacked_Params params;
	params.oAttacker = oAttacker;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnAbilityDisabled
// (Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioAI_Core::OnAbilityDisabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnAbilityDisabled");

	ABioAI_Core_OnAbilityDisabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnAbilityEnabled
// (Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioAI_Core::OnAbilityEnabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnAbilityEnabled");

	ABioAI_Core_OnAbilityEnabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.OnNoCombatAction
// (Defined, Event, Public)

void ABioAI_Core::OnNoCombatAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.OnNoCombatAction");

	ABioAI_Core_OnNoCombatAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.ReactToAction
// (Defined, Public)
// Parameters:
// class APawn*                   oInstigator                    (Parm)
// struct FName                   nmAction                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::ReactToAction(class APawn* oInstigator, const struct FName& nmAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.ReactToAction");

	ABioAI_Core_ReactToAction_Params params;
	params.oInstigator = oInstigator;
	params.nmAction = nmAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.EvaluateCapabilities
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::EvaluateCapabilities(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateCapabilities");

	ABioAI_Core_EvaluateCapabilities_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.EvaluateAttackCapabilities
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::EvaluateAttackCapabilities(class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateAttackCapabilities");

	ABioAI_Core_EvaluateAttackCapabilities_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.EvaluateDefensiveCapabilities
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::EvaluateDefensiveCapabilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateDefensiveCapabilities");

	ABioAI_Core_EvaluateDefensiveCapabilities_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.PickNewTarget
// (Defined, Public)
// Parameters:
// bool                           bLOSRequired                   (OptionalParm, Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* ABioAI_Core::PickNewTarget(bool bLOSRequired)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.PickNewTarget");

	ABioAI_Core_PickNewTarget_Params params;
	params.bLOSRequired = bLOSRequired;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.EvaluateTargets
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::EvaluateTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateTargets");

	ABioAI_Core_EvaluateTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.EvaluateCover
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   oTarget                        (OptionalParm, Parm)
// bool                           bLOS                           (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::EvaluateCover(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateCover");

	ABioAI_Core_EvaluateCover_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.GetCoverLocation
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioAI_Core::GetCoverLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetCoverLocation");

	ABioAI_Core_GetCoverLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.GetCoverBiasPoint
// (Defined, Event, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioAI_Core::GetCoverBiasPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetCoverBiasPoint");

	ABioAI_Core_GetCoverBiasPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.ShouldUseCover
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::ShouldUseCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.ShouldUseCover");

	ABioAI_Core_ShouldUseCover_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.EvaluateSteeringMovement
// (Defined, Public, HasDefaults)

void ABioAI_Core::EvaluateSteeringMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateSteeringMovement");

	ABioAI_Core_EvaluateSteeringMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.EvaluateMovement
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::EvaluateMovement(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateMovement");

	ABioAI_Core_EvaluateMovement_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.EvaluateCombatActions
// (Defined, Public)

void ABioAI_Core::EvaluateCombatActions()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.EvaluateCombatActions");

	ABioAI_Core_EvaluateCombatActions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Core.AdjustSteeringMoveSpeed
// (Native, Public)
// Parameters:
// struct FVector                 vSteering                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::AdjustSteeringMoveSpeed(const struct FVector& vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.AdjustSteeringMoveSpeed");

	ABioAI_Core_AdjustSteeringMoveSpeed_Params params;
	params.vSteering = vSteering;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.GetSteeringVector
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vSteering                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::GetSteeringVector(struct FVector* vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetSteeringVector");

	ABioAI_Core_GetSteeringVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vSteering != nullptr)
		*vSteering = params.vSteering;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.GetTargetPosition
// (Native, Public)
// Parameters:
// class APawn*                   oTarget                        (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioAI_Core::GetTargetPosition(class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.GetTargetPosition");

	ABioAI_Core_GetTargetPosition_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.CheckReEvaluateCover
// (Native, Public)
// Parameters:
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::CheckReEvaluateCover(bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.CheckReEvaluateCover");

	ABioAI_Core_CheckReEvaluateCover_Params params;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Core.FindBestCover
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FCoverRecord            out_CoverRecord                (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Core::FindBestCover(const struct FVector& vLocation, struct FCoverRecord* out_CoverRecord)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Core.FindBestCover");

	ABioAI_Core_FindBestCover_Params params;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CoverRecord != nullptr)
		*out_CoverRecord = params.out_CoverRecord;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Drone.GetSteeringVector
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vSteering                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Drone::GetSteeringVector(struct FVector* vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Drone.GetSteeringVector");

	ABioAI_Drone_GetSteeringVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vSteering != nullptr)
		*vSteering = params.vSteering;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.OnActionComplete_Combat
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// struct FName                   nmTechnique                    (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oLastTarget                    (Parm)

void ABioAI_Henchman::OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.OnActionComplete_Combat");

	ABioAI_Henchman_OnActionComplete_Combat_Params params;
	params.nmAction = nmAction;
	params.nmTechnique = nmTechnique;
	params.nReason = nReason;
	params.oLastTarget = oLastTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Henchman.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Henchman::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.OnDamaged");

	ABioAI_Henchman_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Henchman.HandleSteeringMovementFailed
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::HandleSteeringMovementFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.HandleSteeringMovementFailed");

	ABioAI_Henchman_HandleSteeringMovementFailed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.GetFollowTargets
// (Defined, Event, Public, HasOutParms)
// Parameters:
// class APawn*                   oFollow                        (Parm, OutParm)
// struct FVector                 vMoveTo                        (Parm, OutParm)

void ABioAI_Henchman::GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.GetFollowTargets");

	ABioAI_Henchman_GetFollowTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oFollow != nullptr)
		*oFollow = params.oFollow;
	if (vMoveTo != nullptr)
		*vMoveTo = params.vMoveTo;
}


// Function BIOC_Base.BioAI_Henchman.OnProximityAlarm
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioAI_Henchman::OnProximityAlarm(class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.OnProximityAlarm");

	ABioAI_Henchman_OnProximityAlarm_Params params;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Henchman.Initialize
// (Defined, Public)

void ABioAI_Henchman::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.Initialize");

	ABioAI_Henchman_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Henchman.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioAI_Henchman::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.Tick");

	ABioAI_Henchman_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Henchman.GetPlayerProfile
// (Defined, Public)
// Parameters:
// class UBioGamerProfile*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioGamerProfile* ABioAI_Henchman::GetPlayerProfile()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.GetPlayerProfile");

	ABioAI_Henchman_GetPlayerProfile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.GetPlayerSquad
// (Defined, Public)
// Parameters:
// class ABioPlayerSquad*         ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioPlayerSquad* ABioAI_Henchman::GetPlayerSquad()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.GetPlayerSquad");

	ABioAI_Henchman_GetPlayerSquad_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.ReactToAction
// (Defined, Public)
// Parameters:
// class APawn*                   oInstigator                    (Parm)
// struct FName                   nmAction                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::ReactToAction(class APawn* oInstigator, const struct FName& nmAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.ReactToAction");

	ABioAI_Henchman_ReactToAction_Params params;
	params.oInstigator = oInstigator;
	params.nmAction = nmAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.GetOutOfCombatCoverRank
// (Final, Defined, Private)
// Parameters:
// struct FVector                 vPos                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioAI_Henchman::GetOutOfCombatCoverRank(const struct FVector& vPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.GetOutOfCombatCoverRank");

	ABioAI_Henchman_GetOutOfCombatCoverRank_Params params;
	params.vPos = vPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.IsCoverPositionValid
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FRotator                rRotation                      (Parm)
// int                            nRank                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::IsCoverPositionValid(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.IsCoverPositionValid");

	ABioAI_Henchman_IsCoverPositionValid_Params params;
	params.vLocation = vLocation;
	params.rRotation = rRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nRank != nullptr)
		*nRank = params.nRank;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.GetCoverLocation
// (Defined, Public, HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ABioAI_Henchman::GetCoverLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.GetCoverLocation");

	ABioAI_Henchman_GetCoverLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.ShouldUseCover
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::ShouldUseCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.ShouldUseCover");

	ABioAI_Henchman_ShouldUseCover_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.EvaluateTargets
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::EvaluateTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.EvaluateTargets");

	ABioAI_Henchman_EvaluateTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.EvaluateAttackCapabilities
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::EvaluateAttackCapabilities(class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.EvaluateAttackCapabilities");

	ABioAI_Henchman_EvaluateAttackCapabilities_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.EvaluateDefensiveCapabilities
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::EvaluateDefensiveCapabilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.EvaluateDefensiveCapabilities");

	ABioAI_Henchman_EvaluateDefensiveCapabilities_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.EvaluateCapabilities
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::EvaluateCapabilities(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.EvaluateCapabilities");

	ABioAI_Henchman_EvaluateCapabilities_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.EvaluateCombatActions
// (Defined, Public)

void ABioAI_Henchman::EvaluateCombatActions()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.EvaluateCombatActions");

	ABioAI_Henchman_EvaluateCombatActions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Henchman.IsCoverPositionValid_Native
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FRotator                rRotation                      (Parm)
// int                            nRank                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::IsCoverPositionValid_Native(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.IsCoverPositionValid_Native");

	ABioAI_Henchman_IsCoverPositionValid_Native_Params params;
	params.vLocation = vLocation;
	params.rRotation = rRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nRank != nullptr)
		*nRank = params.nRank;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.AdjustSteeringMoveSpeed
// (Native, Public)
// Parameters:
// struct FVector                 vSteering                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::AdjustSteeringMoveSpeed(const struct FVector& vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.AdjustSteeringMoveSpeed");

	ABioAI_Henchman_AdjustSteeringMoveSpeed_Params params;
	params.vSteering = vSteering;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Henchman.GetSteeringVector
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vSteering                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Henchman::GetSteeringVector(struct FVector* vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Henchman.GetSteeringVector");

	ABioAI_Henchman_GetSteeringVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vSteering != nullptr)
		*vSteering = params.vSteering;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Hopper.HearNoise
// (Event, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FVector                 vNoiseLocation                 (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void ABioAI_Hopper::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.HearNoise");

	ABioAI_Hopper_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.vNoiseLocation = vNoiseLocation;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Hopper.OnSquadSeen
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oSquad                         (Parm)

void ABioAI_Hopper::OnSquadSeen(class AActor* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.OnSquadSeen");

	ABioAI_Hopper_OnSquadSeen_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Hopper.OnActionComplete_Movement
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oTarget                        (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioAI_Hopper::OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.OnActionComplete_Movement");

	ABioAI_Hopper_OnActionComplete_Movement_Params params;
	params.nmAction = nmAction;
	params.nReason = nReason;
	params.oTarget = oTarget;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Hopper.OnActionComplete_Combat
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// struct FName                   nmTechnique                    (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oLastTarget                    (Parm)

void ABioAI_Hopper::OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.OnActionComplete_Combat");

	ABioAI_Hopper_OnActionComplete_Combat_Params params;
	params.nmAction = nmAction;
	params.nmTechnique = nmTechnique;
	params.nReason = nReason;
	params.oLastTarget = oLastTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Hopper.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Hopper::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.OnDamaged");

	ABioAI_Hopper_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Hopper.EvaluateMovement
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Hopper::EvaluateMovement(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.EvaluateMovement");

	ABioAI_Hopper_EvaluateMovement_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Hopper.EvaluateCapabilities
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Hopper::EvaluateCapabilities(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.EvaluateCapabilities");

	ABioAI_Hopper_EvaluateCapabilities_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Hopper.Hop
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (OptionalParm, Parm)
// float                          fMoveDelay                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Hopper::Hop(class APawn* oTarget, float fMoveDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.Hop");

	ABioAI_Hopper_Hop_Params params;
	params.oTarget = oTarget;
	params.fMoveDelay = fMoveDelay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Hopper.FindHopperNode
// (Native, Public)
// Parameters:
// class APawn*                   pSource                        (Parm)
// class APawn*                   pTarget                        (Parm)
// class ABioWP_Hopper*           ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioWP_Hopper* ABioAI_Hopper::FindHopperNode(class APawn* pSource, class APawn* pTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Hopper.FindHopperNode");

	ABioAI_Hopper_FindHopperNode_Params params;
	params.pSource = pSource;
	params.pTarget = pTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_SarenFlyer.onLeftPlayPen
// (Event, Public)
// Parameters:
// class ANavigationPoint*        oNavPoint                      (Parm)

void ABioAI_SarenFlyer::onLeftPlayPen(class ANavigationPoint* oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_SarenFlyer.onLeftPlayPen");

	ABioAI_SarenFlyer_onLeftPlayPen_Params params;
	params.oNavPoint = oNavPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_SarenFlyer.GetSteeringVector
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vSteering                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_SarenFlyer::GetSteeringVector(struct FVector* vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_SarenFlyer.GetSteeringVector");

	ABioAI_SarenFlyer_GetSteeringVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vSteering != nullptr)
		*vSteering = params.vSteering;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Sneaky.GetSteeringVector
// (Native, Public, HasOutParms)
// Parameters:
// struct FVector                 vSteering                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Sneaky::GetSteeringVector(struct FVector* vSteering)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Sneaky.GetSteeringVector");

	ABioAI_Sneaky_GetSteeringVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vSteering != nullptr)
		*vSteering = params.vSteering;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControlBasic.ShouldDamageVFXPlay
// (Final, Defined, Protected)
// Parameters:
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXControlBasic::ShouldDamageVFXPlay(class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControlBasic.ShouldDamageVFXPlay");

	UBioDeathVFXControlBasic_ShouldDamageVFXPlay_Params params;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControlBasic.ShouldAppearanceVFXPlay
// (Final, Defined, Protected)
// Parameters:
// class UBioDeathVFXGameState*   pGameState                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioDeathVFXControlBasic::ShouldAppearanceVFXPlay(class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControlBasic.ShouldAppearanceVFXPlay");

	UBioDeathVFXControlBasic_ShouldAppearanceVFXPlay_Params params;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDeathVFXControlBasic.Evaluate
// (Defined, Event, Public)
// Parameters:
// class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper      (Parm)
// class UBioDeathVFXGameState*   pGameState                     (Parm)

void UBioDeathVFXControlBasic::Evaluate(class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDeathVFXControlBasic.Evaluate");

	UBioDeathVFXControlBasic_Evaluate_Params params;
	params.pDeathVFXSpecArrayWrapper = pDeathVFXSpecArrayWrapper;
	params.pGameState = pGameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventorySaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioInventorySaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventorySaveObject.LoadObject");

	UBioInventorySaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInventorySaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioInventorySaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInventorySaveObject.SaveObject");

	UBioInventorySaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehaviorSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioActorBehaviorSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehaviorSaveObject.LoadObject");

	UBioActorBehaviorSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioActorBehaviorSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioActorBehaviorSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioActorBehaviorSaveObject.SaveObject");

	UBioActorBehaviorSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGDelayLog.StopCache
// (Defined, Public)

void UBioDEBUGDelayLog::StopCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGDelayLog.StopCache");

	UBioDEBUGDelayLog_StopCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGDelayLog.StartCache
// (Defined, Public)

void UBioDEBUGDelayLog::StartCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGDelayLog.StartCache");

	UBioDEBUGDelayLog_StartCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGDelayLog.dump
// (Defined, Public)

void UBioDEBUGDelayLog::dump()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGDelayLog.dump");

	UBioDEBUGDelayLog_dump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUGDelayLog.LogEntry
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// struct FName                   Tag                            (OptionalParm, Parm)

void UBioDEBUGDelayLog::LogEntry(const struct FString& Text, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUGDelayLog.LogEntry");

	UBioDEBUGDelayLog_LogEntry_Params params;
	params.Text = Text;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWp_Kismet.OnCreatureReachedWayPoint
// (Defined, Public)
// Parameters:
// class APawn*                   PathFindingCreature            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_Kismet::OnCreatureReachedWayPoint(class APawn* PathFindingCreature)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_Kismet.OnCreatureReachedWayPoint");

	ABioWp_Kismet_OnCreatureReachedWayPoint_Params params;
	params.PathFindingCreature = PathFindingCreature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPlayerControllerSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioPlayerControllerSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerControllerSaveObject.LoadObject");

	UBioPlayerControllerSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerControllerSaveObject.SaveObject
// (Defined, Public, HasDefaults)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioPlayerControllerSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerControllerSaveObject.SaveObject");

	UBioPlayerControllerSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_ReturnToSpawn.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ABioAI_ReturnToSpawn::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_ReturnToSpawn.Tick");

	ABioAI_ReturnToSpawn_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_ReturnToSpawn.onLeftPlayPen
// (Event, Public)
// Parameters:
// class ANavigationPoint*        oNavPoint                      (Parm)

void ABioAI_ReturnToSpawn::onLeftPlayPen(class ANavigationPoint* oNavPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_ReturnToSpawn.onLeftPlayPen");

	ABioAI_ReturnToSpawn_onLeftPlayPen_Params params;
	params.oNavPoint = oNavPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_ReturnToSpawn.Initialize
// (Defined, Public)

void ABioAI_ReturnToSpawn::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_ReturnToSpawn.Initialize");

	ABioAI_ReturnToSpawn_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_HumanoidMinion.OnHacked
// (Defined, Event, Public)

void ABioAI_HumanoidMinion::OnHacked()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_HumanoidMinion.OnHacked");

	ABioAI_HumanoidMinion_OnHacked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_HumanoidMinion.HearNoise
// (Defined, Event, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// struct FVector                 vNoiseLocation                 (Parm)
// struct FName                   NoiseType                      (OptionalParm, Parm)

void ABioAI_HumanoidMinion::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FVector& vNoiseLocation, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_HumanoidMinion.HearNoise");

	ABioAI_HumanoidMinion_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.vNoiseLocation = vNoiseLocation;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_HumanoidMinion.onDamagedInCover
// (Defined, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_HumanoidMinion::onDamagedInCover(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_HumanoidMinion.onDamagedInCover");

	ABioAI_HumanoidMinion_onDamagedInCover_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_HumanoidMinion.IsCoverPositionValid
// (Defined, Event, Public, HasOutParms)
// Parameters:
// struct FVector                 vLocation                      (Parm)
// struct FRotator                rRotation                      (Parm)
// int                            nRank                          (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_HumanoidMinion::IsCoverPositionValid(const struct FVector& vLocation, const struct FRotator& rRotation, int* nRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_HumanoidMinion.IsCoverPositionValid");

	ABioAI_HumanoidMinion_IsCoverPositionValid_Params params;
	params.vLocation = vLocation;
	params.rRotation = rRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nRank != nullptr)
		*nRank = params.nRank;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_HumanoidMinion.ShouldUseCover
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_HumanoidMinion::ShouldUseCover()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_HumanoidMinion.ShouldUseCover");

	ABioAI_HumanoidMinion_ShouldUseCover_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Charge.EvaluateMovement
// (Defined, Public, HasDefaults)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Charge::EvaluateMovement(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Charge.EvaluateMovement");

	ABioAI_Charge_EvaluateMovement_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Assault.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Assault::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Assault.OnDamaged");

	ABioAI_Assault_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Assault.InRangeOfTarget
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Assault::InRangeOfTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Assault.InRangeOfTarget");

	ABioAI_Assault_InRangeOfTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Assault.EvaluateMovement
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Assault::EvaluateMovement(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Assault.EvaluateMovement");

	ABioAI_Assault_EvaluateMovement_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Assault.GetFollowTargets
// (Defined, Event, Public, HasOutParms)
// Parameters:
// class APawn*                   oFollow                        (Parm, OutParm)
// struct FVector                 vMoveTo                        (Parm, OutParm)

void ABioAI_Assault::GetFollowTargets(class APawn** oFollow, struct FVector* vMoveTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Assault.GetFollowTargets");

	ABioAI_Assault_GetFollowTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (oFollow != nullptr)
		*oFollow = params.oFollow;
	if (vMoveTo != nullptr)
		*vMoveTo = params.vMoveTo;
}


// Function BIOC_Base.BioAI_Inactive.OnProximityAlarm
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioAI_Inactive::OnProximityAlarm(class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnProximityAlarm");

	ABioAI_Inactive_OnProximityAlarm_Params params;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnSquadSeen
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oSquad                         (Parm)

void ABioAI_Inactive::OnSquadSeen(class AActor* oSquad)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnSquadSeen");

	ABioAI_Inactive_OnSquadSeen_Params params;
	params.oSquad = oSquad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnActionComplete_Movement
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oTarget                        (Parm)
// struct FVector                 vLocation                      (Parm)

void ABioAI_Inactive::OnActionComplete_Movement(const struct FName& nmAction, int nReason, class AActor* oTarget, const struct FVector& vLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnActionComplete_Movement");

	ABioAI_Inactive_OnActionComplete_Movement_Params params;
	params.nmAction = nmAction;
	params.nReason = nReason;
	params.oTarget = oTarget;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnActionComplete_Combat
// (Defined, Event, Public)
// Parameters:
// struct FName                   nmAction                       (Parm)
// struct FName                   nmTechnique                    (Parm)
// int                            nReason                        (Parm)
// class AActor*                  oLastTarget                    (Parm)

void ABioAI_Inactive::OnActionComplete_Combat(const struct FName& nmAction, const struct FName& nmTechnique, int nReason, class AActor* oLastTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnActionComplete_Combat");

	ABioAI_Inactive_OnActionComplete_Combat_Params params;
	params.nmAction = nmAction;
	params.nmTechnique = nmTechnique;
	params.nReason = nReason;
	params.oLastTarget = oLastTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Inactive::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnDamaged");

	ABioAI_Inactive_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnCastAt
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmPower                        (Parm)

void ABioAI_Inactive::OnCastAt(class APawn* oAttacker, const struct FName& nmPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnCastAt");

	ABioAI_Inactive_OnCastAt_Params params;
	params.oAttacker = oAttacker;
	params.nmPower = nmPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnAttacked
// (Defined, Event, Public)
// Parameters:
// class APawn*                   oAttacker                      (Parm)
// struct FName                   nmWeapon                       (Parm)

void ABioAI_Inactive::OnAttacked(class APawn* oAttacker, const struct FName& nmWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnAttacked");

	ABioAI_Inactive_OnAttacked_Params params;
	params.oAttacker = oAttacker;
	params.nmWeapon = nmWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnAbilityDisabled
// (Defined, Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioAI_Inactive::OnAbilityDisabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnAbilityDisabled");

	ABioAI_Inactive_OnAbilityDisabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnAbilityEnabled
// (Defined, Event, Public)
// Parameters:
// int                            nEnableType                    (Parm)
// struct FName                   nmSubType                      (Parm)

void ABioAI_Inactive::OnAbilityEnabled(int nEnableType, const struct FName& nmSubType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnAbilityEnabled");

	ABioAI_Inactive_OnAbilityEnabled_Params params;
	params.nEnableType = nEnableType;
	params.nmSubType = nmSubType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnNoCombatAction
// (Defined, Event, Public)

void ABioAI_Inactive::OnNoCombatAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnNoCombatAction");

	ABioAI_Inactive_OnNoCombatAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Inactive.OnDeath
// (Defined, Event, Public)
// Parameters:
// class AController*             oKiller                        (Parm)

void ABioAI_Inactive::OnDeath(class AController* oKiller)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Inactive.OnDeath");

	ABioAI_Inactive_OnDeath_Params params;
	params.oKiller = oKiller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Krogan.OnLastManStanding
// (Defined, Event, Public)

void ABioAI_Krogan::OnLastManStanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Krogan.OnLastManStanding");

	ABioAI_Krogan_OnLastManStanding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Krogan.OnProximityAlarm
// (Defined, Event, Public)
// Parameters:
// class AActor*                  oTarget                        (Parm)
// int                            nRelationship                  (Parm)

void ABioAI_Krogan::OnProximityAlarm(class AActor* oTarget, int nRelationship)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Krogan.OnProximityAlarm");

	ABioAI_Krogan_OnProximityAlarm_Params params;
	params.oTarget = oTarget;
	params.nRelationship = nRelationship;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Krogan.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Krogan::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Krogan.OnDamaged");

	ABioAI_Krogan_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Krogan.Initialize
// (Defined, Public)

void ABioAI_Krogan::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Krogan.Initialize");

	ABioAI_Krogan_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Krogan.Charge
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)

void ABioAI_Krogan::Charge(class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Krogan.Charge");

	ABioAI_Krogan_Charge_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Mercenary.EvaluateMovement
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           bLOS                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Mercenary::EvaluateMovement(class APawn* oTarget, bool bLOS)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Mercenary.EvaluateMovement");

	ABioAI_Mercenary_EvaluateMovement_Params params;
	params.oTarget = oTarget;
	params.bLOS = bLOS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Mercenary.Initialize
// (Defined, Public)

void ABioAI_Mercenary::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Mercenary.Initialize");

	ABioAI_Mercenary_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Rachnii.OnLastManStanding
// (Defined, Event, Public)

void ABioAI_Rachnii::OnLastManStanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Rachnii.OnLastManStanding");

	ABioAI_Rachnii_OnLastManStanding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Rachnii.OnDamaged
// (Defined, Event, Public)
// Parameters:
// class AController*             oInstigator                    (Parm)
// float                          fDamage                        (Parm)

void ABioAI_Rachnii::OnDamaged(class AController* oInstigator, float fDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Rachnii.OnDamaged");

	ABioAI_Rachnii_OnDamaged_Params params;
	params.oInstigator = oInstigator;
	params.fDamage = fDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Rachnii.Initialize
// (Public)

void ABioAI_Rachnii::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Rachnii.Initialize");

	ABioAI_Rachnii_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_Rachnii.Charge
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)

void ABioAI_Rachnii::Charge(class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Rachnii.Charge");

	ABioAI_Rachnii_Charge_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAI_RepairDrone.EvaluateTargets
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_RepairDrone::EvaluateTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_RepairDrone.EvaluateTargets");

	ABioAI_RepairDrone_EvaluateTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAI_Sniper.EvaluateAttackCapabilities
// (Defined, Public)
// Parameters:
// class APawn*                   oTarget                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioAI_Sniper::EvaluateAttackCapabilities(class APawn* oTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAI_Sniper.EvaluateAttackCapabilities");

	ABioAI_Sniper_EvaluateAttackCapabilities_Params params;
	params.oTarget = oTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioAreaTransition.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioAreaTransition::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAreaTransition.Touch");

	ABioAreaTransition_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInterfaceAppearanceSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioInterfaceAppearanceSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterfaceAppearanceSaveObject.LoadObject");

	UBioInterfaceAppearanceSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInterfaceAppearanceSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioInterfaceAppearanceSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInterfaceAppearanceSaveObject.SaveObject");

	UBioInterfaceAppearanceSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStickyGrenadeInterfaceMesh.ComputePosition
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UBioStickyGrenadeInterfaceMesh::ComputePosition(class ABioGrenadeProjectileFrisbee* Projectile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterfaceMesh.ComputePosition");

	UBioStickyGrenadeInterfaceMesh_ComputePosition_Params params;
	params.Projectile = Projectile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioStickyGrenadeInterfaceMesh.Detach
// (Defined, Public)
// Parameters:
// class UBioActorBehavior*       oOwnerBehavior                 (Parm)
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)

void UBioStickyGrenadeInterfaceMesh::Detach(class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterfaceMesh.Detach");

	UBioStickyGrenadeInterfaceMesh_Detach_Params params;
	params.oOwnerBehavior = oOwnerBehavior;
	params.Projectile = Projectile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioStickyGrenadeInterfaceMesh.Attach
// (Defined, Public)
// Parameters:
// class ABioGrenadeProjectileFrisbee* Projectile                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioStickyGrenadeInterfaceMesh::Attach(class ABioGrenadeProjectileFrisbee* Projectile, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioStickyGrenadeInterfaceMesh.Attach");

	UBioStickyGrenadeInterfaceMesh_Attach_Params params;
	params.Projectile = Projectile;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqEvt_TakeDamage.HandleDamage
// (Final, Defined, Public)
// Parameters:
// class AActor*                  InOriginator                   (Parm)
// class AActor*                  InInstigator                   (Parm)
// class UClass*                  inDamageType                   (Parm)
// float                          inAmount                       (Parm)
// float                          inMitigatedAmount              (Parm)

void UBioSeqEvt_TakeDamage::HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, float inAmount, float inMitigatedAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqEvt_TakeDamage.HandleDamage");

	UBioSeqEvt_TakeDamage_HandleDamage_Params params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.inDamageType = inDamageType;
	params.inAmount = inAmount;
	params.inMitigatedAmount = inMitigatedAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqEvt_TakeDamage.IsValidDamageType
// (Final, Defined, Public)
// Parameters:
// class UClass*                  inDamageType                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqEvt_TakeDamage::IsValidDamageType(class UClass* inDamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqEvt_TakeDamage.IsValidDamageType");

	UBioSeqEvt_TakeDamage_IsValidDamageType_Params params;
	params.inDamageType = inDamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioArtPlaceableBehaviorSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioArtPlaceableBehaviorSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehaviorSaveObject.LoadObject");

	UBioArtPlaceableBehaviorSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioArtPlaceableBehaviorSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioArtPlaceableBehaviorSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioArtPlaceableBehaviorSaveObject.SaveObject");

	UBioArtPlaceableBehaviorSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioRoomTrigger.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioAudioRoomTrigger::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioRoomTrigger.UnTouch");

	ABioAudioRoomTrigger_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioRoomTrigger.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioAudioRoomTrigger::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioRoomTrigger.Touch");

	ABioAudioRoomTrigger_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioRoomTrigger.PostBeginPlay
// (Defined, Public)

void ABioAudioRoomTrigger::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioRoomTrigger.PostBeginPlay");

	ABioAudioRoomTrigger_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioVolumeTimer.Timer
// (Defined, Public)

void ABioAudioVolumeTimer::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioVolumeTimer.Timer");

	ABioAudioVolumeTimer_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioAudioVolumeTimer.PostBeginPlay
// (Defined, Public)

void ABioAudioVolumeTimer::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioAudioVolumeTimer.PostBeginPlay");

	ABioAudioVolumeTimer_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquadSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioBaseSquadSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquadSaveObject.LoadObject");

	UBioBaseSquadSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioBaseSquadSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioBaseSquadSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioBaseSquadSaveObject.SaveObject");

	UBioBaseSquadSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehaviorSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioEpicPawnBehaviorSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehaviorSaveObject.LoadObject");

	UBioEpicPawnBehaviorSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioEpicPawnBehaviorSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioEpicPawnBehaviorSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioEpicPawnBehaviorSaveObject.SaveObject");

	UBioEpicPawnBehaviorSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehaviorSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioPawnBehaviorSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehaviorSaveObject.LoadObject");

	UBioPawnBehaviorSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnBehaviorSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioPawnBehaviorSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnBehaviorSaveObject.SaveObject");

	UBioPawnBehaviorSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioDEBUG_PawnFiringController.ShootTarget
// (Defined, Public)
// Parameters:
// class ABioPawn*                SHTR                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioDEBUG_PawnFiringController::ShootTarget(class ABioPawn* SHTR)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUG_PawnFiringController.ShootTarget");

	ABioDEBUG_PawnFiringController_ShootTarget_Params params;
	params.SHTR = SHTR;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioDEBUG_PawnFiringController.HowManyShooting
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ABioDEBUG_PawnFiringController::HowManyShooting()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioDEBUG_PawnFiringController.HowManyShooting");

	ABioDEBUG_PawnFiringController_HowManyShooting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioOp.EvaluateInt
// (Defined, Static, Public, HasOutParms)
// Parameters:
// int                            nA                             (Parm, OutParm)
// TEnumAsByte<EBioOp>            eOp                            (Parm)
// int                            nB                             (Parm)
// bool                           bInvertOp                      (Parm)
// int                            nU                             (Parm)

void UBioOp::STATIC_EvaluateInt(TEnumAsByte<EBioOp> eOp, int nB, bool bInvertOp, int nU, int* nA)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioOp.EvaluateInt");

	UBioOp_EvaluateInt_Params params;
	params.eOp = eOp;
	params.nB = nB;
	params.bInvertOp = bInvertOp;
	params.nU = nU;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nA != nullptr)
		*nA = params.nA;
}


// Function BIOC_Base.BioOp.EvaluateFloat
// (Defined, Static, Public, HasOutParms)
// Parameters:
// float                          fA                             (Parm, OutParm)
// TEnumAsByte<EBioOp>            eOp                            (Parm)
// float                          fB                             (Parm, OutParm)
// bool                           bInvertOp                      (Parm)
// float                          fU                             (OptionalParm, Parm)

void UBioOp::STATIC_EvaluateFloat(TEnumAsByte<EBioOp> eOp, bool bInvertOp, float fU, float* fA, float* fB)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioOp.EvaluateFloat");

	UBioOp_EvaluateFloat_Params params;
	params.eOp = eOp;
	params.bInvertOp = bInvertOp;
	params.fU = fU;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fA != nullptr)
		*fA = params.fA;
	if (fB != nullptr)
		*fB = params.fB;
}


// Function BIOC_Base.BioConsequenceFunctions.GrantBonusTalents
// (Defined, Static, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)
// int                            bonusIdentifier                (Parm)

void UBioConsequenceFunctions::STATIC_GrantBonusTalents(class ABioWorldInfo* WorldInfo, int bonusIdentifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConsequenceFunctions.GrantBonusTalents");

	UBioConsequenceFunctions_GrantBonusTalents_Params params;
	params.WorldInfo = WorldInfo;
	params.bonusIdentifier = bonusIdentifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConsequenceFunctions.GrantCredits
// (Defined, Static, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)
// int                            Count                          (Parm)

void UBioConsequenceFunctions::STATIC_GrantCredits(class ABioWorldInfo* WorldInfo, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConsequenceFunctions.GrantCredits");

	UBioConsequenceFunctions_GrantCredits_Params params;
	params.WorldInfo = WorldInfo;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConsequenceFunctions.GrantMediGel
// (Defined, Static, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)
// int                            Count                          (Parm)

void UBioConsequenceFunctions::STATIC_GrantMediGel(class ABioWorldInfo* WorldInfo, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConsequenceFunctions.GrantMediGel");

	UBioConsequenceFunctions_GrantMediGel_Params params;
	params.WorldInfo = WorldInfo;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConsequenceFunctions.GrantSalvage
// (Defined, Static, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)
// int                            Count                          (Parm)

void UBioConsequenceFunctions::STATIC_GrantSalvage(class ABioWorldInfo* WorldInfo, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConsequenceFunctions.GrantSalvage");

	UBioConsequenceFunctions_GrantSalvage_Params params;
	params.WorldInfo = WorldInfo;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConsequenceFunctions.GrantGrenades
// (Defined, Static, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)
// int                            Count                          (Parm)

void UBioConsequenceFunctions::STATIC_GrantGrenades(class ABioWorldInfo* WorldInfo, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConsequenceFunctions.GrantGrenades");

	UBioConsequenceFunctions_GrantGrenades_Params params;
	params.WorldInfo = WorldInfo;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioConsequenceFunctions.GrantScaledXP
// (Defined, Static, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)
// int                            curve                          (Parm)

void UBioConsequenceFunctions::STATIC_GrantScaledXP(class ABioWorldInfo* WorldInfo, int curve)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioConsequenceFunctions.GrantScaledXP");

	UBioConsequenceFunctions_GrantScaledXP_Params params;
	params.WorldInfo = WorldInfo;
	params.curve = curve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameInfo.RestartPlayer
// (Defined, Public)
// Parameters:
// class AController*             NewPlayer                      (Parm)

void ABioGameInfo::RestartPlayer(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameInfo.RestartPlayer");

	ABioGameInfo_RestartPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameInfo.SetBioGameSpeed
// (Defined, Public)
// Parameters:
// float                          T                              (Parm)

void ABioGameInfo::SetBioGameSpeed(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameInfo.SetBioGameSpeed");

	ABioGameInfo_SetBioGameSpeed_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameInfo.PostLogin
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       NewPlayer                      (Parm)

void ABioGameInfo::PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameInfo.PostLogin");

	ABioGameInfo_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioGameInfo.BioBeginPlay
// (Defined, Public)

void ABioGameInfo::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioGameInfo.BioBeginPlay");

	ABioGameInfo_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorMode.NextOption
// (Defined, Public)

void UBioSpectatorMode::NextOption()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.NextOption");

	UBioSpectatorMode_NextOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorMode.PrevOption
// (Defined, Public)

void UBioSpectatorMode::PrevOption()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.PrevOption");

	UBioSpectatorMode_PrevOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorMode.GetBelowOptionText
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSpectatorMode::GetBelowOptionText(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.GetBelowOptionText");

	UBioSpectatorMode_GetBelowOptionText_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSpectatorMode.GetSelectedOptionText
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSpectatorMode::GetSelectedOptionText(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.GetSelectedOptionText");

	UBioSpectatorMode_GetSelectedOptionText_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSpectatorMode.GetAboveOptionText
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSpectatorMode::GetAboveOptionText(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.GetAboveOptionText");

	UBioSpectatorMode_GetAboveOptionText_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSpectatorMode.DeactivateOption
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorMode::DeactivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.DeactivateOption");

	UBioSpectatorMode_DeactivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorMode.ActivateOption
// (Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorMode::ActivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.ActivateOption");

	UBioSpectatorMode_ActivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorMode.InitializeOptions
// (Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorMode::InitializeOptions(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorMode.InitializeOptions");

	UBioSpectatorMode_InitializeOptions_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectator.NextMode
// (Defined, Public)

void UBioSpectator::NextMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectator.NextMode");

	UBioSpectator_NextMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectator.PrevMode
// (Defined, Public)

void UBioSpectator::PrevMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectator.PrevMode");

	UBioSpectator_PrevMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectator.InitializeModes
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectator::InitializeModes(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectator.InitializeModes");

	UBioSpectator_InitializeModes_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInGamePropertyEditor.filterString
// (Defined, Public)
// Parameters:
// struct FString                 Input                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioInGamePropertyEditor::filterString(const struct FString& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.filterString");

	UBioInGamePropertyEditor_filterString_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.DrawToHUD
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioHUD*                 oHud                           (Parm)

void UBioInGamePropertyEditor::DrawToHUD(class ABioHUD* oHud)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.DrawToHUD");

	UBioInGamePropertyEditor_DrawToHUD_Params params;
	params.oHud = oHud;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInGamePropertyEditor.DrawBones
// (Native, Public)
// Parameters:
// class ABioHUD*                 oHud                           (Parm)

void UBioInGamePropertyEditor::DrawBones(class ABioHUD* oHud)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.DrawBones");

	UBioInGamePropertyEditor_DrawBones_Params params;
	params.oHud = oHud;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformRightShoulderAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformRightShoulderAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformRightShoulderAction");

	UBioInGamePropertyEditor_PerformRightShoulderAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformLeftShoulderAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformLeftShoulderAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformLeftShoulderAction");

	UBioInGamePropertyEditor_PerformLeftShoulderAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformRightTriggerAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformRightTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformRightTriggerAction");

	UBioInGamePropertyEditor_PerformRightTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformLeftTriggerAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformLeftTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformLeftTriggerAction");

	UBioInGamePropertyEditor_PerformLeftTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.ActivateMainMenu
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::ActivateMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.ActivateMainMenu");

	UBioInGamePropertyEditor_ActivateMainMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformLeftAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformLeftAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformLeftAction");

	UBioInGamePropertyEditor_PerformLeftAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformRightAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformRightAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformRightAction");

	UBioInGamePropertyEditor_PerformRightAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformDownAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformDownAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformDownAction");

	UBioInGamePropertyEditor_PerformDownAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformUpAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformUpAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformUpAction");

	UBioInGamePropertyEditor_PerformUpAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformDeactivateAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformDeactivateAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformDeactivateAction");

	UBioInGamePropertyEditor_PerformDeactivateAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.PerformActivateAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::PerformActivateAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.PerformActivateAction");

	UBioInGamePropertyEditor_PerformActivateAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.CreateNodeTestData
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::CreateNodeTestData()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.CreateNodeTestData");

	UBioInGamePropertyEditor_CreateNodeTestData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.WriteTreeDataToHUD
// (Native, Public)
// Parameters:
// class ABioHUD*                 oHud                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::WriteTreeDataToHUD(class ABioHUD* oHud)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.WriteTreeDataToHUD");

	UBioInGamePropertyEditor_WriteTreeDataToHUD_Params params;
	params.oHud = oHud;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.UpdateSystem
// (Native, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::UpdateSystem(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.UpdateSystem");

	UBioInGamePropertyEditor_UpdateSystem_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.DeactivateSystem
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::DeactivateSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.DeactivateSystem");

	UBioInGamePropertyEditor_DeactivateSystem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.ActivateSystem
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::ActivateSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.ActivateSystem");

	UBioInGamePropertyEditor_ActivateSystem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioInGamePropertyEditor.Initialize
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioInGamePropertyEditor::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioInGamePropertyEditor.Initialize");

	UBioInGamePropertyEditor_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.getTop
// (Native, Public)
// Parameters:
// class UBioInGamePropertyEditor* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioInGamePropertyEditor* UBioPropertyEditorBaseNode::getTop()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.getTop");

	UBioPropertyEditorBaseNode_getTop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.getDisplayText
// (Native, Public)
// Parameters:
// bool                           selectable                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioPropertyEditorBaseNode::getDisplayText(bool selectable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.getDisplayText");

	UBioPropertyEditorBaseNode_getDisplayText_Params params;
	params.selectable = selectable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.getColour
// (Native, Public)
// Parameters:
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor UBioPropertyEditorBaseNode::getColour()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.getColour");

	UBioPropertyEditorBaseNode_getColour_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.setColour
// (Native, Public)
// Parameters:
// struct FColor                  Col                            (Parm)

void UBioPropertyEditorBaseNode::setColour(const struct FColor& Col)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.setColour");

	UBioPropertyEditorBaseNode_setColour_Params params;
	params.Col = Col;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.RightShoulderAction
// (Native, Public)

void UBioPropertyEditorBaseNode::RightShoulderAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.RightShoulderAction");

	UBioPropertyEditorBaseNode_RightShoulderAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.LeftShoulderAction
// (Native, Public)

void UBioPropertyEditorBaseNode::LeftShoulderAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.LeftShoulderAction");

	UBioPropertyEditorBaseNode_LeftShoulderAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.RightTriggerAction
// (Native, Public)

void UBioPropertyEditorBaseNode::RightTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.RightTriggerAction");

	UBioPropertyEditorBaseNode_RightTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.LeftTriggerAction
// (Native, Public)

void UBioPropertyEditorBaseNode::LeftTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.LeftTriggerAction");

	UBioPropertyEditorBaseNode_LeftTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.DecrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorBaseNode::DecrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.DecrementCurrentSelection");

	UBioPropertyEditorBaseNode_DecrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.IncrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorBaseNode::IncrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.IncrementCurrentSelection");

	UBioPropertyEditorBaseNode_IncrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.GetSelectablesParent
// (Native, Public)
// Parameters:
// class UBioPropertyEditorBaseNode* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioPropertyEditorBaseNode* UBioPropertyEditorBaseNode::GetSelectablesParent()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.GetSelectablesParent");

	UBioPropertyEditorBaseNode_GetSelectablesParent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.GetSelectedChildOnStackTop
// (Native, Public)
// Parameters:
// class UBioPropertyEditorBaseNode* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioPropertyEditorBaseNode* UBioPropertyEditorBaseNode::GetSelectedChildOnStackTop()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.GetSelectedChildOnStackTop");

	UBioPropertyEditorBaseNode_GetSelectedChildOnStackTop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.GetSelectedChild
// (Native, Public)
// Parameters:
// class UBioPropertyEditorBaseNode* ReturnValue                    (Parm, OutParm, ReturnParm)

class UBioPropertyEditorBaseNode* UBioPropertyEditorBaseNode::GetSelectedChild()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.GetSelectedChild");

	UBioPropertyEditorBaseNode_GetSelectedChild_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBaseNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorBaseNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBaseNode.SelectionAction");

	UBioPropertyEditorBaseNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioMaterialOverrideSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioMaterialOverrideSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMaterialOverrideSaveObject.LoadObject");

	UBioMaterialOverrideSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMaterialOverrideSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioMaterialOverrideSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMaterialOverrideSaveObject.SaveObject");

	UBioMaterialOverrideSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioItemSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemSaveObject.SaveObject");

	UBioItemSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdableSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioItemXModdableSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdableSaveObject.LoadObject");

	UBioItemXModdableSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioItemXModdableSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioItemXModdableSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioItemXModdableSaveObject.SaveObject");

	UBioItemXModdableSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioMorphFaceSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceSaveObject.LoadObject");

	UBioMorphFaceSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioMorphFaceSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioMorphFaceSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioMorphFaceSaveObject.SaveObject");

	UBioMorphFaceSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 pObject                        (Parm)

void UBioPawnSaveObject::LoadObject(class UObject* pObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSaveObject.LoadObject");

	UBioPawnSaveObject_LoadObject_Params params;
	params.pObject = pObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPawnSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 pObject                        (Parm)

void UBioPawnSaveObject::SaveObject(class UObject* pObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPawnSaveObject.SaveObject");

	UBioPawnSaveObject_SaveObject_Params params;
	params.pObject = pObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerVehicleSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioPlayerVehicleSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerVehicleSaveObject.LoadObject");

	UBioPlayerVehicleSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPlayerVehicleSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioPlayerVehicleSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPlayerVehicleSaveObject.SaveObject");

	UBioPlayerVehicleSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorPropertyNode.DecrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorPropertyNode::DecrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorPropertyNode.DecrementCurrentSelection");

	UBioPropertyEditorPropertyNode_DecrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorPropertyNode.IncrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorPropertyNode::IncrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorPropertyNode.IncrementCurrentSelection");

	UBioPropertyEditorPropertyNode_IncrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorPropertyNode.RightTriggerAction
// (Native, Public)

void UBioPropertyEditorPropertyNode::RightTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorPropertyNode.RightTriggerAction");

	UBioPropertyEditorPropertyNode_RightTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorPropertyNode.LeftTriggerAction
// (Native, Public)

void UBioPropertyEditorPropertyNode::LeftTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorPropertyNode.LeftTriggerAction");

	UBioPropertyEditorPropertyNode_LeftTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorPropertyNode.getDisplayText
// (Native, Public)
// Parameters:
// bool                           selectable                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioPropertyEditorPropertyNode::getDisplayText(bool selectable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorPropertyNode.getDisplayText");

	UBioPropertyEditorPropertyNode_getDisplayText_Params params;
	params.selectable = selectable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorPropertyNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorPropertyNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorPropertyNode.SelectionAction");

	UBioPropertyEditorPropertyNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorArrayNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorArrayNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorArrayNode.SelectionAction");

	UBioPropertyEditorArrayNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorBoneNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorBoneNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorBoneNode.SelectionAction");

	UBioPropertyEditorBoneNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorEditableNode.AcceptNewValue
// (Native, Public)

void UBioPropertyEditorEditableNode::AcceptNewValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditableNode.AcceptNewValue");

	UBioPropertyEditorEditableNode_AcceptNewValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorEditableNode.DoChange
// (Native, Public)
// Parameters:
// float                          Delta                          (Parm)

void UBioPropertyEditorEditableNode::DoChange(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditableNode.DoChange");

	UBioPropertyEditorEditableNode_DoChange_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorEditableNode.RightTriggerAction
// (Native, Public)

void UBioPropertyEditorEditableNode::RightTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditableNode.RightTriggerAction");

	UBioPropertyEditorEditableNode_RightTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorEditableNode.LeftTriggerAction
// (Native, Public)

void UBioPropertyEditorEditableNode::LeftTriggerAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditableNode.LeftTriggerAction");

	UBioPropertyEditorEditableNode_LeftTriggerAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorEditableNode.DecrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorEditableNode::DecrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditableNode.DecrementCurrentSelection");

	UBioPropertyEditorEditableNode_DecrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorEditableNode.IncrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorEditableNode::IncrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditableNode.IncrementCurrentSelection");

	UBioPropertyEditorEditableNode_IncrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorEditableNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorEditableNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditableNode.SelectionAction");

	UBioPropertyEditorEditableNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorEditNode.getDisplayText
// (Native, Public)
// Parameters:
// bool                           selectable                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioPropertyEditorEditNode::getDisplayText(bool selectable)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditNode.getDisplayText");

	UBioPropertyEditorEditNode_getDisplayText_Params params;
	params.selectable = selectable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorEditNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorEditNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorEditNode.SelectionAction");

	UBioPropertyEditorEditNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorLevelNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorLevelNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorLevelNode.SelectionAction");

	UBioPropertyEditorLevelNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorLoadNode.DecrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorLoadNode::DecrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorLoadNode.DecrementCurrentSelection");

	UBioPropertyEditorLoadNode_DecrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorLoadNode.IncrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorLoadNode::IncrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorLoadNode.IncrementCurrentSelection");

	UBioPropertyEditorLoadNode_IncrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorLoadNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorLoadNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorLoadNode.SelectionAction");

	UBioPropertyEditorLoadNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorReadOnlyNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorReadOnlyNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorReadOnlyNode.SelectionAction");

	UBioPropertyEditorReadOnlyNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorSaveNode.DecrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorSaveNode::DecrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorSaveNode.DecrementCurrentSelection");

	UBioPropertyEditorSaveNode_DecrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorSaveNode.IncrementCurrentSelection
// (Native, Public)

void UBioPropertyEditorSaveNode::IncrementCurrentSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorSaveNode.IncrementCurrentSelection");

	UBioPropertyEditorSaveNode_IncrementCurrentSelection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioPropertyEditorSaveNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorSaveNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorSaveNode.SelectionAction");

	UBioPropertyEditorSaveNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioPropertyEditorVolatileNode.SelectionAction
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioPropertyEditorVolatileNode::SelectionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioPropertyEditorVolatileNode.SelectionAction");

	UBioPropertyEditorVolatileNode_SelectionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioVehicleBehaviorSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioVehicleBehaviorSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorSaveObject.LoadObject");

	UBioVehicleBehaviorSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioVehicleBehaviorSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioVehicleBehaviorSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioVehicleBehaviorSaveObject.SaveObject");

	UBioVehicleBehaviorSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveTriggerVolume.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioSaveTriggerVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveTriggerVolume.UnTouch");

	ABioSaveTriggerVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSaveTriggerVolume.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioSaveTriggerVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSaveTriggerVolume.Touch");

	ABioSaveTriggerVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AddSquadToPerception.Activated
// (Defined, Public)

void UBioSeqAct_AddSquadToPerception::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AddSquadToPerception.Activated");

	UBioSeqAct_AddSquadToPerception_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AddToParty.Activated
// (Defined, Public)

void UBioSeqAct_AddToParty::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AddToParty.Activated");

	UBioSeqAct_AddToParty_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AdjustStability.Activated
// (Defined, Public)

void UBioSeqAct_AdjustStability::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AdjustStability.Activated");

	UBioSeqAct_AdjustStability_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AreaTransition.Activated
// (Defined, Event, Public)

void UBioSeqAct_AreaTransition::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AreaTransition.Activated");

	UBioSeqAct_AreaTransition_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ArmorTest.Activated
// (Defined, Public)

void UBioSeqAct_ArmorTest::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ArmorTest.Activated");

	UBioSeqAct_ArmorTest_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AttachCrustEffect.Activated
// (Defined, Public)

void UBioSeqAct_AttachCrustEffect::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AttachCrustEffect.Activated");

	UBioSeqAct_AttachCrustEffect_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AttachVFX.Activated
// (Defined, Public)

void UBioSeqAct_AttachVFX::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AttachVFX.Activated");

	UBioSeqAct_AttachVFX_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AttachVisualEffect.Activated
// (Defined, Public)

void UBioSeqAct_AttachVisualEffect::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AttachVisualEffect.Activated");

	UBioSeqAct_AttachVisualEffect_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AutoSave.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_AutoSave::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AutoSave.UpdateOp");

	UBioSeqAct_AutoSave_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_AutoSave.Activated
// (Defined, Public)

void UBioSeqAct_AutoSave::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AutoSave.Activated");

	UBioSeqAct_AutoSave_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_AwardAchievement.Activated
// (Defined, Event, Public)

void UBioSeqAct_AwardAchievement::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_AwardAchievement.Activated");

	UBioSeqAct_AwardAchievement_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_BioToggleCinematicMode.Activated
// (Defined, Public)

void UBioSeqAct_BioToggleCinematicMode::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_BioToggleCinematicMode.Activated");

	UBioSeqAct_BioToggleCinematicMode_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_BlackScreen.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_BlackScreen::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_BlackScreen.UpdateOp");

	UBioSeqAct_BlackScreen_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_BlackScreen.Activated
// (Defined, Event, Public)

void UBioSeqAct_BlackScreen::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_BlackScreen.Activated");

	UBioSeqAct_BlackScreen_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_BreakFromCover.Activated
// (Defined, Public)

void UBioSeqAct_BreakFromCover::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_BreakFromCover.Activated");

	UBioSeqAct_BreakFromCover_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_CancelTutorial.Activated
// (Defined, Public)

void UBioSeqAct_CancelTutorial::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_CancelTutorial.Activated");

	UBioSeqAct_CancelTutorial_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_CauseDamage.Activated
// (Defined, Public, HasDefaults)

void UBioSeqAct_CauseDamage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_CauseDamage.Activated");

	UBioSeqAct_CauseDamage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ChangeAI.Activated
// (Defined, Event, Public)

void UBioSeqAct_ChangeAI::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ChangeAI.Activated");

	UBioSeqAct_ChangeAI_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ClearAllActions.Activated
// (Defined, Event, Public)

void UBioSeqAct_ClearAllActions::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ClearAllActions.Activated");

	UBioSeqAct_ClearAllActions_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ClearNewCharacterEffects.Activated
// (Defined, Event, Public)

void UBioSeqAct_ClearNewCharacterEffects::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ClearNewCharacterEffects.Activated");

	UBioSeqAct_ClearNewCharacterEffects_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ClearSavedMap.Activated
// (Defined, Public)

void UBioSeqAct_ClearSavedMap::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ClearSavedMap.Activated");

	UBioSeqAct_ClearSavedMap_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ClearSomeActions_Queue.Activated
// (Defined, Event, Public)

void UBioSeqAct_ClearSomeActions_Queue::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ClearSomeActions_Queue.Activated");

	UBioSeqAct_ClearSomeActions_Queue_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ClearSomeActions_State.Activated
// (Defined, Event, Public)

void UBioSeqAct_ClearSomeActions_State::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ClearSomeActions_State.Activated");

	UBioSeqAct_ClearSomeActions_State_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_Cover_AddCoverFrom.Activated
// (Public)

void UBioSeqAct_Cover_AddCoverFrom::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_Cover_AddCoverFrom.Activated");

	UBioSeqAct_Cover_AddCoverFrom_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_Cover_GetCoveringRank.Activated
// (Public)

void UBioSeqAct_Cover_GetCoveringRank::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_Cover_GetCoveringRank.Activated");

	UBioSeqAct_Cover_GetCoveringRank_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_Cover_RemoveCoverFrom.Activated
// (Public)

void UBioSeqAct_Cover_RemoveCoverFrom::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_Cover_RemoveCoverFrom.Activated");

	UBioSeqAct_Cover_RemoveCoverFrom_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_Cover_SetCoveringRank.Activated
// (Public)

void UBioSeqAct_Cover_SetCoveringRank::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_Cover_SetCoveringRank.Activated");

	UBioSeqAct_Cover_SetCoveringRank_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_Crouch.Activated
// (Defined, Public)

void UBioSeqAct_Crouch::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_Crouch.Activated");

	UBioSeqAct_Crouch_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_CustomizeStageCameras.Activated
// (Defined, Public)

void UBioSeqAct_CustomizeStageCameras::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_CustomizeStageCameras.Activated");

	UBioSeqAct_CustomizeStageCameras_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DoActionInRadius.Activated
// (Defined, Public)

void UBioSeqAct_DoActionInRadius::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DoActionInRadius.Activated");

	UBioSeqAct_DoActionInRadius_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DoActionInVolume.Activated
// (Defined, Public)

void UBioSeqAct_DoActionInVolume::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DoActionInVolume.Activated");

	UBioSeqAct_DoActionInVolume_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUIClear.Activated
// (Defined, Public)

void UBioSeqAct_DUIClear::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUIClear.Activated");

	UBioSeqAct_DUIClear_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUIFlashLaserCenter.Activated
// (Defined, Public)

void UBioSeqAct_DUIFlashLaserCenter::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUIFlashLaserCenter.Activated");

	UBioSeqAct_DUIFlashLaserCenter_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUIIsActive.Activated
// (Defined, Public)

void UBioSeqAct_DUIIsActive::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUIIsActive.Activated");

	UBioSeqAct_DUIIsActive_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetBarFillDirection.Activated
// (Defined, Public)

void UBioSeqAct_DUISetBarFillDirection::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetBarFillDirection.Activated");

	UBioSeqAct_DUISetBarFillDirection_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetBarFillPercent.Activated
// (Defined, Public)

void UBioSeqAct_DUISetBarFillPercent::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetBarFillPercent.Activated");

	UBioSeqAct_DUISetBarFillPercent_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetBarMarkers.Activated
// (Defined, Public)

void UBioSeqAct_DUISetBarMarkers::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetBarMarkers.Activated");

	UBioSeqAct_DUISetBarMarkers_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetCounterValue.Activated
// (Defined, Public)

void UBioSeqAct_DUISetCounterValue::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetCounterValue.Activated");

	UBioSeqAct_DUISetCounterValue_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetElementColor.Activated
// (Defined, Public, HasDefaults)

void UBioSeqAct_DUISetElementColor::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetElementColor.Activated");

	UBioSeqAct_DUISetElementColor_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetElementPulsing.Activated
// (Defined, Public)

void UBioSeqAct_DUISetElementPulsing::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetElementPulsing.Activated");

	UBioSeqAct_DUISetElementPulsing_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetElementVisible.Activated
// (Defined, Public)

void UBioSeqAct_DUISetElementVisible::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetElementVisible.Activated");

	UBioSeqAct_DUISetElementVisible_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetLaserCircle.Activated
// (Defined, Public)

void UBioSeqAct_DUISetLaserCircle::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetLaserCircle.Activated");

	UBioSeqAct_DUISetLaserCircle_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetLaserLayout.Activated
// (Defined, Public)

void UBioSeqAct_DUISetLaserLayout::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetLaserLayout.Activated");

	UBioSeqAct_DUISetLaserLayout_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetQuasarLayout.Activated
// (Defined, Public)

void UBioSeqAct_DUISetQuasarLayout::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetQuasarLayout.Activated");

	UBioSeqAct_DUISetQuasarLayout_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_DUISetTextStringRef.Activated
// (Defined, Public)

void UBioSeqAct_DUISetTextStringRef::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_DUISetTextStringRef.Activated");

	UBioSeqAct_DUISetTextStringRef_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_EndGame.Activated
// (Defined, Public)

void UBioSeqAct_EndGame::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_EndGame.Activated");

	UBioSeqAct_EndGame_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_FactionRelationShip.Activated
// (Defined, Public)

void UBioSeqAct_FactionRelationShip::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_FactionRelationShip.Activated");

	UBioSeqAct_FactionRelationShip_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_FactionRelationShip.GetSquadFrom
// (Defined, Public)
// Parameters:
// class UObject*                 oInObj                         (Parm)
// class ABioBaseSquad*           ReturnValue                    (Parm, OutParm, ReturnParm)

class ABioBaseSquad* UBioSeqAct_FactionRelationShip::GetSquadFrom(class UObject* oInObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_FactionRelationShip.GetSquadFrom");

	UBioSeqAct_FactionRelationShip_GetSquadFrom_Params params;
	params.oInObj = oInObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_FindCover.Activated
// (Defined, Public, HasDefaults)

void UBioSeqAct_FindCover::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_FindCover.Activated");

	UBioSeqAct_FindCover_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ForceResourceLoad.Activated
// (Public)

void UBioSeqAct_ForceResourceLoad::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ForceResourceLoad.Activated");

	UBioSeqAct_ForceResourceLoad_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetClass.Activated
// (Defined, Public)

void UBioSeqAct_GetClass::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetClass.Activated");

	UBioSeqAct_GetClass_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetConnectedObjects.Activated
// (Defined, Public)

void UBioSeqAct_GetConnectedObjects::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetConnectedObjects.Activated");

	UBioSeqAct_GetConnectedObjects_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetEquippedWeapon.Activated
// (Defined, Public)

void UBioSeqAct_GetEquippedWeapon::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetEquippedWeapon.Activated");

	UBioSeqAct_GetEquippedWeapon_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetGamerProfileOption.Activated
// (Defined, Public)

void UBioSeqAct_GetGamerProfileOption::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetGamerProfileOption.Activated");

	UBioSeqAct_GetGamerProfileOption_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetSquad.Activated
// (Defined, Public)

void UBioSeqAct_GetSquad::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetSquad.Activated");

	UBioSeqAct_GetSquad_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetTalentRank.Activated
// (Defined, Public)

void UBioSeqAct_GetTalentRank::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetTalentRank.Activated");

	UBioSeqAct_GetTalentRank_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GetTutorialViewed.Activated
// (Defined, Public)

void UBioSeqAct_GetTutorialViewed::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GetTutorialViewed.Activated");

	UBioSeqAct_GetTutorialViewed_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GrantBonusTalent.Activated
// (Defined, Public)

void UBioSeqAct_GrantBonusTalent::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GrantBonusTalent.Activated");

	UBioSeqAct_GrantBonusTalent_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GrantGenericXP.Activated
// (Defined, Event, Public)

void UBioSeqAct_GrantGenericXP::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GrantGenericXP.Activated");

	UBioSeqAct_GrantGenericXP_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_GrantScaledXP.Activated
// (Defined, Event, Public)

void UBioSeqAct_GrantScaledXP::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_GrantScaledXP.Activated");

	UBioSeqAct_GrantScaledXP_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_HUDDisplayState.Activated
// (Defined, Event, Public)

void UBioSeqAct_HUDDisplayState::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_HUDDisplayState.Activated");

	UBioSeqAct_HUDDisplayState_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_IncreaseTalentMaxRank.Activated
// (Defined, Public)

void UBioSeqAct_IncreaseTalentMaxRank::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_IncreaseTalentMaxRank.Activated");

	UBioSeqAct_IncreaseTalentMaxRank_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_InterruptAmbientConversation.Activated
// (Defined, Public)

void UBioSeqAct_InterruptAmbientConversation::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_InterruptAmbientConversation.Activated");

	UBioSeqAct_InterruptAmbientConversation_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_IsActiveConversation.Activated
// (Defined, Public)

void UBioSeqAct_IsActiveConversation::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_IsActiveConversation.Activated");

	UBioSeqAct_IsActiveConversation_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_IsVehicle.Activated
// (Defined, Public)

void UBioSeqAct_IsVehicle::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_IsVehicle.Activated");

	UBioSeqAct_IsVehicle_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_LootHenchman.Activated
// (Defined, Public)

void UBioSeqAct_LootHenchman::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_LootHenchman.Activated");

	UBioSeqAct_LootHenchman_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_MiniGame.Activated
// (Defined, Public)

void UBioSeqAct_MiniGame::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_MiniGame.Activated");

	UBioSeqAct_MiniGame_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ModifyPropertyHeightfog.Activated
// (Defined, Public)

void UBioSeqAct_ModifyPropertyHeightfog::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ModifyPropertyHeightfog.Activated");

	UBioSeqAct_ModifyPropertyHeightfog_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_MovieXMV.Activated
// (Defined, Public)

void UBioSeqAct_MovieXMV::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_MovieXMV.Activated");

	UBioSeqAct_MovieXMV_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_NearClipPlane.Activated
// (Defined, Public)

void UBioSeqAct_NearClipPlane::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_NearClipPlane.Activated");

	UBioSeqAct_NearClipPlane_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_PopupLootGui.Activated
// (Defined, Event, Public)

void UBioSeqAct_PopupLootGui::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_PopupLootGui.Activated");

	UBioSeqAct_PopupLootGui_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_RestoreAI.Activated
// (Defined, Event, Public)

void UBioSeqAct_RestoreAI::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_RestoreAI.Activated");

	UBioSeqAct_RestoreAI_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ResumeWalking.Activated
// (Defined, Public)

void UBioSeqAct_ResumeWalking::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ResumeWalking.Activated");

	UBioSeqAct_ResumeWalking_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ResurrectHenchman.Activated
// (Defined, Public)

void UBioSeqAct_ResurrectHenchman::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ResurrectHenchman.Activated");

	UBioSeqAct_ResurrectHenchman_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SarenUsePower.Activated
// (Defined, Public)

void UBioSeqAct_SarenUsePower::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SarenUsePower.Activated");

	UBioSeqAct_SarenUsePower_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SaveCharacter.Activated
// (Defined, Public)

void UBioSeqAct_SaveCharacter::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SaveCharacter.Activated");

	UBioSeqAct_SaveCharacter_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetActionState.Activated
// (Defined, Public)

void UBioSeqAct_SetActionState::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetActionState.Activated");

	UBioSeqAct_SetActionState_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetActive.Activated
// (Defined, Public)

void UBioSeqAct_SetActive::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetActive.Activated");

	UBioSeqAct_SetActive_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetBase.Activated
// (Defined, Public)

void UBioSeqAct_SetBase::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetBase.Activated");

	UBioSeqAct_SetBase_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetBusyState.Activated
// (Defined, Public)

void UBioSeqAct_SetBusyState::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetBusyState.Activated");

	UBioSeqAct_SetBusyState_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetCanWalkOffLedges.Activated
// (Defined, Public)

void UBioSeqAct_SetCanWalkOffLedges::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetCanWalkOffLedges.Activated");

	UBioSeqAct_SetCanWalkOffLedges_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetClassification.Activated
// (Defined, Public)

void UBioSeqAct_SetClassification::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetClassification.Activated");

	UBioSeqAct_SetClassification_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetGamerProfileOption.Activated
// (Defined, Public)

void UBioSeqAct_SetGamerProfileOption::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetGamerProfileOption.Activated");

	UBioSeqAct_SetGamerProfileOption_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetInputTrap.Activated
// (Defined, Public)

void UBioSeqAct_SetInputTrap::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetInputTrap.Activated");

	UBioSeqAct_SetInputTrap_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetMaterialParameter.Activated
// (Defined, Public)

void UBioSeqAct_SetMaterialParameter::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetMaterialParameter.Activated");

	UBioSeqAct_SetMaterialParameter_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetMaterialParameter.Set
// (Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// struct FName                   nmMaterialParameter            (Const, Parm)

void UBioSeqAct_SetMaterialParameter::Set(class ABioPawn* pPawn, const struct FName& nmMaterialParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetMaterialParameter.Set");

	UBioSeqAct_SetMaterialParameter_Set_Params params;
	params.pPawn = pPawn;
	params.nmMaterialParameter = nmMaterialParameter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetMaterialParameterColor.Set
// (Defined, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// struct FName                   nmMaterialParameter            (Const, Parm)

void UBioSeqAct_SetMaterialParameterColor::Set(class ABioPawn* pPawn, const struct FName& nmMaterialParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetMaterialParameterColor.Set");

	UBioSeqAct_SetMaterialParameterColor_Set_Params params;
	params.pPawn = pPawn;
	params.nmMaterialParameter = nmMaterialParameter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetMaterialParameterScalar.Set
// (Defined, Public)
// Parameters:
// class ABioPawn*                pPawn                          (Parm)
// struct FName                   nmMaterialParameter            (Const, Parm)

void UBioSeqAct_SetMaterialParameterScalar::Set(class ABioPawn* pPawn, const struct FName& nmMaterialParameter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetMaterialParameterScalar.Set");

	UBioSeqAct_SetMaterialParameterScalar_Set_Params params;
	params.pPawn = pPawn;
	params.nmMaterialParameter = nmMaterialParameter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetOverrideTipText.Activated
// (Defined, Public)

void UBioSeqAct_SetOverrideTipText::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetOverrideTipText.Activated");

	UBioSeqAct_SetOverrideTipText_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetPlayerControlling.Activated
// (Defined, Public)

void UBioSeqAct_SetPlayerControlling::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetPlayerControlling.Activated");

	UBioSeqAct_SetPlayerControlling_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetPowerCooldown.Activated
// (Defined, Public)

void UBioSeqAct_SetPowerCooldown::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetPowerCooldown.Activated");

	UBioSeqAct_SetPowerCooldown_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetRadarDisplay.Activated
// (Defined, Public)

void UBioSeqAct_SetRadarDisplay::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetRadarDisplay.Activated");

	UBioSeqAct_SetRadarDisplay_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetSquadFaction.Activated
// (Defined, Public)

void UBioSeqAct_SetSquadFaction::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetSquadFaction.Activated");

	UBioSeqAct_SetSquadFaction_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetStability.Activated
// (Defined, Public)

void UBioSeqAct_SetStability::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetStability.Activated");

	UBioSeqAct_SetStability_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetStreamAllTextToScaleForm.Activated
// (Defined, Public)

void UBioSeqAct_SetStreamAllTextToScaleForm::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetStreamAllTextToScaleForm.Activated");

	UBioSeqAct_SetStreamAllTextToScaleForm_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTimerList.Tick
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioTimerList::Tick(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTimerList.Tick");

	UBioTimerList_Tick_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTimerList.KillTimer
// (Defined, Public, HasDefaults)
// Parameters:
// struct FString                 i_sTimerName                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTimerList::KillTimer(const struct FString& i_sTimerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTimerList.KillTimer");

	UBioTimerList_KillTimer_Params params;
	params.i_sTimerName = i_sTimerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTimerList.AddTimer
// (Defined, Public, HasDefaults)
// Parameters:
// struct FScriptDelegate         TimerDelegate                  (Parm, NeedCtorLink)
// class UObject*                 Params                         (Parm)
// float                          fTime                          (Parm)
// struct FString                 i_sTimerName                   (OptionalParm, Parm, NeedCtorLink)

void UBioTimerList::AddTimer(const struct FScriptDelegate& TimerDelegate, class UObject* Params, float fTime, const struct FString& i_sTimerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTimerList.AddTimer");

	UBioTimerList_AddTimer_Params params;
	params.TimerDelegate = TimerDelegate;
	params.Params = Params;
	params.fTime = fTime;
	params.i_sTimerName = i_sTimerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTimerList.BioTimerDelegate
// (Public, Delegate)
// Parameters:
// class UObject*                 Params                         (Parm)

void UBioTimerList::BioTimerDelegate(class UObject* Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTimerList.BioTimerDelegate");

	UBioTimerList_BioTimerDelegate_Params params;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SetTutorialViewed.Activated
// (Defined, Public)

void UBioSeqAct_SetTutorialViewed::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SetTutorialViewed.Activated");

	UBioSeqAct_SetTutorialViewed_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShieldGetAttributes.Activated
// (Defined, Public)

void UBioSeqAct_ShieldGetAttributes::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShieldGetAttributes.Activated");

	UBioSeqAct_ShieldGetAttributes_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_IntroText.HandleEvent
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_IntroText::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_IntroText.HandleEvent");

	UBioSFHandler_IntroText_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSeqAct_ShowInventory.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ShowInventory::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowInventory.UpdateOp");

	UBioSeqAct_ShowInventory_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_ShowInventory.Activated
// (Defined, Public)

void UBioSeqAct_ShowInventory::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowInventory.Activated");

	UBioSeqAct_ShowInventory_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowLatentTutorial.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ShowLatentTutorial::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowLatentTutorial.UpdateOp");

	UBioSeqAct_ShowLatentTutorial_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_ShowLatentTutorial.Activated
// (Defined, Public)

void UBioSeqAct_ShowLatentTutorial::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowLatentTutorial.Activated");

	UBioSeqAct_ShowLatentTutorial_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowMessage.MessageBoxUpdate
// (Final, Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// class UBioSFHandler_MessageBox* oMsgBox                        (Parm)

void UBioSeqAct_ShowMessage::MessageBoxUpdate(float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowMessage.MessageBoxUpdate");

	UBioSeqAct_ShowMessage_MessageBoxUpdate_Params params;
	params.fDeltaT = fDeltaT;
	params.oMsgBox = oMsgBox;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowMessage.MessageInputPressed
// (Final, Defined, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSeqAct_ShowMessage::MessageInputPressed(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowMessage.MessageInputPressed");

	UBioSeqAct_ShowMessage_MessageInputPressed_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowMessage.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ShowMessage::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowMessage.UpdateOp");

	UBioSeqAct_ShowMessage_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_ShowMessage.Activated
// (Defined, Public, HasDefaults)

void UBioSeqAct_ShowMessage::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowMessage.Activated");

	UBioSeqAct_ShowMessage_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowMouse.Activated
// (Defined, Public)

void UBioSeqAct_ShowMouse::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowMouse.Activated");

	UBioSeqAct_ShowMouse_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Splash.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_Splash::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Splash.OnPanelRemoved");

	UBioSFHandler_Splash_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Splash.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_Splash::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Splash.OnPanelAdded");

	UBioSFHandler_Splash_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Splash.StartTimeout
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bShowLegal                     (Parm)

void UBioSFHandler_Splash::StartTimeout(bool bShowLegal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Splash.StartTimeout");

	UBioSFHandler_Splash_StartTimeout_Params params;
	params.bShowLegal = bShowLegal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Splash.Update
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_Splash::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Splash.Update");

	UBioSFHandler_Splash_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Splash.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Splash::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Splash.HandleEvent");

	UBioSFHandler_Splash_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_Splash.PressStart
// (Defined, Public)

void UBioSFHandler_Splash::PressStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Splash.PressStart");

	UBioSFHandler_Splash_PressStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Splash.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_Splash::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Splash.HandleInputEvent");

	UBioSFHandler_Splash_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ShowTutorial.UpdateOp
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSeqAct_ShowTutorial::UpdateOp(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowTutorial.UpdateOp");

	UBioSeqAct_ShowTutorial_UpdateOp_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSeqAct_ShowTutorial.Activated
// (Defined, Public)

void UBioSeqAct_ShowTutorial::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ShowTutorial.Activated");

	UBioSeqAct_ShowTutorial_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SquadStopHoldingPosition.Activated
// (Defined, Public)

void UBioSeqAct_SquadStopHoldingPosition::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SquadStopHoldingPosition.Activated");

	UBioSeqAct_SquadStopHoldingPosition_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_SwitchWeighted.Activated
// (Defined, Event, Public)

void UBioSeqAct_SwitchWeighted::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_SwitchWeighted.Activated");

	UBioSeqAct_SwitchWeighted_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_TempLookAt.Activated
// (Defined, Public)

void UBioSeqAct_TempLookAt::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_TempLookAt.Activated");

	UBioSeqAct_TempLookAt_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ToggleCombat.Activated
// (Defined, Public)

void UBioSeqAct_ToggleCombat::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ToggleCombat.Activated");

	UBioSeqAct_ToggleCombat_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_ToggleSave.Activated
// (Defined, Public)

void UBioSeqAct_ToggleSave::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_ToggleSave.Activated");

	UBioSeqAct_ToggleSave_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSeqAct_UpdateTacticianAchievement.Activated
// (Defined, Event, Public)

void UBioSeqAct_UpdateTacticianAchievement::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSeqAct_UpdateTacticianAchievement.Activated");

	UBioSeqAct_UpdateTacticianAchievement_Activated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Achievement.PopulateAchievementItemListEntry
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            nDisplayIndex                  (Parm)

void UBioSFHandler_Achievement::PopulateAchievementItemListEntry(int nDisplayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Achievement.PopulateAchievementItemListEntry");

	UBioSFHandler_Achievement_PopulateAchievementItemListEntry_Params params;
	params.nDisplayIndex = nDisplayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Achievement.PopulateAchievementItemList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Achievement::PopulateAchievementItemList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Achievement.PopulateAchievementItemList");

	UBioSFHandler_Achievement_PopulateAchievementItemList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Achievement.SetGlobalVars
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Achievement::SetGlobalVars()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Achievement.SetGlobalVars");

	UBioSFHandler_Achievement_SetGlobalVars_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Achievement.HandleEvent
// (Defined, Public)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Parm, NeedCtorLink)

void UBioSFHandler_Achievement::HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Achievement.HandleEvent");

	UBioSFHandler_Achievement_HandleEvent_Params params;
	params.nCommand = nCommand;
	params.lstArguments = lstArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BlackScreen.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_BlackScreen::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BlackScreen.OnPanelAdded");

	UBioSFHandler_BlackScreen_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BlackScreen.Hide
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bWithFade                      (Parm)

void UBioSFHandler_BlackScreen::Hide(bool bWithFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BlackScreen.Hide");

	UBioSFHandler_BlackScreen_Hide_Params params;
	params.bWithFade = bWithFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BlackScreen.Show
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bWithFade                      (Parm)

void UBioSFHandler_BlackScreen::Show(bool bWithFade)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BlackScreen.Show");

	UBioSFHandler_BlackScreen_Show_Params params;
	params.bWithFade = bWithFade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_BlackScreen.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_BlackScreen::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_BlackScreen.HandleEvent");

	UBioSFHandler_BlackScreen_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_XMods.OnPanelRemoved
// (Defined, Event, Public)

void UBioSFHandler_XMods::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.OnPanelRemoved");

	UBioSFHandler_XMods_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.ChangeTargetCharacter
// (Final, Defined, Public)

void UBioSFHandler_XMods::ChangeTargetCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.ChangeTargetCharacter");

	UBioSFHandler_XMods_ChangeTargetCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.UpdateResources
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_XMods::UpdateResources()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.UpdateResources");

	UBioSFHandler_XMods_UpdateResources_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.SalvageXModProcessDoubleCheck
// (Defined, Public)
// Parameters:
// bool                           bConfirmedSalvageAttempt       (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_XMods::SalvageXModProcessDoubleCheck(bool bConfirmedSalvageAttempt, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.SalvageXModProcessDoubleCheck");

	UBioSFHandler_XMods_SalvageXModProcessDoubleCheck_Params params;
	params.bConfirmedSalvageAttempt = bConfirmedSalvageAttempt;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.FuseItem
// (Defined, Public)

void UBioSFHandler_XMods::FuseItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.FuseItem");

	UBioSFHandler_XMods_FuseItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.EquipSelectedItem
// (Final, Defined, Public)
// Parameters:
// int                            nItemIndex                     (Parm)
// int                            nSlotIndex                     (Parm)

void UBioSFHandler_XMods::EquipSelectedItem(int nItemIndex, int nSlotIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.EquipSelectedItem");

	UBioSFHandler_XMods_EquipSelectedItem_Params params;
	params.nItemIndex = nItemIndex;
	params.nSlotIndex = nSlotIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateItemListEntry
// (Defined, Public, HasDefaults)
// Parameters:
// int                            nListIndex                     (Parm)

void UBioSFHandler_XMods::PopulateItemListEntry(int nListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateItemListEntry");

	UBioSFHandler_XMods_PopulateItemListEntry_Params params;
	params.nListIndex = nListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateInventoryXModItem
// (Defined, Public)
// Parameters:
// TArray<struct FASParams>       lstParams                      (Parm, NeedCtorLink)

void UBioSFHandler_XMods::PopulateInventoryXModItem(TArray<struct FASParams> lstParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateInventoryXModItem");

	UBioSFHandler_XMods_PopulateInventoryXModItem_Params params;
	params.lstParams = lstParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedSlotAsItemListEntry
// (Defined, Public, HasDefaults)
// Parameters:
// int                            nXModIndex                     (Parm)
// int                            nListIndex                     (Parm)

void UBioSFHandler_XMods::PopulateEquippedSlotAsItemListEntry(int nXModIndex, int nListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedSlotAsItemListEntry");

	UBioSFHandler_XMods_PopulateEquippedSlotAsItemListEntry_Params params;
	params.nXModIndex = nXModIndex;
	params.nListIndex = nListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateItemList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_XMods::PopulateItemList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateItemList");

	UBioSFHandler_XMods_PopulateItemList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItemXModSlotEntry
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            nSlotIndex                     (Parm)

void UBioSFHandler_XMods::PopulateEquippedItemXModSlotEntry(int nSlotIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItemXModSlotEntry");

	UBioSFHandler_XMods_PopulateEquippedItemXModSlotEntry_Params params;
	params.nSlotIndex = nSlotIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItemInherentEntry
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_XMods::PopulateEquippedItemInherentEntry()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItemInherentEntry");

	UBioSFHandler_XMods_PopulateEquippedItemInherentEntry_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItemXModSlots
// (Defined, Public, HasDefaults)

void UBioSFHandler_XMods::PopulateEquippedItemXModSlots()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItemXModSlots");

	UBioSFHandler_XMods_PopulateEquippedItemXModSlots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItem
// (Final, Defined, Public)

void UBioSFHandler_XMods::PopulateEquippedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateEquippedItem");

	UBioSFHandler_XMods_PopulateEquippedItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.PopulateForCharacter
// (Defined, Public)

void UBioSFHandler_XMods::PopulateForCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.PopulateForCharacter");

	UBioSFHandler_XMods_PopulateForCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.ChangeSlotState
// (Final, Defined, Public, HasDefaults)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eDisplaySlot                   (Parm)

void UBioSFHandler_XMods::ChangeSlotState(TEnumAsByte<EGuiEquipSlots> eDisplaySlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.ChangeSlotState");

	UBioSFHandler_XMods_ChangeSlotState_Params params;
	params.eDisplaySlot = eDisplaySlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.SetGlobalVars
// (Final, Defined, Public)

void UBioSFHandler_XMods::SetGlobalVars()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.SetGlobalVars");

	UBioSFHandler_XMods_SetGlobalVars_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_XMods.HandleEvent
// (Defined, Public, HasDefaults)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Parm, NeedCtorLink)

void UBioSFHandler_XMods::HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_XMods.HandleEvent");

	UBioSFHandler_XMods_HandleEvent_Params params;
	params.nCommand = nCommand;
	params.lstArguments = lstArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.GetSquadMemberNames
// (Defined, Public, HasOutParms)

void UBioSFHandler_Inventory::GetSquadMemberNames()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.GetSquadMemberNames");

	UBioSFHandler_Inventory_GetSquadMemberNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_Inventory::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.OnPanelRemoved");

	UBioSFHandler_Inventory_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_Inventory::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.OnPanelAdded");

	UBioSFHandler_Inventory_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.Update3DModel
// (Final, Defined, Public)

void UBioSFHandler_Inventory::Update3DModel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.Update3DModel");

	UBioSFHandler_Inventory_Update3DModel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.Update3DCharacter
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Inventory::Update3DCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.Update3DCharacter");

	UBioSFHandler_Inventory_Update3DCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.UpdateCharDetails
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Inventory::UpdateCharDetails()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.UpdateCharDetails");

	UBioSFHandler_Inventory_UpdateCharDetails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.ChangeTargetCharacter
// (Final, Defined, Public)
// Parameters:
// int                            nTargetMember                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Inventory::ChangeTargetCharacter(int nTargetMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.ChangeTargetCharacter");

	UBioSFHandler_Inventory_ChangeTargetCharacter_Params params;
	params.nTargetMember = nTargetMember;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Inventory.SalvageItemProcessDoubleCheck
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bConfirmedSalvageAttempt       (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Inventory::SalvageItemProcessDoubleCheck(bool bConfirmedSalvageAttempt, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.SalvageItemProcessDoubleCheck");

	UBioSFHandler_Inventory_SalvageItemProcessDoubleCheck_Params params;
	params.bConfirmedSalvageAttempt = bConfirmedSalvageAttempt;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.EquipItemProcessDoubleCheck
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bAcceptedXferOption            (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_Inventory::EquipItemProcessDoubleCheck(bool bAcceptedXferOption, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.EquipItemProcessDoubleCheck");

	UBioSFHandler_Inventory_EquipItemProcessDoubleCheck_Params params;
	params.bAcceptedXferOption = bAcceptedXferOption;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.EquipSelectedItem
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            nItemIndex                     (Parm)
// int                            nXferXMods                     (Parm)

void UBioSFHandler_Inventory::EquipSelectedItem(int nItemIndex, int nXferXMods)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.EquipSelectedItem");

	UBioSFHandler_Inventory_EquipSelectedItem_Params params;
	params.nItemIndex = nItemIndex;
	params.nXferXMods = nXferXMods;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.ProcessModifierList
// (Final, Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FBioInventoryGuiInterfaceItemStats stStatList                     (Parm, NeedCtorLink)
// struct FString                 sMethod                        (Parm, NeedCtorLink)
// int                            nModifierCount                 (Parm, OutParm)

void UBioSFHandler_Inventory::ProcessModifierList(const struct FBioInventoryGuiInterfaceItemStats& stStatList, const struct FString& sMethod, int* nModifierCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.ProcessModifierList");

	UBioSFHandler_Inventory_ProcessModifierList_Params params;
	params.stStatList = stStatList;
	params.sMethod = sMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nModifierCount != nullptr)
		*nModifierCount = params.nModifierCount;
}


// Function BIOC_Base.BioSFHandler_Inventory.PolulateInvItems
// (Defined, Public)
// Parameters:
// TArray<struct FASParams>       lstParams                      (Parm, NeedCtorLink)

void UBioSFHandler_Inventory::PolulateInvItems(TArray<struct FASParams> lstParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.PolulateInvItems");

	UBioSFHandler_Inventory_PolulateInvItems_Params params;
	params.lstParams = lstParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.PopulateItemListEntry
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            nListIndex                     (Parm)

void UBioSFHandler_Inventory::PopulateItemListEntry(int nListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.PopulateItemListEntry");

	UBioSFHandler_Inventory_PopulateItemListEntry_Params params;
	params.nListIndex = nListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.PopulateItemList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Inventory::PopulateItemList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.PopulateItemList");

	UBioSFHandler_Inventory_PopulateItemList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.PopulateEquippedItem
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Inventory::PopulateEquippedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.PopulateEquippedItem");

	UBioSFHandler_Inventory_PopulateEquippedItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.PopulateForCharacter
// (Final, Defined, Public)

void UBioSFHandler_Inventory::PopulateForCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.PopulateForCharacter");

	UBioSFHandler_Inventory_PopulateForCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.UpdateResources
// (Final, Defined, Public, HasDefaults)
// Parameters:
// int                            nRackupTime                    (OptionalParm, Parm)

void UBioSFHandler_Inventory::UpdateResources(int nRackupTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.UpdateResources");

	UBioSFHandler_Inventory_UpdateResources_Params params;
	params.nRackupTime = nRackupTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.UpdateInvSlotIcons
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bDeferUpdateFilterIcons        (OptionalParm, Parm)

void UBioSFHandler_Inventory::UpdateInvSlotIcons(bool bDeferUpdateFilterIcons)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.UpdateInvSlotIcons");

	UBioSFHandler_Inventory_UpdateInvSlotIcons_Params params;
	params.bDeferUpdateFilterIcons = bDeferUpdateFilterIcons;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.ChangeSlotState
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eDisplaySlot                   (Parm)
// bool                           bUpdate3DModel                 (OptionalParm, Parm)
// bool                           bDeferUpdateFilterIcons        (OptionalParm, Parm)

void UBioSFHandler_Inventory::ChangeSlotState(TEnumAsByte<EGuiEquipSlots> eDisplaySlot, bool bUpdate3DModel, bool bDeferUpdateFilterIcons)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.ChangeSlotState");

	UBioSFHandler_Inventory_ChangeSlotState_Params params;
	params.eDisplaySlot = eDisplaySlot;
	params.bUpdate3DModel = bUpdate3DModel;
	params.bDeferUpdateFilterIcons = bDeferUpdateFilterIcons;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.CheckSkipSlot
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EGuiEquipSlots>    eSourceSlot                    (Parm)
// int                            nSkipDirection                 (OptionalParm, Parm)
// TEnumAsByte<EGuiEquipSlots>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EGuiEquipSlots> UBioSFHandler_Inventory::CheckSkipSlot(TEnumAsByte<EGuiEquipSlots> eSourceSlot, int nSkipDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.CheckSkipSlot");

	UBioSFHandler_Inventory_CheckSkipSlot_Params params;
	params.eSourceSlot = eSourceSlot;
	params.nSkipDirection = nSkipDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Inventory.SetGlobalVars
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_Inventory::SetGlobalVars()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.SetGlobalVars");

	UBioSFHandler_Inventory_SetGlobalVars_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.FloatingReinit
// (Final, Defined, Public)

void UBioSFHandler_Inventory::FloatingReinit()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.FloatingReinit");

	UBioSFHandler_Inventory_FloatingReinit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_Inventory::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.Update");

	UBioSFHandler_Inventory_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_Inventory::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.HandleInputEvent");

	UBioSFHandler_Inventory_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Inventory.InitializeInventoryHelper
// (Defined, Public, HasOutParms)
// Parameters:
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Inventory::InitializeInventoryHelper(TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.InitializeInventoryHelper");

	UBioSFHandler_Inventory_InitializeInventoryHelper_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_Inventory.HandleEvent
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Inventory::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Inventory.HandleEvent");

	UBioSFHandler_Inventory_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.GetSquadMemberNames
// (Defined, Public, HasOutParms)

void UBioSFHandler_CharacterRecord::GetSquadMemberNames()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.GetSquadMemberNames");

	UBioSFHandler_CharacterRecord_GetSquadMemberNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.RestoreHeadGear
// (Final, Defined, Private)

void UBioSFHandler_CharacterRecord::RestoreHeadGear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.RestoreHeadGear");

	UBioSFHandler_CharacterRecord_RestoreHeadGear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.HideHeadGear
// (Final, Defined, Private)

void UBioSFHandler_CharacterRecord::HideHeadGear()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.HideHeadGear");

	UBioSFHandler_CharacterRecord_HideHeadGear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.GetExperienceProgress
// (Final, Defined, Private, HasOutParms)
// Parameters:
// int                            currentXP                      (Parm, OutParm)
// int                            targetXP                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_CharacterRecord::GetExperienceProgress(int* currentXP, int* targetXP)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.GetExperienceProgress");

	UBioSFHandler_CharacterRecord_GetExperienceProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (currentXP != nullptr)
		*currentXP = params.currentXP;
	if (targetXP != nullptr)
		*targetXP = params.targetXP;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateTalentPoints
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_CharacterRecord::UpdateTalentPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateTalentPoints");

	UBioSFHandler_CharacterRecord_UpdateTalentPoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateTalentRanks
// (Final, Defined, Private, HasOutParms, HasDefaults)
// Parameters:
// int                            talentIndex                    (Parm)
// struct FBioTalentDynamicData   Data                           (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_CharacterRecord::UpdateTalentRanks(int talentIndex, struct FBioTalentDynamicData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateTalentRanks");

	UBioSFHandler_CharacterRecord_UpdateTalentRanks_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateTalentList
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_CharacterRecord::UpdateTalentList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateTalentList");

	UBioSFHandler_CharacterRecord_UpdateTalentList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.CreateTalentList
// (Final, Defined, Private, HasDefaults)

void UBioSFHandler_CharacterRecord::CreateTalentList()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.CreateTalentList");

	UBioSFHandler_CharacterRecord_CreateTalentList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateCharacterStats
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_CharacterRecord::UpdateCharacterStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateCharacterStats");

	UBioSFHandler_CharacterRecord_UpdateCharacterStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateCharacter
// (Final, Defined, Private, HasDefaults)

void UBioSFHandler_CharacterRecord::UpdateCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.UpdateCharacter");

	UBioSFHandler_CharacterRecord_UpdateCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.CancelTalentChanges
// (Final, Defined, Private)

void UBioSFHandler_CharacterRecord::CancelTalentChanges()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.CancelTalentChanges");

	UBioSFHandler_CharacterRecord_CancelTalentChanges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.ClearTalentChanges
// (Final, Defined, Public)

void UBioSFHandler_CharacterRecord::ClearTalentChanges()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.ClearTalentChanges");

	UBioSFHandler_CharacterRecord_ClearTalentChanges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.CommitTalentChanges
// (Final, Defined, Public)

void UBioSFHandler_CharacterRecord::CommitTalentChanges()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.CommitTalentChanges");

	UBioSFHandler_CharacterRecord_CommitTalentChanges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.PurchaseTalentRank
// (Final, Defined, Private)
// Parameters:
// int                            talentIndex                    (Parm)

void UBioSFHandler_CharacterRecord::PurchaseTalentRank(int talentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.PurchaseTalentRank");

	UBioSFHandler_CharacterRecord_PurchaseTalentRank_Params params;
	params.talentIndex = talentIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.AutoLevelUp
// (Final, Defined, Private)

void UBioSFHandler_CharacterRecord::AutoLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.AutoLevelUp");

	UBioSFHandler_CharacterRecord_AutoLevelUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.ChangeToCharacter
// (Final, Defined, Public, HasDefaults)
// Parameters:
// class ABioPawn*                NextCharacter                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_CharacterRecord::ChangeToCharacter(class ABioPawn* NextCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.ChangeToCharacter");

	UBioSFHandler_CharacterRecord_ChangeToCharacter_Params params;
	params.NextCharacter = NextCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.NextCharacter
// (Final, Defined, Private)
// Parameters:
// bool                           bNext                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_CharacterRecord::NextCharacter(bool bNext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.NextCharacter");

	UBioSFHandler_CharacterRecord_NextCharacter_Params params;
	params.bNext = bNext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.InitializeCharacterRecord
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_CharacterRecord::InitializeCharacterRecord()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.InitializeCharacterRecord");

	UBioSFHandler_CharacterRecord_InitializeCharacterRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_CharacterRecord::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.OnPanelAdded");

	UBioSFHandler_CharacterRecord_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_CharacterRecord::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.OnPanelRemoved");

	UBioSFHandler_CharacterRecord_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_CharacterRecord::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.Update");

	UBioSFHandler_CharacterRecord_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_CharacterRecord::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.HandleInputEvent");

	UBioSFHandler_CharacterRecord_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_CharacterRecord.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         Parameters                     (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_CharacterRecord::HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_CharacterRecord.HandleEvent");

	UBioSFHandler_CharacterRecord_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parameters != nullptr)
		*Parameters = params.Parameters;
}


// Function BIOC_Base.BioSFHandler_Conversation.ChangeConversationMenu
// (Final, Defined, Public)
// Parameters:
// class UBioConversation*        oConversation                  (Parm)
// int                            nReplyIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Conversation::ChangeConversationMenu(class UBioConversation* oConversation, int nReplyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.ChangeConversationMenu");

	UBioSFHandler_Conversation_ChangeConversationMenu_Params params;
	params.oConversation = oConversation;
	params.nReplyIndex = nReplyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Conversation.GetInvestigateReplyCount
// (Final, Defined, Public)
// Parameters:
// class UBioConversation*        oConversation                  (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_Conversation::GetInvestigateReplyCount(class UBioConversation* oConversation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.GetInvestigateReplyCount");

	UBioSFHandler_Conversation_GetInvestigateReplyCount_Params params;
	params.oConversation = oConversation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Conversation.GetReplyLocation
// (Final, Defined, Public)
// Parameters:
// int                            nReplyCategory                 (Parm)
// TEnumAsByte<EBioConvWheelPositions> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioConvWheelPositions> UBioSFHandler_Conversation::GetReplyLocation(int nReplyCategory)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.GetReplyLocation");

	UBioSFHandler_Conversation_GetReplyLocation_Params params;
	params.nReplyCategory = nReplyCategory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Conversation.GetInvestigateReplyLocation
// (Final, Defined, Public)
// Parameters:
// int                            nInvestigateSlot               (Parm)
// TEnumAsByte<EBioConvWheelPositions> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBioConvWheelPositions> UBioSFHandler_Conversation::GetInvestigateReplyLocation(int nInvestigateSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.GetInvestigateReplyLocation");

	UBioSFHandler_Conversation_GetInvestigateReplyLocation_Params params;
	params.nInvestigateSlot = nInvestigateSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Conversation.GetInvestigateReplyFromWheelLocation
// (Final, Defined, Public)
// Parameters:
// class UBioConversation*        oConversation                  (Parm)
// TEnumAsByte<EBioConvWheelPositions> nWheelLocation                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_Conversation::GetInvestigateReplyFromWheelLocation(class UBioConversation* oConversation, TEnumAsByte<EBioConvWheelPositions> nWheelLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.GetInvestigateReplyFromWheelLocation");

	UBioSFHandler_Conversation_GetInvestigateReplyFromWheelLocation_Params params;
	params.oConversation = oConversation;
	params.nWheelLocation = nWheelLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Conversation.SelectConversationEntry
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EBioConvWheelPositions> nWheelLocation                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Conversation::SelectConversationEntry(TEnumAsByte<EBioConvWheelPositions> nWheelLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.SelectConversationEntry");

	UBioSFHandler_Conversation_SelectConversationEntry_Params params;
	params.nWheelLocation = nWheelLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Conversation.MapGuiStyleToOptionMode
// (Final, Defined, Public)
// Parameters:
// TEnumAsByte<EConvGUIStyles>    eGUIStyle                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_Conversation::MapGuiStyleToOptionMode(TEnumAsByte<EConvGUIStyles> eGUIStyle)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.MapGuiStyleToOptionMode");

	UBioSFHandler_Conversation_MapGuiStyleToOptionMode_Params params;
	params.eGUIStyle = eGUIStyle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_Conversation.UpdateConversationOptions
// (Final, Defined, Public, HasDefaults)
// Parameters:
// class UBioConversation*        oConversation                  (Parm)

void UBioSFHandler_Conversation::UpdateConversationOptions(class UBioConversation* oConversation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.UpdateConversationOptions");

	UBioSFHandler_Conversation_UpdateConversationOptions_Params params;
	params.oConversation = oConversation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Conversation.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_Conversation::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.Update");

	UBioSFHandler_Conversation_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Conversation.OnRemovePanel
// (Defined, Public)

void UBioSFHandler_Conversation::OnRemovePanel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.OnRemovePanel");

	UBioSFHandler_Conversation_OnRemovePanel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Conversation.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_Conversation::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.HandleInputEvent");

	UBioSFHandler_Conversation_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Conversation.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Conversation::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.HandleEvent");

	UBioSFHandler_Conversation_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_Conversation.OnPanelRemoved
// (Defined, Public)

void UBioSFHandler_Conversation::OnPanelRemoved()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.OnPanelRemoved");

	UBioSFHandler_Conversation_OnPanelRemoved_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Conversation.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_Conversation::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.OnPanelAdded");

	UBioSFHandler_Conversation_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Conversation.GetNumReplies
// (Final, Defined, Public)
// Parameters:
// class UBioConversation*        oConversation                  (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBioSFHandler_Conversation::GetNumReplies(class UBioConversation* oConversation)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Conversation.GetNumReplies");

	UBioSFHandler_Conversation_GetNumReplies_Params params;
	params.oConversation = oConversation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_InventoryIGGOverride.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_InventoryIGGOverride::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_InventoryIGGOverride.HandleEvent");

	UBioSFHandler_InventoryIGGOverride_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_PCXMods.UnistallXModForCurrentSlot
// (Defined, Public)

void UBioSFHandler_PCXMods::UnistallXModForCurrentSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCXMods.UnistallXModForCurrentSlot");

	UBioSFHandler_PCXMods_UnistallXModForCurrentSlot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCXMods.PopulateForCharacter
// (Defined, Public)

void UBioSFHandler_PCXMods::PopulateForCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCXMods.PopulateForCharacter");

	UBioSFHandler_PCXMods_PopulateForCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCXMods.PopulateEquippedSlotAsItemListEntry
// (Defined, Public)
// Parameters:
// int                            nXModIndex                     (Parm)
// int                            nListIndex                     (Parm)

void UBioSFHandler_PCXMods::PopulateEquippedSlotAsItemListEntry(int nXModIndex, int nListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCXMods.PopulateEquippedSlotAsItemListEntry");

	UBioSFHandler_PCXMods_PopulateEquippedSlotAsItemListEntry_Params params;
	params.nXModIndex = nXModIndex;
	params.nListIndex = nListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCXMods.SetXModFilterSlot
// (Defined, Public)
// Parameters:
// int                            nNewXmodSlot                   (Parm)

void UBioSFHandler_PCXMods::SetXModFilterSlot(int nNewXmodSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCXMods.SetXModFilterSlot");

	UBioSFHandler_PCXMods_SetXModFilterSlot_Params params;
	params.nNewXmodSlot = nNewXmodSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCXMods.HandleEvent
// (Defined, Public)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Parm, NeedCtorLink)

void UBioSFHandler_PCXMods::HandleEvent(unsigned char nCommand, TArray<struct FString> lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCXMods.HandleEvent");

	UBioSFHandler_PCXMods_HandleEvent_Params params;
	params.nCommand = nCommand;
	params.lstArguments = lstArguments;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCXMods.PopulateEquippedItemXModSlots
// (Defined, Public, HasDefaults)

void UBioSFHandler_PCXMods::PopulateEquippedItemXModSlots()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCXMods.PopulateEquippedItemXModSlots");

	UBioSFHandler_PCXMods_PopulateEquippedItemXModSlots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCXMods.PopulateInventoryXModItem
// (Defined, Public)
// Parameters:
// TArray<struct FASParams>       lstParams                      (Parm, NeedCtorLink)

void UBioSFHandler_PCXMods::PopulateInventoryXModItem(TArray<struct FASParams> lstParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCXMods.PopulateInventoryXModItem");

	UBioSFHandler_PCXMods_PopulateInventoryXModItem_Params params;
	params.lstParams = lstParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Specialization.UpdateSpecializations
// (Final, Defined, Private, HasDefaults)

void UBioSFHandler_Specialization::UpdateSpecializations()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Specialization.UpdateSpecializations");

	UBioSFHandler_Specialization_UpdateSpecializations_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Specialization.ChooseSpecialization
// (Final, Defined, Private)
// Parameters:
// int                            specIndex                      (Parm)

void UBioSFHandler_Specialization::ChooseSpecialization(int specIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Specialization.ChooseSpecialization");

	UBioSFHandler_Specialization_ChooseSpecialization_Params params;
	params.specIndex = specIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Specialization.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_Specialization::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Specialization.Update");

	UBioSFHandler_Specialization_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Specialization.OnPanelAdded
// (Defined, Public)

void UBioSFHandler_Specialization::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Specialization.OnPanelAdded");

	UBioSFHandler_Specialization_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Specialization.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_Specialization::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Specialization.HandleInputEvent");

	UBioSFHandler_Specialization_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_Specialization.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         Parameters                     (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_Specialization::HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Specialization.HandleEvent");

	UBioSFHandler_Specialization_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parameters != nullptr)
		*Parameters = params.Parameters;
}


// Function BIOC_Base.BioSFHandler_Specialization.PreInitialization
// (Defined, Public)
// Parameters:
// class ABioPawn*                PlayerPawn                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_Specialization::PreInitialization(class ABioPawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_Specialization.PreInitialization");

	UBioSFHandler_Specialization_PreInitialization_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.ClosePanel
// (Defined, Public)

void UBioSFHandler_PCCharacterRecord::ClosePanel()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.ClosePanel");

	UBioSFHandler_PCCharacterRecord_ClosePanel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.ApplyOrNotThenExit
// (Defined, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PCCharacterRecord::ApplyOrNotThenExit(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.ApplyOrNotThenExit");

	UBioSFHandler_PCCharacterRecord_ApplyOrNotThenExit_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.ConfirmCommit
// (Defined, Public)

void UBioSFHandler_PCCharacterRecord::ConfirmCommit()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.ConfirmCommit");

	UBioSFHandler_PCCharacterRecord_ConfirmCommit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.NeedsToConfirm
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_PCCharacterRecord::NeedsToConfirm()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.NeedsToConfirm");

	UBioSFHandler_PCCharacterRecord_NeedsToConfirm_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.RemoveTalentPoint
// (Defined, Public, HasDefaults)
// Parameters:
// int                            RankIndex                      (Parm)

void UBioSFHandler_PCCharacterRecord::RemoveTalentPoint(int RankIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.RemoveTalentPoint");

	UBioSFHandler_PCCharacterRecord_RemoveTalentPoint_Params params;
	params.RankIndex = RankIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_PCCharacterRecord::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.HandleInputEvent");

	UBioSFHandler_PCCharacterRecord_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.InitializeCharacterRecord
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_PCCharacterRecord::InitializeCharacterRecord()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.InitializeCharacterRecord");

	UBioSFHandler_PCCharacterRecord_InitializeCharacterRecord_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.SetCharacter
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)

void UBioSFHandler_PCCharacterRecord::SetCharacter(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.SetCharacter");

	UBioSFHandler_PCCharacterRecord_SetCharacter_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         Parameters                     (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PCCharacterRecord::HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.HandleEvent");

	UBioSFHandler_PCCharacterRecord_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parameters != nullptr)
		*Parameters = params.Parameters;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCCharacterRecord::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.Update");

	UBioSFHandler_PCCharacterRecord_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCCharacterRecord.SetIGGHandler
// (Defined, Public)
// Parameters:
// class UBioSFHandler*           pHandler                       (Parm)

void UBioSFHandler_PCCharacterRecord::SetIGGHandler(class UBioSFHandler* pHandler)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCCharacterRecord.SetIGGHandler");

	UBioSFHandler_PCCharacterRecord_SetIGGHandler_Params params;
	params.pHandler = pHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCAchievement.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCAchievement::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCAchievement.Update");

	UBioSFHandler_PCAchievement_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PartySelection.GetHenchmenStats
// (Final, Defined, Private, HasOutParms)
// Parameters:
// int                            nIndex                         (Parm)
// int                            nStat1                         (Parm, OutParm)
// int                            nStat2                         (Parm, OutParm)
// int                            nStat3                         (Parm, OutParm)

void UBioSFHandler_PartySelection::GetHenchmenStats(int nIndex, int* nStat1, int* nStat2, int* nStat3)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PartySelection.GetHenchmenStats");

	UBioSFHandler_PartySelection_GetHenchmenStats_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nStat1 != nullptr)
		*nStat1 = params.nStat1;
	if (nStat2 != nullptr)
		*nStat2 = params.nStat2;
	if (nStat3 != nullptr)
		*nStat3 = params.nStat3;
}


// Function BIOC_Base.BioSFHandler_PartySelection.GetStatsFromClass
// (Final, Defined, Private, HasOutParms)
// Parameters:
// int                            nClassID                       (Parm)
// int                            nStat1                         (Parm, OutParm)
// int                            nStat2                         (Parm, OutParm)
// int                            nStat3                         (Parm, OutParm)

void UBioSFHandler_PartySelection::GetStatsFromClass(int nClassID, int* nStat1, int* nStat2, int* nStat3)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PartySelection.GetStatsFromClass");

	UBioSFHandler_PartySelection_GetStatsFromClass_Params params;
	params.nClassID = nClassID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nStat1 != nullptr)
		*nStat1 = params.nStat1;
	if (nStat2 != nullptr)
		*nStat2 = params.nStat2;
	if (nStat3 != nullptr)
		*nStat3 = params.nStat3;
}


// Function BIOC_Base.BioSFHandler_PartySelection.GetHenchmenName
// (Final, Defined, Private)
// Parameters:
// int                            nIndex                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBioSFHandler_PartySelection::GetHenchmenName(int nIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PartySelection.GetHenchmenName");

	UBioSFHandler_PartySelection_GetHenchmenName_Params params;
	params.nIndex = nIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_PartySelection.FinalizeParty
// (Final, Defined, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PartySelection::FinalizeParty(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PartySelection.FinalizeParty");

	UBioSFHandler_PartySelection_FinalizeParty_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PartySelection.ConfirmParty
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_PartySelection::ConfirmParty()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PartySelection.ConfirmParty");

	UBioSFHandler_PartySelection_ConfirmParty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PartySelection.DoInitialization
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_PartySelection::DoInitialization()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PartySelection.DoInitialization");

	UBioSFHandler_PartySelection_DoInitialization_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PartySelection.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PartySelection::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PartySelection.HandleEvent");

	UBioSFHandler_PartySelection_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_PCConversation.Update
// (Defined, Public, HasDefaults)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCConversation::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCConversation.Update");

	UBioSFHandler_PCConversation_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCConversation.HandleInputEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EBioGuiEvents>     Event                          (Parm)
// float                          fValue                         (OptionalParm, Parm)

void UBioSFHandler_PCConversation::HandleInputEvent(TEnumAsByte<EBioGuiEvents> Event, float fValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCConversation.HandleInputEvent");

	UBioSFHandler_PCConversation_HandleInputEvent_Params params;
	params.Event = Event;
	params.fValue = fValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCConversation.OnPanelAdded
// (Defined, Public, HasDefaults)

void UBioSFHandler_PCConversation::OnPanelAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCConversation.OnPanelAdded");

	UBioSFHandler_PCConversation_OnPanelAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCInventory.InitializeModsSection
// (Public)

void UBioSFHandler_PCInventory::InitializeModsSection()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.InitializeModsSection");

	UBioSFHandler_PCInventory_InitializeModsSection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCInventory.UpdateInvSlotIcons
// (Defined, Public, HasDefaults)
// Parameters:
// bool                           bDeferUpdateFilterIcons        (OptionalParm, Parm)

void UBioSFHandler_PCInventory::UpdateInvSlotIcons(bool bDeferUpdateFilterIcons)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.UpdateInvSlotIcons");

	UBioSFHandler_PCInventory_UpdateInvSlotIcons_Params params;
	params.bDeferUpdateFilterIcons = bDeferUpdateFilterIcons;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCInventory.UpdateTeamBox
// (Defined, Public, HasDefaults)

void UBioSFHandler_PCInventory::UpdateTeamBox()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.UpdateTeamBox");

	UBioSFHandler_PCInventory_UpdateTeamBox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCInventory.InitializeInventoryHelper
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PCInventory::InitializeInventoryHelper(TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.InitializeInventoryHelper");

	UBioSFHandler_PCInventory_InitializeInventoryHelper_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_PCInventory.PolulateInvItems
// (Defined, Public)
// Parameters:
// TArray<struct FASParams>       lstParams                      (Parm, NeedCtorLink)

void UBioSFHandler_PCInventory::PolulateInvItems(TArray<struct FASParams> lstParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.PolulateInvItems");

	UBioSFHandler_PCInventory_PolulateInvItems_Params params;
	params.lstParams = lstParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCInventory.SetItemFilterSlot
// (Defined, Public)
// Parameters:
// int                            nFilter                        (Parm)

void UBioSFHandler_PCInventory::SetItemFilterSlot(int nFilter)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.SetItemFilterSlot");

	UBioSFHandler_PCInventory_SetItemFilterSlot_Params params;
	params.nFilter = nFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCInventory.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         Parameters                     (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PCInventory::HandleEvent(unsigned char nCommand, TArray<struct FString>* Parameters)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.HandleEvent");

	UBioSFHandler_PCInventory_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parameters != nullptr)
		*Parameters = params.Parameters;
}


// Function BIOC_Base.BioSFHandler_PCInventory.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCInventory::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCInventory.Update");

	UBioSFHandler_PCInventory_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCMainMenu.SetupExtrasMenu
// (Defined, Public, HasDefaults)

void UBioSFHandler_PCMainMenu::SetupExtrasMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCMainMenu.SetupExtrasMenu");

	UBioSFHandler_PCMainMenu_SetupExtrasMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCMainMenu.ExitConfirm
// (Defined, Public)
// Parameters:
// bool                           bAPressed                      (Parm)
// int                            nContext                       (Parm)

void UBioSFHandler_PCMainMenu::ExitConfirm(bool bAPressed, int nContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCMainMenu.ExitConfirm");

	UBioSFHandler_PCMainMenu_ExitConfirm_Params params;
	params.bAPressed = bAPressed;
	params.nContext = nContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCMainMenu.HandleEvent
// (Defined, Public, HasOutParms, HasDefaults)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_PCMainMenu::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCMainMenu.HandleEvent");

	UBioSFHandler_PCMainMenu_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioSFHandler_PCMainMenu.Update2
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCMainMenu::Update2(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCMainMenu.Update2");

	UBioSFHandler_PCMainMenu_Update2_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_PCPartySelection.Update
// (Defined, Event, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void UBioSFHandler_PCPartySelection::Update(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_PCPartySelection.Update");

	UBioSFHandler_PCPartySelection_Update_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SelectCharacter.UpdateCharacterData
// (Final, Defined, Public, HasDefaults)

void UBioSFHandler_SelectCharacter::UpdateCharacterData()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SelectCharacter.UpdateCharacterData");

	UBioSFHandler_SelectCharacter_UpdateCharacterData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSFHandler_SelectCharacter.DoCharactersExist
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSFHandler_SelectCharacter::DoCharactersExist()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SelectCharacter.DoCharactersExist");

	UBioSFHandler_SelectCharacter_DoCharactersExist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSFHandler_SelectCharacter.HandleEvent
// (Defined, Public, HasOutParms)
// Parameters:
// unsigned char                  nCommand                       (Parm)
// TArray<struct FString>         lstArguments                   (Const, Parm, OutParm, NeedCtorLink)

void UBioSFHandler_SelectCharacter::HandleEvent(unsigned char nCommand, TArray<struct FString>* lstArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSFHandler_SelectCharacter.HandleEvent");

	UBioSFHandler_SelectCharacter_HandleEvent_Params params;
	params.nCommand = nCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lstArguments != nullptr)
		*lstArguments = params.lstArguments;
}


// Function BIOC_Base.BioShopSaveObject.LoadObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioShopSaveObject::LoadObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShopSaveObject.LoadObject");

	UBioShopSaveObject_LoadObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioShopSaveObject.SaveObject
// (Defined, Public)
// Parameters:
// class UObject*                 O                              (Parm)

void UBioShopSaveObject::SaveObject(class UObject* O)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioShopSaveObject.SaveObject");

	UBioShopSaveObject_SaveObject_Params params;
	params.O = O;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSkillMap.IsSkillInMap
// (Defined, Static, Public)
// Parameters:
// struct FName                   Skill                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioSkillMap::STATIC_IsSkillInMap(const struct FName& Skill)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillMap.IsSkillInMap");

	UBioSkillMap_IsSkillInMap_Params params;
	params.Skill = Skill;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSkillMap.GetSkill
// (Defined, Static, Public)
// Parameters:
// int                            Num                            (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName UBioSkillMap::STATIC_GetSkill(int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSkillMap.GetSkill");

	UBioSkillMap_GetSkill_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioSpectatorModeState.ActivateOption
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeState::ActivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeState.ActivateOption");

	UBioSpectatorModeState_ActivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeState.InitializeOptions
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeState::InitializeOptions(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeState.InitializeOptions");

	UBioSpectatorModeState_InitializeOptions_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeAnim.ActivateOption
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeAnim::ActivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeAnim.ActivateOption");

	UBioSpectatorModeAnim_ActivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeAnim.InitializeOptions
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeAnim::InitializeOptions(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeAnim.InitializeOptions");

	UBioSpectatorModeAnim_InitializeOptions_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeAnimSpeed.ActivateOption
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeAnimSpeed::ActivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeAnimSpeed.ActivateOption");

	UBioSpectatorModeAnimSpeed_ActivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeAnimSpeed.InitializeOptions
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeAnimSpeed::InitializeOptions(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeAnimSpeed.InitializeOptions");

	UBioSpectatorModeAnimSpeed_InitializeOptions_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeAppr.ActivateOption
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeAppr::ActivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeAppr.ActivateOption");

	UBioSpectatorModeAppr_ActivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeAppr.InitializeOptions
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeAppr::InitializeOptions(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeAppr.InitializeOptions");

	UBioSpectatorModeAppr_InitializeOptions_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeLOD.ActivateOption
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeLOD::ActivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeLOD.ActivateOption");

	UBioSpectatorModeLOD_ActivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeLOD.InitializeOptions
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeLOD::InitializeOptions(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeLOD.InitializeOptions");

	UBioSpectatorModeLOD_InitializeOptions_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeCamera.DeactivateOption
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeCamera::DeactivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeCamera.DeactivateOption");

	UBioSpectatorModeCamera_DeactivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeCamera.ActivateOption
// (Defined, Public, HasDefaults)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeCamera::ActivateOption(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeCamera.ActivateOption");

	UBioSpectatorModeCamera_ActivateOption_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioSpectatorModeCamera.InitializeOptions
// (Defined, Public)
// Parameters:
// class ABioWorldInfo*           WorldInfo                      (Parm)

void UBioSpectatorModeCamera::InitializeOptions(class ABioWorldInfo* WorldInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioSpectatorModeCamera.InitializeOptions");

	UBioSpectatorModeCamera_InitializeOptions_Params params;
	params.WorldInfo = WorldInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTestSampleScript.RunScript
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBioTestSampleScript::RunScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTestSampleScript.RunScript");

	UBioTestSampleScript_RunScript_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioTriggerVolume.BioBeginPlay
// (Defined, Event, Public)

void ABioTriggerVolume::BioBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerVolume.BioBeginPlay");

	ABioTriggerVolume_BioBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTriggerVolume.UnTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ABioTriggerVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerVolume.UnTouch");

	ABioTriggerVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioTriggerVolume.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class UPrimitiveComponent*     OtherComp                      (Parm, EditInline)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void ABioTriggerVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioTriggerVolume.Touch");

	ABioTriggerVolume_Touch_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWorldInfoTick.Tick
// (Defined, Public)
// Parameters:
// float                          fDeltaT                        (Parm)

void ABioWorldInfoTick::Tick(float fDeltaT)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWorldInfoTick.Tick");

	ABioWorldInfoTick_Tick_Params params;
	params.fDeltaT = fDeltaT;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function BIOC_Base.BioWp_ChangeRoute.OnCreatureReachedWayPoint
// (Defined, Public)
// Parameters:
// class APawn*                   PathFindingCreature            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_ChangeRoute::OnCreatureReachedWayPoint(class APawn* PathFindingCreature)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_ChangeRoute.OnCreatureReachedWayPoint");

	ABioWp_ChangeRoute_OnCreatureReachedWayPoint_Params params;
	params.PathFindingCreature = PathFindingCreature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_Delay.OnCreatureReachedWayPoint
// (Defined, Public)
// Parameters:
// class APawn*                   PathFindingCreature            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_Delay::OnCreatureReachedWayPoint(class APawn* PathFindingCreature)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_Delay.OnCreatureReachedWayPoint");

	ABioWp_Delay_OnCreatureReachedWayPoint_Params params;
	params.PathFindingCreature = PathFindingCreature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function BIOC_Base.BioWp_PlayAnim.OnCreatureReachedWayPoint
// (Defined, Public)
// Parameters:
// class APawn*                   PathFindingCreature            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABioWp_PlayAnim::OnCreatureReachedWayPoint(class APawn* PathFindingCreature)
{
	static auto fn = UObject::FindObject<UFunction>("Function BIOC_Base.BioWp_PlayAnim.OnCreatureReachedWayPoint");

	ABioWp_PlayAnim_OnCreatureReachedWayPoint_Params params;
	params.PathFindingCreature = PathFindingCreature;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
